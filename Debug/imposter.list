
imposter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009628  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001020  080097b0  080097b0  0000a7b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7d0  0800a7d0  0000c070  2**0
                  CONTENTS
  4 .ARM          00000008  0800a7d0  0800a7d0  0000b7d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a7d8  0800a7d8  0000c070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7d8  0800a7d8  0000b7d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a7dc  0800a7dc  0000b7dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0800a7e0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019e0  20000070  0800a850  0000c070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a50  0800a850  0000ca50  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001301a  00000000  00000000  0000c099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a9f  00000000  00000000  0001f0b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001360  00000000  00000000  00022b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000efe  00000000  00000000  00023eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020e5b  00000000  00000000  00024db6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a4fd  00000000  00000000  00045c11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bf0c1  00000000  00000000  0006010e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011f1cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055dc  00000000  00000000  0011f214  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  001247f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009798 	.word	0x08009798

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08009798 	.word	0x08009798

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2f>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a7c:	bf24      	itt	cs
 8000a7e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a82:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a86:	d90d      	bls.n	8000aa4 <__aeabi_d2f+0x30>
 8000a88:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a8c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a90:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a94:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a98:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a9c:	bf08      	it	eq
 8000a9e:	f020 0001 	biceq.w	r0, r0, #1
 8000aa2:	4770      	bx	lr
 8000aa4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aa8:	d121      	bne.n	8000aee <__aeabi_d2f+0x7a>
 8000aaa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aae:	bfbc      	itt	lt
 8000ab0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ab4:	4770      	bxlt	lr
 8000ab6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000abe:	f1c2 0218 	rsb	r2, r2, #24
 8000ac2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ac6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aca:	fa20 f002 	lsr.w	r0, r0, r2
 8000ace:	bf18      	it	ne
 8000ad0:	f040 0001 	orrne.w	r0, r0, #1
 8000ad4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000adc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae0:	ea40 000c 	orr.w	r0, r0, ip
 8000ae4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aec:	e7cc      	b.n	8000a88 <__aeabi_d2f+0x14>
 8000aee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af2:	d107      	bne.n	8000b04 <__aeabi_d2f+0x90>
 8000af4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af8:	bf1e      	ittt	ne
 8000afa:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000afe:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b02:	4770      	bxne	lr
 8000b04:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_frsub>:
 8000b14:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b18:	e002      	b.n	8000b20 <__addsf3>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_fsub>:
 8000b1c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b20 <__addsf3>:
 8000b20:	0042      	lsls	r2, r0, #1
 8000b22:	bf1f      	itttt	ne
 8000b24:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b28:	ea92 0f03 	teqne	r2, r3
 8000b2c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b30:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b34:	d06a      	beq.n	8000c0c <__addsf3+0xec>
 8000b36:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b3e:	bfc1      	itttt	gt
 8000b40:	18d2      	addgt	r2, r2, r3
 8000b42:	4041      	eorgt	r1, r0
 8000b44:	4048      	eorgt	r0, r1
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	bfb8      	it	lt
 8000b4a:	425b      	neglt	r3, r3
 8000b4c:	2b19      	cmp	r3, #25
 8000b4e:	bf88      	it	hi
 8000b50:	4770      	bxhi	lr
 8000b52:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b56:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b5a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b5e:	bf18      	it	ne
 8000b60:	4240      	negne	r0, r0
 8000b62:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b66:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b6a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b6e:	bf18      	it	ne
 8000b70:	4249      	negne	r1, r1
 8000b72:	ea92 0f03 	teq	r2, r3
 8000b76:	d03f      	beq.n	8000bf8 <__addsf3+0xd8>
 8000b78:	f1a2 0201 	sub.w	r2, r2, #1
 8000b7c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b80:	eb10 000c 	adds.w	r0, r0, ip
 8000b84:	f1c3 0320 	rsb	r3, r3, #32
 8000b88:	fa01 f103 	lsl.w	r1, r1, r3
 8000b8c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b90:	d502      	bpl.n	8000b98 <__addsf3+0x78>
 8000b92:	4249      	negs	r1, r1
 8000b94:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b98:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b9c:	d313      	bcc.n	8000bc6 <__addsf3+0xa6>
 8000b9e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000ba2:	d306      	bcc.n	8000bb2 <__addsf3+0x92>
 8000ba4:	0840      	lsrs	r0, r0, #1
 8000ba6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000baa:	f102 0201 	add.w	r2, r2, #1
 8000bae:	2afe      	cmp	r2, #254	@ 0xfe
 8000bb0:	d251      	bcs.n	8000c56 <__addsf3+0x136>
 8000bb2:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bba:	bf08      	it	eq
 8000bbc:	f020 0001 	biceq.w	r0, r0, #1
 8000bc0:	ea40 0003 	orr.w	r0, r0, r3
 8000bc4:	4770      	bx	lr
 8000bc6:	0049      	lsls	r1, r1, #1
 8000bc8:	eb40 0000 	adc.w	r0, r0, r0
 8000bcc:	3a01      	subs	r2, #1
 8000bce:	bf28      	it	cs
 8000bd0:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bd4:	d2ed      	bcs.n	8000bb2 <__addsf3+0x92>
 8000bd6:	fab0 fc80 	clz	ip, r0
 8000bda:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bde:	ebb2 020c 	subs.w	r2, r2, ip
 8000be2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000be6:	bfaa      	itet	ge
 8000be8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bec:	4252      	neglt	r2, r2
 8000bee:	4318      	orrge	r0, r3
 8000bf0:	bfbc      	itt	lt
 8000bf2:	40d0      	lsrlt	r0, r2
 8000bf4:	4318      	orrlt	r0, r3
 8000bf6:	4770      	bx	lr
 8000bf8:	f092 0f00 	teq	r2, #0
 8000bfc:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c00:	bf06      	itte	eq
 8000c02:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c06:	3201      	addeq	r2, #1
 8000c08:	3b01      	subne	r3, #1
 8000c0a:	e7b5      	b.n	8000b78 <__addsf3+0x58>
 8000c0c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c14:	bf18      	it	ne
 8000c16:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1a:	d021      	beq.n	8000c60 <__addsf3+0x140>
 8000c1c:	ea92 0f03 	teq	r2, r3
 8000c20:	d004      	beq.n	8000c2c <__addsf3+0x10c>
 8000c22:	f092 0f00 	teq	r2, #0
 8000c26:	bf08      	it	eq
 8000c28:	4608      	moveq	r0, r1
 8000c2a:	4770      	bx	lr
 8000c2c:	ea90 0f01 	teq	r0, r1
 8000c30:	bf1c      	itt	ne
 8000c32:	2000      	movne	r0, #0
 8000c34:	4770      	bxne	lr
 8000c36:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c3a:	d104      	bne.n	8000c46 <__addsf3+0x126>
 8000c3c:	0040      	lsls	r0, r0, #1
 8000c3e:	bf28      	it	cs
 8000c40:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c44:	4770      	bx	lr
 8000c46:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c4a:	bf3c      	itt	cc
 8000c4c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c50:	4770      	bxcc	lr
 8000c52:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c56:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c5e:	4770      	bx	lr
 8000c60:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c64:	bf16      	itet	ne
 8000c66:	4608      	movne	r0, r1
 8000c68:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c6c:	4601      	movne	r1, r0
 8000c6e:	0242      	lsls	r2, r0, #9
 8000c70:	bf06      	itte	eq
 8000c72:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c76:	ea90 0f01 	teqeq	r0, r1
 8000c7a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c7e:	4770      	bx	lr

08000c80 <__aeabi_ui2f>:
 8000c80:	f04f 0300 	mov.w	r3, #0
 8000c84:	e004      	b.n	8000c90 <__aeabi_i2f+0x8>
 8000c86:	bf00      	nop

08000c88 <__aeabi_i2f>:
 8000c88:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c8c:	bf48      	it	mi
 8000c8e:	4240      	negmi	r0, r0
 8000c90:	ea5f 0c00 	movs.w	ip, r0
 8000c94:	bf08      	it	eq
 8000c96:	4770      	bxeq	lr
 8000c98:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c9c:	4601      	mov	r1, r0
 8000c9e:	f04f 0000 	mov.w	r0, #0
 8000ca2:	e01c      	b.n	8000cde <__aeabi_l2f+0x2a>

08000ca4 <__aeabi_ul2f>:
 8000ca4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f04f 0300 	mov.w	r3, #0
 8000cb0:	e00a      	b.n	8000cc8 <__aeabi_l2f+0x14>
 8000cb2:	bf00      	nop

08000cb4 <__aeabi_l2f>:
 8000cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cc0:	d502      	bpl.n	8000cc8 <__aeabi_l2f+0x14>
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	ea5f 0c01 	movs.w	ip, r1
 8000ccc:	bf02      	ittt	eq
 8000cce:	4684      	moveq	ip, r0
 8000cd0:	4601      	moveq	r1, r0
 8000cd2:	2000      	moveq	r0, #0
 8000cd4:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cd8:	bf08      	it	eq
 8000cda:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cde:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000ce2:	fabc f28c 	clz	r2, ip
 8000ce6:	3a08      	subs	r2, #8
 8000ce8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cec:	db10      	blt.n	8000d10 <__aeabi_l2f+0x5c>
 8000cee:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf2:	4463      	add	r3, ip
 8000cf4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cf8:	f1c2 0220 	rsb	r2, r2, #32
 8000cfc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d00:	fa20 f202 	lsr.w	r2, r0, r2
 8000d04:	eb43 0002 	adc.w	r0, r3, r2
 8000d08:	bf08      	it	eq
 8000d0a:	f020 0001 	biceq.w	r0, r0, #1
 8000d0e:	4770      	bx	lr
 8000d10:	f102 0220 	add.w	r2, r2, #32
 8000d14:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d18:	f1c2 0220 	rsb	r2, r2, #32
 8000d1c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d20:	fa21 f202 	lsr.w	r2, r1, r2
 8000d24:	eb43 0002 	adc.w	r0, r3, r2
 8000d28:	bf08      	it	eq
 8000d2a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d2e:	4770      	bx	lr

08000d30 <__aeabi_fmul>:
 8000d30:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d34:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d38:	bf1e      	ittt	ne
 8000d3a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d3e:	ea92 0f0c 	teqne	r2, ip
 8000d42:	ea93 0f0c 	teqne	r3, ip
 8000d46:	d06f      	beq.n	8000e28 <__aeabi_fmul+0xf8>
 8000d48:	441a      	add	r2, r3
 8000d4a:	ea80 0c01 	eor.w	ip, r0, r1
 8000d4e:	0240      	lsls	r0, r0, #9
 8000d50:	bf18      	it	ne
 8000d52:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d56:	d01e      	beq.n	8000d96 <__aeabi_fmul+0x66>
 8000d58:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d5c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d60:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d64:	fba0 3101 	umull	r3, r1, r0, r1
 8000d68:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d6c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d70:	bf3e      	ittt	cc
 8000d72:	0049      	lslcc	r1, r1, #1
 8000d74:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d78:	005b      	lslcc	r3, r3, #1
 8000d7a:	ea40 0001 	orr.w	r0, r0, r1
 8000d7e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d82:	2afd      	cmp	r2, #253	@ 0xfd
 8000d84:	d81d      	bhi.n	8000dc2 <__aeabi_fmul+0x92>
 8000d86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d8a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d8e:	bf08      	it	eq
 8000d90:	f020 0001 	biceq.w	r0, r0, #1
 8000d94:	4770      	bx	lr
 8000d96:	f090 0f00 	teq	r0, #0
 8000d9a:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d9e:	bf08      	it	eq
 8000da0:	0249      	lsleq	r1, r1, #9
 8000da2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000da6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000daa:	3a7f      	subs	r2, #127	@ 0x7f
 8000dac:	bfc2      	ittt	gt
 8000dae:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000db2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000db6:	4770      	bxgt	lr
 8000db8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dbc:	f04f 0300 	mov.w	r3, #0
 8000dc0:	3a01      	subs	r2, #1
 8000dc2:	dc5d      	bgt.n	8000e80 <__aeabi_fmul+0x150>
 8000dc4:	f112 0f19 	cmn.w	r2, #25
 8000dc8:	bfdc      	itt	le
 8000dca:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000dce:	4770      	bxle	lr
 8000dd0:	f1c2 0200 	rsb	r2, r2, #0
 8000dd4:	0041      	lsls	r1, r0, #1
 8000dd6:	fa21 f102 	lsr.w	r1, r1, r2
 8000dda:	f1c2 0220 	rsb	r2, r2, #32
 8000dde:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000de6:	f140 0000 	adc.w	r0, r0, #0
 8000dea:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dee:	bf08      	it	eq
 8000df0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df4:	4770      	bx	lr
 8000df6:	f092 0f00 	teq	r2, #0
 8000dfa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000dfe:	bf02      	ittt	eq
 8000e00:	0040      	lsleq	r0, r0, #1
 8000e02:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e06:	3a01      	subeq	r2, #1
 8000e08:	d0f9      	beq.n	8000dfe <__aeabi_fmul+0xce>
 8000e0a:	ea40 000c 	orr.w	r0, r0, ip
 8000e0e:	f093 0f00 	teq	r3, #0
 8000e12:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e16:	bf02      	ittt	eq
 8000e18:	0049      	lsleq	r1, r1, #1
 8000e1a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e1e:	3b01      	subeq	r3, #1
 8000e20:	d0f9      	beq.n	8000e16 <__aeabi_fmul+0xe6>
 8000e22:	ea41 010c 	orr.w	r1, r1, ip
 8000e26:	e78f      	b.n	8000d48 <__aeabi_fmul+0x18>
 8000e28:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e2c:	ea92 0f0c 	teq	r2, ip
 8000e30:	bf18      	it	ne
 8000e32:	ea93 0f0c 	teqne	r3, ip
 8000e36:	d00a      	beq.n	8000e4e <__aeabi_fmul+0x11e>
 8000e38:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e3c:	bf18      	it	ne
 8000e3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e42:	d1d8      	bne.n	8000df6 <__aeabi_fmul+0xc6>
 8000e44:	ea80 0001 	eor.w	r0, r0, r1
 8000e48:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e4c:	4770      	bx	lr
 8000e4e:	f090 0f00 	teq	r0, #0
 8000e52:	bf17      	itett	ne
 8000e54:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e58:	4608      	moveq	r0, r1
 8000e5a:	f091 0f00 	teqne	r1, #0
 8000e5e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e62:	d014      	beq.n	8000e8e <__aeabi_fmul+0x15e>
 8000e64:	ea92 0f0c 	teq	r2, ip
 8000e68:	d101      	bne.n	8000e6e <__aeabi_fmul+0x13e>
 8000e6a:	0242      	lsls	r2, r0, #9
 8000e6c:	d10f      	bne.n	8000e8e <__aeabi_fmul+0x15e>
 8000e6e:	ea93 0f0c 	teq	r3, ip
 8000e72:	d103      	bne.n	8000e7c <__aeabi_fmul+0x14c>
 8000e74:	024b      	lsls	r3, r1, #9
 8000e76:	bf18      	it	ne
 8000e78:	4608      	movne	r0, r1
 8000e7a:	d108      	bne.n	8000e8e <__aeabi_fmul+0x15e>
 8000e7c:	ea80 0001 	eor.w	r0, r0, r1
 8000e80:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e8c:	4770      	bx	lr
 8000e8e:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e92:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e96:	4770      	bx	lr

08000e98 <__aeabi_fdiv>:
 8000e98:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea0:	bf1e      	ittt	ne
 8000ea2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ea6:	ea92 0f0c 	teqne	r2, ip
 8000eaa:	ea93 0f0c 	teqne	r3, ip
 8000eae:	d069      	beq.n	8000f84 <__aeabi_fdiv+0xec>
 8000eb0:	eba2 0203 	sub.w	r2, r2, r3
 8000eb4:	ea80 0c01 	eor.w	ip, r0, r1
 8000eb8:	0249      	lsls	r1, r1, #9
 8000eba:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ebe:	d037      	beq.n	8000f30 <__aeabi_fdiv+0x98>
 8000ec0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ec4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ec8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ecc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ed0:	428b      	cmp	r3, r1
 8000ed2:	bf38      	it	cc
 8000ed4:	005b      	lslcc	r3, r3, #1
 8000ed6:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eda:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	bf24      	itt	cs
 8000ee2:	1a5b      	subcs	r3, r3, r1
 8000ee4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ee8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000eec:	bf24      	itt	cs
 8000eee:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ef6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efa:	bf24      	itt	cs
 8000efc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f00:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f04:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f08:	bf24      	itt	cs
 8000f0a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f0e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f12:	011b      	lsls	r3, r3, #4
 8000f14:	bf18      	it	ne
 8000f16:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1a:	d1e0      	bne.n	8000ede <__aeabi_fdiv+0x46>
 8000f1c:	2afd      	cmp	r2, #253	@ 0xfd
 8000f1e:	f63f af50 	bhi.w	8000dc2 <__aeabi_fmul+0x92>
 8000f22:	428b      	cmp	r3, r1
 8000f24:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f28:	bf08      	it	eq
 8000f2a:	f020 0001 	biceq.w	r0, r0, #1
 8000f2e:	4770      	bx	lr
 8000f30:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f34:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f38:	327f      	adds	r2, #127	@ 0x7f
 8000f3a:	bfc2      	ittt	gt
 8000f3c:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f40:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f44:	4770      	bxgt	lr
 8000f46:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f4a:	f04f 0300 	mov.w	r3, #0
 8000f4e:	3a01      	subs	r2, #1
 8000f50:	e737      	b.n	8000dc2 <__aeabi_fmul+0x92>
 8000f52:	f092 0f00 	teq	r2, #0
 8000f56:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f5a:	bf02      	ittt	eq
 8000f5c:	0040      	lsleq	r0, r0, #1
 8000f5e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f62:	3a01      	subeq	r2, #1
 8000f64:	d0f9      	beq.n	8000f5a <__aeabi_fdiv+0xc2>
 8000f66:	ea40 000c 	orr.w	r0, r0, ip
 8000f6a:	f093 0f00 	teq	r3, #0
 8000f6e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f72:	bf02      	ittt	eq
 8000f74:	0049      	lsleq	r1, r1, #1
 8000f76:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f7a:	3b01      	subeq	r3, #1
 8000f7c:	d0f9      	beq.n	8000f72 <__aeabi_fdiv+0xda>
 8000f7e:	ea41 010c 	orr.w	r1, r1, ip
 8000f82:	e795      	b.n	8000eb0 <__aeabi_fdiv+0x18>
 8000f84:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f88:	ea92 0f0c 	teq	r2, ip
 8000f8c:	d108      	bne.n	8000fa0 <__aeabi_fdiv+0x108>
 8000f8e:	0242      	lsls	r2, r0, #9
 8000f90:	f47f af7d 	bne.w	8000e8e <__aeabi_fmul+0x15e>
 8000f94:	ea93 0f0c 	teq	r3, ip
 8000f98:	f47f af70 	bne.w	8000e7c <__aeabi_fmul+0x14c>
 8000f9c:	4608      	mov	r0, r1
 8000f9e:	e776      	b.n	8000e8e <__aeabi_fmul+0x15e>
 8000fa0:	ea93 0f0c 	teq	r3, ip
 8000fa4:	d104      	bne.n	8000fb0 <__aeabi_fdiv+0x118>
 8000fa6:	024b      	lsls	r3, r1, #9
 8000fa8:	f43f af4c 	beq.w	8000e44 <__aeabi_fmul+0x114>
 8000fac:	4608      	mov	r0, r1
 8000fae:	e76e      	b.n	8000e8e <__aeabi_fmul+0x15e>
 8000fb0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fb4:	bf18      	it	ne
 8000fb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fba:	d1ca      	bne.n	8000f52 <__aeabi_fdiv+0xba>
 8000fbc:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fc0:	f47f af5c 	bne.w	8000e7c <__aeabi_fmul+0x14c>
 8000fc4:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fc8:	f47f af3c 	bne.w	8000e44 <__aeabi_fmul+0x114>
 8000fcc:	e75f      	b.n	8000e8e <__aeabi_fmul+0x15e>
 8000fce:	bf00      	nop

08000fd0 <__gesf2>:
 8000fd0:	f04f 3cff 	mov.w	ip, #4294967295
 8000fd4:	e006      	b.n	8000fe4 <__cmpsf2+0x4>
 8000fd6:	bf00      	nop

08000fd8 <__lesf2>:
 8000fd8:	f04f 0c01 	mov.w	ip, #1
 8000fdc:	e002      	b.n	8000fe4 <__cmpsf2+0x4>
 8000fde:	bf00      	nop

08000fe0 <__cmpsf2>:
 8000fe0:	f04f 0c01 	mov.w	ip, #1
 8000fe4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fe8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff4:	bf18      	it	ne
 8000ff6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ffa:	d011      	beq.n	8001020 <__cmpsf2+0x40>
 8000ffc:	b001      	add	sp, #4
 8000ffe:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001002:	bf18      	it	ne
 8001004:	ea90 0f01 	teqne	r0, r1
 8001008:	bf58      	it	pl
 800100a:	ebb2 0003 	subspl.w	r0, r2, r3
 800100e:	bf88      	it	hi
 8001010:	17c8      	asrhi	r0, r1, #31
 8001012:	bf38      	it	cc
 8001014:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001018:	bf18      	it	ne
 800101a:	f040 0001 	orrne.w	r0, r0, #1
 800101e:	4770      	bx	lr
 8001020:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001024:	d102      	bne.n	800102c <__cmpsf2+0x4c>
 8001026:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800102a:	d105      	bne.n	8001038 <__cmpsf2+0x58>
 800102c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001030:	d1e4      	bne.n	8000ffc <__cmpsf2+0x1c>
 8001032:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001036:	d0e1      	beq.n	8000ffc <__cmpsf2+0x1c>
 8001038:	f85d 0b04 	ldr.w	r0, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <__aeabi_cfrcmple>:
 8001040:	4684      	mov	ip, r0
 8001042:	4608      	mov	r0, r1
 8001044:	4661      	mov	r1, ip
 8001046:	e7ff      	b.n	8001048 <__aeabi_cfcmpeq>

08001048 <__aeabi_cfcmpeq>:
 8001048:	b50f      	push	{r0, r1, r2, r3, lr}
 800104a:	f7ff ffc9 	bl	8000fe0 <__cmpsf2>
 800104e:	2800      	cmp	r0, #0
 8001050:	bf48      	it	mi
 8001052:	f110 0f00 	cmnmi.w	r0, #0
 8001056:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001058 <__aeabi_fcmpeq>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff fff4 	bl	8001048 <__aeabi_cfcmpeq>
 8001060:	bf0c      	ite	eq
 8001062:	2001      	moveq	r0, #1
 8001064:	2000      	movne	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmplt>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff ffea 	bl	8001048 <__aeabi_cfcmpeq>
 8001074:	bf34      	ite	cc
 8001076:	2001      	movcc	r0, #1
 8001078:	2000      	movcs	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmple>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffe0 	bl	8001048 <__aeabi_cfcmpeq>
 8001088:	bf94      	ite	ls
 800108a:	2001      	movls	r0, #1
 800108c:	2000      	movhi	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmpge>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffd2 	bl	8001040 <__aeabi_cfrcmple>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpgt>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffc8 	bl	8001040 <__aeabi_cfrcmple>
 80010b0:	bf34      	ite	cc
 80010b2:	2001      	movcc	r0, #1
 80010b4:	2000      	movcs	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_f2uiz>:
 80010bc:	0042      	lsls	r2, r0, #1
 80010be:	d20e      	bcs.n	80010de <__aeabi_f2uiz+0x22>
 80010c0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010c4:	d30b      	bcc.n	80010de <__aeabi_f2uiz+0x22>
 80010c6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010ca:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010ce:	d409      	bmi.n	80010e4 <__aeabi_f2uiz+0x28>
 80010d0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010d8:	fa23 f002 	lsr.w	r0, r3, r2
 80010dc:	4770      	bx	lr
 80010de:	f04f 0000 	mov.w	r0, #0
 80010e2:	4770      	bx	lr
 80010e4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80010e8:	d101      	bne.n	80010ee <__aeabi_f2uiz+0x32>
 80010ea:	0242      	lsls	r2, r0, #9
 80010ec:	d102      	bne.n	80010f4 <__aeabi_f2uiz+0x38>
 80010ee:	f04f 30ff 	mov.w	r0, #4294967295
 80010f2:	4770      	bx	lr
 80010f4:	f04f 0000 	mov.w	r0, #0
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop

080010fc <__aeabi_uldivmod>:
 80010fc:	b953      	cbnz	r3, 8001114 <__aeabi_uldivmod+0x18>
 80010fe:	b94a      	cbnz	r2, 8001114 <__aeabi_uldivmod+0x18>
 8001100:	2900      	cmp	r1, #0
 8001102:	bf08      	it	eq
 8001104:	2800      	cmpeq	r0, #0
 8001106:	bf1c      	itt	ne
 8001108:	f04f 31ff 	movne.w	r1, #4294967295
 800110c:	f04f 30ff 	movne.w	r0, #4294967295
 8001110:	f000 b968 	b.w	80013e4 <__aeabi_idiv0>
 8001114:	f1ad 0c08 	sub.w	ip, sp, #8
 8001118:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800111c:	f000 f806 	bl	800112c <__udivmoddi4>
 8001120:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001124:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001128:	b004      	add	sp, #16
 800112a:	4770      	bx	lr

0800112c <__udivmoddi4>:
 800112c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001130:	9d08      	ldr	r5, [sp, #32]
 8001132:	460c      	mov	r4, r1
 8001134:	2b00      	cmp	r3, #0
 8001136:	d14e      	bne.n	80011d6 <__udivmoddi4+0xaa>
 8001138:	4694      	mov	ip, r2
 800113a:	458c      	cmp	ip, r1
 800113c:	4686      	mov	lr, r0
 800113e:	fab2 f282 	clz	r2, r2
 8001142:	d962      	bls.n	800120a <__udivmoddi4+0xde>
 8001144:	b14a      	cbz	r2, 800115a <__udivmoddi4+0x2e>
 8001146:	f1c2 0320 	rsb	r3, r2, #32
 800114a:	4091      	lsls	r1, r2
 800114c:	fa20 f303 	lsr.w	r3, r0, r3
 8001150:	fa0c fc02 	lsl.w	ip, ip, r2
 8001154:	4319      	orrs	r1, r3
 8001156:	fa00 fe02 	lsl.w	lr, r0, r2
 800115a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800115e:	fbb1 f4f7 	udiv	r4, r1, r7
 8001162:	fb07 1114 	mls	r1, r7, r4, r1
 8001166:	fa1f f68c 	uxth.w	r6, ip
 800116a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800116e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001172:	fb04 f106 	mul.w	r1, r4, r6
 8001176:	4299      	cmp	r1, r3
 8001178:	d90a      	bls.n	8001190 <__udivmoddi4+0x64>
 800117a:	eb1c 0303 	adds.w	r3, ip, r3
 800117e:	f104 30ff 	add.w	r0, r4, #4294967295
 8001182:	f080 8110 	bcs.w	80013a6 <__udivmoddi4+0x27a>
 8001186:	4299      	cmp	r1, r3
 8001188:	f240 810d 	bls.w	80013a6 <__udivmoddi4+0x27a>
 800118c:	3c02      	subs	r4, #2
 800118e:	4463      	add	r3, ip
 8001190:	1a59      	subs	r1, r3, r1
 8001192:	fbb1 f0f7 	udiv	r0, r1, r7
 8001196:	fb07 1110 	mls	r1, r7, r0, r1
 800119a:	fb00 f606 	mul.w	r6, r0, r6
 800119e:	fa1f f38e 	uxth.w	r3, lr
 80011a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011a6:	429e      	cmp	r6, r3
 80011a8:	d90a      	bls.n	80011c0 <__udivmoddi4+0x94>
 80011aa:	eb1c 0303 	adds.w	r3, ip, r3
 80011ae:	f100 31ff 	add.w	r1, r0, #4294967295
 80011b2:	f080 80fa 	bcs.w	80013aa <__udivmoddi4+0x27e>
 80011b6:	429e      	cmp	r6, r3
 80011b8:	f240 80f7 	bls.w	80013aa <__udivmoddi4+0x27e>
 80011bc:	4463      	add	r3, ip
 80011be:	3802      	subs	r0, #2
 80011c0:	2100      	movs	r1, #0
 80011c2:	1b9b      	subs	r3, r3, r6
 80011c4:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80011c8:	b11d      	cbz	r5, 80011d2 <__udivmoddi4+0xa6>
 80011ca:	40d3      	lsrs	r3, r2
 80011cc:	2200      	movs	r2, #0
 80011ce:	e9c5 3200 	strd	r3, r2, [r5]
 80011d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011d6:	428b      	cmp	r3, r1
 80011d8:	d905      	bls.n	80011e6 <__udivmoddi4+0xba>
 80011da:	b10d      	cbz	r5, 80011e0 <__udivmoddi4+0xb4>
 80011dc:	e9c5 0100 	strd	r0, r1, [r5]
 80011e0:	2100      	movs	r1, #0
 80011e2:	4608      	mov	r0, r1
 80011e4:	e7f5      	b.n	80011d2 <__udivmoddi4+0xa6>
 80011e6:	fab3 f183 	clz	r1, r3
 80011ea:	2900      	cmp	r1, #0
 80011ec:	d146      	bne.n	800127c <__udivmoddi4+0x150>
 80011ee:	42a3      	cmp	r3, r4
 80011f0:	d302      	bcc.n	80011f8 <__udivmoddi4+0xcc>
 80011f2:	4290      	cmp	r0, r2
 80011f4:	f0c0 80ee 	bcc.w	80013d4 <__udivmoddi4+0x2a8>
 80011f8:	1a86      	subs	r6, r0, r2
 80011fa:	eb64 0303 	sbc.w	r3, r4, r3
 80011fe:	2001      	movs	r0, #1
 8001200:	2d00      	cmp	r5, #0
 8001202:	d0e6      	beq.n	80011d2 <__udivmoddi4+0xa6>
 8001204:	e9c5 6300 	strd	r6, r3, [r5]
 8001208:	e7e3      	b.n	80011d2 <__udivmoddi4+0xa6>
 800120a:	2a00      	cmp	r2, #0
 800120c:	f040 808f 	bne.w	800132e <__udivmoddi4+0x202>
 8001210:	eba1 040c 	sub.w	r4, r1, ip
 8001214:	2101      	movs	r1, #1
 8001216:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800121a:	fa1f f78c 	uxth.w	r7, ip
 800121e:	fbb4 f6f8 	udiv	r6, r4, r8
 8001222:	fb08 4416 	mls	r4, r8, r6, r4
 8001226:	fb07 f006 	mul.w	r0, r7, r6
 800122a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800122e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001232:	4298      	cmp	r0, r3
 8001234:	d908      	bls.n	8001248 <__udivmoddi4+0x11c>
 8001236:	eb1c 0303 	adds.w	r3, ip, r3
 800123a:	f106 34ff 	add.w	r4, r6, #4294967295
 800123e:	d202      	bcs.n	8001246 <__udivmoddi4+0x11a>
 8001240:	4298      	cmp	r0, r3
 8001242:	f200 80cb 	bhi.w	80013dc <__udivmoddi4+0x2b0>
 8001246:	4626      	mov	r6, r4
 8001248:	1a1c      	subs	r4, r3, r0
 800124a:	fbb4 f0f8 	udiv	r0, r4, r8
 800124e:	fb08 4410 	mls	r4, r8, r0, r4
 8001252:	fb00 f707 	mul.w	r7, r0, r7
 8001256:	fa1f f38e 	uxth.w	r3, lr
 800125a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800125e:	429f      	cmp	r7, r3
 8001260:	d908      	bls.n	8001274 <__udivmoddi4+0x148>
 8001262:	eb1c 0303 	adds.w	r3, ip, r3
 8001266:	f100 34ff 	add.w	r4, r0, #4294967295
 800126a:	d202      	bcs.n	8001272 <__udivmoddi4+0x146>
 800126c:	429f      	cmp	r7, r3
 800126e:	f200 80ae 	bhi.w	80013ce <__udivmoddi4+0x2a2>
 8001272:	4620      	mov	r0, r4
 8001274:	1bdb      	subs	r3, r3, r7
 8001276:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800127a:	e7a5      	b.n	80011c8 <__udivmoddi4+0x9c>
 800127c:	f1c1 0720 	rsb	r7, r1, #32
 8001280:	408b      	lsls	r3, r1
 8001282:	fa22 fc07 	lsr.w	ip, r2, r7
 8001286:	ea4c 0c03 	orr.w	ip, ip, r3
 800128a:	fa24 f607 	lsr.w	r6, r4, r7
 800128e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001292:	fbb6 f8f9 	udiv	r8, r6, r9
 8001296:	fa1f fe8c 	uxth.w	lr, ip
 800129a:	fb09 6618 	mls	r6, r9, r8, r6
 800129e:	fa20 f307 	lsr.w	r3, r0, r7
 80012a2:	408c      	lsls	r4, r1
 80012a4:	fa00 fa01 	lsl.w	sl, r0, r1
 80012a8:	fb08 f00e 	mul.w	r0, r8, lr
 80012ac:	431c      	orrs	r4, r3
 80012ae:	0c23      	lsrs	r3, r4, #16
 80012b0:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80012b4:	4298      	cmp	r0, r3
 80012b6:	fa02 f201 	lsl.w	r2, r2, r1
 80012ba:	d90a      	bls.n	80012d2 <__udivmoddi4+0x1a6>
 80012bc:	eb1c 0303 	adds.w	r3, ip, r3
 80012c0:	f108 36ff 	add.w	r6, r8, #4294967295
 80012c4:	f080 8081 	bcs.w	80013ca <__udivmoddi4+0x29e>
 80012c8:	4298      	cmp	r0, r3
 80012ca:	d97e      	bls.n	80013ca <__udivmoddi4+0x29e>
 80012cc:	f1a8 0802 	sub.w	r8, r8, #2
 80012d0:	4463      	add	r3, ip
 80012d2:	1a1e      	subs	r6, r3, r0
 80012d4:	fbb6 f3f9 	udiv	r3, r6, r9
 80012d8:	fb09 6613 	mls	r6, r9, r3, r6
 80012dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80012e0:	b2a4      	uxth	r4, r4
 80012e2:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80012e6:	45a6      	cmp	lr, r4
 80012e8:	d908      	bls.n	80012fc <__udivmoddi4+0x1d0>
 80012ea:	eb1c 0404 	adds.w	r4, ip, r4
 80012ee:	f103 30ff 	add.w	r0, r3, #4294967295
 80012f2:	d266      	bcs.n	80013c2 <__udivmoddi4+0x296>
 80012f4:	45a6      	cmp	lr, r4
 80012f6:	d964      	bls.n	80013c2 <__udivmoddi4+0x296>
 80012f8:	3b02      	subs	r3, #2
 80012fa:	4464      	add	r4, ip
 80012fc:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001300:	fba0 8302 	umull	r8, r3, r0, r2
 8001304:	eba4 040e 	sub.w	r4, r4, lr
 8001308:	429c      	cmp	r4, r3
 800130a:	46c6      	mov	lr, r8
 800130c:	461e      	mov	r6, r3
 800130e:	d350      	bcc.n	80013b2 <__udivmoddi4+0x286>
 8001310:	d04d      	beq.n	80013ae <__udivmoddi4+0x282>
 8001312:	b155      	cbz	r5, 800132a <__udivmoddi4+0x1fe>
 8001314:	ebba 030e 	subs.w	r3, sl, lr
 8001318:	eb64 0406 	sbc.w	r4, r4, r6
 800131c:	fa04 f707 	lsl.w	r7, r4, r7
 8001320:	40cb      	lsrs	r3, r1
 8001322:	431f      	orrs	r7, r3
 8001324:	40cc      	lsrs	r4, r1
 8001326:	e9c5 7400 	strd	r7, r4, [r5]
 800132a:	2100      	movs	r1, #0
 800132c:	e751      	b.n	80011d2 <__udivmoddi4+0xa6>
 800132e:	fa0c fc02 	lsl.w	ip, ip, r2
 8001332:	f1c2 0320 	rsb	r3, r2, #32
 8001336:	40d9      	lsrs	r1, r3
 8001338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800133c:	fa20 f303 	lsr.w	r3, r0, r3
 8001340:	fa00 fe02 	lsl.w	lr, r0, r2
 8001344:	fbb1 f0f8 	udiv	r0, r1, r8
 8001348:	fb08 1110 	mls	r1, r8, r0, r1
 800134c:	4094      	lsls	r4, r2
 800134e:	431c      	orrs	r4, r3
 8001350:	fa1f f78c 	uxth.w	r7, ip
 8001354:	0c23      	lsrs	r3, r4, #16
 8001356:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800135a:	fb00 f107 	mul.w	r1, r0, r7
 800135e:	4299      	cmp	r1, r3
 8001360:	d908      	bls.n	8001374 <__udivmoddi4+0x248>
 8001362:	eb1c 0303 	adds.w	r3, ip, r3
 8001366:	f100 36ff 	add.w	r6, r0, #4294967295
 800136a:	d22c      	bcs.n	80013c6 <__udivmoddi4+0x29a>
 800136c:	4299      	cmp	r1, r3
 800136e:	d92a      	bls.n	80013c6 <__udivmoddi4+0x29a>
 8001370:	3802      	subs	r0, #2
 8001372:	4463      	add	r3, ip
 8001374:	1a5b      	subs	r3, r3, r1
 8001376:	fbb3 f1f8 	udiv	r1, r3, r8
 800137a:	fb08 3311 	mls	r3, r8, r1, r3
 800137e:	b2a4      	uxth	r4, r4
 8001380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001384:	fb01 f307 	mul.w	r3, r1, r7
 8001388:	42a3      	cmp	r3, r4
 800138a:	d908      	bls.n	800139e <__udivmoddi4+0x272>
 800138c:	eb1c 0404 	adds.w	r4, ip, r4
 8001390:	f101 36ff 	add.w	r6, r1, #4294967295
 8001394:	d213      	bcs.n	80013be <__udivmoddi4+0x292>
 8001396:	42a3      	cmp	r3, r4
 8001398:	d911      	bls.n	80013be <__udivmoddi4+0x292>
 800139a:	3902      	subs	r1, #2
 800139c:	4464      	add	r4, ip
 800139e:	1ae4      	subs	r4, r4, r3
 80013a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80013a4:	e73b      	b.n	800121e <__udivmoddi4+0xf2>
 80013a6:	4604      	mov	r4, r0
 80013a8:	e6f2      	b.n	8001190 <__udivmoddi4+0x64>
 80013aa:	4608      	mov	r0, r1
 80013ac:	e708      	b.n	80011c0 <__udivmoddi4+0x94>
 80013ae:	45c2      	cmp	sl, r8
 80013b0:	d2af      	bcs.n	8001312 <__udivmoddi4+0x1e6>
 80013b2:	ebb8 0e02 	subs.w	lr, r8, r2
 80013b6:	eb63 060c 	sbc.w	r6, r3, ip
 80013ba:	3801      	subs	r0, #1
 80013bc:	e7a9      	b.n	8001312 <__udivmoddi4+0x1e6>
 80013be:	4631      	mov	r1, r6
 80013c0:	e7ed      	b.n	800139e <__udivmoddi4+0x272>
 80013c2:	4603      	mov	r3, r0
 80013c4:	e79a      	b.n	80012fc <__udivmoddi4+0x1d0>
 80013c6:	4630      	mov	r0, r6
 80013c8:	e7d4      	b.n	8001374 <__udivmoddi4+0x248>
 80013ca:	46b0      	mov	r8, r6
 80013cc:	e781      	b.n	80012d2 <__udivmoddi4+0x1a6>
 80013ce:	4463      	add	r3, ip
 80013d0:	3802      	subs	r0, #2
 80013d2:	e74f      	b.n	8001274 <__udivmoddi4+0x148>
 80013d4:	4606      	mov	r6, r0
 80013d6:	4623      	mov	r3, r4
 80013d8:	4608      	mov	r0, r1
 80013da:	e711      	b.n	8001200 <__udivmoddi4+0xd4>
 80013dc:	3e02      	subs	r6, #2
 80013de:	4463      	add	r3, ip
 80013e0:	e732      	b.n	8001248 <__udivmoddi4+0x11c>
 80013e2:	bf00      	nop

080013e4 <__aeabi_idiv0>:
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop

080013e8 <move>:
#include <math.h>

extern int16_t goal_forward_left;
extern int16_t goal_forward_right;

void move(int8_t n) {	// Move n cells forward (with acceleration)
 80013e8:	b590      	push	{r4, r7, lr}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	71fb      	strb	r3, [r7, #7]

	setState(MOVING);
 80013f2:	2001      	movs	r0, #1
 80013f4:	f001 fa60 	bl	80028b8 <setState>

	setPIDGoalA(0);
 80013f8:	2000      	movs	r0, #0
 80013fa:	f001 fa49 	bl	8002890 <setPIDGoalA>
	setPIDGoalD(MOVE_COUNTS*n);
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	b29b      	uxth	r3, r3
 8001404:	461a      	mov	r2, r3
 8001406:	00d2      	lsls	r2, r2, #3
 8001408:	441a      	add	r2, r3
 800140a:	4611      	mov	r1, r2
 800140c:	0188      	lsls	r0, r1, #6
 800140e:	4611      	mov	r1, r2
 8001410:	4602      	mov	r2, r0
 8001412:	440a      	add	r2, r1
 8001414:	4413      	add	r3, r2
 8001416:	b29b      	uxth	r3, r3
 8001418:	b21b      	sxth	r3, r3
 800141a:	4618      	mov	r0, r3
 800141c:	f001 fa24 	bl	8002868 <setPIDGoalD>

	while(!PIDdone())
 8001420:	e013      	b.n	800144a <move+0x62>
	{
		setIRAngle(readIR(IR_LEFT), readIR(IR_RIGHT));
 8001422:	2001      	movs	r0, #1
 8001424:	f000 fbbc 	bl	8001ba0 <readIR>
 8001428:	4603      	mov	r3, r0
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff fc28 	bl	8000c80 <__aeabi_ui2f>
 8001430:	4604      	mov	r4, r0
 8001432:	2002      	movs	r0, #2
 8001434:	f000 fbb4 	bl	8001ba0 <readIR>
 8001438:	4603      	mov	r3, r0
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fc20 	bl	8000c80 <__aeabi_ui2f>
 8001440:	4603      	mov	r3, r0
 8001442:	4619      	mov	r1, r3
 8001444:	4620      	mov	r0, r4
 8001446:	f001 fa79 	bl	800293c <setIRAngle>
	while(!PIDdone())
 800144a:	f002 f835 	bl	80034b8 <PIDdone>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d0e6      	beq.n	8001422 <move+0x3a>
	}

	resetPID();
 8001454:	f002 f842 	bl	80034dc <resetPID>

}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	bd90      	pop	{r4, r7, pc}

08001460 <turn>:

void turn(int8_t n) {	// Make n 90 degree turns (no acceleration)
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	71fb      	strb	r3, [r7, #7]

	setState(TURNING);
 800146a:	2002      	movs	r0, #2
 800146c:	f001 fa24 	bl	80028b8 <setState>

	setPIDGoalD(0);
 8001470:	2000      	movs	r0, #0
 8001472:	f001 f9f9 	bl	8002868 <setPIDGoalD>
	setPIDGoalA(TURN_COUNTS*n);
 8001476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147a:	b29b      	uxth	r3, r3
 800147c:	461a      	mov	r2, r3
 800147e:	0052      	lsls	r2, r2, #1
 8001480:	441a      	add	r2, r3
 8001482:	0112      	lsls	r2, r2, #4
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	461a      	mov	r2, r3
 8001488:	0091      	lsls	r1, r2, #2
 800148a:	461a      	mov	r2, r3
 800148c:	460b      	mov	r3, r1
 800148e:	4413      	add	r3, r2
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	b29b      	uxth	r3, r3
 8001494:	b21b      	sxth	r3, r3
 8001496:	4618      	mov	r0, r3
 8001498:	f001 f9fa 	bl	8002890 <setPIDGoalA>

	while(!PIDdone())
 800149c:	bf00      	nop
 800149e:	f002 f80b 	bl	80034b8 <PIDdone>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d0fa      	beq.n	800149e <turn+0x3e>
	{

	}

	resetPID();
 80014a8:	f002 f818 	bl	80034dc <resetPID>

}
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <moveEncoderCount>:

void moveEncoderCount(int8_t n) {	// Move n encoder counts (with acceleration)
 80014b4:	b590      	push	{r4, r7, lr}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	71fb      	strb	r3, [r7, #7]

	setState(TURNING);
 80014be:	2002      	movs	r0, #2
 80014c0:	f001 f9fa 	bl	80028b8 <setState>

	setPIDGoalA(0);
 80014c4:	2000      	movs	r0, #0
 80014c6:	f001 f9e3 	bl	8002890 <setPIDGoalA>
	setPIDGoalD(n);
 80014ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ce:	b21b      	sxth	r3, r3
 80014d0:	4618      	mov	r0, r3
 80014d2:	f001 f9c9 	bl	8002868 <setPIDGoalD>

	while(!PIDdone())
 80014d6:	e013      	b.n	8001500 <moveEncoderCount+0x4c>
	{
		setIRAngle(readIR(IR_LEFT), readIR(IR_RIGHT));
 80014d8:	2001      	movs	r0, #1
 80014da:	f000 fb61 	bl	8001ba0 <readIR>
 80014de:	4603      	mov	r3, r0
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff fbcd 	bl	8000c80 <__aeabi_ui2f>
 80014e6:	4604      	mov	r4, r0
 80014e8:	2002      	movs	r0, #2
 80014ea:	f000 fb59 	bl	8001ba0 <readIR>
 80014ee:	4603      	mov	r3, r0
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff fbc5 	bl	8000c80 <__aeabi_ui2f>
 80014f6:	4603      	mov	r3, r0
 80014f8:	4619      	mov	r1, r3
 80014fa:	4620      	mov	r0, r4
 80014fc:	f001 fa1e 	bl	800293c <setIRAngle>
	while(!PIDdone())
 8001500:	f001 ffda 	bl	80034b8 <PIDdone>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0e6      	beq.n	80014d8 <moveEncoderCount+0x24>
	}

	resetPID();
 800150a:	f001 ffe7 	bl	80034dc <resetPID>

}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	bd90      	pop	{r4, r7, pc}
	...

08001518 <frontCorrection>:

	resetPID();

}

void frontCorrection() {
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0

	setState(TURNING);
 800151e:	2002      	movs	r0, #2
 8001520:	f001 f9ca 	bl	80028b8 <setState>

	int16_t forward_left = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	80fb      	strh	r3, [r7, #6]
	int16_t forward_right = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	80bb      	strh	r3, [r7, #4]
//			break;
//		}
//	}

	while(1) {
		forward_left = readIR(IR_FORWARD_LEFT);
 800152c:	2000      	movs	r0, #0
 800152e:	f000 fb37 	bl	8001ba0 <readIR>
 8001532:	4603      	mov	r3, r0
 8001534:	80fb      	strh	r3, [r7, #6]
		forward_right = readIR(IR_FORWARD_RIGHT);
 8001536:	2003      	movs	r0, #3
 8001538:	f000 fb32 	bl	8001ba0 <readIR>
 800153c:	4603      	mov	r3, r0
 800153e:	80bb      	strh	r3, [r7, #4]
//			}
//			else if ((forward_left - goal_forward_left) - (forward_right - goal_forward_right) < -300) {
//				turnEncoderCount(-30);
//			}
//		}
		if (forward_left - goal_forward_left > 250/* || forward_right - goal_forward_right > 300*/) {
 8001540:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001544:	4a0f      	ldr	r2, [pc, #60]	@ (8001584 <frontCorrection+0x6c>)
 8001546:	f9b2 2000 	ldrsh.w	r2, [r2]
 800154a:	1a9b      	subs	r3, r3, r2
 800154c:	2bfa      	cmp	r3, #250	@ 0xfa
 800154e:	dd04      	ble.n	800155a <frontCorrection+0x42>
			moveEncoderCount(-15);
 8001550:	f06f 000e 	mvn.w	r0, #14
 8001554:	f7ff ffae 	bl	80014b4 <moveEncoderCount>
 8001558:	e7e8      	b.n	800152c <frontCorrection+0x14>
//			}
//			else if ((forward_left - goal_forward_left) - (forward_right - goal_forward_right) < -300) {
//				turnEncoderCount(-30);
//			}
		}
		else if (forward_left - goal_forward_left < -250/* || forward_right - goal_forward_right > 300*/) {
 800155a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800155e:	4a09      	ldr	r2, [pc, #36]	@ (8001584 <frontCorrection+0x6c>)
 8001560:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001564:	1a9b      	subs	r3, r3, r2
 8001566:	f113 0ffa 	cmn.w	r3, #250	@ 0xfa
 800156a:	da03      	bge.n	8001574 <frontCorrection+0x5c>
			moveEncoderCount(15);
 800156c:	200f      	movs	r0, #15
 800156e:	f7ff ffa1 	bl	80014b4 <moveEncoderCount>
		forward_left = readIR(IR_FORWARD_LEFT);
 8001572:	e7db      	b.n	800152c <frontCorrection+0x14>
		}
		else {
			break;
 8001574:	bf00      	nop
		}
	}

	resetPID();
 8001576:	f001 ffb1 	bl	80034dc <resetPID>

}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	2000037e 	.word	0x2000037e

08001588 <Delay_Init>:

#include "main.h"
#include "delay.h"

void Delay_Init(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk))
 800158c:	4b0c      	ldr	r3, [pc, #48]	@ (80015c0 <Delay_Init+0x38>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d10e      	bne.n	80015b6 <Delay_Init+0x2e>
    {
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001598:	4b09      	ldr	r3, [pc, #36]	@ (80015c0 <Delay_Init+0x38>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	4a08      	ldr	r2, [pc, #32]	@ (80015c0 <Delay_Init+0x38>)
 800159e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80015a2:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 80015a4:	4b07      	ldr	r3, [pc, #28]	@ (80015c4 <Delay_Init+0x3c>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80015aa:	4b06      	ldr	r3, [pc, #24]	@ (80015c4 <Delay_Init+0x3c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a05      	ldr	r2, [pc, #20]	@ (80015c4 <Delay_Init+0x3c>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	6013      	str	r3, [r2, #0]
    }
}
 80015b6:	bf00      	nop
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000edf0 	.word	0xe000edf0
 80015c4:	e0001000 	.word	0xe0001000

080015c8 <delayMicroseconds>:

// Delays for us microseconds
void delayMicroseconds(uint32_t us)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
    volatile uint32_t startTick = DWT->CYCCNT,
 80015d0:	4b09      	ldr	r3, [pc, #36]	@ (80015f8 <delayMicroseconds+0x30>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	60fb      	str	r3, [r7, #12]
    delayTicks = us * 16; // Our MCU runs at 16 MHz, so each microsecond lasts 16 clock ticks
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	011b      	lsls	r3, r3, #4
 80015da:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 80015dc:	bf00      	nop
 80015de:	4b06      	ldr	r3, [pc, #24]	@ (80015f8 <delayMicroseconds+0x30>)
 80015e0:	685a      	ldr	r2, [r3, #4]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	1ad2      	subs	r2, r2, r3
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d3f8      	bcc.n	80015de <delayMicroseconds+0x16>
}
 80015ec:	bf00      	nop
 80015ee:	bf00      	nop
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr
 80015f8:	e0001000 	.word	0xe0001000

080015fc <getRightEncoderCounts>:
 */

#include "main.h"
#include "encoders.h"

int16_t getRightEncoderCounts() {
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
	return (-1*(int16_t) TIM3->CNT);
 8001600:	4b04      	ldr	r3, [pc, #16]	@ (8001614 <getRightEncoderCounts+0x18>)
 8001602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001604:	b29b      	uxth	r3, r3
 8001606:	425b      	negs	r3, r3
 8001608:	b29b      	uxth	r3, r3
 800160a:	b21b      	sxth	r3, r3
}
 800160c:	4618      	mov	r0, r3
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr
 8001614:	40000400 	.word	0x40000400

08001618 <getLeftEncoderCounts>:

int16_t getLeftEncoderCounts() {
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
	return (-1*(int16_t) TIM8->CNT);
 800161c:	4b04      	ldr	r3, [pc, #16]	@ (8001630 <getLeftEncoderCounts+0x18>)
 800161e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001620:	b29b      	uxth	r3, r3
 8001622:	425b      	negs	r3, r3
 8001624:	b29b      	uxth	r3, r3
 8001626:	b21b      	sxth	r3, r3
}
 8001628:	4618      	mov	r0, r3
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr
 8001630:	40010400 	.word	0x40010400

08001634 <resetEncoders>:

void resetEncoders() {
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
	TIM3->CNT = (int16_t) 0;
 8001638:	4b04      	ldr	r3, [pc, #16]	@ (800164c <resetEncoders+0x18>)
 800163a:	2200      	movs	r2, #0
 800163c:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM8->CNT = (int16_t) 0;
 800163e:	4b04      	ldr	r3, [pc, #16]	@ (8001650 <resetEncoders+0x1c>)
 8001640:	2200      	movs	r2, #0
 8001642:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr
 800164c:	40000400 	.word	0x40000400
 8001650:	40010400 	.word	0x40010400

08001654 <writeFlash>:
#include "stm32f2xx.h"

uint32_t startAddress = 0x080E0000;

void writeFlash(int16_t horzWall[][16], int16_t vertWall[][17], int16_t discovered[][16])
{
 8001654:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001658:	b088      	sub	sp, #32
 800165a:	af00      	add	r7, sp, #0
 800165c:	60f8      	str	r0, [r7, #12]
 800165e:	60b9      	str	r1, [r7, #8]
 8001660:	607a      	str	r2, [r7, #4]
	uint32_t i, j;
	HAL_FLASH_Unlock();
 8001662:	f004 fd49 	bl	80060f8 <HAL_FLASH_Unlock>

	/* Clear All Pending Flags */
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
 8001666:	4b4b      	ldr	r3, [pc, #300]	@ (8001794 <writeFlash+0x140>)
 8001668:	22f3      	movs	r2, #243	@ 0xf3
 800166a:	60da      	str	r2, [r3, #12]
	FLASH_Erase_Sector(FLASH_SECTOR_11, VOLTAGE_RANGE_3);
 800166c:	2102      	movs	r1, #2
 800166e:	200b      	movs	r0, #11
 8001670:	f004 fea0 	bl	80063b4 <FLASH_Erase_Sector>

	for (i = 0; i < 16; i++) {
 8001674:	2300      	movs	r3, #0
 8001676:	61fb      	str	r3, [r7, #28]
 8001678:	e023      	b.n	80016c2 <writeFlash+0x6e>
		for (j = 0; j < 16; j++) {
 800167a:	2300      	movs	r3, #0
 800167c:	61bb      	str	r3, [r7, #24]
 800167e:	e01a      	b.n	80016b6 <writeFlash+0x62>
	 	 	HAL_FLASH_Program (FLASH_TYPEPROGRAM_HALFWORD, (startAddress + (i*16+j)*4), discovered[i][j]);
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	011a      	lsls	r2, r3, #4
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	4413      	add	r3, r2
 8001688:	009a      	lsls	r2, r3, #2
 800168a:	4b43      	ldr	r3, [pc, #268]	@ (8001798 <writeFlash+0x144>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	18d1      	adds	r1, r2, r3
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	015b      	lsls	r3, r3, #5
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	4413      	add	r3, r2
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800169e:	b21b      	sxth	r3, r3
 80016a0:	17da      	asrs	r2, r3, #31
 80016a2:	469a      	mov	sl, r3
 80016a4:	4693      	mov	fp, r2
 80016a6:	4652      	mov	r2, sl
 80016a8:	465b      	mov	r3, fp
 80016aa:	2001      	movs	r0, #1
 80016ac:	f004 fcd0 	bl	8006050 <HAL_FLASH_Program>
		for (j = 0; j < 16; j++) {
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	3301      	adds	r3, #1
 80016b4:	61bb      	str	r3, [r7, #24]
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	2b0f      	cmp	r3, #15
 80016ba:	d9e1      	bls.n	8001680 <writeFlash+0x2c>
	for (i = 0; i < 16; i++) {
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	3301      	adds	r3, #1
 80016c0:	61fb      	str	r3, [r7, #28]
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	2b0f      	cmp	r3, #15
 80016c6:	d9d8      	bls.n	800167a <writeFlash+0x26>
		}
	}

	for (int i = 0; i < 16; i++) {
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]
 80016cc:	e02c      	b.n	8001728 <writeFlash+0xd4>
        for (int j = 0; j < 17; j++) {
 80016ce:	2300      	movs	r3, #0
 80016d0:	613b      	str	r3, [r7, #16]
 80016d2:	e023      	b.n	800171c <writeFlash+0xc8>
            HAL_FLASH_Program (FLASH_TYPEPROGRAM_HALFWORD, (startAddress + (16*16*4) + (i*17+j)*4), vertWall[i][j]);
 80016d4:	697a      	ldr	r2, [r7, #20]
 80016d6:	4613      	mov	r3, r2
 80016d8:	011b      	lsls	r3, r3, #4
 80016da:	441a      	add	r2, r3
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	4413      	add	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	461a      	mov	r2, r3
 80016e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001798 <writeFlash+0x144>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4413      	add	r3, r2
 80016ea:	f503 6180 	add.w	r1, r3, #1024	@ 0x400
 80016ee:	697a      	ldr	r2, [r7, #20]
 80016f0:	4613      	mov	r3, r2
 80016f2:	011b      	lsls	r3, r3, #4
 80016f4:	4413      	add	r3, r2
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	461a      	mov	r2, r3
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	4413      	add	r3, r2
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001704:	b21b      	sxth	r3, r3
 8001706:	17da      	asrs	r2, r3, #31
 8001708:	4698      	mov	r8, r3
 800170a:	4691      	mov	r9, r2
 800170c:	4642      	mov	r2, r8
 800170e:	464b      	mov	r3, r9
 8001710:	2001      	movs	r0, #1
 8001712:	f004 fc9d 	bl	8006050 <HAL_FLASH_Program>
        for (int j = 0; j < 17; j++) {
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	3301      	adds	r3, #1
 800171a:	613b      	str	r3, [r7, #16]
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	2b10      	cmp	r3, #16
 8001720:	ddd8      	ble.n	80016d4 <writeFlash+0x80>
	for (int i = 0; i < 16; i++) {
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	3301      	adds	r3, #1
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	2b0f      	cmp	r3, #15
 800172c:	ddcf      	ble.n	80016ce <writeFlash+0x7a>
        }
	}

    for (i = 0; i < 17; i++) {
 800172e:	2300      	movs	r3, #0
 8001730:	61fb      	str	r3, [r7, #28]
 8001732:	e025      	b.n	8001780 <writeFlash+0x12c>
        for (j = 0; j < 16; j++) {
 8001734:	2300      	movs	r3, #0
 8001736:	61bb      	str	r3, [r7, #24]
 8001738:	e01c      	b.n	8001774 <writeFlash+0x120>
            HAL_FLASH_Program (FLASH_TYPEPROGRAM_HALFWORD, (startAddress + (16*16*4) + (16*17*4) + (i*16+j)*4), horzWall[i][j]);
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	011a      	lsls	r2, r3, #4
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	4413      	add	r3, r2
 8001742:	009a      	lsls	r2, r3, #2
 8001744:	4b14      	ldr	r3, [pc, #80]	@ (8001798 <writeFlash+0x144>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4413      	add	r3, r2
 800174a:	f503 6104 	add.w	r1, r3, #2112	@ 0x840
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	015b      	lsls	r3, r3, #5
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	4413      	add	r3, r2
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800175c:	b21b      	sxth	r3, r3
 800175e:	17da      	asrs	r2, r3, #31
 8001760:	461c      	mov	r4, r3
 8001762:	4615      	mov	r5, r2
 8001764:	4622      	mov	r2, r4
 8001766:	462b      	mov	r3, r5
 8001768:	2001      	movs	r0, #1
 800176a:	f004 fc71 	bl	8006050 <HAL_FLASH_Program>
        for (j = 0; j < 16; j++) {
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	3301      	adds	r3, #1
 8001772:	61bb      	str	r3, [r7, #24]
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	2b0f      	cmp	r3, #15
 8001778:	d9df      	bls.n	800173a <writeFlash+0xe6>
    for (i = 0; i < 17; i++) {
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	3301      	adds	r3, #1
 800177e:	61fb      	str	r3, [r7, #28]
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	2b10      	cmp	r3, #16
 8001784:	d9d6      	bls.n	8001734 <writeFlash+0xe0>
        }
    }

	HAL_FLASH_Lock();
 8001786:	f004 fcd9 	bl	800613c <HAL_FLASH_Lock>
}
 800178a:	bf00      	nop
 800178c:	3720      	adds	r7, #32
 800178e:	46bd      	mov	sp, r7
 8001790:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001794:	40023c00 	.word	0x40023c00
 8001798:	20000000 	.word	0x20000000

0800179c <readFlash>:

void readFlash(int16_t horzWall[][16], int16_t vertWall[][17], int16_t discovered[][16])
{
 800179c:	b480      	push	{r7}
 800179e:	b089      	sub	sp, #36	@ 0x24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
	uint32_t i, j;

	for (i = 0; i < 16; i++) {
 80017a8:	2300      	movs	r3, #0
 80017aa:	61fb      	str	r3, [r7, #28]
 80017ac:	e01d      	b.n	80017ea <readFlash+0x4e>
		for(j = 0; j < 16; j++) {
 80017ae:	2300      	movs	r3, #0
 80017b0:	61bb      	str	r3, [r7, #24]
 80017b2:	e014      	b.n	80017de <readFlash+0x42>
			discovered[i][j] = *(int16_t *)(startAddress + (i*16+j)*4);
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	011a      	lsls	r2, r3, #4
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	4413      	add	r3, r2
 80017bc:	009a      	lsls	r2, r3, #2
 80017be:	4b39      	ldr	r3, [pc, #228]	@ (80018a4 <readFlash+0x108>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4413      	add	r3, r2
 80017c4:	4619      	mov	r1, r3
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	015b      	lsls	r3, r3, #5
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	4413      	add	r3, r2
 80017ce:	f9b1 1000 	ldrsh.w	r1, [r1]
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(j = 0; j < 16; j++) {
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	3301      	adds	r3, #1
 80017dc:	61bb      	str	r3, [r7, #24]
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	2b0f      	cmp	r3, #15
 80017e2:	d9e7      	bls.n	80017b4 <readFlash+0x18>
	for (i = 0; i < 16; i++) {
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	3301      	adds	r3, #1
 80017e8:	61fb      	str	r3, [r7, #28]
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	2b0f      	cmp	r3, #15
 80017ee:	d9de      	bls.n	80017ae <readFlash+0x12>
		}
	}

    for (int i = 0; i < 16; i++) {
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]
 80017f4:	e026      	b.n	8001844 <readFlash+0xa8>
        for (int j = 0; j < 17; j++) {
 80017f6:	2300      	movs	r3, #0
 80017f8:	613b      	str	r3, [r7, #16]
 80017fa:	e01d      	b.n	8001838 <readFlash+0x9c>
            vertWall[i][j] = *(int16_t *)(startAddress + (16*16*4) + (i*17+j)*4);
 80017fc:	697a      	ldr	r2, [r7, #20]
 80017fe:	4613      	mov	r3, r2
 8001800:	011b      	lsls	r3, r3, #4
 8001802:	441a      	add	r2, r3
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	4413      	add	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	461a      	mov	r2, r3
 800180c:	4b25      	ldr	r3, [pc, #148]	@ (80018a4 <readFlash+0x108>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4413      	add	r3, r2
 8001812:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001816:	4619      	mov	r1, r3
 8001818:	697a      	ldr	r2, [r7, #20]
 800181a:	4613      	mov	r3, r2
 800181c:	011b      	lsls	r3, r3, #4
 800181e:	4413      	add	r3, r2
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	461a      	mov	r2, r3
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	4413      	add	r3, r2
 8001828:	f9b1 1000 	ldrsh.w	r1, [r1]
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        for (int j = 0; j < 17; j++) {
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	3301      	adds	r3, #1
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	2b10      	cmp	r3, #16
 800183c:	ddde      	ble.n	80017fc <readFlash+0x60>
    for (int i = 0; i < 16; i++) {
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	3301      	adds	r3, #1
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	2b0f      	cmp	r3, #15
 8001848:	ddd5      	ble.n	80017f6 <readFlash+0x5a>
        }
    }

	for (i = 0; i < 17; i++) {
 800184a:	2300      	movs	r3, #0
 800184c:	61fb      	str	r3, [r7, #28]
 800184e:	e01f      	b.n	8001890 <readFlash+0xf4>
		for (j = 0; j < 16; j++) {
 8001850:	2300      	movs	r3, #0
 8001852:	61bb      	str	r3, [r7, #24]
 8001854:	e016      	b.n	8001884 <readFlash+0xe8>
			horzWall[i][j] = *(int16_t *)(startAddress + (16*16*4) + (16*17*4) + (i*16+j)*4);
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	011a      	lsls	r2, r3, #4
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	4413      	add	r3, r2
 800185e:	009a      	lsls	r2, r3, #2
 8001860:	4b10      	ldr	r3, [pc, #64]	@ (80018a4 <readFlash+0x108>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4413      	add	r3, r2
 8001866:	f503 6304 	add.w	r3, r3, #2112	@ 0x840
 800186a:	4619      	mov	r1, r3
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	015b      	lsls	r3, r3, #5
 8001870:	68fa      	ldr	r2, [r7, #12]
 8001872:	4413      	add	r3, r2
 8001874:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (j = 0; j < 16; j++) {
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	3301      	adds	r3, #1
 8001882:	61bb      	str	r3, [r7, #24]
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	2b0f      	cmp	r3, #15
 8001888:	d9e5      	bls.n	8001856 <readFlash+0xba>
	for (i = 0; i < 17; i++) {
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	3301      	adds	r3, #1
 800188e:	61fb      	str	r3, [r7, #28]
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	2b10      	cmp	r3, #16
 8001894:	d9dc      	bls.n	8001850 <readFlash+0xb4>
		}
	}
}
 8001896:	bf00      	nop
 8001898:	bf00      	nop
 800189a:	3724      	adds	r7, #36	@ 0x24
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	20000000 	.word	0x20000000

080018a8 <gyroInit>:
int gyro_initialized = 0;
float Gx_offset = 0;
float Gy_offset = 0;
float Gz_offset = 0;

uint8_t gyroInit(void) {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b0ee      	sub	sp, #440	@ 0x1b8
 80018ac:	af04      	add	r7, sp, #16
    if (gyro_initialized) return 1;
 80018ae:	4b90      	ldr	r3, [pc, #576]	@ (8001af0 <gyroInit+0x248>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <gyroInit+0x12>
 80018b6:	2301      	movs	r3, #1
 80018b8:	e10c      	b.n	8001ad4 <gyroInit+0x22c>

    I2C_HandleTypeDef *hi2c1_ptr = Get_I2C1_Ptr();
 80018ba:	f000 ff03 	bl	80026c4 <Get_I2C1_Ptr>
 80018be:	f8c7 0198 	str.w	r0, [r7, #408]	@ 0x198

    HAL_StatusTypeDef ret;
    uint8_t temp;

    // establishing connection with the device
    ret = HAL_I2C_IsDeviceReady(hi2c1_ptr, (DEVICE_ADDRESS << 1) + 0, 1, 1000);
 80018c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018c6:	2201      	movs	r2, #1
 80018c8:	21d0      	movs	r1, #208	@ 0xd0
 80018ca:	f8d7 0198 	ldr.w	r0, [r7, #408]	@ 0x198
 80018ce:	f005 fcf3 	bl	80072b8 <HAL_I2C_IsDeviceReady>
 80018d2:	4603      	mov	r3, r0
 80018d4:	f887 3197 	strb.w	r3, [r7, #407]	@ 0x197
    if (ret != HAL_OK) return ret;
 80018d8:	f897 3197 	ldrb.w	r3, [r7, #407]	@ 0x197
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d002      	beq.n	80018e6 <gyroInit+0x3e>
 80018e0:	f897 3197 	ldrb.w	r3, [r7, #407]	@ 0x197
 80018e4:	e0f6      	b.n	8001ad4 <gyroInit+0x22c>

    // configuring power management
    temp = 0b00001000;
 80018e6:	2308      	movs	r3, #8
 80018e8:	f887 3196 	strb.w	r3, [r7, #406]	@ 0x196
    ret = HAL_I2C_Mem_Write(hi2c1_ptr, (DEVICE_ADDRESS << 1) + 0, REG_USER_CTRL, 1, &temp, 1, 100);
 80018ec:	2364      	movs	r3, #100	@ 0x64
 80018ee:	9302      	str	r3, [sp, #8]
 80018f0:	2301      	movs	r3, #1
 80018f2:	9301      	str	r3, [sp, #4]
 80018f4:	f507 73cb 	add.w	r3, r7, #406	@ 0x196
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	2301      	movs	r3, #1
 80018fc:	226b      	movs	r2, #107	@ 0x6b
 80018fe:	21d0      	movs	r1, #208	@ 0xd0
 8001900:	f8d7 0198 	ldr.w	r0, [r7, #408]	@ 0x198
 8001904:	f005 f9b8 	bl	8006c78 <HAL_I2C_Mem_Write>
 8001908:	4603      	mov	r3, r0
 800190a:	f887 3197 	strb.w	r3, [r7, #407]	@ 0x197
    if (ret != HAL_OK) return ret;
 800190e:	f897 3197 	ldrb.w	r3, [r7, #407]	@ 0x197
 8001912:	2b00      	cmp	r3, #0
 8001914:	d002      	beq.n	800191c <gyroInit+0x74>
 8001916:	f897 3197 	ldrb.w	r3, [r7, #407]	@ 0x197
 800191a:	e0db      	b.n	8001ad4 <gyroInit+0x22c>

    // configuring gyroscope
    temp = FS_GYRO_250;
 800191c:	2300      	movs	r3, #0
 800191e:	f887 3196 	strb.w	r3, [r7, #406]	@ 0x196
    ret = HAL_I2C_Mem_Write(hi2c1_ptr, (DEVICE_ADDRESS << 1) + 0, REG_CONFIG_GYRO, 1, &temp, 1, 100);
 8001922:	2364      	movs	r3, #100	@ 0x64
 8001924:	9302      	str	r3, [sp, #8]
 8001926:	2301      	movs	r3, #1
 8001928:	9301      	str	r3, [sp, #4]
 800192a:	f507 73cb 	add.w	r3, r7, #406	@ 0x196
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	2301      	movs	r3, #1
 8001932:	221b      	movs	r2, #27
 8001934:	21d0      	movs	r1, #208	@ 0xd0
 8001936:	f8d7 0198 	ldr.w	r0, [r7, #408]	@ 0x198
 800193a:	f005 f99d 	bl	8006c78 <HAL_I2C_Mem_Write>
 800193e:	4603      	mov	r3, r0
 8001940:	f887 3197 	strb.w	r3, [r7, #407]	@ 0x197
    if (ret != HAL_OK) return ret;
 8001944:	f897 3197 	ldrb.w	r3, [r7, #407]	@ 0x197
 8001948:	2b00      	cmp	r3, #0
 800194a:	d002      	beq.n	8001952 <gyroInit+0xaa>
 800194c:	f897 3197 	ldrb.w	r3, [r7, #407]	@ 0x197
 8001950:	e0c0      	b.n	8001ad4 <gyroInit+0x22c>

    // configuring accelerometer
    temp = FS_ACC_2G;
 8001952:	2300      	movs	r3, #0
 8001954:	f887 3196 	strb.w	r3, [r7, #406]	@ 0x196
    ret = HAL_I2C_Mem_Write(hi2c1_ptr, (DEVICE_ADDRESS << 1) + 0, REG_CONFIG_ACC, 1, &temp, 1, 100);
 8001958:	2364      	movs	r3, #100	@ 0x64
 800195a:	9302      	str	r3, [sp, #8]
 800195c:	2301      	movs	r3, #1
 800195e:	9301      	str	r3, [sp, #4]
 8001960:	f507 73cb 	add.w	r3, r7, #406	@ 0x196
 8001964:	9300      	str	r3, [sp, #0]
 8001966:	2301      	movs	r3, #1
 8001968:	221c      	movs	r2, #28
 800196a:	21d0      	movs	r1, #208	@ 0xd0
 800196c:	f8d7 0198 	ldr.w	r0, [r7, #408]	@ 0x198
 8001970:	f005 f982 	bl	8006c78 <HAL_I2C_Mem_Write>
 8001974:	4603      	mov	r3, r0
 8001976:	f887 3197 	strb.w	r3, [r7, #407]	@ 0x197
    if (ret != HAL_OK) return ret;
 800197a:	f897 3197 	ldrb.w	r3, [r7, #407]	@ 0x197
 800197e:	2b00      	cmp	r3, #0
 8001980:	d002      	beq.n	8001988 <gyroInit+0xe0>
 8001982:	f897 3197 	ldrb.w	r3, [r7, #407]	@ 0x197
 8001986:	e0a5      	b.n	8001ad4 <gyroInit+0x22c>

    gyro_initialized = 1;
 8001988:	4b59      	ldr	r3, [pc, #356]	@ (8001af0 <gyroInit+0x248>)
 800198a:	2201      	movs	r2, #1
 800198c:	601a      	str	r2, [r3, #0]

    // calculating offsets
//    float Gx_readings[10] = { 0.0 };
//    float Gy_readings[10] = { 0.0 };
    float Gz_readings[100] = { 0.0 };
 800198e:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8001992:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8001996:	4618      	mov	r0, r3
 8001998:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800199c:	461a      	mov	r2, r3
 800199e:	2100      	movs	r1, #0
 80019a0:	f007 fe6e 	bl	8009680 <memset>
//    float Gx_sum = 0.0;
//    float Gy_sum = 0.0;
    float Gz_sum = 0.0;
 80019a4:	f04f 0300 	mov.w	r3, #0
 80019a8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4

    while(1) {
    	Gz_offset = 0;
 80019ac:	4b51      	ldr	r3, [pc, #324]	@ (8001af4 <gyroInit+0x24c>)
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
    	Gz_sum = 0;
 80019b4:	f04f 0300 	mov.w	r3, #0
 80019b8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    	for (int i = 0; i < 100; ++i) {
 80019bc:	2300      	movs	r3, #0
 80019be:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80019c2:	e020      	b.n	8001a06 <gyroInit+0x15e>
			readGyro(&Gz_readings[i]);
 80019c4:	1d3a      	adds	r2, r7, #4
 80019c6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4413      	add	r3, r2
 80019ce:	4618      	mov	r0, r3
 80019d0:	f000 f896 	bl	8001b00 <readGyro>
	//        Gx_sum += Gx_readings[i];
	//        Gy_sum += Gy_readings[i];
			Gz_sum += Gz_readings[i];
 80019d4:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80019d8:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 80019dc:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 80019e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019e4:	4619      	mov	r1, r3
 80019e6:	f8d7 01a4 	ldr.w	r0, [r7, #420]	@ 0x1a4
 80019ea:	f7ff f899 	bl	8000b20 <__addsf3>
 80019ee:	4603      	mov	r3, r0
 80019f0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
			delayMicroseconds(10000);
 80019f4:	f242 7010 	movw	r0, #10000	@ 0x2710
 80019f8:	f7ff fde6 	bl	80015c8 <delayMicroseconds>
    	for (int i = 0; i < 100; ++i) {
 80019fc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001a00:	3301      	adds	r3, #1
 8001a02:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001a06:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001a0a:	2b63      	cmp	r3, #99	@ 0x63
 8001a0c:	ddda      	ble.n	80019c4 <gyroInit+0x11c>
		}

	//    Gx_offset = Gx_sum / 10.0;
	//    Gy_offset = Gy_sum / 10.0;
		Gz_offset = Gz_sum / 100.0;
 8001a0e:	493a      	ldr	r1, [pc, #232]	@ (8001af8 <gyroInit+0x250>)
 8001a10:	f8d7 01a4 	ldr.w	r0, [r7, #420]	@ 0x1a4
 8001a14:	f7ff fa40 	bl	8000e98 <__aeabi_fdiv>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	4b35      	ldr	r3, [pc, #212]	@ (8001af4 <gyroInit+0x24c>)
 8001a1e:	601a      	str	r2, [r3, #0]

		Gz_sum = 0;
 8001a20:	f04f 0300 	mov.w	r3, #0
 8001a24:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
		for (int i = 0; i < 100; ++i) {
 8001a28:	2300      	movs	r3, #0
 8001a2a:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001a2e:	e020      	b.n	8001a72 <gyroInit+0x1ca>
			readGyro(&Gz_readings[i]);
 8001a30:	1d3a      	adds	r2, r7, #4
 8001a32:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f000 f860 	bl	8001b00 <readGyro>
			Gz_sum += Gz_readings[i];
 8001a40:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8001a44:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8001a48:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8001a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a50:	4619      	mov	r1, r3
 8001a52:	f8d7 01a4 	ldr.w	r0, [r7, #420]	@ 0x1a4
 8001a56:	f7ff f863 	bl	8000b20 <__addsf3>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
			delayMicroseconds(10000);
 8001a60:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001a64:	f7ff fdb0 	bl	80015c8 <delayMicroseconds>
		for (int i = 0; i < 100; ++i) {
 8001a68:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001a72:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8001a76:	2b63      	cmp	r3, #99	@ 0x63
 8001a78:	ddda      	ble.n	8001a30 <gyroInit+0x188>
		}
		if (Gz_sum / 100.0 < 0.1 && Gz_sum / 100.0 > -0.1) {
 8001a7a:	f8d7 01a4 	ldr.w	r0, [r7, #420]	@ 0x1a4
 8001a7e:	f7fe fd07 	bl	8000490 <__aeabi_f2d>
 8001a82:	f04f 0200 	mov.w	r2, #0
 8001a86:	4b1d      	ldr	r3, [pc, #116]	@ (8001afc <gyroInit+0x254>)
 8001a88:	f7fe fe84 	bl	8000794 <__aeabi_ddiv>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	4610      	mov	r0, r2
 8001a92:	4619      	mov	r1, r3
 8001a94:	a312      	add	r3, pc, #72	@ (adr r3, 8001ae0 <gyroInit+0x238>)
 8001a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9a:	f7fe ffc3 	bl	8000a24 <__aeabi_dcmplt>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d014      	beq.n	8001ace <gyroInit+0x226>
 8001aa4:	f8d7 01a4 	ldr.w	r0, [r7, #420]	@ 0x1a4
 8001aa8:	f7fe fcf2 	bl	8000490 <__aeabi_f2d>
 8001aac:	f04f 0200 	mov.w	r2, #0
 8001ab0:	4b12      	ldr	r3, [pc, #72]	@ (8001afc <gyroInit+0x254>)
 8001ab2:	f7fe fe6f 	bl	8000794 <__aeabi_ddiv>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	4610      	mov	r0, r2
 8001abc:	4619      	mov	r1, r3
 8001abe:	a30a      	add	r3, pc, #40	@ (adr r3, 8001ae8 <gyroInit+0x240>)
 8001ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac4:	f7fe ffcc 	bl	8000a60 <__aeabi_dcmpgt>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d100      	bne.n	8001ad0 <gyroInit+0x228>
    	Gz_offset = 0;
 8001ace:	e76d      	b.n	80019ac <gyroInit+0x104>
			break;
 8001ad0:	bf00      	nop
		}
    }



    return 1;
 8001ad2:	2301      	movs	r3, #1
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f507 77d4 	add.w	r7, r7, #424	@ 0x1a8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	9999999a 	.word	0x9999999a
 8001ae4:	3fb99999 	.word	0x3fb99999
 8001ae8:	9999999a 	.word	0x9999999a
 8001aec:	bfb99999 	.word	0xbfb99999
 8001af0:	2000008c 	.word	0x2000008c
 8001af4:	20000090 	.word	0x20000090
 8001af8:	42c80000 	.word	0x42c80000
 8001afc:	40590000 	.word	0x40590000

08001b00 <readGyro>:

void readGyro(/*float* Gx , float* Gy, */float* Gz) {
 8001b00:	b5b0      	push	{r4, r5, r7, lr}
 8001b02:	b088      	sub	sp, #32
 8001b04:	af04      	add	r7, sp, #16
 8001b06:	6078      	str	r0, [r7, #4]
    if (!gyro_initialized) {
 8001b08:	4b23      	ldr	r3, [pc, #140]	@ (8001b98 <readGyro+0x98>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d039      	beq.n	8001b84 <readGyro+0x84>
        return;
    }

    I2C_HandleTypeDef *hi2c1_ptr = Get_I2C1_Ptr();
 8001b10:	f000 fdd8 	bl	80026c4 <Get_I2C1_Ptr>
 8001b14:	60f8      	str	r0, [r7, #12]

//    uint8_t data[6];
    uint8_t data[2];
    HAL_I2C_Mem_Read(hi2c1_ptr, (DEVICE_ADDRESS << 1) + 0, REG_GYRO_DATA, 1, data, 2, 100);
 8001b16:	2364      	movs	r3, #100	@ 0x64
 8001b18:	9302      	str	r3, [sp, #8]
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	9301      	str	r3, [sp, #4]
 8001b1e:	f107 0308 	add.w	r3, r7, #8
 8001b22:	9300      	str	r3, [sp, #0]
 8001b24:	2301      	movs	r3, #1
 8001b26:	2247      	movs	r2, #71	@ 0x47
 8001b28:	21d0      	movs	r1, #208	@ 0xd0
 8001b2a:	68f8      	ldr	r0, [r7, #12]
 8001b2c:	f005 f99e 	bl	8006e6c <HAL_I2C_Mem_Read>

//    int16_t Gyro_X_RAW = ((int16_t)(data[0] << 8)) | data [1];
//    int16_t Gyro_Y_RAW = ((int16_t)(data[2] << 8)) | data [3];
//    int16_t Gyro_Z_RAW = ((int16_t)(data[4] << 8)) | data [5];
    int16_t Gyro_Z_RAW = ((int16_t)(data[0] << 8)) | data [1];
 8001b30:	7a3b      	ldrb	r3, [r7, #8]
 8001b32:	021b      	lsls	r3, r3, #8
 8001b34:	b21a      	sxth	r2, r3
 8001b36:	7a7b      	ldrb	r3, [r7, #9]
 8001b38:	b21b      	sxth	r3, r3
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	817b      	strh	r3, [r7, #10]
         I have configured FS_SEL = 0. So I am dividing by 131.0
         for more details check GYRO_CONFIG Register              ****/

//    *Gx = Gyro_X_RAW/131.0 - Gx_offset;
//    *Gy = Gyro_Y_RAW/131.0 - Gy_offset;
    *Gz = Gyro_Z_RAW/131.0 - Gz_offset;
 8001b3e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7fe fc92 	bl	800046c <__aeabi_i2d>
 8001b48:	a311      	add	r3, pc, #68	@ (adr r3, 8001b90 <readGyro+0x90>)
 8001b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4e:	f7fe fe21 	bl	8000794 <__aeabi_ddiv>
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	4614      	mov	r4, r2
 8001b58:	461d      	mov	r5, r3
 8001b5a:	4b10      	ldr	r3, [pc, #64]	@ (8001b9c <readGyro+0x9c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7fe fc96 	bl	8000490 <__aeabi_f2d>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4620      	mov	r0, r4
 8001b6a:	4629      	mov	r1, r5
 8001b6c:	f7fe fb30 	bl	80001d0 <__aeabi_dsub>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4610      	mov	r0, r2
 8001b76:	4619      	mov	r1, r3
 8001b78:	f7fe ff7c 	bl	8000a74 <__aeabi_d2f>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	601a      	str	r2, [r3, #0]

    return;
 8001b82:	e000      	b.n	8001b86 <readGyro+0x86>
        return;
 8001b84:	bf00      	nop
}
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b8c:	f3af 8000 	nop.w
 8001b90:	00000000 	.word	0x00000000
 8001b94:	40606000 	.word	0x40606000
 8001b98:	2000008c 	.word	0x2000008c
 8001b9c:	20000090 	.word	0x20000090

08001ba0 <readIR>:
uint8_t complete = 0;

uint32_t usDelay = 100;

uint16_t readIR(IR ir)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	71fb      	strb	r3, [r7, #7]
	uint16_t readValue;

	switch(ir)
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	2b03      	cmp	r3, #3
 8001bae:	d869      	bhi.n	8001c84 <readIR+0xe4>
 8001bb0:	a201      	add	r2, pc, #4	@ (adr r2, 8001bb8 <readIR+0x18>)
 8001bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb6:	bf00      	nop
 8001bb8:	08001bc9 	.word	0x08001bc9
 8001bbc:	08001bf7 	.word	0x08001bf7
 8001bc0:	08001c25 	.word	0x08001c25
 8001bc4:	08001c53 	.word	0x08001c53
	    {
	        case IR_FORWARD_LEFT:
	        	HAL_GPIO_WritePin(ForwardLeftEmitter_GPIO_Port, ForwardLeftEmitter_Pin, GPIO_PIN_SET);
 8001bc8:	2201      	movs	r2, #1
 8001bca:	2180      	movs	r1, #128	@ 0x80
 8001bcc:	4830      	ldr	r0, [pc, #192]	@ (8001c90 <readIR+0xf0>)
 8001bce:	f004 fdf8 	bl	80067c2 <HAL_GPIO_WritePin>
	        	delayMicroseconds(usDelay);
 8001bd2:	4b30      	ldr	r3, [pc, #192]	@ (8001c94 <readIR+0xf4>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff fcf6 	bl	80015c8 <delayMicroseconds>
	        	readValue = analogRead(ir);
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 f85c 	bl	8001c9c <analogRead>
 8001be4:	4603      	mov	r3, r0
 8001be6:	81fb      	strh	r3, [r7, #14]
	        	HAL_GPIO_WritePin(ForwardLeftEmitter_GPIO_Port, ForwardLeftEmitter_Pin, GPIO_PIN_RESET);
 8001be8:	2200      	movs	r2, #0
 8001bea:	2180      	movs	r1, #128	@ 0x80
 8001bec:	4828      	ldr	r0, [pc, #160]	@ (8001c90 <readIR+0xf0>)
 8001bee:	f004 fde8 	bl	80067c2 <HAL_GPIO_WritePin>
	        	return readValue;
 8001bf2:	89fb      	ldrh	r3, [r7, #14]
 8001bf4:	e047      	b.n	8001c86 <readIR+0xe6>
	            break;
	        case IR_LEFT:
	        	HAL_GPIO_WritePin(LeftEmitter_GPIO_Port, LeftEmitter_Pin, GPIO_PIN_SET);
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	2110      	movs	r1, #16
 8001bfa:	4825      	ldr	r0, [pc, #148]	@ (8001c90 <readIR+0xf0>)
 8001bfc:	f004 fde1 	bl	80067c2 <HAL_GPIO_WritePin>
	        	delayMicroseconds(usDelay);
 8001c00:	4b24      	ldr	r3, [pc, #144]	@ (8001c94 <readIR+0xf4>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff fcdf 	bl	80015c8 <delayMicroseconds>
	        	readValue = analogRead(ir);
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f000 f845 	bl	8001c9c <analogRead>
 8001c12:	4603      	mov	r3, r0
 8001c14:	81fb      	strh	r3, [r7, #14]
	        	HAL_GPIO_WritePin(LeftEmitter_GPIO_Port, LeftEmitter_Pin, GPIO_PIN_RESET);
 8001c16:	2200      	movs	r2, #0
 8001c18:	2110      	movs	r1, #16
 8001c1a:	481d      	ldr	r0, [pc, #116]	@ (8001c90 <readIR+0xf0>)
 8001c1c:	f004 fdd1 	bl	80067c2 <HAL_GPIO_WritePin>
	        	return readValue;
 8001c20:	89fb      	ldrh	r3, [r7, #14]
 8001c22:	e030      	b.n	8001c86 <readIR+0xe6>
	            break;
	        case IR_RIGHT:
	        	HAL_GPIO_WritePin(RightEmitter_GPIO_Port, RightEmitter_Pin, GPIO_PIN_SET);
 8001c24:	2201      	movs	r2, #1
 8001c26:	2104      	movs	r1, #4
 8001c28:	4819      	ldr	r0, [pc, #100]	@ (8001c90 <readIR+0xf0>)
 8001c2a:	f004 fdca 	bl	80067c2 <HAL_GPIO_WritePin>
	        	delayMicroseconds(usDelay);
 8001c2e:	4b19      	ldr	r3, [pc, #100]	@ (8001c94 <readIR+0xf4>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff fcc8 	bl	80015c8 <delayMicroseconds>
	        	readValue = analogRead(ir);
 8001c38:	79fb      	ldrb	r3, [r7, #7]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f000 f82e 	bl	8001c9c <analogRead>
 8001c40:	4603      	mov	r3, r0
 8001c42:	81fb      	strh	r3, [r7, #14]
	        	HAL_GPIO_WritePin(RightEmitter_GPIO_Port, RightEmitter_Pin, GPIO_PIN_RESET);
 8001c44:	2200      	movs	r2, #0
 8001c46:	2104      	movs	r1, #4
 8001c48:	4811      	ldr	r0, [pc, #68]	@ (8001c90 <readIR+0xf0>)
 8001c4a:	f004 fdba 	bl	80067c2 <HAL_GPIO_WritePin>
	        	return readValue;
 8001c4e:	89fb      	ldrh	r3, [r7, #14]
 8001c50:	e019      	b.n	8001c86 <readIR+0xe6>
	            break;
	        case IR_FORWARD_RIGHT:
	        	HAL_GPIO_WritePin(ForwardRightEmitter_GPIO_Port, ForwardRightEmitter_Pin, GPIO_PIN_SET);
 8001c52:	2201      	movs	r2, #1
 8001c54:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c58:	480f      	ldr	r0, [pc, #60]	@ (8001c98 <readIR+0xf8>)
 8001c5a:	f004 fdb2 	bl	80067c2 <HAL_GPIO_WritePin>
	        	delayMicroseconds(usDelay);
 8001c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c94 <readIR+0xf4>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff fcb0 	bl	80015c8 <delayMicroseconds>
	        	readValue = analogRead(ir);
 8001c68:	79fb      	ldrb	r3, [r7, #7]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f000 f816 	bl	8001c9c <analogRead>
 8001c70:	4603      	mov	r3, r0
 8001c72:	81fb      	strh	r3, [r7, #14]
	        	HAL_GPIO_WritePin(ForwardRightEmitter_GPIO_Port, ForwardRightEmitter_Pin, GPIO_PIN_RESET);
 8001c74:	2200      	movs	r2, #0
 8001c76:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c7a:	4807      	ldr	r0, [pc, #28]	@ (8001c98 <readIR+0xf8>)
 8001c7c:	f004 fda1 	bl	80067c2 <HAL_GPIO_WritePin>
	        	return readValue;
 8001c80:	89fb      	ldrh	r3, [r7, #14]
 8001c82:	e000      	b.n	8001c86 <readIR+0xe6>
	            break;
	        default:
	            return 0;
 8001c84:	2300      	movs	r3, #0
	    }
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40020000 	.word	0x40020000
 8001c94:	20000004 	.word	0x20000004
 8001c98:	40020400 	.word	0x40020400

08001c9c <analogRead>:
{
	return readIR(IR_FORWARD_RIGHT);
}

uint16_t analogRead(IR ir)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b08a      	sub	sp, #40	@ 0x28
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	71fb      	strb	r3, [r7, #7]
    ADC_ChannelConfTypeDef sConfig = {0}; //this initializes the IR ADC [Analog to Digital Converter]
 8001ca6:	f107 030c 	add.w	r3, r7, #12
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	605a      	str	r2, [r3, #4]
 8001cb0:	609a      	str	r2, [r3, #8]
 8001cb2:	60da      	str	r2, [r3, #12]
    ADC_HandleTypeDef *hadc1_ptr = Get_HADC1_Ptr(); //this is a pointer to your hal_adc
 8001cb4:	f000 fcfc 	bl	80026b0 <Get_HADC1_Ptr>
 8001cb8:	61f8      	str	r0, [r7, #28]
    //this pointer will also be used to read the analog value, val = HAL_ADC_GetValue(hadc1_ptr);

    //this picks the IR direction to choose the right ADC.
    switch(ir)
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	2b03      	cmp	r3, #3
 8001cbe:	d817      	bhi.n	8001cf0 <analogRead+0x54>
 8001cc0:	a201      	add	r2, pc, #4	@ (adr r2, 8001cc8 <analogRead+0x2c>)
 8001cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc6:	bf00      	nop
 8001cc8:	08001cd9 	.word	0x08001cd9
 8001ccc:	08001cdf 	.word	0x08001cdf
 8001cd0:	08001ce5 	.word	0x08001ce5
 8001cd4:	08001ceb 	.word	0x08001ceb
    {
        case IR_FORWARD_LEFT:
            sConfig.Channel = ADC_CHANNEL_6;
 8001cd8:	2306      	movs	r3, #6
 8001cda:	60fb      	str	r3, [r7, #12]
            break;
 8001cdc:	e00a      	b.n	8001cf4 <analogRead+0x58>
        case IR_LEFT:
            sConfig.Channel = ADC_CHANNEL_5;
 8001cde:	2305      	movs	r3, #5
 8001ce0:	60fb      	str	r3, [r7, #12]
            break;
 8001ce2:	e007      	b.n	8001cf4 <analogRead+0x58>
        case IR_RIGHT:
            sConfig.Channel = ADC_CHANNEL_11;
 8001ce4:	230b      	movs	r3, #11
 8001ce6:	60fb      	str	r3, [r7, #12]
            break;
 8001ce8:	e004      	b.n	8001cf4 <analogRead+0x58>
        case IR_FORWARD_RIGHT:
            sConfig.Channel = ADC_CHANNEL_10;
 8001cea:	230a      	movs	r3, #10
 8001cec:	60fb      	str	r3, [r7, #12]
            break;
 8001cee:	e001      	b.n	8001cf4 <analogRead+0x58>
        default:
            return 0;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	e032      	b.n	8001d5a <analogRead+0xbe>
    }

    sConfig.Rank = 1;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]

    // make sure everything was set up correctly
    if (HAL_ADC_ConfigChannel(hadc1_ptr, &sConfig) != HAL_OK)
 8001cfc:	f107 030c 	add.w	r3, r7, #12
 8001d00:	4619      	mov	r1, r3
 8001d02:	69f8      	ldr	r0, [r7, #28]
 8001d04:	f003 fa12 	bl	800512c <HAL_ADC_ConfigChannel>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <analogRead+0x76>
    {
        return 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	e023      	b.n	8001d5a <analogRead+0xbe>
    }

    complete = 0;
 8001d12:	4b14      	ldr	r3, [pc, #80]	@ (8001d64 <analogRead+0xc8>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]

    // start filling up the ADC buffer
    HAL_ADC_Start_DMA(hadc1_ptr, (uint32_t*)adc_buf, NUM_SAMPLES);
 8001d18:	2280      	movs	r2, #128	@ 0x80
 8001d1a:	4913      	ldr	r1, [pc, #76]	@ (8001d68 <analogRead+0xcc>)
 8001d1c:	69f8      	ldr	r0, [r7, #28]
 8001d1e:	f003 f8c3 	bl	8004ea8 <HAL_ADC_Start_DMA>

    // wait for the buffer to become full
    while (complete == 0)
 8001d22:	e000      	b.n	8001d26 <analogRead+0x8a>
    {
        continue;
 8001d24:	bf00      	nop
    while (complete == 0)
 8001d26:	4b0f      	ldr	r3, [pc, #60]	@ (8001d64 <analogRead+0xc8>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0fa      	beq.n	8001d24 <analogRead+0x88>
    }

    uint32_t sum = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	627b      	str	r3, [r7, #36]	@ 0x24
    // calculate the sum of the measurements in order to calculate the average
    uint16_t measurement = 0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	847b      	strh	r3, [r7, #34]	@ 0x22
    while(measurement < NUM_SAMPLES) //this takes multiple measurements
 8001d36:	e00a      	b.n	8001d4e <analogRead+0xb2>
    {
        sum += adc_buf[measurement];
 8001d38:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001d3a:	4a0b      	ldr	r2, [pc, #44]	@ (8001d68 <analogRead+0xcc>)
 8001d3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d40:	461a      	mov	r2, r3
 8001d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d44:	4413      	add	r3, r2
 8001d46:	627b      	str	r3, [r7, #36]	@ 0x24
        ++measurement;
 8001d48:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	847b      	strh	r3, [r7, #34]	@ 0x22
    while(measurement < NUM_SAMPLES) //this takes multiple measurements
 8001d4e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001d50:	2b7f      	cmp	r3, #127	@ 0x7f
 8001d52:	d9f1      	bls.n	8001d38 <analogRead+0x9c>
    }

    return sum/NUM_SAMPLES;
 8001d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d56:	09db      	lsrs	r3, r3, #7
 8001d58:	b29b      	uxth	r3, r3
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3728      	adds	r7, #40	@ 0x28
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20000194 	.word	0x20000194
 8001d68:	20000094 	.word	0x20000094

08001d6c <HAL_ADC_ConvCpltCallback>:

/*
 This function is called when the ADC buffer is filled
 It stops the ADC and changes our "complete" variable to be "true"
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
    // stop the ADC
    HAL_ADC_Stop_DMA(hadc);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f003 f975 	bl	8005064 <HAL_ADC_Stop_DMA>
    complete = 1;
 8001d7a:	4b03      	ldr	r3, [pc, #12]	@ (8001d88 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	701a      	strb	r2, [r3, #0]
}
 8001d80:	bf00      	nop
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	20000194 	.word	0x20000194

08001d8c <displayFace>:
		0.1, 0.02, 0.003, 0.40, 0.501, 0.550, 0.555, 1.2706
};

int currentConstant = 0;

void displayFace(unsigned char arr[]) {
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af02      	add	r7, sp, #8
 8001d92:	6078      	str	r0, [r7, #4]
	SSD1306_Clear();
 8001d94:	f002 fbfc 	bl	8004590 <SSD1306_Clear>
    SSD1306_DrawBitmap(0,0,arr,128,64,1);
 8001d98:	2301      	movs	r3, #1
 8001d9a:	9301      	str	r3, [sp, #4]
 8001d9c:	2340      	movs	r3, #64	@ 0x40
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	2380      	movs	r3, #128	@ 0x80
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	2100      	movs	r1, #0
 8001da6:	2000      	movs	r0, #0
 8001da8:	f002 fa22 	bl	80041f0 <SSD1306_DrawBitmap>
    SSD1306_UpdateScreen();
 8001dac:	f002 fb4c 	bl	8004448 <SSD1306_UpdateScreen>
}
 8001db0:	bf00      	nop
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <solve>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void solve(Algorithm alg) {
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	71fb      	strb	r3, [r7, #7]
	Action nextMove = solver(alg);
 8001dc2:	79fb      	ldrb	r3, [r7, #7]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f001 ff75 	bl	8003cb4 <solver>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	73fb      	strb	r3, [r7, #15]
	switch(nextMove) {
 8001dce:	7bfb      	ldrb	r3, [r7, #15]
 8001dd0:	2b03      	cmp	r3, #3
 8001dd2:	d84b      	bhi.n	8001e6c <solve+0xb4>
 8001dd4:	a201      	add	r2, pc, #4	@ (adr r2, 8001ddc <solve+0x24>)
 8001dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dda:	bf00      	nop
 8001ddc:	08001e43 	.word	0x08001e43
 8001de0:	08001ded 	.word	0x08001ded
 8001de4:	08001e59 	.word	0x08001e59
 8001de8:	08001e6d 	.word	0x08001e6d
		case FORWARD:
			move(0);
 8001dec:	2000      	movs	r0, #0
 8001dee:	f7ff fafb 	bl	80013e8 <move>
//			move(1);
			if (alg == FLOODFILL)
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d120      	bne.n	8001e3a <solve+0x82>
			{
				int extra_moves = foresight(); // Already has curr position and heading
 8001df8:	f002 f8ea 	bl	8003fd0 <foresight>
 8001dfc:	6178      	str	r0, [r7, #20]
				if (extra_moves > max_forward) {
 8001dfe:	4b25      	ldr	r3, [pc, #148]	@ (8001e94 <solve+0xdc>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	dd02      	ble.n	8001e0e <solve+0x56>
					extra_moves = max_forward;
 8001e08:	4b22      	ldr	r3, [pc, #136]	@ (8001e94 <solve+0xdc>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	617b      	str	r3, [r7, #20]
				}
				for (int i = 0; i < extra_moves; i++)
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
 8001e12:	e005      	b.n	8001e20 <solve+0x68>
				{
					solver(FLOODFILL);
 8001e14:	2001      	movs	r0, #1
 8001e16:	f001 ff4d 	bl	8003cb4 <solver>
				for (int i = 0; i < extra_moves; i++)
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	613b      	str	r3, [r7, #16]
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	dbf5      	blt.n	8001e14 <solve+0x5c>
				}
				move(1 + extra_moves);
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	b25b      	sxtb	r3, r3
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff fad8 	bl	80013e8 <move>
			}
			else
				move(1);
			break;
 8001e38:	e018      	b.n	8001e6c <solve+0xb4>
				move(1);
 8001e3a:	2001      	movs	r0, #1
 8001e3c:	f7ff fad4 	bl	80013e8 <move>
			break;
 8001e40:	e014      	b.n	8001e6c <solve+0xb4>
		case LEFT:
			displayFace(goodright);
 8001e42:	4815      	ldr	r0, [pc, #84]	@ (8001e98 <solve+0xe0>)
 8001e44:	f7ff ffa2 	bl	8001d8c <displayFace>
			move(0);
 8001e48:	2000      	movs	r0, #0
 8001e4a:	f7ff facd 	bl	80013e8 <move>
			turn(-1);
 8001e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8001e52:	f7ff fb05 	bl	8001460 <turn>
			break;
 8001e56:	e009      	b.n	8001e6c <solve+0xb4>
		case RIGHT:
			displayFace(goodleft);
 8001e58:	4810      	ldr	r0, [pc, #64]	@ (8001e9c <solve+0xe4>)
 8001e5a:	f7ff ff97 	bl	8001d8c <displayFace>
			move(0);
 8001e5e:	2000      	movs	r0, #0
 8001e60:	f7ff fac2 	bl	80013e8 <move>
			turn(1);
 8001e64:	2001      	movs	r0, #1
 8001e66:	f7ff fafb 	bl	8001460 <turn>
			break;
 8001e6a:	bf00      	nop
		case IDLE:
			break;
	}
	if (readIR(IR_FORWARD_LEFT) > 1200 && readIR(IR_FORWARD_RIGHT) > 1200) {
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	f7ff fe97 	bl	8001ba0 <readIR>
 8001e72:	4603      	mov	r3, r0
 8001e74:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8001e78:	d908      	bls.n	8001e8c <solve+0xd4>
 8001e7a:	2003      	movs	r0, #3
 8001e7c:	f7ff fe90 	bl	8001ba0 <readIR>
 8001e80:	4603      	mov	r3, r0
 8001e82:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8001e86:	d901      	bls.n	8001e8c <solve+0xd4>
		frontCorrection();
 8001e88:	f7ff fb46 	bl	8001518 <frontCorrection>
	}
}
 8001e8c:	bf00      	nop
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	20000388 	.word	0x20000388
 8001e98:	0800a3b0 	.word	0x0800a3b0
 8001e9c:	08009fb0 	.word	0x08009fb0

08001ea0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ea4:	f002 ff4e 	bl	8004d44 <HAL_Init>

  /* USER CODE BEGIN Init */
  Delay_Init();
 8001ea8:	f7ff fb6e 	bl	8001588 <Delay_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001eac:	f000 f90e 	bl	80020cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001eb0:	f000 fb3c 	bl	800252c <MX_GPIO_Init>
  MX_DMA_Init();
 8001eb4:	f000 fb1a 	bl	80024ec <MX_DMA_Init>
  MX_ADC1_Init();
 8001eb8:	f000 f944 	bl	8002144 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001ebc:	f000 fa6a 	bl	8002394 <MX_TIM3_Init>
  MX_TIM8_Init();
 8001ec0:	f000 fabc 	bl	800243c <MX_TIM8_Init>
  MX_TIM1_Init();
 8001ec4:	f000 f9be 	bl	8002244 <MX_TIM1_Init>
  MX_I2C1_Init();
 8001ec8:	f000 f98e 	bl	80021e8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001ecc:	213c      	movs	r1, #60	@ 0x3c
 8001ece:	486a      	ldr	r0, [pc, #424]	@ (8002078 <main+0x1d8>)
 8001ed0:	f006 fd46 	bl	8008960 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8001ed4:	213c      	movs	r1, #60	@ 0x3c
 8001ed6:	4869      	ldr	r0, [pc, #420]	@ (800207c <main+0x1dc>)
 8001ed8:	f006 fd42 	bl	8008960 <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001edc:	2100      	movs	r1, #0
 8001ede:	4868      	ldr	r0, [pc, #416]	@ (8002080 <main+0x1e0>)
 8001ee0:	f006 fbd0 	bl	8008684 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001ee4:	2104      	movs	r1, #4
 8001ee6:	4866      	ldr	r0, [pc, #408]	@ (8002080 <main+0x1e0>)
 8001ee8:	f006 fbcc 	bl	8008684 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001eec:	2108      	movs	r1, #8
 8001eee:	4864      	ldr	r0, [pc, #400]	@ (8002080 <main+0x1e0>)
 8001ef0:	f006 fbc8 	bl	8008684 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001ef4:	210c      	movs	r1, #12
 8001ef6:	4862      	ldr	r0, [pc, #392]	@ (8002080 <main+0x1e0>)
 8001ef8:	f006 fbc4 	bl	8008684 <HAL_TIM_PWM_Start>

  HAL_GPIO_WritePin(ForwardLeftEmitter_GPIO_Port, ForwardLeftEmitter_Pin, GPIO_PIN_SET);
 8001efc:	2201      	movs	r2, #1
 8001efe:	2180      	movs	r1, #128	@ 0x80
 8001f00:	4860      	ldr	r0, [pc, #384]	@ (8002084 <main+0x1e4>)
 8001f02:	f004 fc5e 	bl	80067c2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LeftEmitter_GPIO_Port, LeftEmitter_Pin, GPIO_PIN_SET);
 8001f06:	2201      	movs	r2, #1
 8001f08:	2110      	movs	r1, #16
 8001f0a:	485e      	ldr	r0, [pc, #376]	@ (8002084 <main+0x1e4>)
 8001f0c:	f004 fc59 	bl	80067c2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RightEmitter_GPIO_Port, RightEmitter_Pin, GPIO_PIN_SET);
 8001f10:	2201      	movs	r2, #1
 8001f12:	2104      	movs	r1, #4
 8001f14:	485b      	ldr	r0, [pc, #364]	@ (8002084 <main+0x1e4>)
 8001f16:	f004 fc54 	bl	80067c2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ForwardRightEmitter_GPIO_Port, ForwardRightEmitter_Pin, GPIO_PIN_SET);
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f20:	4859      	ldr	r0, [pc, #356]	@ (8002088 <main+0x1e8>)
 8001f22:	f004 fc4e 	bl	80067c2 <HAL_GPIO_WritePin>

  SSD1306_Init();
 8001f26:	f002 f9cb 	bl	80042c0 <SSD1306_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  S1 = HAL_GPIO_ReadPin(Button1_GPIO_Port, Switch1_Pin);
 8001f2a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f2e:	4856      	ldr	r0, [pc, #344]	@ (8002088 <main+0x1e8>)
 8001f30:	f004 fc30 	bl	8006794 <HAL_GPIO_ReadPin>
 8001f34:	4603      	mov	r3, r0
 8001f36:	461a      	mov	r2, r3
 8001f38:	4b54      	ldr	r3, [pc, #336]	@ (800208c <main+0x1ec>)
 8001f3a:	701a      	strb	r2, [r3, #0]
	  S2 = HAL_GPIO_ReadPin(Switch2_GPIO_Port, Switch2_Pin);
 8001f3c:	2104      	movs	r1, #4
 8001f3e:	4854      	ldr	r0, [pc, #336]	@ (8002090 <main+0x1f0>)
 8001f40:	f004 fc28 	bl	8006794 <HAL_GPIO_ReadPin>
 8001f44:	4603      	mov	r3, r0
 8001f46:	461a      	mov	r2, r3
 8001f48:	4b52      	ldr	r3, [pc, #328]	@ (8002094 <main+0x1f4>)
 8001f4a:	701a      	strb	r2, [r3, #0]
	  S3 = HAL_GPIO_ReadPin(Switch3_GPIO_Port, Switch3_Pin);
 8001f4c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f50:	484c      	ldr	r0, [pc, #304]	@ (8002084 <main+0x1e4>)
 8001f52:	f004 fc1f 	bl	8006794 <HAL_GPIO_ReadPin>
 8001f56:	4603      	mov	r3, r0
 8001f58:	461a      	mov	r2, r3
 8001f5a:	4b4f      	ldr	r3, [pc, #316]	@ (8002098 <main+0x1f8>)
 8001f5c:	701a      	strb	r2, [r3, #0]
	  S4 = HAL_GPIO_ReadPin(Switch4_GPIO_Port, Switch4_Pin);
 8001f5e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f62:	4849      	ldr	r0, [pc, #292]	@ (8002088 <main+0x1e8>)
 8001f64:	f004 fc16 	bl	8006794 <HAL_GPIO_ReadPin>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	4b4b      	ldr	r3, [pc, #300]	@ (800209c <main+0x1fc>)
 8001f6e:	701a      	strb	r2, [r3, #0]
	  B1 = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 8001f70:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f74:	4844      	ldr	r0, [pc, #272]	@ (8002088 <main+0x1e8>)
 8001f76:	f004 fc0d 	bl	8006794 <HAL_GPIO_ReadPin>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	4b48      	ldr	r3, [pc, #288]	@ (80020a0 <main+0x200>)
 8001f80:	701a      	strb	r2, [r3, #0]
	  B2 = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 8001f82:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001f86:	4840      	ldr	r0, [pc, #256]	@ (8002088 <main+0x1e8>)
 8001f88:	f004 fc04 	bl	8006794 <HAL_GPIO_ReadPin>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	461a      	mov	r2, r3
 8001f90:	4b44      	ldr	r3, [pc, #272]	@ (80020a4 <main+0x204>)
 8001f92:	701a      	strb	r2, [r3, #0]
//
//	  HAL_GPIO_WritePin(R_LED_GPIO_Port, R_LED_Pin, GPIO_PIN_SET);
//	  HAL_GPIO_WritePin(Y_LED_GPIO_Port, Y_LED_Pin, GPIO_PIN_SET);
//	  HAL_GPIO_WritePin(G_LED_GPIO_Port, G_LED_Pin, GPIO_PIN_SET);

	  forwardLeftIRvalue = readIR(IR_FORWARD_LEFT);
 8001f94:	2000      	movs	r0, #0
 8001f96:	f7ff fe03 	bl	8001ba0 <readIR>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	b21a      	sxth	r2, r3
 8001f9e:	4b42      	ldr	r3, [pc, #264]	@ (80020a8 <main+0x208>)
 8001fa0:	801a      	strh	r2, [r3, #0]
	  leftIRvalue = readIR(IR_LEFT);
 8001fa2:	2001      	movs	r0, #1
 8001fa4:	f7ff fdfc 	bl	8001ba0 <readIR>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	b21a      	sxth	r2, r3
 8001fac:	4b3f      	ldr	r3, [pc, #252]	@ (80020ac <main+0x20c>)
 8001fae:	801a      	strh	r2, [r3, #0]
	  rightIRvalue = readIR(IR_RIGHT);
 8001fb0:	2002      	movs	r0, #2
 8001fb2:	f7ff fdf5 	bl	8001ba0 <readIR>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	b21a      	sxth	r2, r3
 8001fba:	4b3d      	ldr	r3, [pc, #244]	@ (80020b0 <main+0x210>)
 8001fbc:	801a      	strh	r2, [r3, #0]
	  forwardRightIRvalue = readIR(IR_FORWARD_RIGHT);
 8001fbe:	2003      	movs	r0, #3
 8001fc0:	f7ff fdee 	bl	8001ba0 <readIR>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	b21a      	sxth	r2, r3
 8001fc8:	4b3a      	ldr	r3, [pc, #232]	@ (80020b4 <main+0x214>)
 8001fca:	801a      	strh	r2, [r3, #0]

	  if (B1 == GPIO_PIN_SET)
 8001fcc:	4b34      	ldr	r3, [pc, #208]	@ (80020a0 <main+0x200>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d130      	bne.n	8002036 <main+0x196>
	  {
		  if (irOffset_Set == 0) {
 8001fd4:	4b38      	ldr	r3, [pc, #224]	@ (80020b8 <main+0x218>)
 8001fd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d121      	bne.n	8002022 <main+0x182>
			  setIRGoals(readIR(IR_FORWARD_LEFT), readIR(IR_FORWARD_RIGHT), readIR(IR_LEFT), readIR(IR_RIGHT));
 8001fde:	2000      	movs	r0, #0
 8001fe0:	f7ff fdde 	bl	8001ba0 <readIR>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	b21c      	sxth	r4, r3
 8001fe8:	2003      	movs	r0, #3
 8001fea:	f7ff fdd9 	bl	8001ba0 <readIR>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	b21d      	sxth	r5, r3
 8001ff2:	2001      	movs	r0, #1
 8001ff4:	f7ff fdd4 	bl	8001ba0 <readIR>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	b21e      	sxth	r6, r3
 8001ffc:	2002      	movs	r0, #2
 8001ffe:	f7ff fdcf 	bl	8001ba0 <readIR>
 8002002:	4603      	mov	r3, r0
 8002004:	b21b      	sxth	r3, r3
 8002006:	4632      	mov	r2, r6
 8002008:	4629      	mov	r1, r5
 800200a:	4620      	mov	r0, r4
 800200c:	f000 fc64 	bl	80028d8 <setIRGoals>
			  irOffset_Set = 1;
 8002010:	4b29      	ldr	r3, [pc, #164]	@ (80020b8 <main+0x218>)
 8002012:	2201      	movs	r2, #1
 8002014:	801a      	strh	r2, [r3, #0]
			  gyroInit();
 8002016:	f7ff fc47 	bl	80018a8 <gyroInit>
			  displayFace(smiley);
 800201a:	4828      	ldr	r0, [pc, #160]	@ (80020bc <main+0x21c>)
 800201c:	f7ff feb6 	bl	8001d8c <displayFace>
 8002020:	e007      	b.n	8002032 <main+0x192>
		  }
		  else {
			  displayFace(angery);
 8002022:	4827      	ldr	r0, [pc, #156]	@ (80020c0 <main+0x220>)
 8002024:	f7ff feb2 	bl	8001d8c <displayFace>
			  max_forward++;
 8002028:	4b26      	ldr	r3, [pc, #152]	@ (80020c4 <main+0x224>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	3301      	adds	r3, #1
 800202e:	4a25      	ldr	r2, [pc, #148]	@ (80020c4 <main+0x224>)
 8002030:	6013      	str	r3, [r2, #0]
		  }

		  resetPID();
 8002032:	f001 fa53 	bl	80034dc <resetPID>
	  }

	  if (B2 == GPIO_PIN_SET)
 8002036:	4b1b      	ldr	r3, [pc, #108]	@ (80020a4 <main+0x204>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d104      	bne.n	8002048 <main+0x1a8>
	  {
		  initPID();
 800203e:	f000 fc07 	bl	8002850 <initPID>
//		  frontCorrection();
		  start_pressed = 1;
 8002042:	4b21      	ldr	r3, [pc, #132]	@ (80020c8 <main+0x228>)
 8002044:	2201      	movs	r2, #1
 8002046:	801a      	strh	r2, [r3, #0]
//		  move(1);
//		  turn(1);
//		  turn(1);
	  }

	  if (start_pressed)
 8002048:	4b1f      	ldr	r3, [pc, #124]	@ (80020c8 <main+0x228>)
 800204a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800204e:	2b00      	cmp	r3, #0
 8002050:	f43f af6b 	beq.w	8001f2a <main+0x8a>
	  {
		  resetPID();
 8002054:	f001 fa42 	bl	80034dc <resetPID>
		  move(0);
 8002058:	2000      	movs	r0, #0
 800205a:	f7ff f9c5 	bl	80013e8 <move>

		  if (S4 == GPIO_PIN_SET)
 800205e:	4b0f      	ldr	r3, [pc, #60]	@ (800209c <main+0x1fc>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d103      	bne.n	800206e <main+0x1ce>
			  solve(FLOODFILL);
 8002066:	2001      	movs	r0, #1
 8002068:	f7ff fea6 	bl	8001db8 <solve>
 800206c:	e75d      	b.n	8001f2a <main+0x8a>
		  else
			  solve(DEAD);
 800206e:	2000      	movs	r0, #0
 8002070:	f7ff fea2 	bl	8001db8 <solve>
	  S1 = HAL_GPIO_ReadPin(Button1_GPIO_Port, Switch1_Pin);
 8002074:	e759      	b.n	8001f2a <main+0x8a>
 8002076:	bf00      	nop
 8002078:	200002dc 	.word	0x200002dc
 800207c:	20000324 	.word	0x20000324
 8002080:	20000294 	.word	0x20000294
 8002084:	40020000 	.word	0x40020000
 8002088:	40020400 	.word	0x40020400
 800208c:	2000036c 	.word	0x2000036c
 8002090:	40020c00 	.word	0x40020c00
 8002094:	2000036d 	.word	0x2000036d
 8002098:	2000036e 	.word	0x2000036e
 800209c:	2000036f 	.word	0x2000036f
 80020a0:	20000370 	.word	0x20000370
 80020a4:	20000371 	.word	0x20000371
 80020a8:	20000374 	.word	0x20000374
 80020ac:	20000376 	.word	0x20000376
 80020b0:	20000378 	.word	0x20000378
 80020b4:	2000037a 	.word	0x2000037a
 80020b8:	2000037c 	.word	0x2000037c
 80020bc:	080097b0 	.word	0x080097b0
 80020c0:	08009bb0 	.word	0x08009bb0
 80020c4:	20000388 	.word	0x20000388
 80020c8:	20000372 	.word	0x20000372

080020cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b092      	sub	sp, #72	@ 0x48
 80020d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020d2:	f107 0318 	add.w	r3, r7, #24
 80020d6:	2230      	movs	r2, #48	@ 0x30
 80020d8:	2100      	movs	r1, #0
 80020da:	4618      	mov	r0, r3
 80020dc:	f007 fad0 	bl	8009680 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020e0:	1d3b      	adds	r3, r7, #4
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	605a      	str	r2, [r3, #4]
 80020e8:	609a      	str	r2, [r3, #8]
 80020ea:	60da      	str	r2, [r3, #12]
 80020ec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020ee:	2302      	movs	r3, #2
 80020f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020f2:	2301      	movs	r3, #1
 80020f4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020f6:	2310      	movs	r3, #16
 80020f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80020fa:	2300      	movs	r3, #0
 80020fc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020fe:	f107 0318 	add.w	r3, r7, #24
 8002102:	4618      	mov	r0, r3
 8002104:	f005 fe3c 	bl	8007d80 <HAL_RCC_OscConfig>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800210e:	f000 fae3 	bl	80026d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002112:	230f      	movs	r3, #15
 8002114:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002116:	2300      	movs	r3, #0
 8002118:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800211a:	2300      	movs	r3, #0
 800211c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800211e:	2300      	movs	r3, #0
 8002120:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002122:	2300      	movs	r3, #0
 8002124:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002126:	1d3b      	adds	r3, r7, #4
 8002128:	2100      	movs	r1, #0
 800212a:	4618      	mov	r0, r3
 800212c:	f006 f87c 	bl	8008228 <HAL_RCC_ClockConfig>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002136:	f000 facf 	bl	80026d8 <Error_Handler>
  }
}
 800213a:	bf00      	nop
 800213c:	3748      	adds	r7, #72	@ 0x48
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
	...

08002144 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800214a:	463b      	mov	r3, r7
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	605a      	str	r2, [r3, #4]
 8002152:	609a      	str	r2, [r3, #8]
 8002154:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002156:	4b21      	ldr	r3, [pc, #132]	@ (80021dc <MX_ADC1_Init+0x98>)
 8002158:	4a21      	ldr	r2, [pc, #132]	@ (80021e0 <MX_ADC1_Init+0x9c>)
 800215a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800215c:	4b1f      	ldr	r3, [pc, #124]	@ (80021dc <MX_ADC1_Init+0x98>)
 800215e:	2200      	movs	r2, #0
 8002160:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002162:	4b1e      	ldr	r3, [pc, #120]	@ (80021dc <MX_ADC1_Init+0x98>)
 8002164:	2200      	movs	r2, #0
 8002166:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002168:	4b1c      	ldr	r3, [pc, #112]	@ (80021dc <MX_ADC1_Init+0x98>)
 800216a:	2200      	movs	r2, #0
 800216c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800216e:	4b1b      	ldr	r3, [pc, #108]	@ (80021dc <MX_ADC1_Init+0x98>)
 8002170:	2201      	movs	r2, #1
 8002172:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002174:	4b19      	ldr	r3, [pc, #100]	@ (80021dc <MX_ADC1_Init+0x98>)
 8002176:	2200      	movs	r2, #0
 8002178:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800217c:	4b17      	ldr	r3, [pc, #92]	@ (80021dc <MX_ADC1_Init+0x98>)
 800217e:	2200      	movs	r2, #0
 8002180:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002182:	4b16      	ldr	r3, [pc, #88]	@ (80021dc <MX_ADC1_Init+0x98>)
 8002184:	4a17      	ldr	r2, [pc, #92]	@ (80021e4 <MX_ADC1_Init+0xa0>)
 8002186:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002188:	4b14      	ldr	r3, [pc, #80]	@ (80021dc <MX_ADC1_Init+0x98>)
 800218a:	2200      	movs	r2, #0
 800218c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800218e:	4b13      	ldr	r3, [pc, #76]	@ (80021dc <MX_ADC1_Init+0x98>)
 8002190:	2201      	movs	r2, #1
 8002192:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002194:	4b11      	ldr	r3, [pc, #68]	@ (80021dc <MX_ADC1_Init+0x98>)
 8002196:	2201      	movs	r2, #1
 8002198:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800219c:	4b0f      	ldr	r3, [pc, #60]	@ (80021dc <MX_ADC1_Init+0x98>)
 800219e:	2201      	movs	r2, #1
 80021a0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80021a2:	480e      	ldr	r0, [pc, #56]	@ (80021dc <MX_ADC1_Init+0x98>)
 80021a4:	f002 fe3c 	bl	8004e20 <HAL_ADC_Init>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80021ae:	f000 fa93 	bl	80026d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80021b2:	2305      	movs	r3, #5
 80021b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80021b6:	2301      	movs	r3, #1
 80021b8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80021ba:	2300      	movs	r3, #0
 80021bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021be:	463b      	mov	r3, r7
 80021c0:	4619      	mov	r1, r3
 80021c2:	4806      	ldr	r0, [pc, #24]	@ (80021dc <MX_ADC1_Init+0x98>)
 80021c4:	f002 ffb2 	bl	800512c <HAL_ADC_ConfigChannel>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80021ce:	f000 fa83 	bl	80026d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80021d2:	bf00      	nop
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	20000198 	.word	0x20000198
 80021e0:	40012000 	.word	0x40012000
 80021e4:	0f000001 	.word	0x0f000001

080021e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80021ec:	4b12      	ldr	r3, [pc, #72]	@ (8002238 <MX_I2C1_Init+0x50>)
 80021ee:	4a13      	ldr	r2, [pc, #76]	@ (800223c <MX_I2C1_Init+0x54>)
 80021f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80021f2:	4b11      	ldr	r3, [pc, #68]	@ (8002238 <MX_I2C1_Init+0x50>)
 80021f4:	4a12      	ldr	r2, [pc, #72]	@ (8002240 <MX_I2C1_Init+0x58>)
 80021f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002238 <MX_I2C1_Init+0x50>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80021fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002238 <MX_I2C1_Init+0x50>)
 8002200:	2200      	movs	r2, #0
 8002202:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002204:	4b0c      	ldr	r3, [pc, #48]	@ (8002238 <MX_I2C1_Init+0x50>)
 8002206:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800220a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800220c:	4b0a      	ldr	r3, [pc, #40]	@ (8002238 <MX_I2C1_Init+0x50>)
 800220e:	2200      	movs	r2, #0
 8002210:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002212:	4b09      	ldr	r3, [pc, #36]	@ (8002238 <MX_I2C1_Init+0x50>)
 8002214:	2200      	movs	r2, #0
 8002216:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002218:	4b07      	ldr	r3, [pc, #28]	@ (8002238 <MX_I2C1_Init+0x50>)
 800221a:	2200      	movs	r2, #0
 800221c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800221e:	4b06      	ldr	r3, [pc, #24]	@ (8002238 <MX_I2C1_Init+0x50>)
 8002220:	2200      	movs	r2, #0
 8002222:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002224:	4804      	ldr	r0, [pc, #16]	@ (8002238 <MX_I2C1_Init+0x50>)
 8002226:	f004 fae5 	bl	80067f4 <HAL_I2C_Init>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002230:	f000 fa52 	bl	80026d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002234:	bf00      	nop
 8002236:	bd80      	pop	{r7, pc}
 8002238:	20000240 	.word	0x20000240
 800223c:	40005400 	.word	0x40005400
 8002240:	00061a80 	.word	0x00061a80

08002244 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b092      	sub	sp, #72	@ 0x48
 8002248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800224a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002254:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	605a      	str	r2, [r3, #4]
 800225e:	609a      	str	r2, [r3, #8]
 8002260:	60da      	str	r2, [r3, #12]
 8002262:	611a      	str	r2, [r3, #16]
 8002264:	615a      	str	r2, [r3, #20]
 8002266:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002268:	1d3b      	adds	r3, r7, #4
 800226a:	2220      	movs	r2, #32
 800226c:	2100      	movs	r1, #0
 800226e:	4618      	mov	r0, r3
 8002270:	f007 fa06 	bl	8009680 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002274:	4b45      	ldr	r3, [pc, #276]	@ (800238c <MX_TIM1_Init+0x148>)
 8002276:	4a46      	ldr	r2, [pc, #280]	@ (8002390 <MX_TIM1_Init+0x14c>)
 8002278:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800227a:	4b44      	ldr	r3, [pc, #272]	@ (800238c <MX_TIM1_Init+0x148>)
 800227c:	2200      	movs	r2, #0
 800227e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002280:	4b42      	ldr	r3, [pc, #264]	@ (800238c <MX_TIM1_Init+0x148>)
 8002282:	2200      	movs	r2, #0
 8002284:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3199;
 8002286:	4b41      	ldr	r3, [pc, #260]	@ (800238c <MX_TIM1_Init+0x148>)
 8002288:	f640 427f 	movw	r2, #3199	@ 0xc7f
 800228c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800228e:	4b3f      	ldr	r3, [pc, #252]	@ (800238c <MX_TIM1_Init+0x148>)
 8002290:	2200      	movs	r2, #0
 8002292:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002294:	4b3d      	ldr	r3, [pc, #244]	@ (800238c <MX_TIM1_Init+0x148>)
 8002296:	2200      	movs	r2, #0
 8002298:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800229a:	4b3c      	ldr	r3, [pc, #240]	@ (800238c <MX_TIM1_Init+0x148>)
 800229c:	2200      	movs	r2, #0
 800229e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80022a0:	483a      	ldr	r0, [pc, #232]	@ (800238c <MX_TIM1_Init+0x148>)
 80022a2:	f006 f99f 	bl	80085e4 <HAL_TIM_PWM_Init>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80022ac:	f000 fa14 	bl	80026d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022b0:	2300      	movs	r3, #0
 80022b2:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022b4:	2300      	movs	r3, #0
 80022b6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022b8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80022bc:	4619      	mov	r1, r3
 80022be:	4833      	ldr	r0, [pc, #204]	@ (800238c <MX_TIM1_Init+0x148>)
 80022c0:	f007 f842 	bl	8009348 <HAL_TIMEx_MasterConfigSynchronization>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80022ca:	f000 fa05 	bl	80026d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022ce:	2360      	movs	r3, #96	@ 0x60
 80022d0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80022d2:	2300      	movs	r3, #0
 80022d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022d6:	2300      	movs	r3, #0
 80022d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80022da:	2300      	movs	r3, #0
 80022dc:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022de:	2300      	movs	r3, #0
 80022e0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80022e2:	2300      	movs	r3, #0
 80022e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80022e6:	2300      	movs	r3, #0
 80022e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022ee:	2200      	movs	r2, #0
 80022f0:	4619      	mov	r1, r3
 80022f2:	4826      	ldr	r0, [pc, #152]	@ (800238c <MX_TIM1_Init+0x148>)
 80022f4:	f006 fcca 	bl	8008c8c <HAL_TIM_PWM_ConfigChannel>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80022fe:	f000 f9eb 	bl	80026d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002302:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002306:	2204      	movs	r2, #4
 8002308:	4619      	mov	r1, r3
 800230a:	4820      	ldr	r0, [pc, #128]	@ (800238c <MX_TIM1_Init+0x148>)
 800230c:	f006 fcbe 	bl	8008c8c <HAL_TIM_PWM_ConfigChannel>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8002316:	f000 f9df 	bl	80026d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800231a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800231e:	2208      	movs	r2, #8
 8002320:	4619      	mov	r1, r3
 8002322:	481a      	ldr	r0, [pc, #104]	@ (800238c <MX_TIM1_Init+0x148>)
 8002324:	f006 fcb2 	bl	8008c8c <HAL_TIM_PWM_ConfigChannel>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800232e:	f000 f9d3 	bl	80026d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002332:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002336:	220c      	movs	r2, #12
 8002338:	4619      	mov	r1, r3
 800233a:	4814      	ldr	r0, [pc, #80]	@ (800238c <MX_TIM1_Init+0x148>)
 800233c:	f006 fca6 	bl	8008c8c <HAL_TIM_PWM_ConfigChannel>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8002346:	f000 f9c7 	bl	80026d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800234a:	2300      	movs	r3, #0
 800234c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800234e:	2300      	movs	r3, #0
 8002350:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002352:	2300      	movs	r3, #0
 8002354:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002356:	2300      	movs	r3, #0
 8002358:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800235a:	2300      	movs	r3, #0
 800235c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800235e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002362:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002364:	2300      	movs	r3, #0
 8002366:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002368:	1d3b      	adds	r3, r7, #4
 800236a:	4619      	mov	r1, r3
 800236c:	4807      	ldr	r0, [pc, #28]	@ (800238c <MX_TIM1_Init+0x148>)
 800236e:	f007 f865 	bl	800943c <HAL_TIMEx_ConfigBreakDeadTime>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8002378:	f000 f9ae 	bl	80026d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800237c:	4803      	ldr	r0, [pc, #12]	@ (800238c <MX_TIM1_Init+0x148>)
 800237e:	f002 fb51 	bl	8004a24 <HAL_TIM_MspPostInit>

}
 8002382:	bf00      	nop
 8002384:	3748      	adds	r7, #72	@ 0x48
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	20000294 	.word	0x20000294
 8002390:	40010000 	.word	0x40010000

08002394 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b08c      	sub	sp, #48	@ 0x30
 8002398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800239a:	f107 030c 	add.w	r3, r7, #12
 800239e:	2224      	movs	r2, #36	@ 0x24
 80023a0:	2100      	movs	r1, #0
 80023a2:	4618      	mov	r0, r3
 80023a4:	f007 f96c 	bl	8009680 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023a8:	1d3b      	adds	r3, r7, #4
 80023aa:	2200      	movs	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80023b0:	4b20      	ldr	r3, [pc, #128]	@ (8002434 <MX_TIM3_Init+0xa0>)
 80023b2:	4a21      	ldr	r2, [pc, #132]	@ (8002438 <MX_TIM3_Init+0xa4>)
 80023b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80023b6:	4b1f      	ldr	r3, [pc, #124]	@ (8002434 <MX_TIM3_Init+0xa0>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002434 <MX_TIM3_Init+0xa0>)
 80023be:	2200      	movs	r2, #0
 80023c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80023c2:	4b1c      	ldr	r3, [pc, #112]	@ (8002434 <MX_TIM3_Init+0xa0>)
 80023c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80023c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002434 <MX_TIM3_Init+0xa0>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023d0:	4b18      	ldr	r3, [pc, #96]	@ (8002434 <MX_TIM3_Init+0xa0>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80023d6:	2303      	movs	r3, #3
 80023d8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80023da:	2300      	movs	r3, #0
 80023dc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80023de:	2301      	movs	r3, #1
 80023e0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80023e2:	2300      	movs	r3, #0
 80023e4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80023e6:	2300      	movs	r3, #0
 80023e8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80023ea:	2300      	movs	r3, #0
 80023ec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80023ee:	2301      	movs	r3, #1
 80023f0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80023f2:	2300      	movs	r3, #0
 80023f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80023f6:	2300      	movs	r3, #0
 80023f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80023fa:	f107 030c 	add.w	r3, r7, #12
 80023fe:	4619      	mov	r1, r3
 8002400:	480c      	ldr	r0, [pc, #48]	@ (8002434 <MX_TIM3_Init+0xa0>)
 8002402:	f006 fa07 	bl	8008814 <HAL_TIM_Encoder_Init>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800240c:	f000 f964 	bl	80026d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002410:	2300      	movs	r3, #0
 8002412:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002414:	2300      	movs	r3, #0
 8002416:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002418:	1d3b      	adds	r3, r7, #4
 800241a:	4619      	mov	r1, r3
 800241c:	4805      	ldr	r0, [pc, #20]	@ (8002434 <MX_TIM3_Init+0xa0>)
 800241e:	f006 ff93 	bl	8009348 <HAL_TIMEx_MasterConfigSynchronization>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002428:	f000 f956 	bl	80026d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800242c:	bf00      	nop
 800242e:	3730      	adds	r7, #48	@ 0x30
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	200002dc 	.word	0x200002dc
 8002438:	40000400 	.word	0x40000400

0800243c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b08c      	sub	sp, #48	@ 0x30
 8002440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002442:	f107 030c 	add.w	r3, r7, #12
 8002446:	2224      	movs	r2, #36	@ 0x24
 8002448:	2100      	movs	r1, #0
 800244a:	4618      	mov	r0, r3
 800244c:	f007 f918 	bl	8009680 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002450:	1d3b      	adds	r3, r7, #4
 8002452:	2200      	movs	r2, #0
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002458:	4b22      	ldr	r3, [pc, #136]	@ (80024e4 <MX_TIM8_Init+0xa8>)
 800245a:	4a23      	ldr	r2, [pc, #140]	@ (80024e8 <MX_TIM8_Init+0xac>)
 800245c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800245e:	4b21      	ldr	r3, [pc, #132]	@ (80024e4 <MX_TIM8_Init+0xa8>)
 8002460:	2200      	movs	r2, #0
 8002462:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002464:	4b1f      	ldr	r3, [pc, #124]	@ (80024e4 <MX_TIM8_Init+0xa8>)
 8002466:	2200      	movs	r2, #0
 8002468:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800246a:	4b1e      	ldr	r3, [pc, #120]	@ (80024e4 <MX_TIM8_Init+0xa8>)
 800246c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002470:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002472:	4b1c      	ldr	r3, [pc, #112]	@ (80024e4 <MX_TIM8_Init+0xa8>)
 8002474:	2200      	movs	r2, #0
 8002476:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002478:	4b1a      	ldr	r3, [pc, #104]	@ (80024e4 <MX_TIM8_Init+0xa8>)
 800247a:	2200      	movs	r2, #0
 800247c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800247e:	4b19      	ldr	r3, [pc, #100]	@ (80024e4 <MX_TIM8_Init+0xa8>)
 8002480:	2200      	movs	r2, #0
 8002482:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002484:	2303      	movs	r3, #3
 8002486:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002488:	2300      	movs	r3, #0
 800248a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800248c:	2301      	movs	r3, #1
 800248e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002490:	2300      	movs	r3, #0
 8002492:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002494:	2300      	movs	r3, #0
 8002496:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002498:	2300      	movs	r3, #0
 800249a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800249c:	2301      	movs	r3, #1
 800249e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80024a0:	2300      	movs	r3, #0
 80024a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80024a4:	2300      	movs	r3, #0
 80024a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80024a8:	f107 030c 	add.w	r3, r7, #12
 80024ac:	4619      	mov	r1, r3
 80024ae:	480d      	ldr	r0, [pc, #52]	@ (80024e4 <MX_TIM8_Init+0xa8>)
 80024b0:	f006 f9b0 	bl	8008814 <HAL_TIM_Encoder_Init>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80024ba:	f000 f90d 	bl	80026d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024be:	2300      	movs	r3, #0
 80024c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024c2:	2300      	movs	r3, #0
 80024c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80024c6:	1d3b      	adds	r3, r7, #4
 80024c8:	4619      	mov	r1, r3
 80024ca:	4806      	ldr	r0, [pc, #24]	@ (80024e4 <MX_TIM8_Init+0xa8>)
 80024cc:	f006 ff3c 	bl	8009348 <HAL_TIMEx_MasterConfigSynchronization>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80024d6:	f000 f8ff 	bl	80026d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80024da:	bf00      	nop
 80024dc:	3730      	adds	r7, #48	@ 0x30
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	20000324 	.word	0x20000324
 80024e8:	40010400 	.word	0x40010400

080024ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	607b      	str	r3, [r7, #4]
 80024f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002528 <MX_DMA_Init+0x3c>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fa:	4a0b      	ldr	r2, [pc, #44]	@ (8002528 <MX_DMA_Init+0x3c>)
 80024fc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002500:	6313      	str	r3, [r2, #48]	@ 0x30
 8002502:	4b09      	ldr	r3, [pc, #36]	@ (8002528 <MX_DMA_Init+0x3c>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002506:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800250a:	607b      	str	r3, [r7, #4]
 800250c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800250e:	2200      	movs	r2, #0
 8002510:	2100      	movs	r1, #0
 8002512:	2038      	movs	r0, #56	@ 0x38
 8002514:	f003 f989 	bl	800582a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002518:	2038      	movs	r0, #56	@ 0x38
 800251a:	f003 f9a2 	bl	8005862 <HAL_NVIC_EnableIRQ>

}
 800251e:	bf00      	nop
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40023800 	.word	0x40023800

0800252c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b08a      	sub	sp, #40	@ 0x28
 8002530:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002532:	f107 0314 	add.w	r3, r7, #20
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	605a      	str	r2, [r3, #4]
 800253c:	609a      	str	r2, [r3, #8]
 800253e:	60da      	str	r2, [r3, #12]
 8002540:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	613b      	str	r3, [r7, #16]
 8002546:	4b55      	ldr	r3, [pc, #340]	@ (800269c <MX_GPIO_Init+0x170>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254a:	4a54      	ldr	r2, [pc, #336]	@ (800269c <MX_GPIO_Init+0x170>)
 800254c:	f043 0304 	orr.w	r3, r3, #4
 8002550:	6313      	str	r3, [r2, #48]	@ 0x30
 8002552:	4b52      	ldr	r3, [pc, #328]	@ (800269c <MX_GPIO_Init+0x170>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002556:	f003 0304 	and.w	r3, r3, #4
 800255a:	613b      	str	r3, [r7, #16]
 800255c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	4b4e      	ldr	r3, [pc, #312]	@ (800269c <MX_GPIO_Init+0x170>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002566:	4a4d      	ldr	r2, [pc, #308]	@ (800269c <MX_GPIO_Init+0x170>)
 8002568:	f043 0301 	orr.w	r3, r3, #1
 800256c:	6313      	str	r3, [r2, #48]	@ 0x30
 800256e:	4b4b      	ldr	r3, [pc, #300]	@ (800269c <MX_GPIO_Init+0x170>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	60bb      	str	r3, [r7, #8]
 800257e:	4b47      	ldr	r3, [pc, #284]	@ (800269c <MX_GPIO_Init+0x170>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002582:	4a46      	ldr	r2, [pc, #280]	@ (800269c <MX_GPIO_Init+0x170>)
 8002584:	f043 0302 	orr.w	r3, r3, #2
 8002588:	6313      	str	r3, [r2, #48]	@ 0x30
 800258a:	4b44      	ldr	r3, [pc, #272]	@ (800269c <MX_GPIO_Init+0x170>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	60bb      	str	r3, [r7, #8]
 8002594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	607b      	str	r3, [r7, #4]
 800259a:	4b40      	ldr	r3, [pc, #256]	@ (800269c <MX_GPIO_Init+0x170>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259e:	4a3f      	ldr	r2, [pc, #252]	@ (800269c <MX_GPIO_Init+0x170>)
 80025a0:	f043 0308 	orr.w	r3, r3, #8
 80025a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025a6:	4b3d      	ldr	r3, [pc, #244]	@ (800269c <MX_GPIO_Init+0x170>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025aa:	f003 0308 	and.w	r3, r3, #8
 80025ae:	607b      	str	r3, [r7, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, G_LED_Pin|Y_LED_Pin|R_LED_Pin, GPIO_PIN_RESET);
 80025b2:	2200      	movs	r2, #0
 80025b4:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 80025b8:	4839      	ldr	r0, [pc, #228]	@ (80026a0 <MX_GPIO_Init+0x174>)
 80025ba:	f004 f902 	bl	80067c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RightEmitter_Pin|LeftEmitter_Pin|ForwardLeftEmitter_Pin, GPIO_PIN_RESET);
 80025be:	2200      	movs	r2, #0
 80025c0:	2194      	movs	r1, #148	@ 0x94
 80025c2:	4838      	ldr	r0, [pc, #224]	@ (80026a4 <MX_GPIO_Init+0x178>)
 80025c4:	f004 f8fd 	bl	80067c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ForwardRightEmitter_GPIO_Port, ForwardRightEmitter_Pin, GPIO_PIN_RESET);
 80025c8:	2200      	movs	r2, #0
 80025ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80025ce:	4836      	ldr	r0, [pc, #216]	@ (80026a8 <MX_GPIO_Init+0x17c>)
 80025d0:	f004 f8f7 	bl	80067c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : G_LED_Pin Y_LED_Pin R_LED_Pin */
  GPIO_InitStruct.Pin = G_LED_Pin|Y_LED_Pin|R_LED_Pin;
 80025d4:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80025d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025da:	2301      	movs	r3, #1
 80025dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025de:	2300      	movs	r3, #0
 80025e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e2:	2300      	movs	r3, #0
 80025e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025e6:	f107 0314 	add.w	r3, r7, #20
 80025ea:	4619      	mov	r1, r3
 80025ec:	482c      	ldr	r0, [pc, #176]	@ (80026a0 <MX_GPIO_Init+0x174>)
 80025ee:	f003 ff33 	bl	8006458 <HAL_GPIO_Init>

  /*Configure GPIO pins : RightEmitter_Pin LeftEmitter_Pin ForwardLeftEmitter_Pin */
  GPIO_InitStruct.Pin = RightEmitter_Pin|LeftEmitter_Pin|ForwardLeftEmitter_Pin;
 80025f2:	2394      	movs	r3, #148	@ 0x94
 80025f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025f6:	2301      	movs	r3, #1
 80025f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fa:	2300      	movs	r3, #0
 80025fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fe:	2300      	movs	r3, #0
 8002600:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002602:	f107 0314 	add.w	r3, r7, #20
 8002606:	4619      	mov	r1, r3
 8002608:	4826      	ldr	r0, [pc, #152]	@ (80026a4 <MX_GPIO_Init+0x178>)
 800260a:	f003 ff25 	bl	8006458 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button2_Pin Button1_Pin Switch4_Pin */
  GPIO_InitStruct.Pin = Button2_Pin|Button1_Pin|Switch4_Pin;
 800260e:	f44f 4341 	mov.w	r3, #49408	@ 0xc100
 8002612:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002614:	2300      	movs	r3, #0
 8002616:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002618:	2300      	movs	r3, #0
 800261a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800261c:	f107 0314 	add.w	r3, r7, #20
 8002620:	4619      	mov	r1, r3
 8002622:	4821      	ldr	r0, [pc, #132]	@ (80026a8 <MX_GPIO_Init+0x17c>)
 8002624:	f003 ff18 	bl	8006458 <HAL_GPIO_Init>

  /*Configure GPIO pin : Switch3_Pin */
  GPIO_InitStruct.Pin = Switch3_Pin;
 8002628:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800262c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800262e:	2300      	movs	r3, #0
 8002630:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002632:	2300      	movs	r3, #0
 8002634:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Switch3_GPIO_Port, &GPIO_InitStruct);
 8002636:	f107 0314 	add.w	r3, r7, #20
 800263a:	4619      	mov	r1, r3
 800263c:	4819      	ldr	r0, [pc, #100]	@ (80026a4 <MX_GPIO_Init+0x178>)
 800263e:	f003 ff0b 	bl	8006458 <HAL_GPIO_Init>

  /*Configure GPIO pin : Switch1_Pin */
  GPIO_InitStruct.Pin = Switch1_Pin;
 8002642:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002646:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002648:	2300      	movs	r3, #0
 800264a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264c:	2300      	movs	r3, #0
 800264e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Switch1_GPIO_Port, &GPIO_InitStruct);
 8002650:	f107 0314 	add.w	r3, r7, #20
 8002654:	4619      	mov	r1, r3
 8002656:	4812      	ldr	r0, [pc, #72]	@ (80026a0 <MX_GPIO_Init+0x174>)
 8002658:	f003 fefe 	bl	8006458 <HAL_GPIO_Init>

  /*Configure GPIO pin : Switch2_Pin */
  GPIO_InitStruct.Pin = Switch2_Pin;
 800265c:	2304      	movs	r3, #4
 800265e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002660:	2300      	movs	r3, #0
 8002662:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002664:	2300      	movs	r3, #0
 8002666:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Switch2_GPIO_Port, &GPIO_InitStruct);
 8002668:	f107 0314 	add.w	r3, r7, #20
 800266c:	4619      	mov	r1, r3
 800266e:	480f      	ldr	r0, [pc, #60]	@ (80026ac <MX_GPIO_Init+0x180>)
 8002670:	f003 fef2 	bl	8006458 <HAL_GPIO_Init>

  /*Configure GPIO pin : ForwardRightEmitter_Pin */
  GPIO_InitStruct.Pin = ForwardRightEmitter_Pin;
 8002674:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002678:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800267a:	2301      	movs	r3, #1
 800267c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267e:	2300      	movs	r3, #0
 8002680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002682:	2300      	movs	r3, #0
 8002684:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ForwardRightEmitter_GPIO_Port, &GPIO_InitStruct);
 8002686:	f107 0314 	add.w	r3, r7, #20
 800268a:	4619      	mov	r1, r3
 800268c:	4806      	ldr	r0, [pc, #24]	@ (80026a8 <MX_GPIO_Init+0x17c>)
 800268e:	f003 fee3 	bl	8006458 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002692:	bf00      	nop
 8002694:	3728      	adds	r7, #40	@ 0x28
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	40023800 	.word	0x40023800
 80026a0:	40020800 	.word	0x40020800
 80026a4:	40020000 	.word	0x40020000
 80026a8:	40020400 	.word	0x40020400
 80026ac:	40020c00 	.word	0x40020c00

080026b0 <Get_HADC1_Ptr>:

/* USER CODE BEGIN 4 */
ADC_HandleTypeDef* Get_HADC1_Ptr(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
	return &hadc1;
 80026b4:	4b02      	ldr	r3, [pc, #8]	@ (80026c0 <Get_HADC1_Ptr+0x10>)
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bc80      	pop	{r7}
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	20000198 	.word	0x20000198

080026c4 <Get_I2C1_Ptr>:

I2C_HandleTypeDef* Get_I2C1_Ptr(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
	return &hi2c1;
 80026c8:	4b02      	ldr	r3, [pc, #8]	@ (80026d4 <Get_I2C1_Ptr+0x10>)
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bc80      	pop	{r7}
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	20000240 	.word	0x20000240

080026d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026dc:	b672      	cpsid	i
}
 80026de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026e0:	bf00      	nop
 80026e2:	e7fd      	b.n	80026e0 <Error_Handler+0x8>
 80026e4:	0000      	movs	r0, r0
	...

080026e8 <limitPWM>:
//#include "pid.h"
//
//extern float velocity_left;
//extern float velocity_right;

float limitPWM(float pwm) {
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
	if (pwm > PWM_MAX)
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f7fd fecd 	bl	8000490 <__aeabi_f2d>
 80026f6:	a30e      	add	r3, pc, #56	@ (adr r3, 8002730 <limitPWM+0x48>)
 80026f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fc:	f7fe f9b0 	bl	8000a60 <__aeabi_dcmpgt>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <limitPWM+0x22>
		return PWM_MAX;
 8002706:	4b0e      	ldr	r3, [pc, #56]	@ (8002740 <limitPWM+0x58>)
 8002708:	e00d      	b.n	8002726 <limitPWM+0x3e>
	else if (pwm < -PWM_MAX)
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7fd fec0 	bl	8000490 <__aeabi_f2d>
 8002710:	a309      	add	r3, pc, #36	@ (adr r3, 8002738 <limitPWM+0x50>)
 8002712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002716:	f7fe f985 	bl	8000a24 <__aeabi_dcmplt>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <limitPWM+0x3c>
		return -PWM_MAX;
 8002720:	4b08      	ldr	r3, [pc, #32]	@ (8002744 <limitPWM+0x5c>)
 8002722:	e000      	b.n	8002726 <limitPWM+0x3e>
	else
		return pwm;
 8002724:	687b      	ldr	r3, [r7, #4]
}
 8002726:	4618      	mov	r0, r3
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	66666666 	.word	0x66666666
 8002734:	3fee6666 	.word	0x3fee6666
 8002738:	66666666 	.word	0x66666666
 800273c:	bfee6666 	.word	0xbfee6666
 8002740:	3f733333 	.word	0x3f733333
 8002744:	bf733333 	.word	0xbf733333

08002748 <setMotorLPWM>:

void setMotorLPWM(float pwm) {
 8002748:	b590      	push	{r4, r7, lr}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
	if (pwm >= 0)
 8002750:	f04f 0100 	mov.w	r1, #0
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f7fe fc9d 	bl	8001094 <__aeabi_fcmpge>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d012      	beq.n	8002786 <setMotorLPWM+0x3e>
	{
		TIM1->CCR1 = 0;
 8002760:	4b15      	ldr	r3, [pc, #84]	@ (80027b8 <setMotorLPWM+0x70>)
 8002762:	2200      	movs	r2, #0
 8002764:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM1->CCR2 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7ff ffbe 	bl	80026e8 <limitPWM>
 800276c:	4603      	mov	r3, r0
 800276e:	4913      	ldr	r1, [pc, #76]	@ (80027bc <setMotorLPWM+0x74>)
 8002770:	4618      	mov	r0, r3
 8002772:	f7fe fadd 	bl	8000d30 <__aeabi_fmul>
 8002776:	4603      	mov	r3, r0
 8002778:	4c0f      	ldr	r4, [pc, #60]	@ (80027b8 <setMotorLPWM+0x70>)
 800277a:	4618      	mov	r0, r3
 800277c:	f7fe fc9e 	bl	80010bc <__aeabi_f2uiz>
 8002780:	4603      	mov	r3, r0
 8002782:	63a3      	str	r3, [r4, #56]	@ 0x38
	{
		TIM1->CCR2 = 0;
		TIM1->CCR1 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
	}

}
 8002784:	e013      	b.n	80027ae <setMotorLPWM+0x66>
		TIM1->CCR2 = 0;
 8002786:	4b0c      	ldr	r3, [pc, #48]	@ (80027b8 <setMotorLPWM+0x70>)
 8002788:	2200      	movs	r2, #0
 800278a:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM1->CCR1 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f7ff ffab 	bl	80026e8 <limitPWM>
 8002792:	4603      	mov	r3, r0
 8002794:	4909      	ldr	r1, [pc, #36]	@ (80027bc <setMotorLPWM+0x74>)
 8002796:	4618      	mov	r0, r3
 8002798:	f7fe faca 	bl	8000d30 <__aeabi_fmul>
 800279c:	4603      	mov	r3, r0
 800279e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80027a2:	4c05      	ldr	r4, [pc, #20]	@ (80027b8 <setMotorLPWM+0x70>)
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7fe fc89 	bl	80010bc <__aeabi_f2uiz>
 80027aa:	4603      	mov	r3, r0
 80027ac:	6363      	str	r3, [r4, #52]	@ 0x34
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd90      	pop	{r4, r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40010000 	.word	0x40010000
 80027bc:	4547f000 	.word	0x4547f000

080027c0 <setMotorRPWM>:

void setMotorRPWM(float pwm) {
 80027c0:	b590      	push	{r4, r7, lr}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
	if (pwm >= 0)
 80027c8:	f04f 0100 	mov.w	r1, #0
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f7fe fc61 	bl	8001094 <__aeabi_fcmpge>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d012      	beq.n	80027fe <setMotorRPWM+0x3e>
	{
		TIM1->CCR4 = 0;
 80027d8:	4b15      	ldr	r3, [pc, #84]	@ (8002830 <setMotorRPWM+0x70>)
 80027da:	2200      	movs	r2, #0
 80027dc:	641a      	str	r2, [r3, #64]	@ 0x40
		TIM1->CCR3 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7ff ff82 	bl	80026e8 <limitPWM>
 80027e4:	4603      	mov	r3, r0
 80027e6:	4913      	ldr	r1, [pc, #76]	@ (8002834 <setMotorRPWM+0x74>)
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fe faa1 	bl	8000d30 <__aeabi_fmul>
 80027ee:	4603      	mov	r3, r0
 80027f0:	4c0f      	ldr	r4, [pc, #60]	@ (8002830 <setMotorRPWM+0x70>)
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7fe fc62 	bl	80010bc <__aeabi_f2uiz>
 80027f8:	4603      	mov	r3, r0
 80027fa:	63e3      	str	r3, [r4, #60]	@ 0x3c
	else
	{
		TIM1->CCR3 = 0;
		TIM1->CCR4 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
	}
}
 80027fc:	e013      	b.n	8002826 <setMotorRPWM+0x66>
		TIM1->CCR3 = 0;
 80027fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002830 <setMotorRPWM+0x70>)
 8002800:	2200      	movs	r2, #0
 8002802:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM1->CCR4 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f7ff ff6f 	bl	80026e8 <limitPWM>
 800280a:	4603      	mov	r3, r0
 800280c:	4909      	ldr	r1, [pc, #36]	@ (8002834 <setMotorRPWM+0x74>)
 800280e:	4618      	mov	r0, r3
 8002810:	f7fe fa8e 	bl	8000d30 <__aeabi_fmul>
 8002814:	4603      	mov	r3, r0
 8002816:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800281a:	4c05      	ldr	r4, [pc, #20]	@ (8002830 <setMotorRPWM+0x70>)
 800281c:	4618      	mov	r0, r3
 800281e:	f7fe fc4d 	bl	80010bc <__aeabi_f2uiz>
 8002822:	4603      	mov	r3, r0
 8002824:	6423      	str	r3, [r4, #64]	@ 0x40
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	bd90      	pop	{r4, r7, pc}
 800282e:	bf00      	nop
 8002830:	40010000 	.word	0x40010000
 8002834:	4547f000 	.word	0x4547f000

08002838 <resetMotors>:

void resetMotors() {
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
	setMotorLPWM(0);
 800283c:	f04f 0000 	mov.w	r0, #0
 8002840:	f7ff ff82 	bl	8002748 <setMotorLPWM>
	setMotorRPWM(0);
 8002844:	f04f 0000 	mov.w	r0, #0
 8002848:	f7ff ffba 	bl	80027c0 <setMotorRPWM>
}
 800284c:	bf00      	nop
 800284e:	bd80      	pop	{r7, pc}

08002850 <initPID>:
float gyro_angle = 0;
float gyro_velocity = 0;

int8_t start = 0;

void initPID(void) { start = 1; }
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
 8002854:	4b03      	ldr	r3, [pc, #12]	@ (8002864 <initPID+0x14>)
 8002856:	2201      	movs	r2, #1
 8002858:	701a      	strb	r2, [r3, #0]
 800285a:	bf00      	nop
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	20000480 	.word	0x20000480

08002868 <setPIDGoalD>:
void setPIDGoalD(int16_t distance) { goal_distance = distance; }
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	4603      	mov	r3, r0
 8002870:	80fb      	strh	r3, [r7, #6]
 8002872:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002876:	4618      	mov	r0, r3
 8002878:	f7fe fa06 	bl	8000c88 <__aeabi_i2f>
 800287c:	4603      	mov	r3, r0
 800287e:	4a03      	ldr	r2, [pc, #12]	@ (800288c <setPIDGoalD+0x24>)
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	bf00      	nop
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	2000038c 	.word	0x2000038c

08002890 <setPIDGoalA>:
void setPIDGoalA(int16_t angle) { goal_angle = angle; }
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	4603      	mov	r3, r0
 8002898:	80fb      	strh	r3, [r7, #6]
 800289a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7fe f9f2 	bl	8000c88 <__aeabi_i2f>
 80028a4:	4603      	mov	r3, r0
 80028a6:	4a03      	ldr	r2, [pc, #12]	@ (80028b4 <setPIDGoalA+0x24>)
 80028a8:	6013      	str	r3, [r2, #0]
 80028aa:	bf00      	nop
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	20000390 	.word	0x20000390

080028b8 <setState>:
void setState(STATE curr_state) { state = curr_state; }
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	71fb      	strb	r3, [r7, #7]
 80028c2:	4a04      	ldr	r2, [pc, #16]	@ (80028d4 <setState+0x1c>)
 80028c4:	79fb      	ldrb	r3, [r7, #7]
 80028c6:	7013      	strb	r3, [r2, #0]
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	20000468 	.word	0x20000468

080028d8 <setIRGoals>:

void setIRGoals(int16_t frontLeftGoal, int16_t frontRightGoal, int16_t leftGoal, int16_t rightGoal) {
 80028d8:	b490      	push	{r4, r7}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	4604      	mov	r4, r0
 80028e0:	4608      	mov	r0, r1
 80028e2:	4611      	mov	r1, r2
 80028e4:	461a      	mov	r2, r3
 80028e6:	4623      	mov	r3, r4
 80028e8:	80fb      	strh	r3, [r7, #6]
 80028ea:	4603      	mov	r3, r0
 80028ec:	80bb      	strh	r3, [r7, #4]
 80028ee:	460b      	mov	r3, r1
 80028f0:	807b      	strh	r3, [r7, #2]
 80028f2:	4613      	mov	r3, r2
 80028f4:	803b      	strh	r3, [r7, #0]

	IRAngleOffset = leftGoal - rightGoal;
 80028f6:	887a      	ldrh	r2, [r7, #2]
 80028f8:	883b      	ldrh	r3, [r7, #0]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	b21a      	sxth	r2, r3
 8002900:	4b09      	ldr	r3, [pc, #36]	@ (8002928 <setIRGoals+0x50>)
 8002902:	801a      	strh	r2, [r3, #0]
	goal_forward_left = frontLeftGoal;
 8002904:	4a09      	ldr	r2, [pc, #36]	@ (800292c <setIRGoals+0x54>)
 8002906:	88fb      	ldrh	r3, [r7, #6]
 8002908:	8013      	strh	r3, [r2, #0]
	goal_forward_right = frontRightGoal;
 800290a:	4a09      	ldr	r2, [pc, #36]	@ (8002930 <setIRGoals+0x58>)
 800290c:	88bb      	ldrh	r3, [r7, #4]
 800290e:	8013      	strh	r3, [r2, #0]
	goal_left = leftGoal;
 8002910:	4a08      	ldr	r2, [pc, #32]	@ (8002934 <setIRGoals+0x5c>)
 8002912:	887b      	ldrh	r3, [r7, #2]
 8002914:	8013      	strh	r3, [r2, #0]
	goal_right = rightGoal;
 8002916:	4a08      	ldr	r2, [pc, #32]	@ (8002938 <setIRGoals+0x60>)
 8002918:	883b      	ldrh	r3, [r7, #0]
 800291a:	8013      	strh	r3, [r2, #0]

}
 800291c:	bf00      	nop
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bc90      	pop	{r4, r7}
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	20000394 	.word	0x20000394
 800292c:	2000037e 	.word	0x2000037e
 8002930:	20000380 	.word	0x20000380
 8002934:	20000382 	.word	0x20000382
 8002938:	20000384 	.word	0x20000384

0800293c <setIRAngle>:
	setPIDGoalD(front_kPx * ((goal_forward_left - curr_forward_left + goal_forward_right - curr_forward_left)/2));

}

// TODO: CHANGE TO USE WALL CHECK FUNCTIONS
void setIRAngle(float left, float right){
 800293c:	b590      	push	{r4, r7, lr}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]

	if (left > 600 && right > 600 && goal_angle == 0)
 8002946:	4947      	ldr	r1, [pc, #284]	@ (8002a64 <setIRAngle+0x128>)
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f7fe fbad 	bl	80010a8 <__aeabi_fcmpgt>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d02d      	beq.n	80029b0 <setIRAngle+0x74>
 8002954:	4943      	ldr	r1, [pc, #268]	@ (8002a64 <setIRAngle+0x128>)
 8002956:	6838      	ldr	r0, [r7, #0]
 8002958:	f7fe fba6 	bl	80010a8 <__aeabi_fcmpgt>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d026      	beq.n	80029b0 <setIRAngle+0x74>
 8002962:	4b41      	ldr	r3, [pc, #260]	@ (8002a68 <setIRAngle+0x12c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f04f 0100 	mov.w	r1, #0
 800296a:	4618      	mov	r0, r3
 800296c:	f7fe fb74 	bl	8001058 <__aeabi_fcmpeq>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d01c      	beq.n	80029b0 <setIRAngle+0x74>
	{
		IRadjustment = (kPir * ((left - right) - IRAngleOffset));
 8002976:	6839      	ldr	r1, [r7, #0]
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f7fe f8cf 	bl	8000b1c <__aeabi_fsub>
 800297e:	4603      	mov	r3, r0
 8002980:	461c      	mov	r4, r3
 8002982:	4b3a      	ldr	r3, [pc, #232]	@ (8002a6c <setIRAngle+0x130>)
 8002984:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002988:	4618      	mov	r0, r3
 800298a:	f7fe f97d 	bl	8000c88 <__aeabi_i2f>
 800298e:	4603      	mov	r3, r0
 8002990:	4619      	mov	r1, r3
 8002992:	4620      	mov	r0, r4
 8002994:	f7fe f8c2 	bl	8000b1c <__aeabi_fsub>
 8002998:	4603      	mov	r3, r0
 800299a:	461a      	mov	r2, r3
 800299c:	4b34      	ldr	r3, [pc, #208]	@ (8002a70 <setIRAngle+0x134>)
 800299e:	4619      	mov	r1, r3
 80029a0:	4610      	mov	r0, r2
 80029a2:	f7fe f9c5 	bl	8000d30 <__aeabi_fmul>
 80029a6:	4603      	mov	r3, r0
 80029a8:	461a      	mov	r2, r3
 80029aa:	4b32      	ldr	r3, [pc, #200]	@ (8002a74 <setIRAngle+0x138>)
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	e054      	b.n	8002a5a <setIRAngle+0x11e>
	}
	else if (left > 600 && goal_angle == 0)
 80029b0:	492c      	ldr	r1, [pc, #176]	@ (8002a64 <setIRAngle+0x128>)
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7fe fb78 	bl	80010a8 <__aeabi_fcmpgt>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d020      	beq.n	8002a00 <setIRAngle+0xc4>
 80029be:	4b2a      	ldr	r3, [pc, #168]	@ (8002a68 <setIRAngle+0x12c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f04f 0100 	mov.w	r1, #0
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7fe fb46 	bl	8001058 <__aeabi_fcmpeq>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d016      	beq.n	8002a00 <setIRAngle+0xc4>
	{
		IRadjustment = (kPir2 * (left - goal_left));
 80029d2:	4b29      	ldr	r3, [pc, #164]	@ (8002a78 <setIRAngle+0x13c>)
 80029d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029d8:	4618      	mov	r0, r3
 80029da:	f7fe f955 	bl	8000c88 <__aeabi_i2f>
 80029de:	4603      	mov	r3, r0
 80029e0:	4619      	mov	r1, r3
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7fe f89a 	bl	8000b1c <__aeabi_fsub>
 80029e8:	4603      	mov	r3, r0
 80029ea:	461a      	mov	r2, r3
 80029ec:	4b23      	ldr	r3, [pc, #140]	@ (8002a7c <setIRAngle+0x140>)
 80029ee:	4619      	mov	r1, r3
 80029f0:	4610      	mov	r0, r2
 80029f2:	f7fe f99d 	bl	8000d30 <__aeabi_fmul>
 80029f6:	4603      	mov	r3, r0
 80029f8:	461a      	mov	r2, r3
 80029fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002a74 <setIRAngle+0x138>)
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	e02c      	b.n	8002a5a <setIRAngle+0x11e>
	}
	else if (right > 600 && goal_angle == 0)
 8002a00:	4918      	ldr	r1, [pc, #96]	@ (8002a64 <setIRAngle+0x128>)
 8002a02:	6838      	ldr	r0, [r7, #0]
 8002a04:	f7fe fb50 	bl	80010a8 <__aeabi_fcmpgt>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d020      	beq.n	8002a50 <setIRAngle+0x114>
 8002a0e:	4b16      	ldr	r3, [pc, #88]	@ (8002a68 <setIRAngle+0x12c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f04f 0100 	mov.w	r1, #0
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7fe fb1e 	bl	8001058 <__aeabi_fcmpeq>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d016      	beq.n	8002a50 <setIRAngle+0x114>
	{
		IRadjustment = (kPir2 * (goal_right - right));
 8002a22:	4b17      	ldr	r3, [pc, #92]	@ (8002a80 <setIRAngle+0x144>)
 8002a24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7fe f92d 	bl	8000c88 <__aeabi_i2f>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	6839      	ldr	r1, [r7, #0]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7fe f872 	bl	8000b1c <__aeabi_fsub>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8002a7c <setIRAngle+0x140>)
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4610      	mov	r0, r2
 8002a42:	f7fe f975 	bl	8000d30 <__aeabi_fmul>
 8002a46:	4603      	mov	r3, r0
 8002a48:	461a      	mov	r2, r3
 8002a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a74 <setIRAngle+0x138>)
 8002a4c:	601a      	str	r2, [r3, #0]
 8002a4e:	e004      	b.n	8002a5a <setIRAngle+0x11e>
	}
	else
		IRadjustment = 0;
 8002a50:	4b08      	ldr	r3, [pc, #32]	@ (8002a74 <setIRAngle+0x138>)
 8002a52:	f04f 0200 	mov.w	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]
}
 8002a58:	bf00      	nop
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd90      	pop	{r4, r7, pc}
 8002a62:	bf00      	nop
 8002a64:	44160000 	.word	0x44160000
 8002a68:	20000390 	.word	0x20000390
 8002a6c:	20000394 	.word	0x20000394
 8002a70:	3c23d70a 	.word	0x3c23d70a
 8002a74:	20000464 	.word	0x20000464
 8002a78:	20000382 	.word	0x20000382
 8002a7c:	3cf5c28f 	.word	0x3cf5c28f
 8002a80:	20000384 	.word	0x20000384

08002a84 <accelerateLeftPWM>:

float accelerateLeftPWM() {
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
//	if (derivative > velocity_left * 34.0)
//		return left_PWM_value - xacceleration;
//
//	return left_PWM_value;

}
 8002a88:	bf00      	nop
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bc80      	pop	{r7}
 8002a90:	4770      	bx	lr

08002a92 <accelerateRightPWM>:

float accelerateRightPWM() {
 8002a92:	b480      	push	{r7}
 8002a94:	af00      	add	r7, sp, #0
//	if (derivative > velocity_right * 34.0)
//		return right_PWM_value - xacceleration;
//
//	return right_PWM_value;

}
 8002a96:	bf00      	nop
 8002a98:	4618      	mov	r0, r3
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bc80      	pop	{r7}
 8002a9e:	4770      	bx	lr

08002aa0 <PDController>:

void PDController() {
 8002aa0:	b5b0      	push	{r4, r5, r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0

//////////////////////////	CALCULATE DISTANCE AND ANGLE CORRECTION /////////////////////////

	if (state == TURNING)
 8002aa6:	4b9e      	ldr	r3, [pc, #632]	@ (8002d20 <PDController+0x280>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d103      	bne.n	8002ab6 <PDController+0x16>
		IRadjustment = 0;
 8002aae:	4b9d      	ldr	r3, [pc, #628]	@ (8002d24 <PDController+0x284>)
 8002ab0:	f04f 0200 	mov.w	r2, #0
 8002ab4:	601a      	str	r2, [r3, #0]

	float adjustedAngle = goal_angle + IRadjustment;
 8002ab6:	4b9c      	ldr	r3, [pc, #624]	@ (8002d28 <PDController+0x288>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a9a      	ldr	r2, [pc, #616]	@ (8002d24 <PDController+0x284>)
 8002abc:	6812      	ldr	r2, [r2, #0]
 8002abe:	4611      	mov	r1, r2
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7fe f82d 	bl	8000b20 <__addsf3>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	607b      	str	r3, [r7, #4]

	if (state == TURNING) {
 8002aca:	4b95      	ldr	r3, [pc, #596]	@ (8002d20 <PDController+0x280>)
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d135      	bne.n	8002b3e <PDController+0x9e>
		angleError = adjustedAngle - (getLeftEncoderCounts() - getRightEncoderCounts());
 8002ad2:	f7fe fda1 	bl	8001618 <getLeftEncoderCounts>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	461c      	mov	r4, r3
 8002ada:	f7fe fd8f 	bl	80015fc <getRightEncoderCounts>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	1ae3      	subs	r3, r4, r3
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7fe f8d0 	bl	8000c88 <__aeabi_i2f>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	4619      	mov	r1, r3
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f7fe f815 	bl	8000b1c <__aeabi_fsub>
 8002af2:	4603      	mov	r3, r0
 8002af4:	461a      	mov	r2, r3
 8002af6:	4b8d      	ldr	r3, [pc, #564]	@ (8002d2c <PDController+0x28c>)
 8002af8:	601a      	str	r2, [r3, #0]
		angleCorrection = kPw * angleError + kDw * (angleError - oldAngleError);
 8002afa:	4a8d      	ldr	r2, [pc, #564]	@ (8002d30 <PDController+0x290>)
 8002afc:	4b8b      	ldr	r3, [pc, #556]	@ (8002d2c <PDController+0x28c>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4619      	mov	r1, r3
 8002b02:	4610      	mov	r0, r2
 8002b04:	f7fe f914 	bl	8000d30 <__aeabi_fmul>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	461c      	mov	r4, r3
 8002b0c:	4b87      	ldr	r3, [pc, #540]	@ (8002d2c <PDController+0x28c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a88      	ldr	r2, [pc, #544]	@ (8002d34 <PDController+0x294>)
 8002b12:	6812      	ldr	r2, [r2, #0]
 8002b14:	4611      	mov	r1, r2
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7fe f800 	bl	8000b1c <__aeabi_fsub>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	461a      	mov	r2, r3
 8002b20:	4b85      	ldr	r3, [pc, #532]	@ (8002d38 <PDController+0x298>)
 8002b22:	4619      	mov	r1, r3
 8002b24:	4610      	mov	r0, r2
 8002b26:	f7fe f903 	bl	8000d30 <__aeabi_fmul>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4620      	mov	r0, r4
 8002b30:	f7fd fff6 	bl	8000b20 <__addsf3>
 8002b34:	4603      	mov	r3, r0
 8002b36:	461a      	mov	r2, r3
 8002b38:	4b80      	ldr	r3, [pc, #512]	@ (8002d3c <PDController+0x29c>)
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	e022      	b.n	8002b84 <PDController+0xe4>
	}
	else {
		angleError = adjustedAngle - gyro_angle;
 8002b3e:	4b80      	ldr	r3, [pc, #512]	@ (8002d40 <PDController+0x2a0>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4619      	mov	r1, r3
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f7fd ffe9 	bl	8000b1c <__aeabi_fsub>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	4b77      	ldr	r3, [pc, #476]	@ (8002d2c <PDController+0x28c>)
 8002b50:	601a      	str	r2, [r3, #0]
		angleCorrection = kPw * angleError - kDw * gyro_velocity;
 8002b52:	4a77      	ldr	r2, [pc, #476]	@ (8002d30 <PDController+0x290>)
 8002b54:	4b75      	ldr	r3, [pc, #468]	@ (8002d2c <PDController+0x28c>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4610      	mov	r0, r2
 8002b5c:	f7fe f8e8 	bl	8000d30 <__aeabi_fmul>
 8002b60:	4603      	mov	r3, r0
 8002b62:	461c      	mov	r4, r3
 8002b64:	4a74      	ldr	r2, [pc, #464]	@ (8002d38 <PDController+0x298>)
 8002b66:	4b77      	ldr	r3, [pc, #476]	@ (8002d44 <PDController+0x2a4>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4610      	mov	r0, r2
 8002b6e:	f7fe f8df 	bl	8000d30 <__aeabi_fmul>
 8002b72:	4603      	mov	r3, r0
 8002b74:	4619      	mov	r1, r3
 8002b76:	4620      	mov	r0, r4
 8002b78:	f7fd ffd0 	bl	8000b1c <__aeabi_fsub>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	461a      	mov	r2, r3
 8002b80:	4b6e      	ldr	r3, [pc, #440]	@ (8002d3c <PDController+0x29c>)
 8002b82:	601a      	str	r2, [r3, #0]
	}

//	angleError = adjustedAngle - (getLeftEncoderCounts() - getRightEncoderCounts());

	distanceError = goal_distance - ((getLeftEncoderCounts() + getRightEncoderCounts())/2);
 8002b84:	4b70      	ldr	r3, [pc, #448]	@ (8002d48 <PDController+0x2a8>)
 8002b86:	681c      	ldr	r4, [r3, #0]
 8002b88:	f7fe fd46 	bl	8001618 <getLeftEncoderCounts>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	461d      	mov	r5, r3
 8002b90:	f7fe fd34 	bl	80015fc <getRightEncoderCounts>
 8002b94:	4603      	mov	r3, r0
 8002b96:	442b      	add	r3, r5
 8002b98:	0fda      	lsrs	r2, r3, #31
 8002b9a:	4413      	add	r3, r2
 8002b9c:	105b      	asrs	r3, r3, #1
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7fe f872 	bl	8000c88 <__aeabi_i2f>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4620      	mov	r0, r4
 8002baa:	f7fd ffb7 	bl	8000b1c <__aeabi_fsub>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	4b66      	ldr	r3, [pc, #408]	@ (8002d4c <PDController+0x2ac>)
 8002bb4:	601a      	str	r2, [r3, #0]

	distanceCorrection = kPx * distanceError + kDx * (distanceError - oldDistanceError);
 8002bb6:	4a66      	ldr	r2, [pc, #408]	@ (8002d50 <PDController+0x2b0>)
 8002bb8:	4b64      	ldr	r3, [pc, #400]	@ (8002d4c <PDController+0x2ac>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4610      	mov	r0, r2
 8002bc0:	f7fe f8b6 	bl	8000d30 <__aeabi_fmul>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	461c      	mov	r4, r3
 8002bc8:	4b60      	ldr	r3, [pc, #384]	@ (8002d4c <PDController+0x2ac>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a61      	ldr	r2, [pc, #388]	@ (8002d54 <PDController+0x2b4>)
 8002bce:	6812      	ldr	r2, [r2, #0]
 8002bd0:	4611      	mov	r1, r2
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7fd ffa2 	bl	8000b1c <__aeabi_fsub>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	461a      	mov	r2, r3
 8002bdc:	f04f 0300 	mov.w	r3, #0
 8002be0:	4619      	mov	r1, r3
 8002be2:	4610      	mov	r0, r2
 8002be4:	f7fe f8a4 	bl	8000d30 <__aeabi_fmul>
 8002be8:	4603      	mov	r3, r0
 8002bea:	4619      	mov	r1, r3
 8002bec:	4620      	mov	r0, r4
 8002bee:	f7fd ff97 	bl	8000b20 <__addsf3>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	4b58      	ldr	r3, [pc, #352]	@ (8002d58 <PDController+0x2b8>)
 8002bf8:	601a      	str	r2, [r3, #0]

	left_distance = getLeftEncoderCounts();
 8002bfa:	f7fe fd0d 	bl	8001618 <getLeftEncoderCounts>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7fe f841 	bl	8000c88 <__aeabi_i2f>
 8002c06:	4603      	mov	r3, r0
 8002c08:	4a54      	ldr	r2, [pc, #336]	@ (8002d5c <PDController+0x2bc>)
 8002c0a:	6013      	str	r3, [r2, #0]
	right_distance = getRightEncoderCounts();
 8002c0c:	f7fe fcf6 	bl	80015fc <getRightEncoderCounts>
 8002c10:	4603      	mov	r3, r0
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7fe f838 	bl	8000c88 <__aeabi_i2f>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	4a51      	ldr	r2, [pc, #324]	@ (8002d60 <PDController+0x2c0>)
 8002c1c:	6013      	str	r3, [r2, #0]

	if (state == MOVING && fabs(distanceError) > 100)
 8002c1e:	4b40      	ldr	r3, [pc, #256]	@ (8002d20 <PDController+0x280>)
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d13f      	bne.n	8002ca6 <PDController+0x206>
 8002c26:	4b49      	ldr	r3, [pc, #292]	@ (8002d4c <PDController+0x2ac>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c2e:	494d      	ldr	r1, [pc, #308]	@ (8002d64 <PDController+0x2c4>)
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7fe fa39 	bl	80010a8 <__aeabi_fcmpgt>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d034      	beq.n	8002ca6 <PDController+0x206>
	{		// If we're going straight and not at the end, apply acceleration
		if (fabs(distanceCorrection - oldDistanceCorrection) > xacceleration)
 8002c3c:	4b46      	ldr	r3, [pc, #280]	@ (8002d58 <PDController+0x2b8>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a49      	ldr	r2, [pc, #292]	@ (8002d68 <PDController+0x2c8>)
 8002c42:	6812      	ldr	r2, [r2, #0]
 8002c44:	4611      	mov	r1, r2
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7fd ff68 	bl	8000b1c <__aeabi_fsub>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c52:	4a3f      	ldr	r2, [pc, #252]	@ (8002d50 <PDController+0x2b0>)
 8002c54:	4611      	mov	r1, r2
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7fe fa26 	bl	80010a8 <__aeabi_fcmpgt>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d021      	beq.n	8002ca6 <PDController+0x206>
		{
			distanceCorrection = oldDistanceCorrection + (xacceleration * sign(distanceCorrection - oldDistanceCorrection));
 8002c62:	4b3d      	ldr	r3, [pc, #244]	@ (8002d58 <PDController+0x2b8>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a40      	ldr	r2, [pc, #256]	@ (8002d68 <PDController+0x2c8>)
 8002c68:	6812      	ldr	r2, [r2, #0]
 8002c6a:	4611      	mov	r1, r2
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7fd ff55 	bl	8000b1c <__aeabi_fsub>
 8002c72:	4603      	mov	r3, r0
 8002c74:	4618      	mov	r0, r3
 8002c76:	f002 f81d 	bl	8004cb4 <sign>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7fe f803 	bl	8000c88 <__aeabi_i2f>
 8002c82:	4603      	mov	r3, r0
 8002c84:	4a32      	ldr	r2, [pc, #200]	@ (8002d50 <PDController+0x2b0>)
 8002c86:	4611      	mov	r1, r2
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7fe f851 	bl	8000d30 <__aeabi_fmul>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	461a      	mov	r2, r3
 8002c92:	4b35      	ldr	r3, [pc, #212]	@ (8002d68 <PDController+0x2c8>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4619      	mov	r1, r3
 8002c98:	4610      	mov	r0, r2
 8002c9a:	f7fd ff41 	bl	8000b20 <__addsf3>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	4b2d      	ldr	r3, [pc, #180]	@ (8002d58 <PDController+0x2b8>)
 8002ca4:	601a      	str	r2, [r3, #0]
		}
	}

////////////////////// ROUND DISTANCE OR ANGLE CORRECTION	//////////////////////////

	switch(state) {		// Apply lower limits of PWM for various states
 8002ca6:	4b1e      	ldr	r3, [pc, #120]	@ (8002d20 <PDController+0x280>)
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	3b01      	subs	r3, #1
 8002cac:	2b04      	cmp	r3, #4
 8002cae:	f200 80be 	bhi.w	8002e2e <PDController+0x38e>
 8002cb2:	a201      	add	r2, pc, #4	@ (adr r2, 8002cb8 <PDController+0x218>)
 8002cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb8:	08002cf5 	.word	0x08002cf5
 8002cbc:	08002daf 	.word	0x08002daf
 8002cc0:	08002ccd 	.word	0x08002ccd
 8002cc4:	08002e2f 	.word	0x08002e2f
 8002cc8:	08002e11 	.word	0x08002e11
		case EXPLORING:
			distanceCorrection = (accelerateLeftPWM() + accelerateRightPWM())/2;
 8002ccc:	f7ff feda 	bl	8002a84 <accelerateLeftPWM>
 8002cd0:	4604      	mov	r4, r0
 8002cd2:	f7ff fede 	bl	8002a92 <accelerateRightPWM>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	4619      	mov	r1, r3
 8002cda:	4620      	mov	r0, r4
 8002cdc:	f7fd ff20 	bl	8000b20 <__addsf3>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7fe f8d6 	bl	8000e98 <__aeabi_fdiv>
 8002cec:	4603      	mov	r3, r0
 8002cee:	461a      	mov	r2, r3
 8002cf0:	4b19      	ldr	r3, [pc, #100]	@ (8002d58 <PDController+0x2b8>)
 8002cf2:	601a      	str	r2, [r3, #0]
		case MOVING:
			if (fabs(distanceCorrection) > 0.03 && fabs(distanceCorrection) < PWMMinx)
 8002cf4:	4b18      	ldr	r3, [pc, #96]	@ (8002d58 <PDController+0x2b8>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7fd fbc7 	bl	8000490 <__aeabi_f2d>
 8002d02:	a305      	add	r3, pc, #20	@ (adr r3, 8002d18 <PDController+0x278>)
 8002d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d08:	f7fd feaa 	bl	8000a60 <__aeabi_dcmpgt>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d12c      	bne.n	8002d6c <PDController+0x2cc>
				distanceCorrection = sign(distanceCorrection) * PWMMinx;
			break;
 8002d12:	e08d      	b.n	8002e30 <PDController+0x390>
 8002d14:	f3af 8000 	nop.w
 8002d18:	eb851eb8 	.word	0xeb851eb8
 8002d1c:	3f9eb851 	.word	0x3f9eb851
 8002d20:	20000468 	.word	0x20000468
 8002d24:	20000464 	.word	0x20000464
 8002d28:	20000390 	.word	0x20000390
 8002d2c:	20000398 	.word	0x20000398
 8002d30:	3b23d70a 	.word	0x3b23d70a
 8002d34:	2000039c 	.word	0x2000039c
 8002d38:	3b656042 	.word	0x3b656042
 8002d3c:	200003c8 	.word	0x200003c8
 8002d40:	20000478 	.word	0x20000478
 8002d44:	2000047c 	.word	0x2000047c
 8002d48:	2000038c 	.word	0x2000038c
 8002d4c:	200003cc 	.word	0x200003cc
 8002d50:	3a83126f 	.word	0x3a83126f
 8002d54:	200003d0 	.word	0x200003d0
 8002d58:	200003fc 	.word	0x200003fc
 8002d5c:	20000404 	.word	0x20000404
 8002d60:	20000434 	.word	0x20000434
 8002d64:	42c80000 	.word	0x42c80000
 8002d68:	20000400 	.word	0x20000400
			if (fabs(distanceCorrection) > 0.03 && fabs(distanceCorrection) < PWMMinx)
 8002d6c:	4b68      	ldr	r3, [pc, #416]	@ (8002f10 <PDController+0x470>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d74:	4a67      	ldr	r2, [pc, #412]	@ (8002f14 <PDController+0x474>)
 8002d76:	4611      	mov	r1, r2
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7fe f977 	bl	800106c <__aeabi_fcmplt>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d100      	bne.n	8002d86 <PDController+0x2e6>
			break;
 8002d84:	e054      	b.n	8002e30 <PDController+0x390>
				distanceCorrection = sign(distanceCorrection) * PWMMinx;
 8002d86:	4b62      	ldr	r3, [pc, #392]	@ (8002f10 <PDController+0x470>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f001 ff92 	bl	8004cb4 <sign>
 8002d90:	4603      	mov	r3, r0
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7fd ff78 	bl	8000c88 <__aeabi_i2f>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	4a5e      	ldr	r2, [pc, #376]	@ (8002f14 <PDController+0x474>)
 8002d9c:	4611      	mov	r1, r2
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fd ffc6 	bl	8000d30 <__aeabi_fmul>
 8002da4:	4603      	mov	r3, r0
 8002da6:	461a      	mov	r2, r3
 8002da8:	4b59      	ldr	r3, [pc, #356]	@ (8002f10 <PDController+0x470>)
 8002daa:	601a      	str	r2, [r3, #0]
			break;
 8002dac:	e040      	b.n	8002e30 <PDController+0x390>
		case TURNING:
			if (fabs(angleCorrection) > 0.01 && fabs(angleCorrection) < PWMMinw)
 8002dae:	4b5a      	ldr	r3, [pc, #360]	@ (8002f18 <PDController+0x478>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7fd fb6a 	bl	8000490 <__aeabi_f2d>
 8002dbc:	a352      	add	r3, pc, #328	@ (adr r3, 8002f08 <PDController+0x468>)
 8002dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc2:	f7fd fe4d 	bl	8000a60 <__aeabi_dcmpgt>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d100      	bne.n	8002dce <PDController+0x32e>
				angleCorrection = sign(angleCorrection) * PWMMinw;
			break;
 8002dcc:	e030      	b.n	8002e30 <PDController+0x390>
			if (fabs(angleCorrection) > 0.01 && fabs(angleCorrection) < PWMMinw)
 8002dce:	4b52      	ldr	r3, [pc, #328]	@ (8002f18 <PDController+0x478>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002dd6:	4a4f      	ldr	r2, [pc, #316]	@ (8002f14 <PDController+0x474>)
 8002dd8:	4611      	mov	r1, r2
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7fe f946 	bl	800106c <__aeabi_fcmplt>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d100      	bne.n	8002de8 <PDController+0x348>
			break;
 8002de6:	e023      	b.n	8002e30 <PDController+0x390>
				angleCorrection = sign(angleCorrection) * PWMMinw;
 8002de8:	4b4b      	ldr	r3, [pc, #300]	@ (8002f18 <PDController+0x478>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f001 ff61 	bl	8004cb4 <sign>
 8002df2:	4603      	mov	r3, r0
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7fd ff47 	bl	8000c88 <__aeabi_i2f>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	4a45      	ldr	r2, [pc, #276]	@ (8002f14 <PDController+0x474>)
 8002dfe:	4611      	mov	r1, r2
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7fd ff95 	bl	8000d30 <__aeabi_fmul>
 8002e06:	4603      	mov	r3, r0
 8002e08:	461a      	mov	r2, r3
 8002e0a:	4b43      	ldr	r3, [pc, #268]	@ (8002f18 <PDController+0x478>)
 8002e0c:	601a      	str	r2, [r3, #0]
			break;
 8002e0e:	e00f      	b.n	8002e30 <PDController+0x390>
		case CURVING:
			if (fabs(distanceError) < 60)
 8002e10:	4b42      	ldr	r3, [pc, #264]	@ (8002f1c <PDController+0x47c>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e18:	4941      	ldr	r1, [pc, #260]	@ (8002f20 <PDController+0x480>)
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7fe f926 	bl	800106c <__aeabi_fcmplt>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d100      	bne.n	8002e28 <PDController+0x388>
				setState(REST);
		default:
			break;
 8002e26:	e002      	b.n	8002e2e <PDController+0x38e>
				setState(REST);
 8002e28:	2000      	movs	r0, #0
 8002e2a:	f7ff fd45 	bl	80028b8 <setState>
			break;
 8002e2e:	bf00      	nop
	}

	if (fabs(distanceCorrection) > PWMMaxx)		// Upper Limit for PWM
 8002e30:	4b37      	ldr	r3, [pc, #220]	@ (8002f10 <PDController+0x470>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e38:	4a3a      	ldr	r2, [pc, #232]	@ (8002f24 <PDController+0x484>)
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7fe f933 	bl	80010a8 <__aeabi_fcmpgt>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d012      	beq.n	8002e6e <PDController+0x3ce>
		distanceCorrection = sign(distanceCorrection) * PWMMaxx;
 8002e48:	4b31      	ldr	r3, [pc, #196]	@ (8002f10 <PDController+0x470>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f001 ff31 	bl	8004cb4 <sign>
 8002e52:	4603      	mov	r3, r0
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7fd ff17 	bl	8000c88 <__aeabi_i2f>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	4a31      	ldr	r2, [pc, #196]	@ (8002f24 <PDController+0x484>)
 8002e5e:	4611      	mov	r1, r2
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7fd ff65 	bl	8000d30 <__aeabi_fmul>
 8002e66:	4603      	mov	r3, r0
 8002e68:	461a      	mov	r2, r3
 8002e6a:	4b29      	ldr	r3, [pc, #164]	@ (8002f10 <PDController+0x470>)
 8002e6c:	601a      	str	r2, [r3, #0]

	if (fabs(angleCorrection) > PWMMaxw)
 8002e6e:	4b2a      	ldr	r3, [pc, #168]	@ (8002f18 <PDController+0x478>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e76:	4a27      	ldr	r2, [pc, #156]	@ (8002f14 <PDController+0x474>)
 8002e78:	4611      	mov	r1, r2
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7fe f914 	bl	80010a8 <__aeabi_fcmpgt>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d012      	beq.n	8002eac <PDController+0x40c>
		angleCorrection = sign(angleCorrection) * PWMMaxw;
 8002e86:	4b24      	ldr	r3, [pc, #144]	@ (8002f18 <PDController+0x478>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f001 ff12 	bl	8004cb4 <sign>
 8002e90:	4603      	mov	r3, r0
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7fd fef8 	bl	8000c88 <__aeabi_i2f>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	4a1e      	ldr	r2, [pc, #120]	@ (8002f14 <PDController+0x474>)
 8002e9c:	4611      	mov	r1, r2
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7fd ff46 	bl	8000d30 <__aeabi_fmul>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8002f18 <PDController+0x478>)
 8002eaa:	601a      	str	r2, [r3, #0]
//		angleCorrection = 0;
//
//	else if (fabs(angleCorrection) < PWMMinw)
//		angleCorrection = sign(angleCorrection) * PWMMinw;

	if (state == ACCELERATING || state == CURVING)
 8002eac:	4b1e      	ldr	r3, [pc, #120]	@ (8002f28 <PDController+0x488>)
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	2b04      	cmp	r3, #4
 8002eb2:	d003      	beq.n	8002ebc <PDController+0x41c>
 8002eb4:	4b1c      	ldr	r3, [pc, #112]	@ (8002f28 <PDController+0x488>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2b05      	cmp	r3, #5
 8002eba:	d10a      	bne.n	8002ed2 <PDController+0x432>
	{
		left_PWM_value = accelerateLeftPWM();
 8002ebc:	f7ff fde2 	bl	8002a84 <accelerateLeftPWM>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	4a1a      	ldr	r2, [pc, #104]	@ (8002f2c <PDController+0x48c>)
 8002ec4:	6013      	str	r3, [r2, #0]
		right_PWM_value = accelerateRightPWM();
 8002ec6:	f7ff fde4 	bl	8002a92 <accelerateRightPWM>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	4a18      	ldr	r2, [pc, #96]	@ (8002f30 <PDController+0x490>)
 8002ece:	6013      	str	r3, [r2, #0]
		return;
 8002ed0:	e017      	b.n	8002f02 <PDController+0x462>
	}

	left_PWM_value = (distanceCorrection + angleCorrection);
 8002ed2:	4b0f      	ldr	r3, [pc, #60]	@ (8002f10 <PDController+0x470>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a10      	ldr	r2, [pc, #64]	@ (8002f18 <PDController+0x478>)
 8002ed8:	6812      	ldr	r2, [r2, #0]
 8002eda:	4611      	mov	r1, r2
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7fd fe1f 	bl	8000b20 <__addsf3>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	4b11      	ldr	r3, [pc, #68]	@ (8002f2c <PDController+0x48c>)
 8002ee8:	601a      	str	r2, [r3, #0]
	right_PWM_value = (distanceCorrection - angleCorrection);
 8002eea:	4b09      	ldr	r3, [pc, #36]	@ (8002f10 <PDController+0x470>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a0a      	ldr	r2, [pc, #40]	@ (8002f18 <PDController+0x478>)
 8002ef0:	6812      	ldr	r2, [r2, #0]
 8002ef2:	4611      	mov	r1, r2
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7fd fe11 	bl	8000b1c <__aeabi_fsub>
 8002efa:	4603      	mov	r3, r0
 8002efc:	461a      	mov	r2, r3
 8002efe:	4b0c      	ldr	r3, [pc, #48]	@ (8002f30 <PDController+0x490>)
 8002f00:	601a      	str	r2, [r3, #0]

}
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bdb0      	pop	{r4, r5, r7, pc}
 8002f08:	47ae147b 	.word	0x47ae147b
 8002f0c:	3f847ae1 	.word	0x3f847ae1
 8002f10:	200003fc 	.word	0x200003fc
 8002f14:	3ea3d70a 	.word	0x3ea3d70a
 8002f18:	200003c8 	.word	0x200003c8
 8002f1c:	200003cc 	.word	0x200003cc
 8002f20:	42700000 	.word	0x42700000
 8002f24:	3f266666 	.word	0x3f266666
 8002f28:	20000468 	.word	0x20000468
 8002f2c:	2000046c 	.word	0x2000046c
 8002f30:	20000470 	.word	0x20000470
 8002f34:	00000000 	.word	0x00000000

08002f38 <updatePID>:

void updatePID() {
 8002f38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f3c:	b084      	sub	sp, #16
 8002f3e:	af00      	add	r7, sp, #0

///// CALCULATE GYRO ANGLE //////////////////////////
	readGyro(&gyro_velocity);
 8002f40:	4859      	ldr	r0, [pc, #356]	@ (80030a8 <updatePID+0x170>)
 8002f42:	f7fe fddd 	bl	8001b00 <readGyro>

	gyro_velocity /= 1000;
 8002f46:	4b58      	ldr	r3, [pc, #352]	@ (80030a8 <updatePID+0x170>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4958      	ldr	r1, [pc, #352]	@ (80030ac <updatePID+0x174>)
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7fd ffa3 	bl	8000e98 <__aeabi_fdiv>
 8002f52:	4603      	mov	r3, r0
 8002f54:	461a      	mov	r2, r3
 8002f56:	4b54      	ldr	r3, [pc, #336]	@ (80030a8 <updatePID+0x170>)
 8002f58:	601a      	str	r2, [r3, #0]

	gyro_angle += gyro_velocity;
 8002f5a:	4b55      	ldr	r3, [pc, #340]	@ (80030b0 <updatePID+0x178>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a52      	ldr	r2, [pc, #328]	@ (80030a8 <updatePID+0x170>)
 8002f60:	6812      	ldr	r2, [r2, #0]
 8002f62:	4611      	mov	r1, r2
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7fd fddb 	bl	8000b20 <__addsf3>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	4b50      	ldr	r3, [pc, #320]	@ (80030b0 <updatePID+0x178>)
 8002f70:	601a      	str	r2, [r3, #0]

	if (!start) {
 8002f72:	4b50      	ldr	r3, [pc, #320]	@ (80030b4 <updatePID+0x17c>)
 8002f74:	f993 3000 	ldrsb.w	r3, [r3]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 8287 	beq.w	800348c <updatePID+0x554>
	}


///// CALCULATE PREVIOUS ANGLE AND DISTANCE ERRORS //////////////////////////

	oldAngleError = oldAngleErrors[9];
 8002f7e:	4b4e      	ldr	r3, [pc, #312]	@ (80030b8 <updatePID+0x180>)
 8002f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f82:	4a4e      	ldr	r2, [pc, #312]	@ (80030bc <updatePID+0x184>)
 8002f84:	6013      	str	r3, [r2, #0]
	oldDistanceError = oldDistanceErrors[9];
 8002f86:	4b4e      	ldr	r3, [pc, #312]	@ (80030c0 <updatePID+0x188>)
 8002f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8a:	4a4e      	ldr	r2, [pc, #312]	@ (80030c4 <updatePID+0x18c>)
 8002f8c:	6013      	str	r3, [r2, #0]
	old_left_distance = old_left_distances[9];
 8002f8e:	4b4e      	ldr	r3, [pc, #312]	@ (80030c8 <updatePID+0x190>)
 8002f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f92:	4a4e      	ldr	r2, [pc, #312]	@ (80030cc <updatePID+0x194>)
 8002f94:	6013      	str	r3, [r2, #0]
	old_right_distance = old_right_distances[9];
 8002f96:	4b4e      	ldr	r3, [pc, #312]	@ (80030d0 <updatePID+0x198>)
 8002f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9a:	4a4e      	ldr	r2, [pc, #312]	@ (80030d4 <updatePID+0x19c>)
 8002f9c:	6013      	str	r3, [r2, #0]

//////////////////////	CALCULATE MOTOR PWM VALUES	/////////////////////

	PDController();
 8002f9e:	f7ff fd7f 	bl	8002aa0 <PDController>

////////////////////	NORMALIZE LEFT AND RIGHT PWM VALUES ////////////////

	// Apply lower PWM limits for small adjustments
	if (state == REST || state == ACCELERATING || fabs(distanceError) < 60 || fabs (angleError) < 60)
 8002fa2:	4b4d      	ldr	r3, [pc, #308]	@ (80030d8 <updatePID+0x1a0>)
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d01a      	beq.n	8002fe0 <updatePID+0xa8>
 8002faa:	4b4b      	ldr	r3, [pc, #300]	@ (80030d8 <updatePID+0x1a0>)
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	2b04      	cmp	r3, #4
 8002fb0:	d016      	beq.n	8002fe0 <updatePID+0xa8>
 8002fb2:	4b4a      	ldr	r3, [pc, #296]	@ (80030dc <updatePID+0x1a4>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002fba:	4949      	ldr	r1, [pc, #292]	@ (80030e0 <updatePID+0x1a8>)
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7fe f855 	bl	800106c <__aeabi_fcmplt>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10b      	bne.n	8002fe0 <updatePID+0xa8>
 8002fc8:	4b46      	ldr	r3, [pc, #280]	@ (80030e4 <updatePID+0x1ac>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002fd0:	4943      	ldr	r1, [pc, #268]	@ (80030e0 <updatePID+0x1a8>)
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7fe f84a 	bl	800106c <__aeabi_fcmplt>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f000 808a 	beq.w	80030f4 <updatePID+0x1bc>
	{
		if (fabs(left_PWM_value) > 0.01 && fabs(left_PWM_value) < PWMMin)
 8002fe0:	4b41      	ldr	r3, [pc, #260]	@ (80030e8 <updatePID+0x1b0>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7fd fa51 	bl	8000490 <__aeabi_f2d>
 8002fee:	a32c      	add	r3, pc, #176	@ (adr r3, 80030a0 <updatePID+0x168>)
 8002ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff4:	f7fd fd34 	bl	8000a60 <__aeabi_dcmpgt>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d01e      	beq.n	800303c <updatePID+0x104>
 8002ffe:	4b3a      	ldr	r3, [pc, #232]	@ (80030e8 <updatePID+0x1b0>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003006:	4a39      	ldr	r2, [pc, #228]	@ (80030ec <updatePID+0x1b4>)
 8003008:	4611      	mov	r1, r2
 800300a:	4618      	mov	r0, r3
 800300c:	f7fe f82e 	bl	800106c <__aeabi_fcmplt>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d012      	beq.n	800303c <updatePID+0x104>
		{
			left_PWM_value = sign(left_PWM_value) * PWMMin;
 8003016:	4b34      	ldr	r3, [pc, #208]	@ (80030e8 <updatePID+0x1b0>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4618      	mov	r0, r3
 800301c:	f001 fe4a 	bl	8004cb4 <sign>
 8003020:	4603      	mov	r3, r0
 8003022:	4618      	mov	r0, r3
 8003024:	f7fd fe30 	bl	8000c88 <__aeabi_i2f>
 8003028:	4603      	mov	r3, r0
 800302a:	4a30      	ldr	r2, [pc, #192]	@ (80030ec <updatePID+0x1b4>)
 800302c:	4611      	mov	r1, r2
 800302e:	4618      	mov	r0, r3
 8003030:	f7fd fe7e 	bl	8000d30 <__aeabi_fmul>
 8003034:	4603      	mov	r3, r0
 8003036:	461a      	mov	r2, r3
 8003038:	4b2b      	ldr	r3, [pc, #172]	@ (80030e8 <updatePID+0x1b0>)
 800303a:	601a      	str	r2, [r3, #0]
		}

		if (fabs(right_PWM_value) > 0.01 && fabs(right_PWM_value) < PWMMin)
 800303c:	4b2c      	ldr	r3, [pc, #176]	@ (80030f0 <updatePID+0x1b8>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003044:	4618      	mov	r0, r3
 8003046:	f7fd fa23 	bl	8000490 <__aeabi_f2d>
 800304a:	a315      	add	r3, pc, #84	@ (adr r3, 80030a0 <updatePID+0x168>)
 800304c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003050:	f7fd fd06 	bl	8000a60 <__aeabi_dcmpgt>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	f000 811c 	beq.w	8003294 <updatePID+0x35c>
 800305c:	4b24      	ldr	r3, [pc, #144]	@ (80030f0 <updatePID+0x1b8>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003064:	4a21      	ldr	r2, [pc, #132]	@ (80030ec <updatePID+0x1b4>)
 8003066:	4611      	mov	r1, r2
 8003068:	4618      	mov	r0, r3
 800306a:	f7fd ffff 	bl	800106c <__aeabi_fcmplt>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d100      	bne.n	8003076 <updatePID+0x13e>
 8003074:	e10e      	b.n	8003294 <updatePID+0x35c>
		{
			right_PWM_value = sign(right_PWM_value) * PWMMin;
 8003076:	4b1e      	ldr	r3, [pc, #120]	@ (80030f0 <updatePID+0x1b8>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f001 fe1a 	bl	8004cb4 <sign>
 8003080:	4603      	mov	r3, r0
 8003082:	4618      	mov	r0, r3
 8003084:	f7fd fe00 	bl	8000c88 <__aeabi_i2f>
 8003088:	4603      	mov	r3, r0
 800308a:	4a18      	ldr	r2, [pc, #96]	@ (80030ec <updatePID+0x1b4>)
 800308c:	4611      	mov	r1, r2
 800308e:	4618      	mov	r0, r3
 8003090:	f7fd fe4e 	bl	8000d30 <__aeabi_fmul>
 8003094:	4603      	mov	r3, r0
 8003096:	461a      	mov	r2, r3
 8003098:	4b15      	ldr	r3, [pc, #84]	@ (80030f0 <updatePID+0x1b8>)
 800309a:	601a      	str	r2, [r3, #0]
		if (fabs(right_PWM_value) > 0.01 && fabs(right_PWM_value) < PWMMin)
 800309c:	e0fa      	b.n	8003294 <updatePID+0x35c>
 800309e:	bf00      	nop
 80030a0:	47ae147b 	.word	0x47ae147b
 80030a4:	3f847ae1 	.word	0x3f847ae1
 80030a8:	2000047c 	.word	0x2000047c
 80030ac:	447a0000 	.word	0x447a0000
 80030b0:	20000478 	.word	0x20000478
 80030b4:	20000480 	.word	0x20000480
 80030b8:	200003a0 	.word	0x200003a0
 80030bc:	2000039c 	.word	0x2000039c
 80030c0:	200003d4 	.word	0x200003d4
 80030c4:	200003d0 	.word	0x200003d0
 80030c8:	2000040c 	.word	0x2000040c
 80030cc:	20000408 	.word	0x20000408
 80030d0:	2000043c 	.word	0x2000043c
 80030d4:	20000438 	.word	0x20000438
 80030d8:	20000468 	.word	0x20000468
 80030dc:	200003cc 	.word	0x200003cc
 80030e0:	42700000 	.word	0x42700000
 80030e4:	20000398 	.word	0x20000398
 80030e8:	2000046c 	.word	0x2000046c
 80030ec:	3e99999a 	.word	0x3e99999a
 80030f0:	20000470 	.word	0x20000470
		}
	}
	else	// If under PWM limits, normalize values
	{
		if (fabs(left_PWM_value) > 0.01 && fabs(left_PWM_value) < PWMMin)
 80030f4:	4bb0      	ldr	r3, [pc, #704]	@ (80033b8 <updatePID+0x480>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7fd f9c7 	bl	8000490 <__aeabi_f2d>
 8003102:	a3a9      	add	r3, pc, #676	@ (adr r3, 80033a8 <updatePID+0x470>)
 8003104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003108:	f7fd fcaa 	bl	8000a60 <__aeabi_dcmpgt>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d058      	beq.n	80031c4 <updatePID+0x28c>
 8003112:	4ba9      	ldr	r3, [pc, #676]	@ (80033b8 <updatePID+0x480>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800311a:	4aa8      	ldr	r2, [pc, #672]	@ (80033bc <updatePID+0x484>)
 800311c:	4611      	mov	r1, r2
 800311e:	4618      	mov	r0, r3
 8003120:	f7fd ffa4 	bl	800106c <__aeabi_fcmplt>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d04c      	beq.n	80031c4 <updatePID+0x28c>
		{
			right_PWM_value = right_PWM_value - (sign(right_PWM_value) * (PWMMin - fabs(left_PWM_value)));
 800312a:	4ba5      	ldr	r3, [pc, #660]	@ (80033c0 <updatePID+0x488>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4618      	mov	r0, r3
 8003130:	f7fd f9ae 	bl	8000490 <__aeabi_f2d>
 8003134:	4604      	mov	r4, r0
 8003136:	460d      	mov	r5, r1
 8003138:	4ba1      	ldr	r3, [pc, #644]	@ (80033c0 <updatePID+0x488>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4618      	mov	r0, r3
 800313e:	f001 fdb9 	bl	8004cb4 <sign>
 8003142:	4603      	mov	r3, r0
 8003144:	4618      	mov	r0, r3
 8003146:	f7fd f991 	bl	800046c <__aeabi_i2d>
 800314a:	4680      	mov	r8, r0
 800314c:	4689      	mov	r9, r1
 800314e:	4b9b      	ldr	r3, [pc, #620]	@ (80033bc <updatePID+0x484>)
 8003150:	4618      	mov	r0, r3
 8003152:	f7fd f99d 	bl	8000490 <__aeabi_f2d>
 8003156:	4682      	mov	sl, r0
 8003158:	468b      	mov	fp, r1
 800315a:	4b97      	ldr	r3, [pc, #604]	@ (80033b8 <updatePID+0x480>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003162:	4618      	mov	r0, r3
 8003164:	f7fd f994 	bl	8000490 <__aeabi_f2d>
 8003168:	4602      	mov	r2, r0
 800316a:	460b      	mov	r3, r1
 800316c:	4650      	mov	r0, sl
 800316e:	4659      	mov	r1, fp
 8003170:	f7fd f82e 	bl	80001d0 <__aeabi_dsub>
 8003174:	4602      	mov	r2, r0
 8003176:	460b      	mov	r3, r1
 8003178:	4640      	mov	r0, r8
 800317a:	4649      	mov	r1, r9
 800317c:	f7fd f9e0 	bl	8000540 <__aeabi_dmul>
 8003180:	4602      	mov	r2, r0
 8003182:	460b      	mov	r3, r1
 8003184:	4620      	mov	r0, r4
 8003186:	4629      	mov	r1, r5
 8003188:	f7fd f822 	bl	80001d0 <__aeabi_dsub>
 800318c:	4602      	mov	r2, r0
 800318e:	460b      	mov	r3, r1
 8003190:	4610      	mov	r0, r2
 8003192:	4619      	mov	r1, r3
 8003194:	f7fd fc6e 	bl	8000a74 <__aeabi_d2f>
 8003198:	4603      	mov	r3, r0
 800319a:	4a89      	ldr	r2, [pc, #548]	@ (80033c0 <updatePID+0x488>)
 800319c:	6013      	str	r3, [r2, #0]
			left_PWM_value = sign(left_PWM_value) * PWMMin;
 800319e:	4b86      	ldr	r3, [pc, #536]	@ (80033b8 <updatePID+0x480>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f001 fd86 	bl	8004cb4 <sign>
 80031a8:	4603      	mov	r3, r0
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7fd fd6c 	bl	8000c88 <__aeabi_i2f>
 80031b0:	4603      	mov	r3, r0
 80031b2:	4a82      	ldr	r2, [pc, #520]	@ (80033bc <updatePID+0x484>)
 80031b4:	4611      	mov	r1, r2
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7fd fdba 	bl	8000d30 <__aeabi_fmul>
 80031bc:	4603      	mov	r3, r0
 80031be:	461a      	mov	r2, r3
 80031c0:	4b7d      	ldr	r3, [pc, #500]	@ (80033b8 <updatePID+0x480>)
 80031c2:	601a      	str	r2, [r3, #0]
		}

		if (fabs(right_PWM_value) > 0.01 && fabs(right_PWM_value) < PWMMin)
 80031c4:	4b7e      	ldr	r3, [pc, #504]	@ (80033c0 <updatePID+0x488>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7fd f95f 	bl	8000490 <__aeabi_f2d>
 80031d2:	a375      	add	r3, pc, #468	@ (adr r3, 80033a8 <updatePID+0x470>)
 80031d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d8:	f7fd fc42 	bl	8000a60 <__aeabi_dcmpgt>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d058      	beq.n	8003294 <updatePID+0x35c>
 80031e2:	4b77      	ldr	r3, [pc, #476]	@ (80033c0 <updatePID+0x488>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80031ea:	4a74      	ldr	r2, [pc, #464]	@ (80033bc <updatePID+0x484>)
 80031ec:	4611      	mov	r1, r2
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7fd ff3c 	bl	800106c <__aeabi_fcmplt>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d04c      	beq.n	8003294 <updatePID+0x35c>
		{
			left_PWM_value = left_PWM_value - (sign(left_PWM_value) * (PWMMin - fabs(right_PWM_value)));
 80031fa:	4b6f      	ldr	r3, [pc, #444]	@ (80033b8 <updatePID+0x480>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f7fd f946 	bl	8000490 <__aeabi_f2d>
 8003204:	4604      	mov	r4, r0
 8003206:	460d      	mov	r5, r1
 8003208:	4b6b      	ldr	r3, [pc, #428]	@ (80033b8 <updatePID+0x480>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f001 fd51 	bl	8004cb4 <sign>
 8003212:	4603      	mov	r3, r0
 8003214:	4618      	mov	r0, r3
 8003216:	f7fd f929 	bl	800046c <__aeabi_i2d>
 800321a:	4680      	mov	r8, r0
 800321c:	4689      	mov	r9, r1
 800321e:	4b67      	ldr	r3, [pc, #412]	@ (80033bc <updatePID+0x484>)
 8003220:	4618      	mov	r0, r3
 8003222:	f7fd f935 	bl	8000490 <__aeabi_f2d>
 8003226:	4682      	mov	sl, r0
 8003228:	468b      	mov	fp, r1
 800322a:	4b65      	ldr	r3, [pc, #404]	@ (80033c0 <updatePID+0x488>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003232:	4618      	mov	r0, r3
 8003234:	f7fd f92c 	bl	8000490 <__aeabi_f2d>
 8003238:	4602      	mov	r2, r0
 800323a:	460b      	mov	r3, r1
 800323c:	4650      	mov	r0, sl
 800323e:	4659      	mov	r1, fp
 8003240:	f7fc ffc6 	bl	80001d0 <__aeabi_dsub>
 8003244:	4602      	mov	r2, r0
 8003246:	460b      	mov	r3, r1
 8003248:	4640      	mov	r0, r8
 800324a:	4649      	mov	r1, r9
 800324c:	f7fd f978 	bl	8000540 <__aeabi_dmul>
 8003250:	4602      	mov	r2, r0
 8003252:	460b      	mov	r3, r1
 8003254:	4620      	mov	r0, r4
 8003256:	4629      	mov	r1, r5
 8003258:	f7fc ffba 	bl	80001d0 <__aeabi_dsub>
 800325c:	4602      	mov	r2, r0
 800325e:	460b      	mov	r3, r1
 8003260:	4610      	mov	r0, r2
 8003262:	4619      	mov	r1, r3
 8003264:	f7fd fc06 	bl	8000a74 <__aeabi_d2f>
 8003268:	4603      	mov	r3, r0
 800326a:	4a53      	ldr	r2, [pc, #332]	@ (80033b8 <updatePID+0x480>)
 800326c:	6013      	str	r3, [r2, #0]
			right_PWM_value = sign(right_PWM_value) * PWMMin;
 800326e:	4b54      	ldr	r3, [pc, #336]	@ (80033c0 <updatePID+0x488>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4618      	mov	r0, r3
 8003274:	f001 fd1e 	bl	8004cb4 <sign>
 8003278:	4603      	mov	r3, r0
 800327a:	4618      	mov	r0, r3
 800327c:	f7fd fd04 	bl	8000c88 <__aeabi_i2f>
 8003280:	4603      	mov	r3, r0
 8003282:	4a4e      	ldr	r2, [pc, #312]	@ (80033bc <updatePID+0x484>)
 8003284:	4611      	mov	r1, r2
 8003286:	4618      	mov	r0, r3
 8003288:	f7fd fd52 	bl	8000d30 <__aeabi_fmul>
 800328c:	4603      	mov	r3, r0
 800328e:	461a      	mov	r2, r3
 8003290:	4b4b      	ldr	r3, [pc, #300]	@ (80033c0 <updatePID+0x488>)
 8003292:	601a      	str	r2, [r3, #0]
		}
	}

	if (fabs(left_PWM_value) > PWM_MAX)
 8003294:	4b48      	ldr	r3, [pc, #288]	@ (80033b8 <updatePID+0x480>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800329c:	4618      	mov	r0, r3
 800329e:	f7fd f8f7 	bl	8000490 <__aeabi_f2d>
 80032a2:	a343      	add	r3, pc, #268	@ (adr r3, 80033b0 <updatePID+0x478>)
 80032a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a8:	f7fd fbda 	bl	8000a60 <__aeabi_dcmpgt>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d016      	beq.n	80032e0 <updatePID+0x3a8>
	{
		left_PWM_value = sign(left_PWM_value) * PWM_MAX;
 80032b2:	4b41      	ldr	r3, [pc, #260]	@ (80033b8 <updatePID+0x480>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f001 fcfc 	bl	8004cb4 <sign>
 80032bc:	4603      	mov	r3, r0
 80032be:	4618      	mov	r0, r3
 80032c0:	f7fd f8d4 	bl	800046c <__aeabi_i2d>
 80032c4:	a33a      	add	r3, pc, #232	@ (adr r3, 80033b0 <updatePID+0x478>)
 80032c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ca:	f7fd f939 	bl	8000540 <__aeabi_dmul>
 80032ce:	4602      	mov	r2, r0
 80032d0:	460b      	mov	r3, r1
 80032d2:	4610      	mov	r0, r2
 80032d4:	4619      	mov	r1, r3
 80032d6:	f7fd fbcd 	bl	8000a74 <__aeabi_d2f>
 80032da:	4603      	mov	r3, r0
 80032dc:	4a36      	ldr	r2, [pc, #216]	@ (80033b8 <updatePID+0x480>)
 80032de:	6013      	str	r3, [r2, #0]
	}

	if (fabs(right_PWM_value) > PWM_MAX)
 80032e0:	4b37      	ldr	r3, [pc, #220]	@ (80033c0 <updatePID+0x488>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7fd f8d1 	bl	8000490 <__aeabi_f2d>
 80032ee:	a330      	add	r3, pc, #192	@ (adr r3, 80033b0 <updatePID+0x478>)
 80032f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f4:	f7fd fbb4 	bl	8000a60 <__aeabi_dcmpgt>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d016      	beq.n	800332c <updatePID+0x3f4>
	{
		right_PWM_value = sign(right_PWM_value) * PWM_MAX;
 80032fe:	4b30      	ldr	r3, [pc, #192]	@ (80033c0 <updatePID+0x488>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f001 fcd6 	bl	8004cb4 <sign>
 8003308:	4603      	mov	r3, r0
 800330a:	4618      	mov	r0, r3
 800330c:	f7fd f8ae 	bl	800046c <__aeabi_i2d>
 8003310:	a327      	add	r3, pc, #156	@ (adr r3, 80033b0 <updatePID+0x478>)
 8003312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003316:	f7fd f913 	bl	8000540 <__aeabi_dmul>
 800331a:	4602      	mov	r2, r0
 800331c:	460b      	mov	r3, r1
 800331e:	4610      	mov	r0, r2
 8003320:	4619      	mov	r1, r3
 8003322:	f7fd fba7 	bl	8000a74 <__aeabi_d2f>
 8003326:	4603      	mov	r3, r0
 8003328:	4a25      	ldr	r2, [pc, #148]	@ (80033c0 <updatePID+0x488>)
 800332a:	6013      	str	r3, [r2, #0]



//////////////////	SET PWM VALUES AND CHECK FOR GOAL REACHED ////////////////////////

	setMotorLPWM(left_PWM_value);
 800332c:	4b22      	ldr	r3, [pc, #136]	@ (80033b8 <updatePID+0x480>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff fa09 	bl	8002748 <setMotorLPWM>
	setMotorRPWM(right_PWM_value);
 8003336:	4b22      	ldr	r3, [pc, #136]	@ (80033c0 <updatePID+0x488>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f7ff fa40 	bl	80027c0 <setMotorRPWM>

	if(angleError < 30 && angleError > -30 && distanceError < 30 && distanceError > -30)
 8003340:	4b20      	ldr	r3, [pc, #128]	@ (80033c4 <updatePID+0x48c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4920      	ldr	r1, [pc, #128]	@ (80033c8 <updatePID+0x490>)
 8003346:	4618      	mov	r0, r3
 8003348:	f7fd fe90 	bl	800106c <__aeabi_fcmplt>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d020      	beq.n	8003394 <updatePID+0x45c>
 8003352:	4b1c      	ldr	r3, [pc, #112]	@ (80033c4 <updatePID+0x48c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	491d      	ldr	r1, [pc, #116]	@ (80033cc <updatePID+0x494>)
 8003358:	4618      	mov	r0, r3
 800335a:	f7fd fea5 	bl	80010a8 <__aeabi_fcmpgt>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d017      	beq.n	8003394 <updatePID+0x45c>
 8003364:	4b1a      	ldr	r3, [pc, #104]	@ (80033d0 <updatePID+0x498>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4917      	ldr	r1, [pc, #92]	@ (80033c8 <updatePID+0x490>)
 800336a:	4618      	mov	r0, r3
 800336c:	f7fd fe7e 	bl	800106c <__aeabi_fcmplt>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00e      	beq.n	8003394 <updatePID+0x45c>
 8003376:	4b16      	ldr	r3, [pc, #88]	@ (80033d0 <updatePID+0x498>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4914      	ldr	r1, [pc, #80]	@ (80033cc <updatePID+0x494>)
 800337c:	4618      	mov	r0, r3
 800337e:	f7fd fe93 	bl	80010a8 <__aeabi_fcmpgt>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d005      	beq.n	8003394 <updatePID+0x45c>
		goal_reached_timer++;					// Increments goal reached timer when errors are within a certain threshold
 8003388:	4b12      	ldr	r3, [pc, #72]	@ (80033d4 <updatePID+0x49c>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	3301      	adds	r3, #1
 800338e:	4a11      	ldr	r2, [pc, #68]	@ (80033d4 <updatePID+0x49c>)
 8003390:	6013      	str	r3, [r2, #0]
 8003392:	e002      	b.n	800339a <updatePID+0x462>

	else
		goal_reached_timer = 0;
 8003394:	4b0f      	ldr	r3, [pc, #60]	@ (80033d4 <updatePID+0x49c>)
 8003396:	2200      	movs	r2, #0
 8003398:	601a      	str	r2, [r3, #0]

///////////////////// UPDATE PREVIOUS ANGLE AND DISTANCE ERRORS //////////////////////////

	oldDistanceCorrection = distanceCorrection;
 800339a:	4b0f      	ldr	r3, [pc, #60]	@ (80033d8 <updatePID+0x4a0>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a0f      	ldr	r2, [pc, #60]	@ (80033dc <updatePID+0x4a4>)
 80033a0:	6013      	str	r3, [r2, #0]

	for(int i = 9; i > 0; i--)
 80033a2:	2309      	movs	r3, #9
 80033a4:	60fb      	str	r3, [r7, #12]
 80033a6:	e027      	b.n	80033f8 <updatePID+0x4c0>
 80033a8:	47ae147b 	.word	0x47ae147b
 80033ac:	3f847ae1 	.word	0x3f847ae1
 80033b0:	66666666 	.word	0x66666666
 80033b4:	3fee6666 	.word	0x3fee6666
 80033b8:	2000046c 	.word	0x2000046c
 80033bc:	3e99999a 	.word	0x3e99999a
 80033c0:	20000470 	.word	0x20000470
 80033c4:	20000398 	.word	0x20000398
 80033c8:	41f00000 	.word	0x41f00000
 80033cc:	c1f00000 	.word	0xc1f00000
 80033d0:	200003cc 	.word	0x200003cc
 80033d4:	20000474 	.word	0x20000474
 80033d8:	200003fc 	.word	0x200003fc
 80033dc:	20000400 	.word	0x20000400
		oldAngleErrors[i] = oldAngleErrors[i-1];	// Adds the newest angleError to array and shifts everything to the right
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	3b01      	subs	r3, #1
 80033e4:	4a2c      	ldr	r2, [pc, #176]	@ (8003498 <updatePID+0x560>)
 80033e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80033ea:	492b      	ldr	r1, [pc, #172]	@ (8003498 <updatePID+0x560>)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 9; i > 0; i--)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	3b01      	subs	r3, #1
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	dcf0      	bgt.n	80033e0 <updatePID+0x4a8>
	oldAngleErrors[0] = angleError;
 80033fe:	4b27      	ldr	r3, [pc, #156]	@ (800349c <updatePID+0x564>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a25      	ldr	r2, [pc, #148]	@ (8003498 <updatePID+0x560>)
 8003404:	6013      	str	r3, [r2, #0]

	for(int i = 9; i > 0; i--)
 8003406:	2309      	movs	r3, #9
 8003408:	60bb      	str	r3, [r7, #8]
 800340a:	e00b      	b.n	8003424 <updatePID+0x4ec>
		oldDistanceErrors[i] = oldDistanceErrors[i-1];	// Adds the newest distanceError to array and shifts everything right
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	3b01      	subs	r3, #1
 8003410:	4a23      	ldr	r2, [pc, #140]	@ (80034a0 <updatePID+0x568>)
 8003412:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003416:	4922      	ldr	r1, [pc, #136]	@ (80034a0 <updatePID+0x568>)
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 9; i > 0; i--)
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	3b01      	subs	r3, #1
 8003422:	60bb      	str	r3, [r7, #8]
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	2b00      	cmp	r3, #0
 8003428:	dcf0      	bgt.n	800340c <updatePID+0x4d4>
	oldDistanceErrors[0] = distanceError;
 800342a:	4b1e      	ldr	r3, [pc, #120]	@ (80034a4 <updatePID+0x56c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a1c      	ldr	r2, [pc, #112]	@ (80034a0 <updatePID+0x568>)
 8003430:	6013      	str	r3, [r2, #0]

	for(int i = 9; i > 0; i--)
 8003432:	2309      	movs	r3, #9
 8003434:	607b      	str	r3, [r7, #4]
 8003436:	e00b      	b.n	8003450 <updatePID+0x518>
		old_left_distances[i] = old_left_distances[i-1];
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	3b01      	subs	r3, #1
 800343c:	4a1a      	ldr	r2, [pc, #104]	@ (80034a8 <updatePID+0x570>)
 800343e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003442:	4919      	ldr	r1, [pc, #100]	@ (80034a8 <updatePID+0x570>)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 9; i > 0; i--)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	3b01      	subs	r3, #1
 800344e:	607b      	str	r3, [r7, #4]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	dcf0      	bgt.n	8003438 <updatePID+0x500>
	old_left_distances[0] = left_distance;
 8003456:	4b15      	ldr	r3, [pc, #84]	@ (80034ac <updatePID+0x574>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a13      	ldr	r2, [pc, #76]	@ (80034a8 <updatePID+0x570>)
 800345c:	6013      	str	r3, [r2, #0]

	for(int i = 9; i > 0; i--)
 800345e:	2309      	movs	r3, #9
 8003460:	603b      	str	r3, [r7, #0]
 8003462:	e00b      	b.n	800347c <updatePID+0x544>
		old_right_distances[i] = old_right_distances[i-1];
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	3b01      	subs	r3, #1
 8003468:	4a11      	ldr	r2, [pc, #68]	@ (80034b0 <updatePID+0x578>)
 800346a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800346e:	4910      	ldr	r1, [pc, #64]	@ (80034b0 <updatePID+0x578>)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 9; i > 0; i--)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	3b01      	subs	r3, #1
 800347a:	603b      	str	r3, [r7, #0]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	dcf0      	bgt.n	8003464 <updatePID+0x52c>
	old_right_distances[0] = right_distance;
 8003482:	4b0c      	ldr	r3, [pc, #48]	@ (80034b4 <updatePID+0x57c>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a0a      	ldr	r2, [pc, #40]	@ (80034b0 <updatePID+0x578>)
 8003488:	6013      	str	r3, [r2, #0]
 800348a:	e000      	b.n	800348e <updatePID+0x556>
		return;
 800348c:	bf00      	nop

}
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003496:	bf00      	nop
 8003498:	200003a0 	.word	0x200003a0
 800349c:	20000398 	.word	0x20000398
 80034a0:	200003d4 	.word	0x200003d4
 80034a4:	200003cc 	.word	0x200003cc
 80034a8:	2000040c 	.word	0x2000040c
 80034ac:	20000404 	.word	0x20000404
 80034b0:	2000043c 	.word	0x2000043c
 80034b4:	20000434 	.word	0x20000434

080034b8 <PIDdone>:

int8_t PIDdone(){ // There is no bool type in C. True/False values are represented as 1 or 0.
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0

	if (goal_reached_timer >= 50)
 80034bc:	4b06      	ldr	r3, [pc, #24]	@ (80034d8 <PIDdone+0x20>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2b31      	cmp	r3, #49	@ 0x31
 80034c2:	dd06      	ble.n	80034d2 <PIDdone+0x1a>
	{
		resetPID();
 80034c4:	f000 f80a 	bl	80034dc <resetPID>
		setState(REST);
 80034c8:	2000      	movs	r0, #0
 80034ca:	f7ff f9f5 	bl	80028b8 <setState>
		return 1;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e000      	b.n	80034d4 <PIDdone+0x1c>
	}
	else
		return 0;
 80034d2:	2300      	movs	r3, #0

}
 80034d4:	4618      	mov	r0, r3
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	20000474 	.word	0x20000474

080034dc <resetPID>:

void resetPID() {
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0

//////////////	RESET ALL ANGLE AND DISTANCE ERRORS TO 0	////////////////
	angleError = 0;
 80034e2:	4b41      	ldr	r3, [pc, #260]	@ (80035e8 <resetPID+0x10c>)
 80034e4:	f04f 0200 	mov.w	r2, #0
 80034e8:	601a      	str	r2, [r3, #0]
	oldAngleError = 0;
 80034ea:	4b40      	ldr	r3, [pc, #256]	@ (80035ec <resetPID+0x110>)
 80034ec:	f04f 0200 	mov.w	r2, #0
 80034f0:	601a      	str	r2, [r3, #0]
	angleCorrection = 0;
 80034f2:	4b3f      	ldr	r3, [pc, #252]	@ (80035f0 <resetPID+0x114>)
 80034f4:	f04f 0200 	mov.w	r2, #0
 80034f8:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < 10; i++)
 80034fa:	2300      	movs	r3, #0
 80034fc:	60fb      	str	r3, [r7, #12]
 80034fe:	e008      	b.n	8003512 <resetPID+0x36>
		oldAngleErrors[i] = 0;
 8003500:	4a3c      	ldr	r2, [pc, #240]	@ (80035f4 <resetPID+0x118>)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f04f 0100 	mov.w	r1, #0
 8003508:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	3301      	adds	r3, #1
 8003510:	60fb      	str	r3, [r7, #12]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2b09      	cmp	r3, #9
 8003516:	ddf3      	ble.n	8003500 <resetPID+0x24>

	distanceError = 0;
 8003518:	4b37      	ldr	r3, [pc, #220]	@ (80035f8 <resetPID+0x11c>)
 800351a:	f04f 0200 	mov.w	r2, #0
 800351e:	601a      	str	r2, [r3, #0]
	oldDistanceError = 0;
 8003520:	4b36      	ldr	r3, [pc, #216]	@ (80035fc <resetPID+0x120>)
 8003522:	f04f 0200 	mov.w	r2, #0
 8003526:	601a      	str	r2, [r3, #0]
	distanceCorrection = 0;
 8003528:	4b35      	ldr	r3, [pc, #212]	@ (8003600 <resetPID+0x124>)
 800352a:	f04f 0200 	mov.w	r2, #0
 800352e:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < 10; i++)
 8003530:	2300      	movs	r3, #0
 8003532:	60bb      	str	r3, [r7, #8]
 8003534:	e008      	b.n	8003548 <resetPID+0x6c>
		oldDistanceErrors[i] = 0;
 8003536:	4a33      	ldr	r2, [pc, #204]	@ (8003604 <resetPID+0x128>)
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	f04f 0100 	mov.w	r1, #0
 800353e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++)
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	3301      	adds	r3, #1
 8003546:	60bb      	str	r3, [r7, #8]
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	2b09      	cmp	r3, #9
 800354c:	ddf3      	ble.n	8003536 <resetPID+0x5a>

	left_distance = 0;
 800354e:	4b2e      	ldr	r3, [pc, #184]	@ (8003608 <resetPID+0x12c>)
 8003550:	f04f 0200 	mov.w	r2, #0
 8003554:	601a      	str	r2, [r3, #0]
	old_left_distance = 0;
 8003556:	4b2d      	ldr	r3, [pc, #180]	@ (800360c <resetPID+0x130>)
 8003558:	f04f 0200 	mov.w	r2, #0
 800355c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 10; i++)
 800355e:	2300      	movs	r3, #0
 8003560:	607b      	str	r3, [r7, #4]
 8003562:	e008      	b.n	8003576 <resetPID+0x9a>
		old_left_distances[i] = 0;
 8003564:	4a2a      	ldr	r2, [pc, #168]	@ (8003610 <resetPID+0x134>)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f04f 0100 	mov.w	r1, #0
 800356c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	3301      	adds	r3, #1
 8003574:	607b      	str	r3, [r7, #4]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2b09      	cmp	r3, #9
 800357a:	ddf3      	ble.n	8003564 <resetPID+0x88>

	right_distance = 0;
 800357c:	4b25      	ldr	r3, [pc, #148]	@ (8003614 <resetPID+0x138>)
 800357e:	f04f 0200 	mov.w	r2, #0
 8003582:	601a      	str	r2, [r3, #0]
	old_right_distance = 0;
 8003584:	4b24      	ldr	r3, [pc, #144]	@ (8003618 <resetPID+0x13c>)
 8003586:	f04f 0200 	mov.w	r2, #0
 800358a:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 10; i++)
 800358c:	2300      	movs	r3, #0
 800358e:	603b      	str	r3, [r7, #0]
 8003590:	e008      	b.n	80035a4 <resetPID+0xc8>
		old_right_distances[i] = 0;
 8003592:	4a22      	ldr	r2, [pc, #136]	@ (800361c <resetPID+0x140>)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	f04f 0100 	mov.w	r1, #0
 800359a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	3301      	adds	r3, #1
 80035a2:	603b      	str	r3, [r7, #0]
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	2b09      	cmp	r3, #9
 80035a8:	ddf3      	ble.n	8003592 <resetPID+0xb6>

	IRadjustment = 0;
 80035aa:	4b1d      	ldr	r3, [pc, #116]	@ (8003620 <resetPID+0x144>)
 80035ac:	f04f 0200 	mov.w	r2, #0
 80035b0:	601a      	str	r2, [r3, #0]

////////////// 	RESET ALL GOALS AND ENCODER COUNTS TO 0 	///////////////////
	goal_angle = 0;
 80035b2:	4b1c      	ldr	r3, [pc, #112]	@ (8003624 <resetPID+0x148>)
 80035b4:	f04f 0200 	mov.w	r2, #0
 80035b8:	601a      	str	r2, [r3, #0]
	goal_distance = 0;
 80035ba:	4b1b      	ldr	r3, [pc, #108]	@ (8003628 <resetPID+0x14c>)
 80035bc:	f04f 0200 	mov.w	r2, #0
 80035c0:	601a      	str	r2, [r3, #0]
	goal_reached_timer = 0;
 80035c2:	4b1a      	ldr	r3, [pc, #104]	@ (800362c <resetPID+0x150>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]

	gyro_angle = 0;
 80035c8:	4b19      	ldr	r3, [pc, #100]	@ (8003630 <resetPID+0x154>)
 80035ca:	f04f 0200 	mov.w	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]
	resetEncoders();
 80035d0:	f7fe f830 	bl	8001634 <resetEncoders>
	resetMotors();
 80035d4:	f7ff f930 	bl	8002838 <resetMotors>

	setState(REST);
 80035d8:	2000      	movs	r0, #0
 80035da:	f7ff f96d 	bl	80028b8 <setState>

}
 80035de:	bf00      	nop
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	20000398 	.word	0x20000398
 80035ec:	2000039c 	.word	0x2000039c
 80035f0:	200003c8 	.word	0x200003c8
 80035f4:	200003a0 	.word	0x200003a0
 80035f8:	200003cc 	.word	0x200003cc
 80035fc:	200003d0 	.word	0x200003d0
 8003600:	200003fc 	.word	0x200003fc
 8003604:	200003d4 	.word	0x200003d4
 8003608:	20000404 	.word	0x20000404
 800360c:	20000408 	.word	0x20000408
 8003610:	2000040c 	.word	0x2000040c
 8003614:	20000434 	.word	0x20000434
 8003618:	20000438 	.word	0x20000438
 800361c:	2000043c 	.word	0x2000043c
 8003620:	20000464 	.word	0x20000464
 8003624:	20000390 	.word	0x20000390
 8003628:	2000038c 	.word	0x2000038c
 800362c:	20000474 	.word	0x20000474
 8003630:	20000478 	.word	0x20000478

08003634 <newCell>:
int16_t vertWall[16][17];

int16_t discovered[16][16];

struct Cell* newCell(int r, int c)           // Acts as a constructor for a cell cuz C is annoying
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
    struct Cell* p = malloc(sizeof(struct Cell));
 800363e:	2008      	movs	r0, #8
 8003640:	f005 ff60 	bl	8009504 <malloc>
 8003644:	4603      	mov	r3, r0
 8003646:	60fb      	str	r3, [r7, #12]
    p->row = r;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	601a      	str	r2, [r3, #0]
    p->col = c;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	605a      	str	r2, [r3, #4]
    return p;
 8003654:	68fb      	ldr	r3, [r7, #12]
}
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
	...

08003660 <insertQueue>:

void insertQueue(struct Cell* input) {
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
    queue[queueEnd] = input;
 8003668:	4b0f      	ldr	r3, [pc, #60]	@ (80036a8 <insertQueue+0x48>)
 800366a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800366e:	4619      	mov	r1, r3
 8003670:	4a0e      	ldr	r2, [pc, #56]	@ (80036ac <insertQueue+0x4c>)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

    queueEnd++;
 8003678:	4b0b      	ldr	r3, [pc, #44]	@ (80036a8 <insertQueue+0x48>)
 800367a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800367e:	b29b      	uxth	r3, r3
 8003680:	3301      	adds	r3, #1
 8003682:	b29b      	uxth	r3, r3
 8003684:	b21a      	sxth	r2, r3
 8003686:	4b08      	ldr	r3, [pc, #32]	@ (80036a8 <insertQueue+0x48>)
 8003688:	801a      	strh	r2, [r3, #0]

    if (queueEnd == 512) {
 800368a:	4b07      	ldr	r3, [pc, #28]	@ (80036a8 <insertQueue+0x48>)
 800368c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003690:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003694:	d102      	bne.n	800369c <insertQueue+0x3c>
        queueEnd = 0;
 8003696:	4b04      	ldr	r3, [pc, #16]	@ (80036a8 <insertQueue+0x48>)
 8003698:	2200      	movs	r2, #0
 800369a:	801a      	strh	r2, [r3, #0]
        //reset cause circular queue
    }
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bc80      	pop	{r7}
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	20000e8e 	.word	0x20000e8e
 80036ac:	2000068c 	.word	0x2000068c

080036b0 <popQueueFront>:

void popQueueFront()
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0
    free(queueFront());
 80036b4:	f000 f81a 	bl	80036ec <queueFront>
 80036b8:	4603      	mov	r3, r0
 80036ba:	4618      	mov	r0, r3
 80036bc:	f005 ff2a 	bl	8009514 <free>

    queueStart++;
 80036c0:	4b09      	ldr	r3, [pc, #36]	@ (80036e8 <popQueueFront+0x38>)
 80036c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	3301      	adds	r3, #1
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	b21a      	sxth	r2, r3
 80036ce:	4b06      	ldr	r3, [pc, #24]	@ (80036e8 <popQueueFront+0x38>)
 80036d0:	801a      	strh	r2, [r3, #0]
    if (queueStart == 512) {
 80036d2:	4b05      	ldr	r3, [pc, #20]	@ (80036e8 <popQueueFront+0x38>)
 80036d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036dc:	d102      	bne.n	80036e4 <popQueueFront+0x34>
        queueStart = 0;
 80036de:	4b02      	ldr	r3, [pc, #8]	@ (80036e8 <popQueueFront+0x38>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	801a      	strh	r2, [r3, #0]
        //reset cause circular queue
    }
}
 80036e4:	bf00      	nop
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	20000e8c 	.word	0x20000e8c

080036ec <queueFront>:

struct Cell* queueFront()
{
 80036ec:	b480      	push	{r7}
 80036ee:	af00      	add	r7, sp, #0
    return queue[queueStart];
 80036f0:	4b05      	ldr	r3, [pc, #20]	@ (8003708 <queueFront+0x1c>)
 80036f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036f6:	461a      	mov	r2, r3
 80036f8:	4b04      	ldr	r3, [pc, #16]	@ (800370c <queueFront+0x20>)
 80036fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 80036fe:	4618      	mov	r0, r3
 8003700:	46bd      	mov	sp, r7
 8003702:	bc80      	pop	{r7}
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	20000e8c 	.word	0x20000e8c
 800370c:	2000068c 	.word	0x2000068c

08003710 <initElements>:

void initElements()
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
    currPos = newCell(15, 0);           // Sets current position to row 15, column 0
 8003716:	2100      	movs	r1, #0
 8003718:	200f      	movs	r0, #15
 800371a:	f7ff ff8b 	bl	8003634 <newCell>
 800371e:	4603      	mov	r3, r0
 8003720:	4a34      	ldr	r2, [pc, #208]	@ (80037f4 <initElements+0xe4>)
 8003722:	6013      	str	r3, [r2, #0]
    currHead = NORTH;                    // Sets current heading to north
 8003724:	4b34      	ldr	r3, [pc, #208]	@ (80037f8 <initElements+0xe8>)
 8003726:	2200      	movs	r2, #0
 8003728:	701a      	strb	r2, [r3, #0]

    if (HAL_GPIO_ReadPin(Switch2_GPIO_Port, Switch2_Pin) == GPIO_PIN_SET)	// This is not the first run and we want to load maze
 800372a:	2104      	movs	r1, #4
 800372c:	4833      	ldr	r0, [pc, #204]	@ (80037fc <initElements+0xec>)
 800372e:	f003 f831 	bl	8006794 <HAL_GPIO_ReadPin>
 8003732:	4603      	mov	r3, r0
 8003734:	2b01      	cmp	r3, #1
 8003736:	d102      	bne.n	800373e <initElements+0x2e>
    {
    	loadMaze();
 8003738:	f000 fd4a 	bl	80041d0 <loadMaze>
 800373c:	e04f      	b.n	80037de <initElements+0xce>
    }
    else																	// We don't want to load maze from memory
    {
        for (int i = 0; i < 17; i++) {
 800373e:	2300      	movs	r3, #0
 8003740:	617b      	str	r3, [r7, #20]
 8003742:	e013      	b.n	800376c <initElements+0x5c>
            for (int j = 0; j < 16; j++) {
 8003744:	2300      	movs	r3, #0
 8003746:	613b      	str	r3, [r7, #16]
 8003748:	e00a      	b.n	8003760 <initElements+0x50>
                horzWall[i][j] = 0;
 800374a:	492d      	ldr	r1, [pc, #180]	@ (8003800 <initElements+0xf0>)
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	011a      	lsls	r2, r3, #4
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	4413      	add	r3, r2
 8003754:	2200      	movs	r2, #0
 8003756:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            for (int j = 0; j < 16; j++) {
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	3301      	adds	r3, #1
 800375e:	613b      	str	r3, [r7, #16]
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	2b0f      	cmp	r3, #15
 8003764:	ddf1      	ble.n	800374a <initElements+0x3a>
        for (int i = 0; i < 17; i++) {
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	3301      	adds	r3, #1
 800376a:	617b      	str	r3, [r7, #20]
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	2b10      	cmp	r3, #16
 8003770:	dde8      	ble.n	8003744 <initElements+0x34>
            }
        }
        for (int i = 0; i < 16; i++) {
 8003772:	2300      	movs	r3, #0
 8003774:	60fb      	str	r3, [r7, #12]
 8003776:	e015      	b.n	80037a4 <initElements+0x94>
            for (int j = 0; j < 17; j++) {
 8003778:	2300      	movs	r3, #0
 800377a:	60bb      	str	r3, [r7, #8]
 800377c:	e00c      	b.n	8003798 <initElements+0x88>
                vertWall[i][j] = 0;
 800377e:	4921      	ldr	r1, [pc, #132]	@ (8003804 <initElements+0xf4>)
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	4613      	mov	r3, r2
 8003784:	011b      	lsls	r3, r3, #4
 8003786:	4413      	add	r3, r2
 8003788:	68ba      	ldr	r2, [r7, #8]
 800378a:	4413      	add	r3, r2
 800378c:	2200      	movs	r2, #0
 800378e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            for (int j = 0; j < 17; j++) {
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	3301      	adds	r3, #1
 8003796:	60bb      	str	r3, [r7, #8]
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	2b10      	cmp	r3, #16
 800379c:	ddef      	ble.n	800377e <initElements+0x6e>
        for (int i = 0; i < 16; i++) {
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	3301      	adds	r3, #1
 80037a2:	60fb      	str	r3, [r7, #12]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2b0f      	cmp	r3, #15
 80037a8:	dde6      	ble.n	8003778 <initElements+0x68>
            }
        }
		for (int i = 0; i < 16; i++) {
 80037aa:	2300      	movs	r3, #0
 80037ac:	607b      	str	r3, [r7, #4]
 80037ae:	e013      	b.n	80037d8 <initElements+0xc8>
			for (int j = 0; j < 16; j++) {
 80037b0:	2300      	movs	r3, #0
 80037b2:	603b      	str	r3, [r7, #0]
 80037b4:	e00a      	b.n	80037cc <initElements+0xbc>
				discovered[i][j] = 0;
 80037b6:	4914      	ldr	r1, [pc, #80]	@ (8003808 <initElements+0xf8>)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	011a      	lsls	r2, r3, #4
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	4413      	add	r3, r2
 80037c0:	2200      	movs	r2, #0
 80037c2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for (int j = 0; j < 16; j++) {
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	3301      	adds	r3, #1
 80037ca:	603b      	str	r3, [r7, #0]
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	2b0f      	cmp	r3, #15
 80037d0:	ddf1      	ble.n	80037b6 <initElements+0xa6>
		for (int i = 0; i < 16; i++) {
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	3301      	adds	r3, #1
 80037d6:	607b      	str	r3, [r7, #4]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b0f      	cmp	r3, #15
 80037dc:	dde8      	ble.n	80037b0 <initElements+0xa0>
			}
		}
    }

    queueStart = 0;
 80037de:	4b0b      	ldr	r3, [pc, #44]	@ (800380c <initElements+0xfc>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	801a      	strh	r2, [r3, #0]
    queueEnd = 0;
 80037e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003810 <initElements+0x100>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	801a      	strh	r2, [r3, #0]
}
 80037ea:	bf00      	nop
 80037ec:	3718      	adds	r7, #24
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	20000484 	.word	0x20000484
 80037f8:	20000488 	.word	0x20000488
 80037fc:	40020c00 	.word	0x40020c00
 8003800:	20000e90 	.word	0x20000e90
 8003804:	200010b0 	.word	0x200010b0
 8003808:	200012d0 	.word	0x200012d0
 800380c:	20000e8c 	.word	0x20000e8c
 8003810:	20000e8e 	.word	0x20000e8e

08003814 <setWall>:

void setWall(int dir)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
    switch (dir)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b03      	cmp	r3, #3
 8003820:	d844      	bhi.n	80038ac <setWall+0x98>
 8003822:	a201      	add	r2, pc, #4	@ (adr r2, 8003828 <setWall+0x14>)
 8003824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003828:	08003839 	.word	0x08003839
 800382c:	08003853 	.word	0x08003853
 8003830:	08003873 	.word	0x08003873
 8003834:	0800388f 	.word	0x0800388f
    {
    case NORTH:
        horzWall[currPos->row][currPos->col] = 1;   // Sets the 2D array value to 1 to represent true (there's no bool type in C)
 8003838:	4b1f      	ldr	r3, [pc, #124]	@ (80038b8 <setWall+0xa4>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	4b1e      	ldr	r3, [pc, #120]	@ (80038b8 <setWall+0xa4>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	491d      	ldr	r1, [pc, #116]	@ (80038bc <setWall+0xa8>)
 8003846:	0112      	lsls	r2, r2, #4
 8003848:	4413      	add	r3, r2
 800384a:	2201      	movs	r2, #1
 800384c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        break;
 8003850:	e02c      	b.n	80038ac <setWall+0x98>
    case EAST:
        vertWall[currPos->row][currPos->col + 1] = 1;   // May need to check 2D array logic my head hurts lol
 8003852:	4b19      	ldr	r3, [pc, #100]	@ (80038b8 <setWall+0xa4>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	4b17      	ldr	r3, [pc, #92]	@ (80038b8 <setWall+0xa4>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	1c59      	adds	r1, r3, #1
 8003860:	4817      	ldr	r0, [pc, #92]	@ (80038c0 <setWall+0xac>)
 8003862:	4613      	mov	r3, r2
 8003864:	011b      	lsls	r3, r3, #4
 8003866:	4413      	add	r3, r2
 8003868:	440b      	add	r3, r1
 800386a:	2201      	movs	r2, #1
 800386c:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        break;
 8003870:	e01c      	b.n	80038ac <setWall+0x98>
    case SOUTH:
        horzWall[currPos->row + 1][currPos->col] = 1;
 8003872:	4b11      	ldr	r3, [pc, #68]	@ (80038b8 <setWall+0xa4>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	1c5a      	adds	r2, r3, #1
 800387a:	4b0f      	ldr	r3, [pc, #60]	@ (80038b8 <setWall+0xa4>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	490e      	ldr	r1, [pc, #56]	@ (80038bc <setWall+0xa8>)
 8003882:	0112      	lsls	r2, r2, #4
 8003884:	4413      	add	r3, r2
 8003886:	2201      	movs	r2, #1
 8003888:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        break;
 800388c:	e00e      	b.n	80038ac <setWall+0x98>
    case WEST:
        vertWall[currPos->row][currPos->col] = 1;
 800388e:	4b0a      	ldr	r3, [pc, #40]	@ (80038b8 <setWall+0xa4>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	4b08      	ldr	r3, [pc, #32]	@ (80038b8 <setWall+0xa4>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6859      	ldr	r1, [r3, #4]
 800389a:	4809      	ldr	r0, [pc, #36]	@ (80038c0 <setWall+0xac>)
 800389c:	4613      	mov	r3, r2
 800389e:	011b      	lsls	r3, r3, #4
 80038a0:	4413      	add	r3, r2
 80038a2:	440b      	add	r3, r1
 80038a4:	2201      	movs	r2, #1
 80038a6:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        break;
 80038aa:	bf00      	nop
    }
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bc80      	pop	{r7}
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	20000484 	.word	0x20000484
 80038bc:	20000e90 	.word	0x20000e90
 80038c0:	200010b0 	.word	0x200010b0

080038c4 <detectWalls>:

void detectWalls()
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
    switch (currHead)
 80038c8:	4b44      	ldr	r3, [pc, #272]	@ (80039dc <detectWalls+0x118>)
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	2b03      	cmp	r3, #3
 80038ce:	d876      	bhi.n	80039be <detectWalls+0xfa>
 80038d0:	a201      	add	r2, pc, #4	@ (adr r2, 80038d8 <detectWalls+0x14>)
 80038d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d6:	bf00      	nop
 80038d8:	080038e9 	.word	0x080038e9
 80038dc:	0800391b 	.word	0x0800391b
 80038e0:	0800394d 	.word	0x0800394d
 80038e4:	0800397f 	.word	0x0800397f
    {
    case NORTH:
        if (frontWallCheck())
 80038e8:	f001 f9c8 	bl	8004c7c <frontWallCheck>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d002      	beq.n	80038f8 <detectWalls+0x34>
        {
            setWall(NORTH);
 80038f2:	2000      	movs	r0, #0
 80038f4:	f7ff ff8e 	bl	8003814 <setWall>
        }
        if (leftWallCheck())
 80038f8:	f001 f988 	bl	8004c0c <leftWallCheck>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d002      	beq.n	8003908 <detectWalls+0x44>
        {
            setWall(WEST);
 8003902:	2003      	movs	r0, #3
 8003904:	f7ff ff86 	bl	8003814 <setWall>
        }
        if (rightWallCheck())
 8003908:	f001 f99c 	bl	8004c44 <rightWallCheck>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d04e      	beq.n	80039b0 <detectWalls+0xec>
        {
            setWall(EAST);
 8003912:	2001      	movs	r0, #1
 8003914:	f7ff ff7e 	bl	8003814 <setWall>
        }
        break;
 8003918:	e04a      	b.n	80039b0 <detectWalls+0xec>
    case EAST:
        if (frontWallCheck())
 800391a:	f001 f9af 	bl	8004c7c <frontWallCheck>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d002      	beq.n	800392a <detectWalls+0x66>
        {
            setWall(EAST);
 8003924:	2001      	movs	r0, #1
 8003926:	f7ff ff75 	bl	8003814 <setWall>
        }
        if (leftWallCheck())
 800392a:	f001 f96f 	bl	8004c0c <leftWallCheck>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d002      	beq.n	800393a <detectWalls+0x76>
        {
            setWall(NORTH);
 8003934:	2000      	movs	r0, #0
 8003936:	f7ff ff6d 	bl	8003814 <setWall>
        }
        if (rightWallCheck())
 800393a:	f001 f983 	bl	8004c44 <rightWallCheck>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d037      	beq.n	80039b4 <detectWalls+0xf0>
        {
            setWall(SOUTH);
 8003944:	2002      	movs	r0, #2
 8003946:	f7ff ff65 	bl	8003814 <setWall>
        }
        break;
 800394a:	e033      	b.n	80039b4 <detectWalls+0xf0>
    case SOUTH:
        if (frontWallCheck())
 800394c:	f001 f996 	bl	8004c7c <frontWallCheck>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d002      	beq.n	800395c <detectWalls+0x98>
        {
            setWall(SOUTH);
 8003956:	2002      	movs	r0, #2
 8003958:	f7ff ff5c 	bl	8003814 <setWall>
        }
        if (leftWallCheck())
 800395c:	f001 f956 	bl	8004c0c <leftWallCheck>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d002      	beq.n	800396c <detectWalls+0xa8>
        {
            setWall(EAST);
 8003966:	2001      	movs	r0, #1
 8003968:	f7ff ff54 	bl	8003814 <setWall>
        }
        if (rightWallCheck())
 800396c:	f001 f96a 	bl	8004c44 <rightWallCheck>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d020      	beq.n	80039b8 <detectWalls+0xf4>
        {
            setWall(WEST);
 8003976:	2003      	movs	r0, #3
 8003978:	f7ff ff4c 	bl	8003814 <setWall>
        }
        break;
 800397c:	e01c      	b.n	80039b8 <detectWalls+0xf4>
    case WEST:
        if (frontWallCheck())
 800397e:	f001 f97d 	bl	8004c7c <frontWallCheck>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d002      	beq.n	800398e <detectWalls+0xca>
        {
            setWall(WEST);
 8003988:	2003      	movs	r0, #3
 800398a:	f7ff ff43 	bl	8003814 <setWall>
        }
        if (leftWallCheck())
 800398e:	f001 f93d 	bl	8004c0c <leftWallCheck>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d002      	beq.n	800399e <detectWalls+0xda>
        {
            setWall(SOUTH);
 8003998:	2002      	movs	r0, #2
 800399a:	f7ff ff3b 	bl	8003814 <setWall>
        }
        if (rightWallCheck())
 800399e:	f001 f951 	bl	8004c44 <rightWallCheck>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d009      	beq.n	80039bc <detectWalls+0xf8>
        {
            setWall(NORTH);
 80039a8:	2000      	movs	r0, #0
 80039aa:	f7ff ff33 	bl	8003814 <setWall>
        }
        break;
 80039ae:	e005      	b.n	80039bc <detectWalls+0xf8>
        break;
 80039b0:	bf00      	nop
 80039b2:	e004      	b.n	80039be <detectWalls+0xfa>
        break;
 80039b4:	bf00      	nop
 80039b6:	e002      	b.n	80039be <detectWalls+0xfa>
        break;
 80039b8:	bf00      	nop
 80039ba:	e000      	b.n	80039be <detectWalls+0xfa>
        break;
 80039bc:	bf00      	nop
    }

    discovered[currPos->row][currPos->col] = 1;		// Mark current cell as discovered
 80039be:	4b08      	ldr	r3, [pc, #32]	@ (80039e0 <detectWalls+0x11c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	4b06      	ldr	r3, [pc, #24]	@ (80039e0 <detectWalls+0x11c>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	4906      	ldr	r1, [pc, #24]	@ (80039e4 <detectWalls+0x120>)
 80039cc:	0112      	lsls	r2, r2, #4
 80039ce:	4413      	add	r3, r2
 80039d0:	2201      	movs	r2, #1
 80039d2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 80039d6:	bf00      	nop
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	20000488 	.word	0x20000488
 80039e0:	20000484 	.word	0x20000484
 80039e4:	200012d0 	.word	0x200012d0

080039e8 <recalculate>:

void recalculate()
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af00      	add	r7, sp, #0
    queueStart = 0;
 80039ee:	4bab      	ldr	r3, [pc, #684]	@ (8003c9c <recalculate+0x2b4>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	801a      	strh	r2, [r3, #0]
    queueEnd = 0;
 80039f4:	4baa      	ldr	r3, [pc, #680]	@ (8003ca0 <recalculate+0x2b8>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	801a      	strh	r2, [r3, #0]

    // Mark all cells as -1, meaning that they have not had their Manhattan set yet
    for (int j = 0; j < 16; j++)
 80039fa:	2300      	movs	r3, #0
 80039fc:	617b      	str	r3, [r7, #20]
 80039fe:	e014      	b.n	8003a2a <recalculate+0x42>
    {
        for (int i = 0; i < 16; i++)
 8003a00:	2300      	movs	r3, #0
 8003a02:	613b      	str	r3, [r7, #16]
 8003a04:	e00b      	b.n	8003a1e <recalculate+0x36>
        {
            Manhattans[i][j] = -1;
 8003a06:	49a7      	ldr	r1, [pc, #668]	@ (8003ca4 <recalculate+0x2bc>)
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	011a      	lsls	r2, r3, #4
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	4413      	add	r3, r2
 8003a10:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003a14:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        for (int i = 0; i < 16; i++)
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	613b      	str	r3, [r7, #16]
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	2b0f      	cmp	r3, #15
 8003a22:	ddf0      	ble.n	8003a06 <recalculate+0x1e>
    for (int j = 0; j < 16; j++)
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	3301      	adds	r3, #1
 8003a28:	617b      	str	r3, [r7, #20]
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	2b0f      	cmp	r3, #15
 8003a2e:	dde7      	ble.n	8003a00 <recalculate+0x18>
        }
    }

    if(goToCenter)
 8003a30:	4b9d      	ldr	r3, [pc, #628]	@ (8003ca8 <recalculate+0x2c0>)
 8003a32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d030      	beq.n	8003a9c <recalculate+0xb4>
    {
        // Set middle four manhattan distances to 0, and insert all 4 into queue (set middle as destination)
       Manhattans[7][7] = 0;
 8003a3a:	4b9a      	ldr	r3, [pc, #616]	@ (8003ca4 <recalculate+0x2bc>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f8a3 20ee 	strh.w	r2, [r3, #238]	@ 0xee
       Manhattans[7][8] = 0;
 8003a42:	4b98      	ldr	r3, [pc, #608]	@ (8003ca4 <recalculate+0x2bc>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	f8a3 20f0 	strh.w	r2, [r3, #240]	@ 0xf0
       Manhattans[8][7] = 0;
 8003a4a:	4b96      	ldr	r3, [pc, #600]	@ (8003ca4 <recalculate+0x2bc>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f8a3 210e 	strh.w	r2, [r3, #270]	@ 0x10e
       Manhattans[8][8] = 0;
 8003a52:	4b94      	ldr	r3, [pc, #592]	@ (8003ca4 <recalculate+0x2bc>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	f8a3 2110 	strh.w	r2, [r3, #272]	@ 0x110
       insertQueue(newCell(7, 7));
 8003a5a:	2107      	movs	r1, #7
 8003a5c:	2007      	movs	r0, #7
 8003a5e:	f7ff fde9 	bl	8003634 <newCell>
 8003a62:	4603      	mov	r3, r0
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7ff fdfb 	bl	8003660 <insertQueue>
       insertQueue(newCell(7, 8));
 8003a6a:	2108      	movs	r1, #8
 8003a6c:	2007      	movs	r0, #7
 8003a6e:	f7ff fde1 	bl	8003634 <newCell>
 8003a72:	4603      	mov	r3, r0
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7ff fdf3 	bl	8003660 <insertQueue>
       insertQueue(newCell(8, 7));
 8003a7a:	2107      	movs	r1, #7
 8003a7c:	2008      	movs	r0, #8
 8003a7e:	f7ff fdd9 	bl	8003634 <newCell>
 8003a82:	4603      	mov	r3, r0
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7ff fdeb 	bl	8003660 <insertQueue>
       insertQueue(newCell(8, 8));
 8003a8a:	2108      	movs	r1, #8
 8003a8c:	2008      	movs	r0, #8
 8003a8e:	f7ff fdd1 	bl	8003634 <newCell>
 8003a92:	4603      	mov	r3, r0
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7ff fde3 	bl	8003660 <insertQueue>
 8003a9a:	e0f1      	b.n	8003c80 <recalculate+0x298>
    }

    else
    {
        // Set starting cell to 0, insert starting cell into queue (set start as destination)
        Manhattans[15][0] = 0;
 8003a9c:	4b81      	ldr	r3, [pc, #516]	@ (8003ca4 <recalculate+0x2bc>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f8a3 21e0 	strh.w	r2, [r3, #480]	@ 0x1e0
        insertQueue(newCell(15, 0));
 8003aa4:	2100      	movs	r1, #0
 8003aa6:	200f      	movs	r0, #15
 8003aa8:	f7ff fdc4 	bl	8003634 <newCell>
 8003aac:	4603      	mov	r3, r0
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7ff fdd6 	bl	8003660 <insertQueue>
    }


    //while queue is not empty
    while (queueStart != queueEnd) {
 8003ab4:	e0e4      	b.n	8003c80 <recalculate+0x298>

        struct Cell* currElement = queueFront();
 8003ab6:	f7ff fe19 	bl	80036ec <queueFront>
 8003aba:	60f8      	str	r0, [r7, #12]

        int currRow = currElement->row;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	60bb      	str	r3, [r7, #8]
        int currCol = currElement->col;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	607b      	str	r3, [r7, #4]

        // For all accessable neighbors with no set Manhattan distance, add cell to queue and set Manhattan to current Manhattan + 1

        //north wall
        if (currRow > 0 && horzWall[currRow][currCol] != 1 && Manhattans[currRow - 1][currCol] == -1) {
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	dd31      	ble.n	8003b32 <recalculate+0x14a>
 8003ace:	4977      	ldr	r1, [pc, #476]	@ (8003cac <recalculate+0x2c4>)
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	011a      	lsls	r2, r3, #4
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d028      	beq.n	8003b32 <recalculate+0x14a>
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	496f      	ldr	r1, [pc, #444]	@ (8003ca4 <recalculate+0x2bc>)
 8003ae6:	011a      	lsls	r2, r3, #4
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4413      	add	r3, r2
 8003aec:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af4:	d11d      	bne.n	8003b32 <recalculate+0x14a>
            Manhattans[currRow - 1][currCol] = Manhattans[currRow][currCol] + 1;
 8003af6:	496b      	ldr	r1, [pc, #428]	@ (8003ca4 <recalculate+0x2bc>)
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	011a      	lsls	r2, r3, #4
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4413      	add	r3, r2
 8003b00:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	3301      	adds	r3, #1
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	b210      	sxth	r0, r2
 8003b10:	4964      	ldr	r1, [pc, #400]	@ (8003ca4 <recalculate+0x2bc>)
 8003b12:	011a      	lsls	r2, r3, #4
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4413      	add	r3, r2
 8003b18:	4602      	mov	r2, r0
 8003b1a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            insertQueue(newCell(currRow - 1, currCol));
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	3b01      	subs	r3, #1
 8003b22:	6879      	ldr	r1, [r7, #4]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7ff fd85 	bl	8003634 <newCell>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7ff fd97 	bl	8003660 <insertQueue>
        }
        //east wall
        if (currCol < 15 && vertWall[currRow][currCol + 1] != 1 && Manhattans[currRow][currCol + 1] == -1) {
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b0e      	cmp	r3, #14
 8003b36:	dc34      	bgt.n	8003ba2 <recalculate+0x1ba>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	1c59      	adds	r1, r3, #1
 8003b3c:	485c      	ldr	r0, [pc, #368]	@ (8003cb0 <recalculate+0x2c8>)
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	4613      	mov	r3, r2
 8003b42:	011b      	lsls	r3, r3, #4
 8003b44:	4413      	add	r3, r2
 8003b46:	440b      	add	r3, r1
 8003b48:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d028      	beq.n	8003ba2 <recalculate+0x1ba>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	3301      	adds	r3, #1
 8003b54:	4953      	ldr	r1, [pc, #332]	@ (8003ca4 <recalculate+0x2bc>)
 8003b56:	68ba      	ldr	r2, [r7, #8]
 8003b58:	0112      	lsls	r2, r2, #4
 8003b5a:	4413      	add	r3, r2
 8003b5c:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b64:	d11d      	bne.n	8003ba2 <recalculate+0x1ba>
            Manhattans[currRow][currCol + 1] = Manhattans[currRow][currCol] + 1;
 8003b66:	494f      	ldr	r1, [pc, #316]	@ (8003ca4 <recalculate+0x2bc>)
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	011a      	lsls	r2, r3, #4
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4413      	add	r3, r2
 8003b70:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	3301      	adds	r3, #1
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	b210      	sxth	r0, r2
 8003b80:	4948      	ldr	r1, [pc, #288]	@ (8003ca4 <recalculate+0x2bc>)
 8003b82:	68ba      	ldr	r2, [r7, #8]
 8003b84:	0112      	lsls	r2, r2, #4
 8003b86:	4413      	add	r3, r2
 8003b88:	4602      	mov	r2, r0
 8003b8a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            insertQueue(newCell(currRow, currCol + 1));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	3301      	adds	r3, #1
 8003b92:	4619      	mov	r1, r3
 8003b94:	68b8      	ldr	r0, [r7, #8]
 8003b96:	f7ff fd4d 	bl	8003634 <newCell>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7ff fd5f 	bl	8003660 <insertQueue>
        }
        //south wall
        if (currRow < 15 && horzWall[currRow + 1][currCol] != 1 && Manhattans[currRow + 1][currCol] == -1) {
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	2b0e      	cmp	r3, #14
 8003ba6:	dc32      	bgt.n	8003c0e <recalculate+0x226>
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	3301      	adds	r3, #1
 8003bac:	493f      	ldr	r1, [pc, #252]	@ (8003cac <recalculate+0x2c4>)
 8003bae:	011a      	lsls	r2, r3, #4
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d028      	beq.n	8003c0e <recalculate+0x226>
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	4938      	ldr	r1, [pc, #224]	@ (8003ca4 <recalculate+0x2bc>)
 8003bc2:	011a      	lsls	r2, r3, #4
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd0:	d11d      	bne.n	8003c0e <recalculate+0x226>
            Manhattans[currRow + 1][currCol] = Manhattans[currRow][currCol] + 1;
 8003bd2:	4934      	ldr	r1, [pc, #208]	@ (8003ca4 <recalculate+0x2bc>)
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	011a      	lsls	r2, r3, #4
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4413      	add	r3, r2
 8003bdc:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	3301      	adds	r3, #1
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	3301      	adds	r3, #1
 8003bea:	b210      	sxth	r0, r2
 8003bec:	492d      	ldr	r1, [pc, #180]	@ (8003ca4 <recalculate+0x2bc>)
 8003bee:	011a      	lsls	r2, r3, #4
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            insertQueue(newCell(currRow + 1, currCol));
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	6879      	ldr	r1, [r7, #4]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7ff fd17 	bl	8003634 <newCell>
 8003c06:	4603      	mov	r3, r0
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7ff fd29 	bl	8003660 <insertQueue>
        }
        //west wall
        if (currCol > 0 && vertWall[currRow][currCol] != 1 && Manhattans[currRow][currCol - 1] == -1) {
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	dd33      	ble.n	8003c7c <recalculate+0x294>
 8003c14:	4926      	ldr	r1, [pc, #152]	@ (8003cb0 <recalculate+0x2c8>)
 8003c16:	68ba      	ldr	r2, [r7, #8]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	011b      	lsls	r3, r3, #4
 8003c1c:	4413      	add	r3, r2
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	4413      	add	r3, r2
 8003c22:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d028      	beq.n	8003c7c <recalculate+0x294>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	491d      	ldr	r1, [pc, #116]	@ (8003ca4 <recalculate+0x2bc>)
 8003c30:	68ba      	ldr	r2, [r7, #8]
 8003c32:	0112      	lsls	r2, r2, #4
 8003c34:	4413      	add	r3, r2
 8003c36:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c3e:	d11d      	bne.n	8003c7c <recalculate+0x294>
            Manhattans[currRow][currCol - 1] = Manhattans[currRow][currCol] + 1;
 8003c40:	4918      	ldr	r1, [pc, #96]	@ (8003ca4 <recalculate+0x2bc>)
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	011a      	lsls	r2, r3, #4
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4413      	add	r3, r2
 8003c4a:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	3301      	adds	r3, #1
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	3b01      	subs	r3, #1
 8003c58:	b210      	sxth	r0, r2
 8003c5a:	4912      	ldr	r1, [pc, #72]	@ (8003ca4 <recalculate+0x2bc>)
 8003c5c:	68ba      	ldr	r2, [r7, #8]
 8003c5e:	0112      	lsls	r2, r2, #4
 8003c60:	4413      	add	r3, r2
 8003c62:	4602      	mov	r2, r0
 8003c64:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            insertQueue(newCell(currRow, currCol - 1));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	68b8      	ldr	r0, [r7, #8]
 8003c70:	f7ff fce0 	bl	8003634 <newCell>
 8003c74:	4603      	mov	r3, r0
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7ff fcf2 	bl	8003660 <insertQueue>
        }

        // Deletes cell from queue and frees memory
        popQueueFront();
 8003c7c:	f7ff fd18 	bl	80036b0 <popQueueFront>
    while (queueStart != queueEnd) {
 8003c80:	4b06      	ldr	r3, [pc, #24]	@ (8003c9c <recalculate+0x2b4>)
 8003c82:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003c86:	4b06      	ldr	r3, [pc, #24]	@ (8003ca0 <recalculate+0x2b8>)
 8003c88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	f47f af12 	bne.w	8003ab6 <recalculate+0xce>
    }
}
 8003c92:	bf00      	nop
 8003c94:	bf00      	nop
 8003c96:	3718      	adds	r7, #24
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	20000e8c 	.word	0x20000e8c
 8003ca0:	20000e8e 	.word	0x20000e8e
 8003ca4:	2000048c 	.word	0x2000048c
 8003ca8:	20000008 	.word	0x20000008
 8003cac:	20000e90 	.word	0x20000e90
 8003cb0:	200010b0 	.word	0x200010b0

08003cb4 <solver>:

Action solver(Algorithm alg) {
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	4603      	mov	r3, r0
 8003cbc:	71fb      	strb	r3, [r7, #7]
    switch (alg)
 8003cbe:	79fb      	ldrb	r3, [r7, #7]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d002      	beq.n	8003cca <solver+0x16>
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d004      	beq.n	8003cd2 <solver+0x1e>
 8003cc8:	e007      	b.n	8003cda <solver+0x26>
    {
    case DEAD:
    	return deadReckoning();
 8003cca:	f000 f80b 	bl	8003ce4 <deadReckoning>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	e004      	b.n	8003cdc <solver+0x28>
    	break;
    case FLOODFILL:
    	return floodFill();
 8003cd2:	f000 f81b 	bl	8003d0c <floodFill>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	e000      	b.n	8003cdc <solver+0x28>
    	break;
    default:
    	return FORWARD;
 8003cda:	2301      	movs	r3, #1
    }
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3708      	adds	r7, #8
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <deadReckoning>:

Action deadReckoning() {       // The simple left wall following algorithm that they provided
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0
	if (!frontWallCheck())
 8003ce8:	f000 ffc8 	bl	8004c7c <frontWallCheck>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <deadReckoning+0x12>
	{
		return FORWARD;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e007      	b.n	8003d06 <deadReckoning+0x22>
	}
	else if (!rightWallCheck())
 8003cf6:	f000 ffa5 	bl	8004c44 <rightWallCheck>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <deadReckoning+0x20>
	{
		return RIGHT;
 8003d00:	2302      	movs	r3, #2
 8003d02:	e000      	b.n	8003d06 <deadReckoning+0x22>
	}
	else
	{
		return LEFT;
 8003d04:	2300      	movs	r3, #0
	}
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	bd80      	pop	{r7, pc}
	...

08003d0c <floodFill>:

Action floodFill() {
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b088      	sub	sp, #32
 8003d10:	af00      	add	r7, sp, #0
    // Initializes all the elements and calculates Manhattan distances
    if (!initialized)
 8003d12:	4ba0      	ldr	r3, [pc, #640]	@ (8003f94 <floodFill+0x288>)
 8003d14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d106      	bne.n	8003d2a <floodFill+0x1e>
    {
        initElements();
 8003d1c:	f7ff fcf8 	bl	8003710 <initElements>
        recalculate();
 8003d20:	f7ff fe62 	bl	80039e8 <recalculate>
        initialized = 1;
 8003d24:	4b9b      	ldr	r3, [pc, #620]	@ (8003f94 <floodFill+0x288>)
 8003d26:	2201      	movs	r2, #1
 8003d28:	801a      	strh	r2, [r3, #0]
    }

    // Lights up detected walls and adds them to the 2D wall arrays
    detectWalls();
 8003d2a:	f7ff fdcb 	bl	80038c4 <detectWalls>

    // Display all Manhattan distances in the API dispaly

    int row = currPos->row;
 8003d2e:	4b9a      	ldr	r3, [pc, #616]	@ (8003f98 <floodFill+0x28c>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	61bb      	str	r3, [r7, #24]
    int col = currPos->col;
 8003d36:	4b98      	ldr	r3, [pc, #608]	@ (8003f98 <floodFill+0x28c>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	617b      	str	r3, [r7, #20]

    // If goal has already been reached, set new destination to either middle or starting cell
    if (Manhattans[row][col] == 0)
 8003d3e:	4997      	ldr	r1, [pc, #604]	@ (8003f9c <floodFill+0x290>)
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	011a      	lsls	r2, r3, #4
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	4413      	add	r3, r2
 8003d48:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d119      	bne.n	8003d84 <floodFill+0x78>
    {
    	if (HAL_GPIO_ReadPin(Switch3_GPIO_Port, Switch3_Pin) == GPIO_PIN_SET)	// I want to save the finished maze on this run
 8003d50:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003d54:	4892      	ldr	r0, [pc, #584]	@ (8003fa0 <floodFill+0x294>)
 8003d56:	f002 fd1d 	bl	8006794 <HAL_GPIO_ReadPin>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d101      	bne.n	8003d64 <floodFill+0x58>
		{
			saveMaze();
 8003d60:	f000 fa26 	bl	80041b0 <saveMaze>
		}

        if (goToCenter)
 8003d64:	4b8f      	ldr	r3, [pc, #572]	@ (8003fa4 <floodFill+0x298>)
 8003d66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d003      	beq.n	8003d76 <floodFill+0x6a>
            goToCenter = 0; // Destination is now Starting Cell
 8003d6e:	4b8d      	ldr	r3, [pc, #564]	@ (8003fa4 <floodFill+0x298>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	801a      	strh	r2, [r3, #0]
 8003d74:	e002      	b.n	8003d7c <floodFill+0x70>
        else
            goToCenter = 1; // Destination is now middle four
 8003d76:	4b8b      	ldr	r3, [pc, #556]	@ (8003fa4 <floodFill+0x298>)
 8003d78:	2201      	movs	r2, #1
 8003d7a:	801a      	strh	r2, [r3, #0]

        recalculate();
 8003d7c:	f7ff fe34 	bl	80039e8 <recalculate>
        return IDLE;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e11e      	b.n	8003fc2 <floodFill+0x2b6>
    }

    int northBlocked = horzWall[row][col];
 8003d84:	4988      	ldr	r1, [pc, #544]	@ (8003fa8 <floodFill+0x29c>)
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	011a      	lsls	r2, r3, #4
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003d92:	613b      	str	r3, [r7, #16]
    int eastBlocked = vertWall[row][col + 1];
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	1c59      	adds	r1, r3, #1
 8003d98:	4884      	ldr	r0, [pc, #528]	@ (8003fac <floodFill+0x2a0>)
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	011b      	lsls	r3, r3, #4
 8003da0:	4413      	add	r3, r2
 8003da2:	440b      	add	r3, r1
 8003da4:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 8003da8:	60fb      	str	r3, [r7, #12]
    int southBlocked = horzWall[row + 1][col];
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	3301      	adds	r3, #1
 8003dae:	497e      	ldr	r1, [pc, #504]	@ (8003fa8 <floodFill+0x29c>)
 8003db0:	011a      	lsls	r2, r3, #4
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	4413      	add	r3, r2
 8003db6:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003dba:	60bb      	str	r3, [r7, #8]
    int westBlocked = vertWall[row][col];
 8003dbc:	497b      	ldr	r1, [pc, #492]	@ (8003fac <floodFill+0x2a0>)
 8003dbe:	69ba      	ldr	r2, [r7, #24]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	011b      	lsls	r3, r3, #4
 8003dc4:	4413      	add	r3, r2
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	4413      	add	r3, r2
 8003dca:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003dce:	607b      	str	r3, [r7, #4]

    // Find next heading
    int nextHead = -1;
 8003dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8003dd4:	61fb      	str	r3, [r7, #28]

    if (row != 0 && Manhattans[row - 1][col] < Manhattans[row][col] && !northBlocked)
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d016      	beq.n	8003e0a <floodFill+0xfe>
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	3b01      	subs	r3, #1
 8003de0:	496e      	ldr	r1, [pc, #440]	@ (8003f9c <floodFill+0x290>)
 8003de2:	011a      	lsls	r2, r3, #4
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	4413      	add	r3, r2
 8003de8:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
 8003dec:	486b      	ldr	r0, [pc, #428]	@ (8003f9c <floodFill+0x290>)
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	0119      	lsls	r1, r3, #4
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	440b      	add	r3, r1
 8003df6:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	da05      	bge.n	8003e0a <floodFill+0xfe>
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d102      	bne.n	8003e0a <floodFill+0xfe>
        nextHead = NORTH;
 8003e04:	2300      	movs	r3, #0
 8003e06:	61fb      	str	r3, [r7, #28]
 8003e08:	e04c      	b.n	8003ea4 <floodFill+0x198>
    else if (col != 15 && Manhattans[row][col + 1] < Manhattans[row][col] && !eastBlocked)
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	2b0f      	cmp	r3, #15
 8003e0e:	d016      	beq.n	8003e3e <floodFill+0x132>
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	3301      	adds	r3, #1
 8003e14:	4961      	ldr	r1, [pc, #388]	@ (8003f9c <floodFill+0x290>)
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	0112      	lsls	r2, r2, #4
 8003e1a:	4413      	add	r3, r2
 8003e1c:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
 8003e20:	485e      	ldr	r0, [pc, #376]	@ (8003f9c <floodFill+0x290>)
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	0119      	lsls	r1, r3, #4
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	440b      	add	r3, r1
 8003e2a:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	da05      	bge.n	8003e3e <floodFill+0x132>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d102      	bne.n	8003e3e <floodFill+0x132>
        nextHead = EAST;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	61fb      	str	r3, [r7, #28]
 8003e3c:	e032      	b.n	8003ea4 <floodFill+0x198>
    else if (row != 15 && Manhattans[row + 1][col] < Manhattans[row][col] && !southBlocked)
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	2b0f      	cmp	r3, #15
 8003e42:	d016      	beq.n	8003e72 <floodFill+0x166>
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	3301      	adds	r3, #1
 8003e48:	4954      	ldr	r1, [pc, #336]	@ (8003f9c <floodFill+0x290>)
 8003e4a:	011a      	lsls	r2, r3, #4
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
 8003e54:	4851      	ldr	r0, [pc, #324]	@ (8003f9c <floodFill+0x290>)
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	0119      	lsls	r1, r3, #4
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	440b      	add	r3, r1
 8003e5e:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	da05      	bge.n	8003e72 <floodFill+0x166>
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d102      	bne.n	8003e72 <floodFill+0x166>
        nextHead = SOUTH;
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	61fb      	str	r3, [r7, #28]
 8003e70:	e018      	b.n	8003ea4 <floodFill+0x198>
    else if (col != 0 && Manhattans[row][col - 1] < Manhattans[row][col] && !westBlocked)
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d015      	beq.n	8003ea4 <floodFill+0x198>
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	4947      	ldr	r1, [pc, #284]	@ (8003f9c <floodFill+0x290>)
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	0112      	lsls	r2, r2, #4
 8003e82:	4413      	add	r3, r2
 8003e84:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
 8003e88:	4844      	ldr	r0, [pc, #272]	@ (8003f9c <floodFill+0x290>)
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	0119      	lsls	r1, r3, #4
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	440b      	add	r3, r1
 8003e92:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	da04      	bge.n	8003ea4 <floodFill+0x198>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <floodFill+0x198>
        nextHead = WEST;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	61fb      	str	r3, [r7, #28]

    // If no path available, then recalculta
    if (nextHead == -1)
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eaa:	d103      	bne.n	8003eb4 <floodFill+0x1a8>
    {
        recalculate();
 8003eac:	f7ff fd9c 	bl	80039e8 <recalculate>
        return IDLE;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e086      	b.n	8003fc2 <floodFill+0x2b6>
    }

    // If next heading is in same direction, move forward
    if (nextHead == currHead)
 8003eb4:	4b3e      	ldr	r3, [pc, #248]	@ (8003fb0 <floodFill+0x2a4>)
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	461a      	mov	r2, r3
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d129      	bne.n	8003f14 <floodFill+0x208>
    {
        switch (currHead)
 8003ec0:	4b3b      	ldr	r3, [pc, #236]	@ (8003fb0 <floodFill+0x2a4>)
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	2b03      	cmp	r3, #3
 8003ec6:	d823      	bhi.n	8003f10 <floodFill+0x204>
 8003ec8:	a201      	add	r2, pc, #4	@ (adr r2, 8003ed0 <floodFill+0x1c4>)
 8003eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ece:	bf00      	nop
 8003ed0:	08003ee1 	.word	0x08003ee1
 8003ed4:	08003eed 	.word	0x08003eed
 8003ed8:	08003ef9 	.word	0x08003ef9
 8003edc:	08003f05 	.word	0x08003f05
        {
        case NORTH:
            currPos->row--;
 8003ee0:	4b2d      	ldr	r3, [pc, #180]	@ (8003f98 <floodFill+0x28c>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	3a01      	subs	r2, #1
 8003ee8:	601a      	str	r2, [r3, #0]
            break;
 8003eea:	e011      	b.n	8003f10 <floodFill+0x204>
        case EAST:
            currPos->col++;
 8003eec:	4b2a      	ldr	r3, [pc, #168]	@ (8003f98 <floodFill+0x28c>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	685a      	ldr	r2, [r3, #4]
 8003ef2:	3201      	adds	r2, #1
 8003ef4:	605a      	str	r2, [r3, #4]
            break;
 8003ef6:	e00b      	b.n	8003f10 <floodFill+0x204>
        case SOUTH:
            currPos->row++;
 8003ef8:	4b27      	ldr	r3, [pc, #156]	@ (8003f98 <floodFill+0x28c>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	3201      	adds	r2, #1
 8003f00:	601a      	str	r2, [r3, #0]
            break;
 8003f02:	e005      	b.n	8003f10 <floodFill+0x204>
        case WEST:
            currPos->col--;
 8003f04:	4b24      	ldr	r3, [pc, #144]	@ (8003f98 <floodFill+0x28c>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	3a01      	subs	r2, #1
 8003f0c:	605a      	str	r2, [r3, #4]
            break;
 8003f0e:	bf00      	nop
        }
        return FORWARD;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e056      	b.n	8003fc2 <floodFill+0x2b6>
    }

    // If next heading is in opposite direction, turn right
    if ((nextHead - currHead) % 2 == 0)
 8003f14:	4b26      	ldr	r3, [pc, #152]	@ (8003fb0 <floodFill+0x2a4>)
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	461a      	mov	r2, r3
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	1a9b      	subs	r3, r3, r2
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10f      	bne.n	8003f46 <floodFill+0x23a>
    {
        if (currHead == WEST)
 8003f26:	4b22      	ldr	r3, [pc, #136]	@ (8003fb0 <floodFill+0x2a4>)
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	2b03      	cmp	r3, #3
 8003f2c:	d103      	bne.n	8003f36 <floodFill+0x22a>
            currHead = NORTH;
 8003f2e:	4b20      	ldr	r3, [pc, #128]	@ (8003fb0 <floodFill+0x2a4>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	701a      	strb	r2, [r3, #0]
 8003f34:	e005      	b.n	8003f42 <floodFill+0x236>
        else
            currHead++;
 8003f36:	4b1e      	ldr	r3, [pc, #120]	@ (8003fb0 <floodFill+0x2a4>)
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	b2da      	uxtb	r2, r3
 8003f3e:	4b1c      	ldr	r3, [pc, #112]	@ (8003fb0 <floodFill+0x2a4>)
 8003f40:	701a      	strb	r2, [r3, #0]
        return RIGHT;
 8003f42:	2302      	movs	r3, #2
 8003f44:	e03d      	b.n	8003fc2 <floodFill+0x2b6>
    }

    // If next heading is right, turn right
    if ((nextHead - currHead) == 1 || nextHead - currHead == -3)
 8003f46:	4b1a      	ldr	r3, [pc, #104]	@ (8003fb0 <floodFill+0x2a4>)
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	1a9b      	subs	r3, r3, r2
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d007      	beq.n	8003f64 <floodFill+0x258>
 8003f54:	4b16      	ldr	r3, [pc, #88]	@ (8003fb0 <floodFill+0x2a4>)
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	461a      	mov	r2, r3
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	1a9b      	subs	r3, r3, r2
 8003f5e:	f113 0f03 	cmn.w	r3, #3
 8003f62:	d10f      	bne.n	8003f84 <floodFill+0x278>
    {
        if (currHead == WEST)
 8003f64:	4b12      	ldr	r3, [pc, #72]	@ (8003fb0 <floodFill+0x2a4>)
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	2b03      	cmp	r3, #3
 8003f6a:	d103      	bne.n	8003f74 <floodFill+0x268>
            currHead = NORTH;
 8003f6c:	4b10      	ldr	r3, [pc, #64]	@ (8003fb0 <floodFill+0x2a4>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	701a      	strb	r2, [r3, #0]
 8003f72:	e005      	b.n	8003f80 <floodFill+0x274>
        else
            currHead++;
 8003f74:	4b0e      	ldr	r3, [pc, #56]	@ (8003fb0 <floodFill+0x2a4>)
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	3301      	adds	r3, #1
 8003f7a:	b2da      	uxtb	r2, r3
 8003f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8003fb0 <floodFill+0x2a4>)
 8003f7e:	701a      	strb	r2, [r3, #0]
        return RIGHT;
 8003f80:	2302      	movs	r3, #2
 8003f82:	e01e      	b.n	8003fc2 <floodFill+0x2b6>
    }

    // else, turn left
    if (currHead == NORTH)
 8003f84:	4b0a      	ldr	r3, [pc, #40]	@ (8003fb0 <floodFill+0x2a4>)
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d113      	bne.n	8003fb4 <floodFill+0x2a8>
        currHead = WEST;
 8003f8c:	4b08      	ldr	r3, [pc, #32]	@ (8003fb0 <floodFill+0x2a4>)
 8003f8e:	2203      	movs	r2, #3
 8003f90:	701a      	strb	r2, [r3, #0]
 8003f92:	e015      	b.n	8003fc0 <floodFill+0x2b4>
 8003f94:	20000482 	.word	0x20000482
 8003f98:	20000484 	.word	0x20000484
 8003f9c:	2000048c 	.word	0x2000048c
 8003fa0:	40020000 	.word	0x40020000
 8003fa4:	20000008 	.word	0x20000008
 8003fa8:	20000e90 	.word	0x20000e90
 8003fac:	200010b0 	.word	0x200010b0
 8003fb0:	20000488 	.word	0x20000488
    else
        currHead--;
 8003fb4:	4b05      	ldr	r3, [pc, #20]	@ (8003fcc <floodFill+0x2c0>)
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	b2da      	uxtb	r2, r3
 8003fbc:	4b03      	ldr	r3, [pc, #12]	@ (8003fcc <floodFill+0x2c0>)
 8003fbe:	701a      	strb	r2, [r3, #0]
    return LEFT;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3720      	adds	r7, #32
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	20000488 	.word	0x20000488

08003fd0 <foresight>:

int foresight() {
 8003fd0:	b480      	push	{r7}
 8003fd2:	b089      	sub	sp, #36	@ 0x24
 8003fd4:	af00      	add	r7, sp, #0
	int row = currPos->row;
 8003fd6:	4b70      	ldr	r3, [pc, #448]	@ (8004198 <foresight+0x1c8>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	61fb      	str	r3, [r7, #28]
	int col = currPos->col;
 8003fde:	4b6e      	ldr	r3, [pc, #440]	@ (8004198 <foresight+0x1c8>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	61bb      	str	r3, [r7, #24]

	int extra_moves = 0;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	617b      	str	r3, [r7, #20]

	while(discovered[row][col] != 0)
 8003fea:	e0c3      	b.n	8004174 <foresight+0x1a4>
	{
	    int northBlocked = horzWall[row][col];
 8003fec:	496b      	ldr	r1, [pc, #428]	@ (800419c <foresight+0x1cc>)
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	011a      	lsls	r2, r3, #4
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003ffa:	60fb      	str	r3, [r7, #12]
	    int eastBlocked = vertWall[row][col + 1];
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	1c59      	adds	r1, r3, #1
 8004000:	4867      	ldr	r0, [pc, #412]	@ (80041a0 <foresight+0x1d0>)
 8004002:	69fa      	ldr	r2, [r7, #28]
 8004004:	4613      	mov	r3, r2
 8004006:	011b      	lsls	r3, r3, #4
 8004008:	4413      	add	r3, r2
 800400a:	440b      	add	r3, r1
 800400c:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 8004010:	60bb      	str	r3, [r7, #8]
	    int southBlocked = horzWall[row + 1][col];
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	3301      	adds	r3, #1
 8004016:	4961      	ldr	r1, [pc, #388]	@ (800419c <foresight+0x1cc>)
 8004018:	011a      	lsls	r2, r3, #4
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	4413      	add	r3, r2
 800401e:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8004022:	607b      	str	r3, [r7, #4]
	    int westBlocked = vertWall[row][col];
 8004024:	495e      	ldr	r1, [pc, #376]	@ (80041a0 <foresight+0x1d0>)
 8004026:	69fa      	ldr	r2, [r7, #28]
 8004028:	4613      	mov	r3, r2
 800402a:	011b      	lsls	r3, r3, #4
 800402c:	4413      	add	r3, r2
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	4413      	add	r3, r2
 8004032:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8004036:	603b      	str	r3, [r7, #0]

	    // Find next heading
	    int nextHead = -1;
 8004038:	f04f 33ff 	mov.w	r3, #4294967295
 800403c:	613b      	str	r3, [r7, #16]

	    if (row != 0 && Manhattans[row - 1][col] < Manhattans[row][col] && !northBlocked)
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d016      	beq.n	8004072 <foresight+0xa2>
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	3b01      	subs	r3, #1
 8004048:	4956      	ldr	r1, [pc, #344]	@ (80041a4 <foresight+0x1d4>)
 800404a:	011a      	lsls	r2, r3, #4
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	4413      	add	r3, r2
 8004050:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
 8004054:	4853      	ldr	r0, [pc, #332]	@ (80041a4 <foresight+0x1d4>)
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	0119      	lsls	r1, r3, #4
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	440b      	add	r3, r1
 800405e:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 8004062:	429a      	cmp	r2, r3
 8004064:	da05      	bge.n	8004072 <foresight+0xa2>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d102      	bne.n	8004072 <foresight+0xa2>
	        nextHead = NORTH;
 800406c:	2300      	movs	r3, #0
 800406e:	613b      	str	r3, [r7, #16]
 8004070:	e04c      	b.n	800410c <foresight+0x13c>
	    else if (col != 15 && Manhattans[row][col + 1] < Manhattans[row][col] && !eastBlocked)
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	2b0f      	cmp	r3, #15
 8004076:	d016      	beq.n	80040a6 <foresight+0xd6>
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	3301      	adds	r3, #1
 800407c:	4949      	ldr	r1, [pc, #292]	@ (80041a4 <foresight+0x1d4>)
 800407e:	69fa      	ldr	r2, [r7, #28]
 8004080:	0112      	lsls	r2, r2, #4
 8004082:	4413      	add	r3, r2
 8004084:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
 8004088:	4846      	ldr	r0, [pc, #280]	@ (80041a4 <foresight+0x1d4>)
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	0119      	lsls	r1, r3, #4
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	440b      	add	r3, r1
 8004092:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 8004096:	429a      	cmp	r2, r3
 8004098:	da05      	bge.n	80040a6 <foresight+0xd6>
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d102      	bne.n	80040a6 <foresight+0xd6>
	        nextHead = EAST;
 80040a0:	2301      	movs	r3, #1
 80040a2:	613b      	str	r3, [r7, #16]
 80040a4:	e032      	b.n	800410c <foresight+0x13c>
	    else if (row != 15 && Manhattans[row + 1][col] < Manhattans[row][col] && !southBlocked)
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	2b0f      	cmp	r3, #15
 80040aa:	d016      	beq.n	80040da <foresight+0x10a>
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	3301      	adds	r3, #1
 80040b0:	493c      	ldr	r1, [pc, #240]	@ (80041a4 <foresight+0x1d4>)
 80040b2:	011a      	lsls	r2, r3, #4
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	4413      	add	r3, r2
 80040b8:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
 80040bc:	4839      	ldr	r0, [pc, #228]	@ (80041a4 <foresight+0x1d4>)
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	0119      	lsls	r1, r3, #4
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	440b      	add	r3, r1
 80040c6:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	da05      	bge.n	80040da <foresight+0x10a>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d102      	bne.n	80040da <foresight+0x10a>
	        nextHead = SOUTH;
 80040d4:	2302      	movs	r3, #2
 80040d6:	613b      	str	r3, [r7, #16]
 80040d8:	e018      	b.n	800410c <foresight+0x13c>
	    else if (col != 0 && Manhattans[row][col - 1] < Manhattans[row][col] && !westBlocked)
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d015      	beq.n	800410c <foresight+0x13c>
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	3b01      	subs	r3, #1
 80040e4:	492f      	ldr	r1, [pc, #188]	@ (80041a4 <foresight+0x1d4>)
 80040e6:	69fa      	ldr	r2, [r7, #28]
 80040e8:	0112      	lsls	r2, r2, #4
 80040ea:	4413      	add	r3, r2
 80040ec:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
 80040f0:	482c      	ldr	r0, [pc, #176]	@ (80041a4 <foresight+0x1d4>)
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	0119      	lsls	r1, r3, #4
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	440b      	add	r3, r1
 80040fa:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 80040fe:	429a      	cmp	r2, r3
 8004100:	da04      	bge.n	800410c <foresight+0x13c>
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d101      	bne.n	800410c <foresight+0x13c>
	        nextHead = WEST;
 8004108:	2303      	movs	r3, #3
 800410a:	613b      	str	r3, [r7, #16]

	    if (nextHead != currHead)
 800410c:	4b26      	ldr	r3, [pc, #152]	@ (80041a8 <foresight+0x1d8>)
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	461a      	mov	r2, r3
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	4293      	cmp	r3, r2
 8004116:	d138      	bne.n	800418a <foresight+0x1ba>
	    	break;

	    extra_moves++;
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	3301      	adds	r3, #1
 800411c:	617b      	str	r3, [r7, #20]

		switch (currHead)
 800411e:	4b22      	ldr	r3, [pc, #136]	@ (80041a8 <foresight+0x1d8>)
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	2b03      	cmp	r3, #3
 8004124:	d81a      	bhi.n	800415c <foresight+0x18c>
 8004126:	a201      	add	r2, pc, #4	@ (adr r2, 800412c <foresight+0x15c>)
 8004128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800412c:	0800413d 	.word	0x0800413d
 8004130:	08004145 	.word	0x08004145
 8004134:	0800414d 	.word	0x0800414d
 8004138:	08004155 	.word	0x08004155
		{
			case NORTH:
				row--;
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	3b01      	subs	r3, #1
 8004140:	61fb      	str	r3, [r7, #28]
				break;
 8004142:	e00b      	b.n	800415c <foresight+0x18c>
			case EAST:
				col++;
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	3301      	adds	r3, #1
 8004148:	61bb      	str	r3, [r7, #24]
				break;
 800414a:	e007      	b.n	800415c <foresight+0x18c>
			case SOUTH:
				row++;
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	3301      	adds	r3, #1
 8004150:	61fb      	str	r3, [r7, #28]
				break;
 8004152:	e003      	b.n	800415c <foresight+0x18c>
			case WEST:
				col--;
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	3b01      	subs	r3, #1
 8004158:	61bb      	str	r3, [r7, #24]
				break;
 800415a:	bf00      	nop
		}
		if (row < 0 || row > 15 || col < 0 || col > 15)
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	2b00      	cmp	r3, #0
 8004160:	db14      	blt.n	800418c <foresight+0x1bc>
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	2b0f      	cmp	r3, #15
 8004166:	dc11      	bgt.n	800418c <foresight+0x1bc>
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	2b00      	cmp	r3, #0
 800416c:	db0e      	blt.n	800418c <foresight+0x1bc>
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	2b0f      	cmp	r3, #15
 8004172:	dc0b      	bgt.n	800418c <foresight+0x1bc>
	while(discovered[row][col] != 0)
 8004174:	490d      	ldr	r1, [pc, #52]	@ (80041ac <foresight+0x1dc>)
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	011a      	lsls	r2, r3, #4
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	4413      	add	r3, r2
 800417e:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8004182:	2b00      	cmp	r3, #0
 8004184:	f47f af32 	bne.w	8003fec <foresight+0x1c>
 8004188:	e000      	b.n	800418c <foresight+0x1bc>
	    	break;
 800418a:	bf00      	nop
			break;
	}

	return extra_moves;
 800418c:	697b      	ldr	r3, [r7, #20]
}
 800418e:	4618      	mov	r0, r3
 8004190:	3724      	adds	r7, #36	@ 0x24
 8004192:	46bd      	mov	sp, r7
 8004194:	bc80      	pop	{r7}
 8004196:	4770      	bx	lr
 8004198:	20000484 	.word	0x20000484
 800419c:	20000e90 	.word	0x20000e90
 80041a0:	200010b0 	.word	0x200010b0
 80041a4:	2000048c 	.word	0x2000048c
 80041a8:	20000488 	.word	0x20000488
 80041ac:	200012d0 	.word	0x200012d0

080041b0 <saveMaze>:

void saveMaze() {
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0

	writeFlash(horzWall, vertWall, discovered);
 80041b4:	4a03      	ldr	r2, [pc, #12]	@ (80041c4 <saveMaze+0x14>)
 80041b6:	4904      	ldr	r1, [pc, #16]	@ (80041c8 <saveMaze+0x18>)
 80041b8:	4804      	ldr	r0, [pc, #16]	@ (80041cc <saveMaze+0x1c>)
 80041ba:	f7fd fa4b 	bl	8001654 <writeFlash>

}
 80041be:	bf00      	nop
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	200012d0 	.word	0x200012d0
 80041c8:	200010b0 	.word	0x200010b0
 80041cc:	20000e90 	.word	0x20000e90

080041d0 <loadMaze>:
void loadMaze() {
 80041d0:	b580      	push	{r7, lr}
 80041d2:	af00      	add	r7, sp, #0

	readFlash(horzWall, vertWall, discovered);
 80041d4:	4a03      	ldr	r2, [pc, #12]	@ (80041e4 <loadMaze+0x14>)
 80041d6:	4904      	ldr	r1, [pc, #16]	@ (80041e8 <loadMaze+0x18>)
 80041d8:	4804      	ldr	r0, [pc, #16]	@ (80041ec <loadMaze+0x1c>)
 80041da:	f7fd fadf 	bl	800179c <readFlash>

}
 80041de:	bf00      	nop
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	200012d0 	.word	0x200012d0
 80041e8:	200010b0 	.word	0x200010b0
 80041ec:	20000e90 	.word	0x20000e90

080041f0 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60ba      	str	r2, [r7, #8]
 80041f8:	461a      	mov	r2, r3
 80041fa:	4603      	mov	r3, r0
 80041fc:	81fb      	strh	r3, [r7, #14]
 80041fe:	460b      	mov	r3, r1
 8004200:	81bb      	strh	r3, [r7, #12]
 8004202:	4613      	mov	r3, r2
 8004204:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8004206:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800420a:	3307      	adds	r3, #7
 800420c:	2b00      	cmp	r3, #0
 800420e:	da00      	bge.n	8004212 <SSD1306_DrawBitmap+0x22>
 8004210:	3307      	adds	r3, #7
 8004212:	10db      	asrs	r3, r3, #3
 8004214:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8004216:	2300      	movs	r3, #0
 8004218:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 800421a:	2300      	movs	r3, #0
 800421c:	82bb      	strh	r3, [r7, #20]
 800421e:	e044      	b.n	80042aa <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8004220:	2300      	movs	r3, #0
 8004222:	827b      	strh	r3, [r7, #18]
 8004224:	e02f      	b.n	8004286 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8004226:	8a7b      	ldrh	r3, [r7, #18]
 8004228:	f003 0307 	and.w	r3, r3, #7
 800422c:	2b00      	cmp	r3, #0
 800422e:	d003      	beq.n	8004238 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8004230:	7dfb      	ldrb	r3, [r7, #23]
 8004232:	005b      	lsls	r3, r3, #1
 8004234:	75fb      	strb	r3, [r7, #23]
 8004236:	e012      	b.n	800425e <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8004238:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800423c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004240:	fb03 f202 	mul.w	r2, r3, r2
 8004244:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004248:	2b00      	cmp	r3, #0
 800424a:	da00      	bge.n	800424e <SSD1306_DrawBitmap+0x5e>
 800424c:	3307      	adds	r3, #7
 800424e:	10db      	asrs	r3, r3, #3
 8004250:	b21b      	sxth	r3, r3
 8004252:	4413      	add	r3, r2
 8004254:	461a      	mov	r2, r3
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	4413      	add	r3, r2
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 800425e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004262:	2b00      	cmp	r3, #0
 8004264:	da09      	bge.n	800427a <SSD1306_DrawBitmap+0x8a>
 8004266:	89fa      	ldrh	r2, [r7, #14]
 8004268:	8a7b      	ldrh	r3, [r7, #18]
 800426a:	4413      	add	r3, r2
 800426c:	b29b      	uxth	r3, r3
 800426e:	89b9      	ldrh	r1, [r7, #12]
 8004270:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004272:	b2d2      	uxtb	r2, r2
 8004274:	4618      	mov	r0, r3
 8004276:	f000 f92d 	bl	80044d4 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 800427a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800427e:	b29b      	uxth	r3, r3
 8004280:	3301      	adds	r3, #1
 8004282:	b29b      	uxth	r3, r3
 8004284:	827b      	strh	r3, [r7, #18]
 8004286:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800428a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800428e:	429a      	cmp	r2, r3
 8004290:	dbc9      	blt.n	8004226 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8004292:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004296:	b29b      	uxth	r3, r3
 8004298:	3301      	adds	r3, #1
 800429a:	b29b      	uxth	r3, r3
 800429c:	82bb      	strh	r3, [r7, #20]
 800429e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	3301      	adds	r3, #1
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	81bb      	strh	r3, [r7, #12]
 80042aa:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80042ae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	dbb4      	blt.n	8004220 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 80042b6:	bf00      	nop
 80042b8:	bf00      	nop
 80042ba:	3718      	adds	r7, #24
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80042c6:	f000 f96d 	bl	80045a4 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80042ca:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80042ce:	2201      	movs	r2, #1
 80042d0:	2178      	movs	r1, #120	@ 0x78
 80042d2:	485b      	ldr	r0, [pc, #364]	@ (8004440 <SSD1306_Init+0x180>)
 80042d4:	f002 fff0 	bl	80072b8 <HAL_I2C_IsDeviceReady>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80042de:	2300      	movs	r3, #0
 80042e0:	e0a9      	b.n	8004436 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80042e2:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80042e6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80042e8:	e002      	b.n	80042f0 <SSD1306_Init+0x30>
		p--;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	3b01      	subs	r3, #1
 80042ee:	607b      	str	r3, [r7, #4]
	while(p>0)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1f9      	bne.n	80042ea <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80042f6:	22ae      	movs	r2, #174	@ 0xae
 80042f8:	2100      	movs	r1, #0
 80042fa:	2078      	movs	r0, #120	@ 0x78
 80042fc:	f000 f9cc 	bl	8004698 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8004300:	2220      	movs	r2, #32
 8004302:	2100      	movs	r1, #0
 8004304:	2078      	movs	r0, #120	@ 0x78
 8004306:	f000 f9c7 	bl	8004698 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800430a:	2210      	movs	r2, #16
 800430c:	2100      	movs	r1, #0
 800430e:	2078      	movs	r0, #120	@ 0x78
 8004310:	f000 f9c2 	bl	8004698 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8004314:	22b0      	movs	r2, #176	@ 0xb0
 8004316:	2100      	movs	r1, #0
 8004318:	2078      	movs	r0, #120	@ 0x78
 800431a:	f000 f9bd 	bl	8004698 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800431e:	22c8      	movs	r2, #200	@ 0xc8
 8004320:	2100      	movs	r1, #0
 8004322:	2078      	movs	r0, #120	@ 0x78
 8004324:	f000 f9b8 	bl	8004698 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8004328:	2200      	movs	r2, #0
 800432a:	2100      	movs	r1, #0
 800432c:	2078      	movs	r0, #120	@ 0x78
 800432e:	f000 f9b3 	bl	8004698 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8004332:	2210      	movs	r2, #16
 8004334:	2100      	movs	r1, #0
 8004336:	2078      	movs	r0, #120	@ 0x78
 8004338:	f000 f9ae 	bl	8004698 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800433c:	2240      	movs	r2, #64	@ 0x40
 800433e:	2100      	movs	r1, #0
 8004340:	2078      	movs	r0, #120	@ 0x78
 8004342:	f000 f9a9 	bl	8004698 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8004346:	2281      	movs	r2, #129	@ 0x81
 8004348:	2100      	movs	r1, #0
 800434a:	2078      	movs	r0, #120	@ 0x78
 800434c:	f000 f9a4 	bl	8004698 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8004350:	22ff      	movs	r2, #255	@ 0xff
 8004352:	2100      	movs	r1, #0
 8004354:	2078      	movs	r0, #120	@ 0x78
 8004356:	f000 f99f 	bl	8004698 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800435a:	22a1      	movs	r2, #161	@ 0xa1
 800435c:	2100      	movs	r1, #0
 800435e:	2078      	movs	r0, #120	@ 0x78
 8004360:	f000 f99a 	bl	8004698 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8004364:	22a6      	movs	r2, #166	@ 0xa6
 8004366:	2100      	movs	r1, #0
 8004368:	2078      	movs	r0, #120	@ 0x78
 800436a:	f000 f995 	bl	8004698 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800436e:	22a8      	movs	r2, #168	@ 0xa8
 8004370:	2100      	movs	r1, #0
 8004372:	2078      	movs	r0, #120	@ 0x78
 8004374:	f000 f990 	bl	8004698 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8004378:	223f      	movs	r2, #63	@ 0x3f
 800437a:	2100      	movs	r1, #0
 800437c:	2078      	movs	r0, #120	@ 0x78
 800437e:	f000 f98b 	bl	8004698 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8004382:	22a4      	movs	r2, #164	@ 0xa4
 8004384:	2100      	movs	r1, #0
 8004386:	2078      	movs	r0, #120	@ 0x78
 8004388:	f000 f986 	bl	8004698 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800438c:	22d3      	movs	r2, #211	@ 0xd3
 800438e:	2100      	movs	r1, #0
 8004390:	2078      	movs	r0, #120	@ 0x78
 8004392:	f000 f981 	bl	8004698 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8004396:	2200      	movs	r2, #0
 8004398:	2100      	movs	r1, #0
 800439a:	2078      	movs	r0, #120	@ 0x78
 800439c:	f000 f97c 	bl	8004698 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80043a0:	22d5      	movs	r2, #213	@ 0xd5
 80043a2:	2100      	movs	r1, #0
 80043a4:	2078      	movs	r0, #120	@ 0x78
 80043a6:	f000 f977 	bl	8004698 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80043aa:	22f0      	movs	r2, #240	@ 0xf0
 80043ac:	2100      	movs	r1, #0
 80043ae:	2078      	movs	r0, #120	@ 0x78
 80043b0:	f000 f972 	bl	8004698 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80043b4:	22d9      	movs	r2, #217	@ 0xd9
 80043b6:	2100      	movs	r1, #0
 80043b8:	2078      	movs	r0, #120	@ 0x78
 80043ba:	f000 f96d 	bl	8004698 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80043be:	2222      	movs	r2, #34	@ 0x22
 80043c0:	2100      	movs	r1, #0
 80043c2:	2078      	movs	r0, #120	@ 0x78
 80043c4:	f000 f968 	bl	8004698 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80043c8:	22da      	movs	r2, #218	@ 0xda
 80043ca:	2100      	movs	r1, #0
 80043cc:	2078      	movs	r0, #120	@ 0x78
 80043ce:	f000 f963 	bl	8004698 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80043d2:	2212      	movs	r2, #18
 80043d4:	2100      	movs	r1, #0
 80043d6:	2078      	movs	r0, #120	@ 0x78
 80043d8:	f000 f95e 	bl	8004698 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80043dc:	22db      	movs	r2, #219	@ 0xdb
 80043de:	2100      	movs	r1, #0
 80043e0:	2078      	movs	r0, #120	@ 0x78
 80043e2:	f000 f959 	bl	8004698 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80043e6:	2220      	movs	r2, #32
 80043e8:	2100      	movs	r1, #0
 80043ea:	2078      	movs	r0, #120	@ 0x78
 80043ec:	f000 f954 	bl	8004698 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80043f0:	228d      	movs	r2, #141	@ 0x8d
 80043f2:	2100      	movs	r1, #0
 80043f4:	2078      	movs	r0, #120	@ 0x78
 80043f6:	f000 f94f 	bl	8004698 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80043fa:	2214      	movs	r2, #20
 80043fc:	2100      	movs	r1, #0
 80043fe:	2078      	movs	r0, #120	@ 0x78
 8004400:	f000 f94a 	bl	8004698 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8004404:	22af      	movs	r2, #175	@ 0xaf
 8004406:	2100      	movs	r1, #0
 8004408:	2078      	movs	r0, #120	@ 0x78
 800440a:	f000 f945 	bl	8004698 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800440e:	222e      	movs	r2, #46	@ 0x2e
 8004410:	2100      	movs	r1, #0
 8004412:	2078      	movs	r0, #120	@ 0x78
 8004414:	f000 f940 	bl	8004698 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8004418:	2000      	movs	r0, #0
 800441a:	f000 f843 	bl	80044a4 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800441e:	f000 f813 	bl	8004448 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8004422:	4b08      	ldr	r3, [pc, #32]	@ (8004444 <SSD1306_Init+0x184>)
 8004424:	2200      	movs	r2, #0
 8004426:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8004428:	4b06      	ldr	r3, [pc, #24]	@ (8004444 <SSD1306_Init+0x184>)
 800442a:	2200      	movs	r2, #0
 800442c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800442e:	4b05      	ldr	r3, [pc, #20]	@ (8004444 <SSD1306_Init+0x184>)
 8004430:	2201      	movs	r2, #1
 8004432:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8004434:	2301      	movs	r3, #1
}
 8004436:	4618      	mov	r0, r3
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	20000240 	.word	0x20000240
 8004444:	200018d0 	.word	0x200018d0

08004448 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800444e:	2300      	movs	r3, #0
 8004450:	71fb      	strb	r3, [r7, #7]
 8004452:	e01d      	b.n	8004490 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8004454:	79fb      	ldrb	r3, [r7, #7]
 8004456:	3b50      	subs	r3, #80	@ 0x50
 8004458:	b2db      	uxtb	r3, r3
 800445a:	461a      	mov	r2, r3
 800445c:	2100      	movs	r1, #0
 800445e:	2078      	movs	r0, #120	@ 0x78
 8004460:	f000 f91a 	bl	8004698 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8004464:	2200      	movs	r2, #0
 8004466:	2100      	movs	r1, #0
 8004468:	2078      	movs	r0, #120	@ 0x78
 800446a:	f000 f915 	bl	8004698 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800446e:	2210      	movs	r2, #16
 8004470:	2100      	movs	r1, #0
 8004472:	2078      	movs	r0, #120	@ 0x78
 8004474:	f000 f910 	bl	8004698 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8004478:	79fb      	ldrb	r3, [r7, #7]
 800447a:	01db      	lsls	r3, r3, #7
 800447c:	4a08      	ldr	r2, [pc, #32]	@ (80044a0 <SSD1306_UpdateScreen+0x58>)
 800447e:	441a      	add	r2, r3
 8004480:	2380      	movs	r3, #128	@ 0x80
 8004482:	2140      	movs	r1, #64	@ 0x40
 8004484:	2078      	movs	r0, #120	@ 0x78
 8004486:	f000 f8a1 	bl	80045cc <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800448a:	79fb      	ldrb	r3, [r7, #7]
 800448c:	3301      	adds	r3, #1
 800448e:	71fb      	strb	r3, [r7, #7]
 8004490:	79fb      	ldrb	r3, [r7, #7]
 8004492:	2b07      	cmp	r3, #7
 8004494:	d9de      	bls.n	8004454 <SSD1306_UpdateScreen+0xc>
	}
}
 8004496:	bf00      	nop
 8004498:	bf00      	nop
 800449a:	3708      	adds	r7, #8
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	200014d0 	.word	0x200014d0

080044a4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	4603      	mov	r3, r0
 80044ac:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80044ae:	79fb      	ldrb	r3, [r7, #7]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d101      	bne.n	80044b8 <SSD1306_Fill+0x14>
 80044b4:	2300      	movs	r3, #0
 80044b6:	e000      	b.n	80044ba <SSD1306_Fill+0x16>
 80044b8:	23ff      	movs	r3, #255	@ 0xff
 80044ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80044be:	4619      	mov	r1, r3
 80044c0:	4803      	ldr	r0, [pc, #12]	@ (80044d0 <SSD1306_Fill+0x2c>)
 80044c2:	f005 f8dd 	bl	8009680 <memset>
}
 80044c6:	bf00      	nop
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	200014d0 	.word	0x200014d0

080044d4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	4603      	mov	r3, r0
 80044dc:	80fb      	strh	r3, [r7, #6]
 80044de:	460b      	mov	r3, r1
 80044e0:	80bb      	strh	r3, [r7, #4]
 80044e2:	4613      	mov	r3, r2
 80044e4:	70fb      	strb	r3, [r7, #3]
	if (
 80044e6:	88fb      	ldrh	r3, [r7, #6]
 80044e8:	2b7f      	cmp	r3, #127	@ 0x7f
 80044ea:	d848      	bhi.n	800457e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80044ec:	88bb      	ldrh	r3, [r7, #4]
 80044ee:	2b3f      	cmp	r3, #63	@ 0x3f
 80044f0:	d845      	bhi.n	800457e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80044f2:	4b25      	ldr	r3, [pc, #148]	@ (8004588 <SSD1306_DrawPixel+0xb4>)
 80044f4:	791b      	ldrb	r3, [r3, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d006      	beq.n	8004508 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80044fa:	78fb      	ldrb	r3, [r7, #3]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	bf0c      	ite	eq
 8004500:	2301      	moveq	r3, #1
 8004502:	2300      	movne	r3, #0
 8004504:	b2db      	uxtb	r3, r3
 8004506:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8004508:	78fb      	ldrb	r3, [r7, #3]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d11a      	bne.n	8004544 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800450e:	88fa      	ldrh	r2, [r7, #6]
 8004510:	88bb      	ldrh	r3, [r7, #4]
 8004512:	08db      	lsrs	r3, r3, #3
 8004514:	b298      	uxth	r0, r3
 8004516:	4603      	mov	r3, r0
 8004518:	01db      	lsls	r3, r3, #7
 800451a:	4413      	add	r3, r2
 800451c:	4a1b      	ldr	r2, [pc, #108]	@ (800458c <SSD1306_DrawPixel+0xb8>)
 800451e:	5cd3      	ldrb	r3, [r2, r3]
 8004520:	b25a      	sxtb	r2, r3
 8004522:	88bb      	ldrh	r3, [r7, #4]
 8004524:	f003 0307 	and.w	r3, r3, #7
 8004528:	2101      	movs	r1, #1
 800452a:	fa01 f303 	lsl.w	r3, r1, r3
 800452e:	b25b      	sxtb	r3, r3
 8004530:	4313      	orrs	r3, r2
 8004532:	b259      	sxtb	r1, r3
 8004534:	88fa      	ldrh	r2, [r7, #6]
 8004536:	4603      	mov	r3, r0
 8004538:	01db      	lsls	r3, r3, #7
 800453a:	4413      	add	r3, r2
 800453c:	b2c9      	uxtb	r1, r1
 800453e:	4a13      	ldr	r2, [pc, #76]	@ (800458c <SSD1306_DrawPixel+0xb8>)
 8004540:	54d1      	strb	r1, [r2, r3]
 8004542:	e01d      	b.n	8004580 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004544:	88fa      	ldrh	r2, [r7, #6]
 8004546:	88bb      	ldrh	r3, [r7, #4]
 8004548:	08db      	lsrs	r3, r3, #3
 800454a:	b298      	uxth	r0, r3
 800454c:	4603      	mov	r3, r0
 800454e:	01db      	lsls	r3, r3, #7
 8004550:	4413      	add	r3, r2
 8004552:	4a0e      	ldr	r2, [pc, #56]	@ (800458c <SSD1306_DrawPixel+0xb8>)
 8004554:	5cd3      	ldrb	r3, [r2, r3]
 8004556:	b25a      	sxtb	r2, r3
 8004558:	88bb      	ldrh	r3, [r7, #4]
 800455a:	f003 0307 	and.w	r3, r3, #7
 800455e:	2101      	movs	r1, #1
 8004560:	fa01 f303 	lsl.w	r3, r1, r3
 8004564:	b25b      	sxtb	r3, r3
 8004566:	43db      	mvns	r3, r3
 8004568:	b25b      	sxtb	r3, r3
 800456a:	4013      	ands	r3, r2
 800456c:	b259      	sxtb	r1, r3
 800456e:	88fa      	ldrh	r2, [r7, #6]
 8004570:	4603      	mov	r3, r0
 8004572:	01db      	lsls	r3, r3, #7
 8004574:	4413      	add	r3, r2
 8004576:	b2c9      	uxtb	r1, r1
 8004578:	4a04      	ldr	r2, [pc, #16]	@ (800458c <SSD1306_DrawPixel+0xb8>)
 800457a:	54d1      	strb	r1, [r2, r3]
 800457c:	e000      	b.n	8004580 <SSD1306_DrawPixel+0xac>
		return;
 800457e:	bf00      	nop
	}
}
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	bc80      	pop	{r7}
 8004586:	4770      	bx	lr
 8004588:	200018d0 	.word	0x200018d0
 800458c:	200014d0 	.word	0x200014d0

08004590 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8004594:	2000      	movs	r0, #0
 8004596:	f7ff ff85 	bl	80044a4 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 800459a:	f7ff ff55 	bl	8004448 <SSD1306_UpdateScreen>
}
 800459e:	bf00      	nop
 80045a0:	bd80      	pop	{r7, pc}
	...

080045a4 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80045aa:	4b07      	ldr	r3, [pc, #28]	@ (80045c8 <ssd1306_I2C_Init+0x24>)
 80045ac:	607b      	str	r3, [r7, #4]
	while(p>0)
 80045ae:	e002      	b.n	80045b6 <ssd1306_I2C_Init+0x12>
		p--;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	3b01      	subs	r3, #1
 80045b4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1f9      	bne.n	80045b0 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80045bc:	bf00      	nop
 80045be:	bf00      	nop
 80045c0:	370c      	adds	r7, #12
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bc80      	pop	{r7}
 80045c6:	4770      	bx	lr
 80045c8:	0003d090 	.word	0x0003d090

080045cc <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80045cc:	b590      	push	{r4, r7, lr}
 80045ce:	b0c7      	sub	sp, #284	@ 0x11c
 80045d0:	af02      	add	r7, sp, #8
 80045d2:	4604      	mov	r4, r0
 80045d4:	4608      	mov	r0, r1
 80045d6:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80045da:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80045de:	600a      	str	r2, [r1, #0]
 80045e0:	4619      	mov	r1, r3
 80045e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80045e6:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80045ea:	4622      	mov	r2, r4
 80045ec:	701a      	strb	r2, [r3, #0]
 80045ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80045f2:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80045f6:	4602      	mov	r2, r0
 80045f8:	701a      	strb	r2, [r3, #0]
 80045fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80045fe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004602:	460a      	mov	r2, r1
 8004604:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8004606:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800460a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800460e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8004612:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8004616:	7812      	ldrb	r2, [r2, #0]
 8004618:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800461a:	2300      	movs	r3, #0
 800461c:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8004620:	e015      	b.n	800464e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8004622:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8004626:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800462a:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800462e:	6812      	ldr	r2, [r2, #0]
 8004630:	441a      	add	r2, r3
 8004632:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8004636:	3301      	adds	r3, #1
 8004638:	7811      	ldrb	r1, [r2, #0]
 800463a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800463e:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8004642:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8004644:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8004648:	3301      	adds	r3, #1
 800464a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800464e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8004652:	b29b      	uxth	r3, r3
 8004654:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8004658:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800465c:	8812      	ldrh	r2, [r2, #0]
 800465e:	429a      	cmp	r2, r3
 8004660:	d8df      	bhi.n	8004622 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8004662:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004666:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	b299      	uxth	r1, r3
 800466e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004672:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004676:	881b      	ldrh	r3, [r3, #0]
 8004678:	3301      	adds	r3, #1
 800467a:	b29b      	uxth	r3, r3
 800467c:	f107 020c 	add.w	r2, r7, #12
 8004680:	200a      	movs	r0, #10
 8004682:	9000      	str	r0, [sp, #0]
 8004684:	4803      	ldr	r0, [pc, #12]	@ (8004694 <ssd1306_I2C_WriteMulti+0xc8>)
 8004686:	f002 f9f9 	bl	8006a7c <HAL_I2C_Master_Transmit>
}
 800468a:	bf00      	nop
 800468c:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8004690:	46bd      	mov	sp, r7
 8004692:	bd90      	pop	{r4, r7, pc}
 8004694:	20000240 	.word	0x20000240

08004698 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8004698:	b580      	push	{r7, lr}
 800469a:	b086      	sub	sp, #24
 800469c:	af02      	add	r7, sp, #8
 800469e:	4603      	mov	r3, r0
 80046a0:	71fb      	strb	r3, [r7, #7]
 80046a2:	460b      	mov	r3, r1
 80046a4:	71bb      	strb	r3, [r7, #6]
 80046a6:	4613      	mov	r3, r2
 80046a8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80046aa:	79bb      	ldrb	r3, [r7, #6]
 80046ac:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80046ae:	797b      	ldrb	r3, [r7, #5]
 80046b0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80046b2:	79fb      	ldrb	r3, [r7, #7]
 80046b4:	b299      	uxth	r1, r3
 80046b6:	f107 020c 	add.w	r2, r7, #12
 80046ba:	230a      	movs	r3, #10
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	2302      	movs	r3, #2
 80046c0:	4803      	ldr	r0, [pc, #12]	@ (80046d0 <ssd1306_I2C_Write+0x38>)
 80046c2:	f002 f9db 	bl	8006a7c <HAL_I2C_Master_Transmit>
}
 80046c6:	bf00      	nop
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	20000240 	.word	0x20000240

080046d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046da:	2300      	movs	r3, #0
 80046dc:	607b      	str	r3, [r7, #4]
 80046de:	4b0f      	ldr	r3, [pc, #60]	@ (800471c <HAL_MspInit+0x48>)
 80046e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046e2:	4a0e      	ldr	r2, [pc, #56]	@ (800471c <HAL_MspInit+0x48>)
 80046e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80046e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80046ea:	4b0c      	ldr	r3, [pc, #48]	@ (800471c <HAL_MspInit+0x48>)
 80046ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046f2:	607b      	str	r3, [r7, #4]
 80046f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80046f6:	2300      	movs	r3, #0
 80046f8:	603b      	str	r3, [r7, #0]
 80046fa:	4b08      	ldr	r3, [pc, #32]	@ (800471c <HAL_MspInit+0x48>)
 80046fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046fe:	4a07      	ldr	r2, [pc, #28]	@ (800471c <HAL_MspInit+0x48>)
 8004700:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004704:	6413      	str	r3, [r2, #64]	@ 0x40
 8004706:	4b05      	ldr	r3, [pc, #20]	@ (800471c <HAL_MspInit+0x48>)
 8004708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800470a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800470e:	603b      	str	r3, [r7, #0]
 8004710:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004712:	bf00      	nop
 8004714:	370c      	adds	r7, #12
 8004716:	46bd      	mov	sp, r7
 8004718:	bc80      	pop	{r7}
 800471a:	4770      	bx	lr
 800471c:	40023800 	.word	0x40023800

08004720 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b08a      	sub	sp, #40	@ 0x28
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004728:	f107 0314 	add.w	r3, r7, #20
 800472c:	2200      	movs	r2, #0
 800472e:	601a      	str	r2, [r3, #0]
 8004730:	605a      	str	r2, [r3, #4]
 8004732:	609a      	str	r2, [r3, #8]
 8004734:	60da      	str	r2, [r3, #12]
 8004736:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a3c      	ldr	r2, [pc, #240]	@ (8004830 <HAL_ADC_MspInit+0x110>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d171      	bne.n	8004826 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004742:	2300      	movs	r3, #0
 8004744:	613b      	str	r3, [r7, #16]
 8004746:	4b3b      	ldr	r3, [pc, #236]	@ (8004834 <HAL_ADC_MspInit+0x114>)
 8004748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800474a:	4a3a      	ldr	r2, [pc, #232]	@ (8004834 <HAL_ADC_MspInit+0x114>)
 800474c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004750:	6453      	str	r3, [r2, #68]	@ 0x44
 8004752:	4b38      	ldr	r3, [pc, #224]	@ (8004834 <HAL_ADC_MspInit+0x114>)
 8004754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004756:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800475a:	613b      	str	r3, [r7, #16]
 800475c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800475e:	2300      	movs	r3, #0
 8004760:	60fb      	str	r3, [r7, #12]
 8004762:	4b34      	ldr	r3, [pc, #208]	@ (8004834 <HAL_ADC_MspInit+0x114>)
 8004764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004766:	4a33      	ldr	r2, [pc, #204]	@ (8004834 <HAL_ADC_MspInit+0x114>)
 8004768:	f043 0304 	orr.w	r3, r3, #4
 800476c:	6313      	str	r3, [r2, #48]	@ 0x30
 800476e:	4b31      	ldr	r3, [pc, #196]	@ (8004834 <HAL_ADC_MspInit+0x114>)
 8004770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004772:	f003 0304 	and.w	r3, r3, #4
 8004776:	60fb      	str	r3, [r7, #12]
 8004778:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800477a:	2300      	movs	r3, #0
 800477c:	60bb      	str	r3, [r7, #8]
 800477e:	4b2d      	ldr	r3, [pc, #180]	@ (8004834 <HAL_ADC_MspInit+0x114>)
 8004780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004782:	4a2c      	ldr	r2, [pc, #176]	@ (8004834 <HAL_ADC_MspInit+0x114>)
 8004784:	f043 0301 	orr.w	r3, r3, #1
 8004788:	6313      	str	r3, [r2, #48]	@ 0x30
 800478a:	4b2a      	ldr	r3, [pc, #168]	@ (8004834 <HAL_ADC_MspInit+0x114>)
 800478c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	60bb      	str	r3, [r7, #8]
 8004794:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ForwardRightReceiver_Pin|RightReceiver_Pin;
 8004796:	2303      	movs	r3, #3
 8004798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800479a:	2303      	movs	r3, #3
 800479c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800479e:	2300      	movs	r3, #0
 80047a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047a2:	f107 0314 	add.w	r3, r7, #20
 80047a6:	4619      	mov	r1, r3
 80047a8:	4823      	ldr	r0, [pc, #140]	@ (8004838 <HAL_ADC_MspInit+0x118>)
 80047aa:	f001 fe55 	bl	8006458 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LeftReceiver_Pin|ForwardLeftReceiver_Pin;
 80047ae:	2360      	movs	r3, #96	@ 0x60
 80047b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80047b2:	2303      	movs	r3, #3
 80047b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047b6:	2300      	movs	r3, #0
 80047b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047ba:	f107 0314 	add.w	r3, r7, #20
 80047be:	4619      	mov	r1, r3
 80047c0:	481e      	ldr	r0, [pc, #120]	@ (800483c <HAL_ADC_MspInit+0x11c>)
 80047c2:	f001 fe49 	bl	8006458 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80047c6:	4b1e      	ldr	r3, [pc, #120]	@ (8004840 <HAL_ADC_MspInit+0x120>)
 80047c8:	4a1e      	ldr	r2, [pc, #120]	@ (8004844 <HAL_ADC_MspInit+0x124>)
 80047ca:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80047cc:	4b1c      	ldr	r3, [pc, #112]	@ (8004840 <HAL_ADC_MspInit+0x120>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80047d2:	4b1b      	ldr	r3, [pc, #108]	@ (8004840 <HAL_ADC_MspInit+0x120>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80047d8:	4b19      	ldr	r3, [pc, #100]	@ (8004840 <HAL_ADC_MspInit+0x120>)
 80047da:	2200      	movs	r2, #0
 80047dc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80047de:	4b18      	ldr	r3, [pc, #96]	@ (8004840 <HAL_ADC_MspInit+0x120>)
 80047e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80047e4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80047e6:	4b16      	ldr	r3, [pc, #88]	@ (8004840 <HAL_ADC_MspInit+0x120>)
 80047e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80047ec:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80047ee:	4b14      	ldr	r3, [pc, #80]	@ (8004840 <HAL_ADC_MspInit+0x120>)
 80047f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80047f4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80047f6:	4b12      	ldr	r3, [pc, #72]	@ (8004840 <HAL_ADC_MspInit+0x120>)
 80047f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80047fc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80047fe:	4b10      	ldr	r3, [pc, #64]	@ (8004840 <HAL_ADC_MspInit+0x120>)
 8004800:	2200      	movs	r2, #0
 8004802:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004804:	4b0e      	ldr	r3, [pc, #56]	@ (8004840 <HAL_ADC_MspInit+0x120>)
 8004806:	2200      	movs	r2, #0
 8004808:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800480a:	480d      	ldr	r0, [pc, #52]	@ (8004840 <HAL_ADC_MspInit+0x120>)
 800480c:	f001 f844 	bl	8005898 <HAL_DMA_Init>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d001      	beq.n	800481a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8004816:	f7fd ff5f 	bl	80026d8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a08      	ldr	r2, [pc, #32]	@ (8004840 <HAL_ADC_MspInit+0x120>)
 800481e:	639a      	str	r2, [r3, #56]	@ 0x38
 8004820:	4a07      	ldr	r2, [pc, #28]	@ (8004840 <HAL_ADC_MspInit+0x120>)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004826:	bf00      	nop
 8004828:	3728      	adds	r7, #40	@ 0x28
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	40012000 	.word	0x40012000
 8004834:	40023800 	.word	0x40023800
 8004838:	40020800 	.word	0x40020800
 800483c:	40020000 	.word	0x40020000
 8004840:	200001e0 	.word	0x200001e0
 8004844:	40026410 	.word	0x40026410

08004848 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b08a      	sub	sp, #40	@ 0x28
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004850:	f107 0314 	add.w	r3, r7, #20
 8004854:	2200      	movs	r2, #0
 8004856:	601a      	str	r2, [r3, #0]
 8004858:	605a      	str	r2, [r3, #4]
 800485a:	609a      	str	r2, [r3, #8]
 800485c:	60da      	str	r2, [r3, #12]
 800485e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a19      	ldr	r2, [pc, #100]	@ (80048cc <HAL_I2C_MspInit+0x84>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d12b      	bne.n	80048c2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800486a:	2300      	movs	r3, #0
 800486c:	613b      	str	r3, [r7, #16]
 800486e:	4b18      	ldr	r3, [pc, #96]	@ (80048d0 <HAL_I2C_MspInit+0x88>)
 8004870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004872:	4a17      	ldr	r2, [pc, #92]	@ (80048d0 <HAL_I2C_MspInit+0x88>)
 8004874:	f043 0302 	orr.w	r3, r3, #2
 8004878:	6313      	str	r3, [r2, #48]	@ 0x30
 800487a:	4b15      	ldr	r3, [pc, #84]	@ (80048d0 <HAL_I2C_MspInit+0x88>)
 800487c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	613b      	str	r3, [r7, #16]
 8004884:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004886:	23c0      	movs	r3, #192	@ 0xc0
 8004888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800488a:	2312      	movs	r3, #18
 800488c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800488e:	2300      	movs	r3, #0
 8004890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004892:	2303      	movs	r3, #3
 8004894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004896:	2304      	movs	r3, #4
 8004898:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800489a:	f107 0314 	add.w	r3, r7, #20
 800489e:	4619      	mov	r1, r3
 80048a0:	480c      	ldr	r0, [pc, #48]	@ (80048d4 <HAL_I2C_MspInit+0x8c>)
 80048a2:	f001 fdd9 	bl	8006458 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80048a6:	2300      	movs	r3, #0
 80048a8:	60fb      	str	r3, [r7, #12]
 80048aa:	4b09      	ldr	r3, [pc, #36]	@ (80048d0 <HAL_I2C_MspInit+0x88>)
 80048ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ae:	4a08      	ldr	r2, [pc, #32]	@ (80048d0 <HAL_I2C_MspInit+0x88>)
 80048b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80048b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80048b6:	4b06      	ldr	r3, [pc, #24]	@ (80048d0 <HAL_I2C_MspInit+0x88>)
 80048b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80048be:	60fb      	str	r3, [r7, #12]
 80048c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80048c2:	bf00      	nop
 80048c4:	3728      	adds	r7, #40	@ 0x28
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	40005400 	.word	0x40005400
 80048d0:	40023800 	.word	0x40023800
 80048d4:	40020400 	.word	0x40020400

080048d8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a0e      	ldr	r2, [pc, #56]	@ (8004920 <HAL_TIM_PWM_MspInit+0x48>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d115      	bne.n	8004916 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80048ea:	2300      	movs	r3, #0
 80048ec:	60fb      	str	r3, [r7, #12]
 80048ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004924 <HAL_TIM_PWM_MspInit+0x4c>)
 80048f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048f2:	4a0c      	ldr	r2, [pc, #48]	@ (8004924 <HAL_TIM_PWM_MspInit+0x4c>)
 80048f4:	f043 0301 	orr.w	r3, r3, #1
 80048f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80048fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004924 <HAL_TIM_PWM_MspInit+0x4c>)
 80048fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	60fb      	str	r3, [r7, #12]
 8004904:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8004906:	2200      	movs	r2, #0
 8004908:	2100      	movs	r1, #0
 800490a:	2019      	movs	r0, #25
 800490c:	f000 ff8d 	bl	800582a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004910:	2019      	movs	r0, #25
 8004912:	f000 ffa6 	bl	8005862 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004916:	bf00      	nop
 8004918:	3710      	adds	r7, #16
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	40010000 	.word	0x40010000
 8004924:	40023800 	.word	0x40023800

08004928 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b08c      	sub	sp, #48	@ 0x30
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004930:	f107 031c 	add.w	r3, r7, #28
 8004934:	2200      	movs	r2, #0
 8004936:	601a      	str	r2, [r3, #0]
 8004938:	605a      	str	r2, [r3, #4]
 800493a:	609a      	str	r2, [r3, #8]
 800493c:	60da      	str	r2, [r3, #12]
 800493e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a32      	ldr	r2, [pc, #200]	@ (8004a10 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d12c      	bne.n	80049a4 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800494a:	2300      	movs	r3, #0
 800494c:	61bb      	str	r3, [r7, #24]
 800494e:	4b31      	ldr	r3, [pc, #196]	@ (8004a14 <HAL_TIM_Encoder_MspInit+0xec>)
 8004950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004952:	4a30      	ldr	r2, [pc, #192]	@ (8004a14 <HAL_TIM_Encoder_MspInit+0xec>)
 8004954:	f043 0302 	orr.w	r3, r3, #2
 8004958:	6413      	str	r3, [r2, #64]	@ 0x40
 800495a:	4b2e      	ldr	r3, [pc, #184]	@ (8004a14 <HAL_TIM_Encoder_MspInit+0xec>)
 800495c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	61bb      	str	r3, [r7, #24]
 8004964:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004966:	2300      	movs	r3, #0
 8004968:	617b      	str	r3, [r7, #20]
 800496a:	4b2a      	ldr	r3, [pc, #168]	@ (8004a14 <HAL_TIM_Encoder_MspInit+0xec>)
 800496c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800496e:	4a29      	ldr	r2, [pc, #164]	@ (8004a14 <HAL_TIM_Encoder_MspInit+0xec>)
 8004970:	f043 0302 	orr.w	r3, r3, #2
 8004974:	6313      	str	r3, [r2, #48]	@ 0x30
 8004976:	4b27      	ldr	r3, [pc, #156]	@ (8004a14 <HAL_TIM_Encoder_MspInit+0xec>)
 8004978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	617b      	str	r3, [r7, #20]
 8004980:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = RightEncoderCh1_Pin|RightEncoderCh2_Pin;
 8004982:	2330      	movs	r3, #48	@ 0x30
 8004984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004986:	2302      	movs	r3, #2
 8004988:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800498a:	2300      	movs	r3, #0
 800498c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800498e:	2300      	movs	r3, #0
 8004990:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004992:	2302      	movs	r3, #2
 8004994:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004996:	f107 031c 	add.w	r3, r7, #28
 800499a:	4619      	mov	r1, r3
 800499c:	481e      	ldr	r0, [pc, #120]	@ (8004a18 <HAL_TIM_Encoder_MspInit+0xf0>)
 800499e:	f001 fd5b 	bl	8006458 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80049a2:	e030      	b.n	8004a06 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a1c      	ldr	r2, [pc, #112]	@ (8004a1c <HAL_TIM_Encoder_MspInit+0xf4>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d12b      	bne.n	8004a06 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80049ae:	2300      	movs	r3, #0
 80049b0:	613b      	str	r3, [r7, #16]
 80049b2:	4b18      	ldr	r3, [pc, #96]	@ (8004a14 <HAL_TIM_Encoder_MspInit+0xec>)
 80049b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049b6:	4a17      	ldr	r2, [pc, #92]	@ (8004a14 <HAL_TIM_Encoder_MspInit+0xec>)
 80049b8:	f043 0302 	orr.w	r3, r3, #2
 80049bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80049be:	4b15      	ldr	r3, [pc, #84]	@ (8004a14 <HAL_TIM_Encoder_MspInit+0xec>)
 80049c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	613b      	str	r3, [r7, #16]
 80049c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80049ca:	2300      	movs	r3, #0
 80049cc:	60fb      	str	r3, [r7, #12]
 80049ce:	4b11      	ldr	r3, [pc, #68]	@ (8004a14 <HAL_TIM_Encoder_MspInit+0xec>)
 80049d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049d2:	4a10      	ldr	r2, [pc, #64]	@ (8004a14 <HAL_TIM_Encoder_MspInit+0xec>)
 80049d4:	f043 0304 	orr.w	r3, r3, #4
 80049d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80049da:	4b0e      	ldr	r3, [pc, #56]	@ (8004a14 <HAL_TIM_Encoder_MspInit+0xec>)
 80049dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049de:	f003 0304 	and.w	r3, r3, #4
 80049e2:	60fb      	str	r3, [r7, #12]
 80049e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LeftEncoderCh1_Pin|LeftEncoderCh2_Pin;
 80049e6:	23c0      	movs	r3, #192	@ 0xc0
 80049e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049ea:	2302      	movs	r3, #2
 80049ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ee:	2300      	movs	r3, #0
 80049f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049f2:	2300      	movs	r3, #0
 80049f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80049f6:	2303      	movs	r3, #3
 80049f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049fa:	f107 031c 	add.w	r3, r7, #28
 80049fe:	4619      	mov	r1, r3
 8004a00:	4807      	ldr	r0, [pc, #28]	@ (8004a20 <HAL_TIM_Encoder_MspInit+0xf8>)
 8004a02:	f001 fd29 	bl	8006458 <HAL_GPIO_Init>
}
 8004a06:	bf00      	nop
 8004a08:	3730      	adds	r7, #48	@ 0x30
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	40000400 	.word	0x40000400
 8004a14:	40023800 	.word	0x40023800
 8004a18:	40020400 	.word	0x40020400
 8004a1c:	40010400 	.word	0x40010400
 8004a20:	40020800 	.word	0x40020800

08004a24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b088      	sub	sp, #32
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a2c:	f107 030c 	add.w	r3, r7, #12
 8004a30:	2200      	movs	r2, #0
 8004a32:	601a      	str	r2, [r3, #0]
 8004a34:	605a      	str	r2, [r3, #4]
 8004a36:	609a      	str	r2, [r3, #8]
 8004a38:	60da      	str	r2, [r3, #12]
 8004a3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a12      	ldr	r2, [pc, #72]	@ (8004a8c <HAL_TIM_MspPostInit+0x68>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d11e      	bne.n	8004a84 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a46:	2300      	movs	r3, #0
 8004a48:	60bb      	str	r3, [r7, #8]
 8004a4a:	4b11      	ldr	r3, [pc, #68]	@ (8004a90 <HAL_TIM_MspPostInit+0x6c>)
 8004a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a4e:	4a10      	ldr	r2, [pc, #64]	@ (8004a90 <HAL_TIM_MspPostInit+0x6c>)
 8004a50:	f043 0301 	orr.w	r3, r3, #1
 8004a54:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a56:	4b0e      	ldr	r3, [pc, #56]	@ (8004a90 <HAL_TIM_MspPostInit+0x6c>)
 8004a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	60bb      	str	r3, [r7, #8]
 8004a60:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LeftMotorCh1_Pin|LeftMotorCh2_Pin|RightMotorCh1_Pin|RightMotorCh2_Pin;
 8004a62:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8004a66:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a68:	2302      	movs	r3, #2
 8004a6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a70:	2300      	movs	r3, #0
 8004a72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004a74:	2301      	movs	r3, #1
 8004a76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a78:	f107 030c 	add.w	r3, r7, #12
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	4805      	ldr	r0, [pc, #20]	@ (8004a94 <HAL_TIM_MspPostInit+0x70>)
 8004a80:	f001 fcea 	bl	8006458 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004a84:	bf00      	nop
 8004a86:	3720      	adds	r7, #32
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	40010000 	.word	0x40010000
 8004a90:	40023800 	.word	0x40023800
 8004a94:	40020000 	.word	0x40020000

08004a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004a9c:	bf00      	nop
 8004a9e:	e7fd      	b.n	8004a9c <NMI_Handler+0x4>

08004aa0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004aa4:	bf00      	nop
 8004aa6:	e7fd      	b.n	8004aa4 <HardFault_Handler+0x4>

08004aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004aac:	bf00      	nop
 8004aae:	e7fd      	b.n	8004aac <MemManage_Handler+0x4>

08004ab0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004ab4:	bf00      	nop
 8004ab6:	e7fd      	b.n	8004ab4 <BusFault_Handler+0x4>

08004ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004abc:	bf00      	nop
 8004abe:	e7fd      	b.n	8004abc <UsageFault_Handler+0x4>

08004ac0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004ac4:	bf00      	nop
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bc80      	pop	{r7}
 8004aca:	4770      	bx	lr

08004acc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004acc:	b480      	push	{r7}
 8004ace:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004ad0:	bf00      	nop
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bc80      	pop	{r7}
 8004ad6:	4770      	bx	lr

08004ad8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004adc:	bf00      	nop
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bc80      	pop	{r7}
 8004ae2:	4770      	bx	lr

08004ae4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004ae8:	f000 f97e 	bl	8004de8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SysTickFunction();
 8004aec:	f000 f852 	bl	8004b94 <SysTickFunction>
  /* USER CODE END SysTick_IRQn 1 */
}
 8004af0:	bf00      	nop
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004af8:	4802      	ldr	r0, [pc, #8]	@ (8004b04 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004afa:	f003 ffbf 	bl	8008a7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004afe:	bf00      	nop
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	20000294 	.word	0x20000294

08004b08 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004b0c:	4802      	ldr	r0, [pc, #8]	@ (8004b18 <DMA2_Stream0_IRQHandler+0x10>)
 8004b0e:	f001 f839 	bl	8005b84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004b12:	bf00      	nop
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	200001e0 	.word	0x200001e0

08004b1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b086      	sub	sp, #24
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004b24:	4a14      	ldr	r2, [pc, #80]	@ (8004b78 <_sbrk+0x5c>)
 8004b26:	4b15      	ldr	r3, [pc, #84]	@ (8004b7c <_sbrk+0x60>)
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004b30:	4b13      	ldr	r3, [pc, #76]	@ (8004b80 <_sbrk+0x64>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d102      	bne.n	8004b3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004b38:	4b11      	ldr	r3, [pc, #68]	@ (8004b80 <_sbrk+0x64>)
 8004b3a:	4a12      	ldr	r2, [pc, #72]	@ (8004b84 <_sbrk+0x68>)
 8004b3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004b3e:	4b10      	ldr	r3, [pc, #64]	@ (8004b80 <_sbrk+0x64>)
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4413      	add	r3, r2
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d207      	bcs.n	8004b5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004b4c:	f004 fdb0 	bl	80096b0 <__errno>
 8004b50:	4603      	mov	r3, r0
 8004b52:	220c      	movs	r2, #12
 8004b54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004b56:	f04f 33ff 	mov.w	r3, #4294967295
 8004b5a:	e009      	b.n	8004b70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004b5c:	4b08      	ldr	r3, [pc, #32]	@ (8004b80 <_sbrk+0x64>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004b62:	4b07      	ldr	r3, [pc, #28]	@ (8004b80 <_sbrk+0x64>)
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4413      	add	r3, r2
 8004b6a:	4a05      	ldr	r2, [pc, #20]	@ (8004b80 <_sbrk+0x64>)
 8004b6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3718      	adds	r7, #24
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	20020000 	.word	0x20020000
 8004b7c:	00000400 	.word	0x00000400
 8004b80:	200018d8 	.word	0x200018d8
 8004b84:	20001a50 	.word	0x20001a50

08004b88 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b8c:	bf00      	nop
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bc80      	pop	{r7}
 8004b92:	4770      	bx	lr

08004b94 <SysTickFunction>:
#include "main.h"
// #include "pid.h"
#include "pid2.h"
#include "encoders.h"

void SysTickFunction(void) {
 8004b94:	b590      	push	{r4, r7, lr}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
	/*
	 * Anything in this function body will be executed every millisecond.
	 * Call you PID update function here.
	 */

	updatePID();
 8004b9a:	f7fe f9cd 	bl	8002f38 <updatePID>
	 * It also maintains the magnitude of the difference between the left and right encoders so that PID will work seamlessly.
	 *
	 * You may have to adjust it in the event you try to traverse more than 31000 encoder counts at once (~9 meters) without
	 * turning. But that'll be approximately never in Micromouse :)
	 */
	if (getRightEncoderCounts() > 31000 || getLeftEncoderCounts() > 31000
 8004b9e:	f7fc fd2d 	bl	80015fc <getRightEncoderCounts>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	f647 1318 	movw	r3, #31000	@ 0x7918
 8004baa:	429a      	cmp	r2, r3
 8004bac:	dc15      	bgt.n	8004bda <SysTickFunction+0x46>
 8004bae:	f7fc fd33 	bl	8001618 <getLeftEncoderCounts>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	f647 1318 	movw	r3, #31000	@ 0x7918
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	dc0d      	bgt.n	8004bda <SysTickFunction+0x46>
			|| getRightEncoderCounts() < -31000 || getLeftEncoderCounts() < -31000) {
 8004bbe:	f7fc fd1d 	bl	80015fc <getRightEncoderCounts>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	4b10      	ldr	r3, [pc, #64]	@ (8004c08 <SysTickFunction+0x74>)
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	db06      	blt.n	8004bda <SysTickFunction+0x46>
 8004bcc:	f7fc fd24 	bl	8001618 <getLeftEncoderCounts>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8004c08 <SysTickFunction+0x74>)
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	da11      	bge.n	8004bfe <SysTickFunction+0x6a>
		int16_t difference = getRightEncoderCounts() - getLeftEncoderCounts();
 8004bda:	f7fc fd0f 	bl	80015fc <getRightEncoderCounts>
 8004bde:	4603      	mov	r3, r0
 8004be0:	b29c      	uxth	r4, r3
 8004be2:	f7fc fd19 	bl	8001618 <getLeftEncoderCounts>
 8004be6:	4603      	mov	r3, r0
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	1ae3      	subs	r3, r4, r3
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	80fb      	strh	r3, [r7, #6]
		resetEncoders();
 8004bf0:	f7fc fd20 	bl	8001634 <resetEncoders>
		TIM2->CNT = (int16_t) difference;
 8004bf4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004bf8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bfc:	6253      	str	r3, [r2, #36]	@ 0x24
	}
}
 8004bfe:	bf00      	nop
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd90      	pop	{r4, r7, pc}
 8004c06:	bf00      	nop
 8004c08:	ffff86e8 	.word	0xffff86e8

08004c0c <leftWallCheck>:

void setLeftWall(int wall) { left_wall_threshold = wall; }
void setRightWall(int wall) { right_wall_threshold = wall; }
void setFrontWall(int wall) { front_wall_threshold = wall; }

int16_t leftWallCheck() {
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	af00      	add	r7, sp, #0
	if (readIR(IR_LEFT) > left_wall_threshold) {
 8004c10:	2001      	movs	r0, #1
 8004c12:	f7fc ffc5 	bl	8001ba0 <readIR>
 8004c16:	4603      	mov	r3, r0
 8004c18:	461a      	mov	r2, r3
 8004c1a:	4b08      	ldr	r3, [pc, #32]	@ (8004c3c <leftWallCheck+0x30>)
 8004c1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	dd03      	ble.n	8004c2c <leftWallCheck+0x20>
		left_wall = 1;
 8004c24:	4b06      	ldr	r3, [pc, #24]	@ (8004c40 <leftWallCheck+0x34>)
 8004c26:	2201      	movs	r2, #1
 8004c28:	801a      	strh	r2, [r3, #0]
 8004c2a:	e002      	b.n	8004c32 <leftWallCheck+0x26>
	}
	else {
		left_wall = 0;
 8004c2c:	4b04      	ldr	r3, [pc, #16]	@ (8004c40 <leftWallCheck+0x34>)
 8004c2e:	2200      	movs	r2, #0
 8004c30:	801a      	strh	r2, [r3, #0]
	}
	return left_wall;
 8004c32:	4b03      	ldr	r3, [pc, #12]	@ (8004c40 <leftWallCheck+0x34>)
 8004c34:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	20000010 	.word	0x20000010
 8004c40:	200018dc 	.word	0x200018dc

08004c44 <rightWallCheck>:

int16_t rightWallCheck() {
 8004c44:	b580      	push	{r7, lr}
 8004c46:	af00      	add	r7, sp, #0
	if (readIR(IR_RIGHT) > right_wall_threshold) {
 8004c48:	2002      	movs	r0, #2
 8004c4a:	f7fc ffa9 	bl	8001ba0 <readIR>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	461a      	mov	r2, r3
 8004c52:	4b08      	ldr	r3, [pc, #32]	@ (8004c74 <rightWallCheck+0x30>)
 8004c54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	dd03      	ble.n	8004c64 <rightWallCheck+0x20>
		right_wall = 1;
 8004c5c:	4b06      	ldr	r3, [pc, #24]	@ (8004c78 <rightWallCheck+0x34>)
 8004c5e:	2201      	movs	r2, #1
 8004c60:	801a      	strh	r2, [r3, #0]
 8004c62:	e002      	b.n	8004c6a <rightWallCheck+0x26>
	}
	else {
		right_wall = 0;
 8004c64:	4b04      	ldr	r3, [pc, #16]	@ (8004c78 <rightWallCheck+0x34>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	801a      	strh	r2, [r3, #0]
	}
	return right_wall;
 8004c6a:	4b03      	ldr	r3, [pc, #12]	@ (8004c78 <rightWallCheck+0x34>)
 8004c6c:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	20000012 	.word	0x20000012
 8004c78:	200018de 	.word	0x200018de

08004c7c <frontWallCheck>:

int16_t frontWallCheck() {
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	af00      	add	r7, sp, #0
	if (readIR(IR_FORWARD_LEFT) > front_wall_threshold) {
 8004c80:	2000      	movs	r0, #0
 8004c82:	f7fc ff8d 	bl	8001ba0 <readIR>
 8004c86:	4603      	mov	r3, r0
 8004c88:	461a      	mov	r2, r3
 8004c8a:	4b08      	ldr	r3, [pc, #32]	@ (8004cac <frontWallCheck+0x30>)
 8004c8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	dd03      	ble.n	8004c9c <frontWallCheck+0x20>
		front_wall = 1;
 8004c94:	4b06      	ldr	r3, [pc, #24]	@ (8004cb0 <frontWallCheck+0x34>)
 8004c96:	2201      	movs	r2, #1
 8004c98:	801a      	strh	r2, [r3, #0]
 8004c9a:	e002      	b.n	8004ca2 <frontWallCheck+0x26>
	}
	else {
		front_wall = 0;
 8004c9c:	4b04      	ldr	r3, [pc, #16]	@ (8004cb0 <frontWallCheck+0x34>)
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	801a      	strh	r2, [r3, #0]
	}
	return front_wall;
 8004ca2:	4b03      	ldr	r3, [pc, #12]	@ (8004cb0 <frontWallCheck+0x34>)
 8004ca4:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	20000014 	.word	0x20000014
 8004cb0:	200018e0 	.word	0x200018e0

08004cb4 <sign>:

int16_t sign(float x) {
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
	if (x > 0)
 8004cbc:	f04f 0100 	mov.w	r1, #0
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f7fc f9f1 	bl	80010a8 <__aeabi_fcmpgt>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d001      	beq.n	8004cd0 <sign+0x1c>
	{
		return 1;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e00b      	b.n	8004ce8 <sign+0x34>
	}
	else if (x < 0)
 8004cd0:	f04f 0100 	mov.w	r1, #0
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f7fc f9c9 	bl	800106c <__aeabi_fcmplt>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d002      	beq.n	8004ce6 <sign+0x32>
	{
		return -1;
 8004ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ce4:	e000      	b.n	8004ce8 <sign+0x34>
	}
	else
	{
		return 0;
 8004ce6:	2300      	movs	r3, #0
	}
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3708      	adds	r7, #8
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004cf0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004d28 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 8004cf4:	f7ff ff48 	bl	8004b88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004cf8:	480c      	ldr	r0, [pc, #48]	@ (8004d2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004cfa:	490d      	ldr	r1, [pc, #52]	@ (8004d30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004cfc:	4a0d      	ldr	r2, [pc, #52]	@ (8004d34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004cfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004d00:	e002      	b.n	8004d08 <LoopCopyDataInit>

08004d02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004d02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004d04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004d06:	3304      	adds	r3, #4

08004d08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004d08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004d0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004d0c:	d3f9      	bcc.n	8004d02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004d0e:	4a0a      	ldr	r2, [pc, #40]	@ (8004d38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004d10:	4c0a      	ldr	r4, [pc, #40]	@ (8004d3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004d12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004d14:	e001      	b.n	8004d1a <LoopFillZerobss>

08004d16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004d16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004d18:	3204      	adds	r2, #4

08004d1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004d1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004d1c:	d3fb      	bcc.n	8004d16 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004d1e:	f004 fccd 	bl	80096bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004d22:	f7fd f8bd 	bl	8001ea0 <main>
  bx  lr    
 8004d26:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004d28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004d2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004d30:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8004d34:	0800a7e0 	.word	0x0800a7e0
  ldr r2, =_sbss
 8004d38:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8004d3c:	20001a50 	.word	0x20001a50

08004d40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004d40:	e7fe      	b.n	8004d40 <ADC_IRQHandler>
	...

08004d44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004d48:	4b0e      	ldr	r3, [pc, #56]	@ (8004d84 <HAL_Init+0x40>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a0d      	ldr	r2, [pc, #52]	@ (8004d84 <HAL_Init+0x40>)
 8004d4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004d52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8004d54:	4b0b      	ldr	r3, [pc, #44]	@ (8004d84 <HAL_Init+0x40>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a0a      	ldr	r2, [pc, #40]	@ (8004d84 <HAL_Init+0x40>)
 8004d5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004d5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004d60:	4b08      	ldr	r3, [pc, #32]	@ (8004d84 <HAL_Init+0x40>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a07      	ldr	r2, [pc, #28]	@ (8004d84 <HAL_Init+0x40>)
 8004d66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d6c:	2003      	movs	r0, #3
 8004d6e:	f000 fd51 	bl	8005814 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004d72:	200f      	movs	r0, #15
 8004d74:	f000 f808 	bl	8004d88 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8004d78:	f7ff fcac 	bl	80046d4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	40023c00 	.word	0x40023c00

08004d88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004d90:	4b12      	ldr	r3, [pc, #72]	@ (8004ddc <HAL_InitTick+0x54>)
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	4b12      	ldr	r3, [pc, #72]	@ (8004de0 <HAL_InitTick+0x58>)
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	4619      	mov	r1, r3
 8004d9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004d9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 fd69 	bl	800587e <HAL_SYSTICK_Config>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e00e      	b.n	8004dd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2b0f      	cmp	r3, #15
 8004dba:	d80a      	bhi.n	8004dd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	6879      	ldr	r1, [r7, #4]
 8004dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8004dc4:	f000 fd31 	bl	800582a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004dc8:	4a06      	ldr	r2, [pc, #24]	@ (8004de4 <HAL_InitTick+0x5c>)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	e000      	b.n	8004dd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3708      	adds	r7, #8
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	2000000c 	.word	0x2000000c
 8004de0:	2000001c 	.word	0x2000001c
 8004de4:	20000018 	.word	0x20000018

08004de8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004de8:	b480      	push	{r7}
 8004dea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004dec:	4b05      	ldr	r3, [pc, #20]	@ (8004e04 <HAL_IncTick+0x1c>)
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	461a      	mov	r2, r3
 8004df2:	4b05      	ldr	r3, [pc, #20]	@ (8004e08 <HAL_IncTick+0x20>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4413      	add	r3, r2
 8004df8:	4a03      	ldr	r2, [pc, #12]	@ (8004e08 <HAL_IncTick+0x20>)
 8004dfa:	6013      	str	r3, [r2, #0]
}
 8004dfc:	bf00      	nop
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bc80      	pop	{r7}
 8004e02:	4770      	bx	lr
 8004e04:	2000001c 	.word	0x2000001c
 8004e08:	200018e4 	.word	0x200018e4

08004e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8004e10:	4b02      	ldr	r3, [pc, #8]	@ (8004e1c <HAL_GetTick+0x10>)
 8004e12:	681b      	ldr	r3, [r3, #0]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bc80      	pop	{r7}
 8004e1a:	4770      	bx	lr
 8004e1c:	200018e4 	.word	0x200018e4

08004e20 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e033      	b.n	8004e9e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d109      	bne.n	8004e52 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f7ff fc6e 	bl	8004720 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e56:	f003 0310 	and.w	r3, r3, #16
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d118      	bne.n	8004e90 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e62:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004e66:	f023 0302 	bic.w	r3, r3, #2
 8004e6a:	f043 0202 	orr.w	r2, r3, #2
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 fa7a 	bl	800536c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e82:	f023 0303 	bic.w	r3, r3, #3
 8004e86:	f043 0201 	orr.w	r2, r3, #1
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	641a      	str	r2, [r3, #64]	@ 0x40
 8004e8e:	e001      	b.n	8004e94 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3710      	adds	r7, #16
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
	...

08004ea8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b086      	sub	sp, #24
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d101      	bne.n	8004ec6 <HAL_ADC_Start_DMA+0x1e>
 8004ec2:	2302      	movs	r3, #2
 8004ec4:	e0bc      	b.n	8005040 <HAL_ADC_Start_DMA+0x198>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d018      	beq.n	8004f0e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	689a      	ldr	r2, [r3, #8]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f042 0201 	orr.w	r2, r2, #1
 8004eea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004eec:	4b56      	ldr	r3, [pc, #344]	@ (8005048 <HAL_ADC_Start_DMA+0x1a0>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a56      	ldr	r2, [pc, #344]	@ (800504c <HAL_ADC_Start_DMA+0x1a4>)
 8004ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef6:	0c9a      	lsrs	r2, r3, #18
 8004ef8:	4613      	mov	r3, r2
 8004efa:	005b      	lsls	r3, r3, #1
 8004efc:	4413      	add	r3, r2
 8004efe:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8004f00:	e002      	b.n	8004f08 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	3b01      	subs	r3, #1
 8004f06:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1f9      	bne.n	8004f02 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f003 0301 	and.w	r3, r3, #1
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	f040 8084 	bne.w	8005026 <HAL_ADC_Start_DMA+0x17e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f22:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004f26:	f023 0301 	bic.w	r3, r3, #1
 8004f2a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d007      	beq.n	8004f50 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f44:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004f48:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f5c:	d106      	bne.n	8004f6c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f62:	f023 0206 	bic.w	r2, r3, #6
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	645a      	str	r2, [r3, #68]	@ 0x44
 8004f6a:	e002      	b.n	8004f72 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f7e:	4a34      	ldr	r2, [pc, #208]	@ (8005050 <HAL_ADC_Start_DMA+0x1a8>)
 8004f80:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f86:	4a33      	ldr	r2, [pc, #204]	@ (8005054 <HAL_ADC_Start_DMA+0x1ac>)
 8004f88:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f8e:	4a32      	ldr	r2, [pc, #200]	@ (8005058 <HAL_ADC_Start_DMA+0x1b0>)
 8004f90:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004f9a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	685a      	ldr	r2, [r3, #4]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8004faa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	689a      	ldr	r2, [r3, #8]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004fba:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	334c      	adds	r3, #76	@ 0x4c
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	68ba      	ldr	r2, [r7, #8]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f000 fd12 	bl	80059f4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8004fd0:	4b22      	ldr	r3, [pc, #136]	@ (800505c <HAL_ADC_Start_DMA+0x1b4>)
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f003 031f 	and.w	r3, r3, #31
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d10f      	bne.n	8004ffc <HAL_ADC_Start_DMA+0x154>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d129      	bne.n	800503e <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	689a      	ldr	r2, [r3, #8]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004ff8:	609a      	str	r2, [r3, #8]
 8004ffa:	e020      	b.n	800503e <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a17      	ldr	r2, [pc, #92]	@ (8005060 <HAL_ADC_Start_DMA+0x1b8>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d11b      	bne.n	800503e <HAL_ADC_Start_DMA+0x196>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d114      	bne.n	800503e <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	689a      	ldr	r2, [r3, #8]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005022:	609a      	str	r2, [r3, #8]
 8005024:	e00b      	b.n	800503e <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800502a:	f043 0210 	orr.w	r2, r3, #16
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005036:	f043 0201 	orr.w	r2, r3, #1
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3718      	adds	r7, #24
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	2000000c 	.word	0x2000000c
 800504c:	431bde83 	.word	0x431bde83
 8005050:	08005579 	.word	0x08005579
 8005054:	08005633 	.word	0x08005633
 8005058:	0800564f 	.word	0x0800564f
 800505c:	40012300 	.word	0x40012300
 8005060:	40012000 	.word	0x40012000

08005064 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800506c:	2300      	movs	r3, #0
 800506e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005076:	2b01      	cmp	r3, #1
 8005078:	d101      	bne.n	800507e <HAL_ADC_Stop_DMA+0x1a>
 800507a:	2302      	movs	r3, #2
 800507c:	e03f      	b.n	80050fe <HAL_ADC_Stop_DMA+0x9a>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2201      	movs	r2, #1
 8005082:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	689a      	ldr	r2, [r3, #8]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f022 0201 	bic.w	r2, r2, #1
 8005094:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f003 0301 	and.w	r3, r3, #1
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d127      	bne.n	80050f4 <HAL_ADC_Stop_DMA+0x90>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689a      	ldr	r2, [r3, #8]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80050b2:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d118      	bne.n	80050f4 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050c6:	4618      	mov	r0, r3
 80050c8:	f000 fcec 	bl	8005aa4 <HAL_DMA_Abort>
 80050cc:	4603      	mov	r3, r0
 80050ce:	73fb      	strb	r3, [r7, #15]
      
      /* Disable ADC overrun interrupt */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	685a      	ldr	r2, [r3, #4]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 80050de:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80050e8:	f023 0301 	bic.w	r3, r3, #1
 80050ec:	f043 0201 	orr.w	r2, r3, #1
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80050fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3710      	adds	r7, #16
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}

08005106 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005106:	b480      	push	{r7}
 8005108:	b083      	sub	sp, #12
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800510e:	bf00      	nop
 8005110:	370c      	adds	r7, #12
 8005112:	46bd      	mov	sp, r7
 8005114:	bc80      	pop	{r7}
 8005116:	4770      	bx	lr

08005118 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	bc80      	pop	{r7}
 8005128:	4770      	bx	lr
	...

0800512c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800512c:	b480      	push	{r7}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005136:	2300      	movs	r3, #0
 8005138:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005140:	2b01      	cmp	r3, #1
 8005142:	d101      	bne.n	8005148 <HAL_ADC_ConfigChannel+0x1c>
 8005144:	2302      	movs	r3, #2
 8005146:	e103      	b.n	8005350 <HAL_ADC_ConfigChannel+0x224>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2b09      	cmp	r3, #9
 8005156:	d925      	bls.n	80051a4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68d9      	ldr	r1, [r3, #12]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	b29b      	uxth	r3, r3
 8005164:	461a      	mov	r2, r3
 8005166:	4613      	mov	r3, r2
 8005168:	005b      	lsls	r3, r3, #1
 800516a:	4413      	add	r3, r2
 800516c:	3b1e      	subs	r3, #30
 800516e:	2207      	movs	r2, #7
 8005170:	fa02 f303 	lsl.w	r3, r2, r3
 8005174:	43da      	mvns	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	400a      	ands	r2, r1
 800517c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68d9      	ldr	r1, [r3, #12]
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	689a      	ldr	r2, [r3, #8]
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	b29b      	uxth	r3, r3
 800518e:	4618      	mov	r0, r3
 8005190:	4603      	mov	r3, r0
 8005192:	005b      	lsls	r3, r3, #1
 8005194:	4403      	add	r3, r0
 8005196:	3b1e      	subs	r3, #30
 8005198:	409a      	lsls	r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	430a      	orrs	r2, r1
 80051a0:	60da      	str	r2, [r3, #12]
 80051a2:	e022      	b.n	80051ea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	6919      	ldr	r1, [r3, #16]
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	461a      	mov	r2, r3
 80051b2:	4613      	mov	r3, r2
 80051b4:	005b      	lsls	r3, r3, #1
 80051b6:	4413      	add	r3, r2
 80051b8:	2207      	movs	r2, #7
 80051ba:	fa02 f303 	lsl.w	r3, r2, r3
 80051be:	43da      	mvns	r2, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	400a      	ands	r2, r1
 80051c6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	6919      	ldr	r1, [r3, #16]
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	689a      	ldr	r2, [r3, #8]
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	4618      	mov	r0, r3
 80051da:	4603      	mov	r3, r0
 80051dc:	005b      	lsls	r3, r3, #1
 80051de:	4403      	add	r3, r0
 80051e0:	409a      	lsls	r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	430a      	orrs	r2, r1
 80051e8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	2b06      	cmp	r3, #6
 80051f0:	d824      	bhi.n	800523c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	685a      	ldr	r2, [r3, #4]
 80051fc:	4613      	mov	r3, r2
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	4413      	add	r3, r2
 8005202:	3b05      	subs	r3, #5
 8005204:	221f      	movs	r2, #31
 8005206:	fa02 f303 	lsl.w	r3, r2, r3
 800520a:	43da      	mvns	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	400a      	ands	r2, r1
 8005212:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	b29b      	uxth	r3, r3
 8005220:	4618      	mov	r0, r3
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	685a      	ldr	r2, [r3, #4]
 8005226:	4613      	mov	r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4413      	add	r3, r2
 800522c:	3b05      	subs	r3, #5
 800522e:	fa00 f203 	lsl.w	r2, r0, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	430a      	orrs	r2, r1
 8005238:	635a      	str	r2, [r3, #52]	@ 0x34
 800523a:	e04c      	b.n	80052d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	2b0c      	cmp	r3, #12
 8005242:	d824      	bhi.n	800528e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	685a      	ldr	r2, [r3, #4]
 800524e:	4613      	mov	r3, r2
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	4413      	add	r3, r2
 8005254:	3b23      	subs	r3, #35	@ 0x23
 8005256:	221f      	movs	r2, #31
 8005258:	fa02 f303 	lsl.w	r3, r2, r3
 800525c:	43da      	mvns	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	400a      	ands	r2, r1
 8005264:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	b29b      	uxth	r3, r3
 8005272:	4618      	mov	r0, r3
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685a      	ldr	r2, [r3, #4]
 8005278:	4613      	mov	r3, r2
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	4413      	add	r3, r2
 800527e:	3b23      	subs	r3, #35	@ 0x23
 8005280:	fa00 f203 	lsl.w	r2, r0, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	430a      	orrs	r2, r1
 800528a:	631a      	str	r2, [r3, #48]	@ 0x30
 800528c:	e023      	b.n	80052d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	685a      	ldr	r2, [r3, #4]
 8005298:	4613      	mov	r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	4413      	add	r3, r2
 800529e:	3b41      	subs	r3, #65	@ 0x41
 80052a0:	221f      	movs	r2, #31
 80052a2:	fa02 f303 	lsl.w	r3, r2, r3
 80052a6:	43da      	mvns	r2, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	400a      	ands	r2, r1
 80052ae:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	4618      	mov	r0, r3
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	685a      	ldr	r2, [r3, #4]
 80052c2:	4613      	mov	r3, r2
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	4413      	add	r3, r2
 80052c8:	3b41      	subs	r3, #65	@ 0x41
 80052ca:	fa00 f203 	lsl.w	r2, r0, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	430a      	orrs	r2, r1
 80052d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a20      	ldr	r2, [pc, #128]	@ (800535c <HAL_ADC_ConfigChannel+0x230>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d109      	bne.n	80052f4 <HAL_ADC_ConfigChannel+0x1c8>
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2b12      	cmp	r3, #18
 80052e6:	d105      	bne.n	80052f4 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80052e8:	4b1d      	ldr	r3, [pc, #116]	@ (8005360 <HAL_ADC_ConfigChannel+0x234>)
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	4a1c      	ldr	r2, [pc, #112]	@ (8005360 <HAL_ADC_ConfigChannel+0x234>)
 80052ee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80052f2:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a18      	ldr	r2, [pc, #96]	@ (800535c <HAL_ADC_ConfigChannel+0x230>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d123      	bne.n	8005346 <HAL_ADC_ConfigChannel+0x21a>
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2b10      	cmp	r3, #16
 8005304:	d003      	beq.n	800530e <HAL_ADC_ConfigChannel+0x1e2>
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2b11      	cmp	r3, #17
 800530c:	d11b      	bne.n	8005346 <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800530e:	4b14      	ldr	r3, [pc, #80]	@ (8005360 <HAL_ADC_ConfigChannel+0x234>)
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	4a13      	ldr	r2, [pc, #76]	@ (8005360 <HAL_ADC_ConfigChannel+0x234>)
 8005314:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005318:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2b10      	cmp	r3, #16
 8005320:	d111      	bne.n	8005346 <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005322:	4b10      	ldr	r3, [pc, #64]	@ (8005364 <HAL_ADC_ConfigChannel+0x238>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a10      	ldr	r2, [pc, #64]	@ (8005368 <HAL_ADC_ConfigChannel+0x23c>)
 8005328:	fba2 2303 	umull	r2, r3, r2, r3
 800532c:	0c9a      	lsrs	r2, r3, #18
 800532e:	4613      	mov	r3, r2
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	4413      	add	r3, r2
 8005334:	005b      	lsls	r3, r3, #1
 8005336:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8005338:	e002      	b.n	8005340 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	3b01      	subs	r3, #1
 800533e:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1f9      	bne.n	800533a <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3714      	adds	r7, #20
 8005354:	46bd      	mov	sp, r7
 8005356:	bc80      	pop	{r7}
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	40012000 	.word	0x40012000
 8005360:	40012300 	.word	0x40012300
 8005364:	2000000c 	.word	0x2000000c
 8005368:	431bde83 	.word	0x431bde83

0800536c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005374:	4b7e      	ldr	r3, [pc, #504]	@ (8005570 <ADC_Init+0x204>)
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	4a7d      	ldr	r2, [pc, #500]	@ (8005570 <ADC_Init+0x204>)
 800537a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800537e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005380:	4b7b      	ldr	r3, [pc, #492]	@ (8005570 <ADC_Init+0x204>)
 8005382:	685a      	ldr	r2, [r3, #4]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	4979      	ldr	r1, [pc, #484]	@ (8005570 <ADC_Init+0x204>)
 800538a:	4313      	orrs	r3, r2
 800538c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	685a      	ldr	r2, [r3, #4]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800539c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	6859      	ldr	r1, [r3, #4]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	021a      	lsls	r2, r3, #8
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	430a      	orrs	r2, r1
 80053b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	685a      	ldr	r2, [r3, #4]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80053c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	6859      	ldr	r1, [r3, #4]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	689a      	ldr	r2, [r3, #8]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	430a      	orrs	r2, r1
 80053d2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	689a      	ldr	r2, [r3, #8]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80053e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6899      	ldr	r1, [r3, #8]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	68da      	ldr	r2, [r3, #12]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	430a      	orrs	r2, r1
 80053f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053fa:	4a5e      	ldr	r2, [pc, #376]	@ (8005574 <ADC_Init+0x208>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d022      	beq.n	8005446 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	689a      	ldr	r2, [r3, #8]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800540e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	6899      	ldr	r1, [r3, #8]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	430a      	orrs	r2, r1
 8005420:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	689a      	ldr	r2, [r3, #8]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005430:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	6899      	ldr	r1, [r3, #8]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	430a      	orrs	r2, r1
 8005442:	609a      	str	r2, [r3, #8]
 8005444:	e00f      	b.n	8005466 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	689a      	ldr	r2, [r3, #8]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005454:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	689a      	ldr	r2, [r3, #8]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005464:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	689a      	ldr	r2, [r3, #8]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f022 0202 	bic.w	r2, r2, #2
 8005474:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	6899      	ldr	r1, [r3, #8]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	7e1b      	ldrb	r3, [r3, #24]
 8005480:	005a      	lsls	r2, r3, #1
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	430a      	orrs	r2, r1
 8005488:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d027      	beq.n	80054e4 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	685a      	ldr	r2, [r3, #4]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054a2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	685a      	ldr	r2, [r3, #4]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80054b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b8:	3b01      	subs	r3, #1
 80054ba:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 80054be:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	fa92 f2a2 	rbit	r2, r2
 80054c6:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	fab2 f282 	clz	r2, r2
 80054ce:	b2d2      	uxtb	r2, r2
 80054d0:	fa03 f102 	lsl.w	r1, r3, r2
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	685a      	ldr	r2, [r3, #4]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	430a      	orrs	r2, r1
 80054e0:	605a      	str	r2, [r3, #4]
 80054e2:	e007      	b.n	80054f4 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	685a      	ldr	r2, [r3, #4]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8005502:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	69db      	ldr	r3, [r3, #28]
 800550e:	3b01      	subs	r3, #1
 8005510:	051a      	lsls	r2, r3, #20
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	430a      	orrs	r2, r1
 8005518:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	689a      	ldr	r2, [r3, #8]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005528:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	6899      	ldr	r1, [r3, #8]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005536:	025a      	lsls	r2, r3, #9
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	430a      	orrs	r2, r1
 800553e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	689a      	ldr	r2, [r3, #8]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800554e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	6899      	ldr	r1, [r3, #8]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	695b      	ldr	r3, [r3, #20]
 800555a:	029a      	lsls	r2, r3, #10
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	430a      	orrs	r2, r1
 8005562:	609a      	str	r2, [r3, #8]
}
 8005564:	bf00      	nop
 8005566:	3714      	adds	r7, #20
 8005568:	46bd      	mov	sp, r7
 800556a:	bc80      	pop	{r7}
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	40012300 	.word	0x40012300
 8005574:	0f000001 	.word	0x0f000001

08005578 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005584:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800558a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800558e:	2b00      	cmp	r3, #0
 8005590:	d13c      	bne.n	800560c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005596:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d12b      	bne.n	8005604 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d127      	bne.n	8005604 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ba:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d006      	beq.n	80055d0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d119      	bne.n	8005604 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	685a      	ldr	r2, [r3, #4]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f022 0220 	bic.w	r2, r2, #32
 80055de:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d105      	bne.n	8005604 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055fc:	f043 0201 	orr.w	r2, r3, #1
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005604:	68f8      	ldr	r0, [r7, #12]
 8005606:	f7fc fbb1 	bl	8001d6c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800560a:	e00e      	b.n	800562a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005610:	f003 0310 	and.w	r3, r3, #16
 8005614:	2b00      	cmp	r3, #0
 8005616:	d003      	beq.n	8005620 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005618:	68f8      	ldr	r0, [r7, #12]
 800561a:	f7ff fd7d 	bl	8005118 <HAL_ADC_ErrorCallback>
}
 800561e:	e004      	b.n	800562a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	4798      	blx	r3
}
 800562a:	bf00      	nop
 800562c:	3710      	adds	r7, #16
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}

08005632 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005632:	b580      	push	{r7, lr}
 8005634:	b084      	sub	sp, #16
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800563e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	f7ff fd60 	bl	8005106 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005646:	bf00      	nop
 8005648:	3710      	adds	r7, #16
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800564e:	b580      	push	{r7, lr}
 8005650:	b084      	sub	sp, #16
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800565a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2240      	movs	r2, #64	@ 0x40
 8005660:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005666:	f043 0204 	orr.w	r2, r3, #4
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	645a      	str	r2, [r3, #68]	@ 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800566e:	68f8      	ldr	r0, [r7, #12]
 8005670:	f7ff fd52 	bl	8005118 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005674:	bf00      	nop
 8005676:	3710      	adds	r7, #16
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f003 0307 	and.w	r3, r3, #7
 800568a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800568c:	4b0c      	ldr	r3, [pc, #48]	@ (80056c0 <__NVIC_SetPriorityGrouping+0x44>)
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005692:	68ba      	ldr	r2, [r7, #8]
 8005694:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005698:	4013      	ands	r3, r2
 800569a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80056a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80056a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80056ae:	4a04      	ldr	r2, [pc, #16]	@ (80056c0 <__NVIC_SetPriorityGrouping+0x44>)
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	60d3      	str	r3, [r2, #12]
}
 80056b4:	bf00      	nop
 80056b6:	3714      	adds	r7, #20
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bc80      	pop	{r7}
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	e000ed00 	.word	0xe000ed00

080056c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80056c4:	b480      	push	{r7}
 80056c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80056c8:	4b04      	ldr	r3, [pc, #16]	@ (80056dc <__NVIC_GetPriorityGrouping+0x18>)
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	0a1b      	lsrs	r3, r3, #8
 80056ce:	f003 0307 	and.w	r3, r3, #7
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bc80      	pop	{r7}
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	e000ed00 	.word	0xe000ed00

080056e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	4603      	mov	r3, r0
 80056e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	db0b      	blt.n	800570a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056f2:	79fb      	ldrb	r3, [r7, #7]
 80056f4:	f003 021f 	and.w	r2, r3, #31
 80056f8:	4906      	ldr	r1, [pc, #24]	@ (8005714 <__NVIC_EnableIRQ+0x34>)
 80056fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056fe:	095b      	lsrs	r3, r3, #5
 8005700:	2001      	movs	r0, #1
 8005702:	fa00 f202 	lsl.w	r2, r0, r2
 8005706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800570a:	bf00      	nop
 800570c:	370c      	adds	r7, #12
 800570e:	46bd      	mov	sp, r7
 8005710:	bc80      	pop	{r7}
 8005712:	4770      	bx	lr
 8005714:	e000e100 	.word	0xe000e100

08005718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	4603      	mov	r3, r0
 8005720:	6039      	str	r1, [r7, #0]
 8005722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005728:	2b00      	cmp	r3, #0
 800572a:	db0a      	blt.n	8005742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	b2da      	uxtb	r2, r3
 8005730:	490c      	ldr	r1, [pc, #48]	@ (8005764 <__NVIC_SetPriority+0x4c>)
 8005732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005736:	0112      	lsls	r2, r2, #4
 8005738:	b2d2      	uxtb	r2, r2
 800573a:	440b      	add	r3, r1
 800573c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005740:	e00a      	b.n	8005758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	b2da      	uxtb	r2, r3
 8005746:	4908      	ldr	r1, [pc, #32]	@ (8005768 <__NVIC_SetPriority+0x50>)
 8005748:	79fb      	ldrb	r3, [r7, #7]
 800574a:	f003 030f 	and.w	r3, r3, #15
 800574e:	3b04      	subs	r3, #4
 8005750:	0112      	lsls	r2, r2, #4
 8005752:	b2d2      	uxtb	r2, r2
 8005754:	440b      	add	r3, r1
 8005756:	761a      	strb	r2, [r3, #24]
}
 8005758:	bf00      	nop
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	bc80      	pop	{r7}
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	e000e100 	.word	0xe000e100
 8005768:	e000ed00 	.word	0xe000ed00

0800576c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800576c:	b480      	push	{r7}
 800576e:	b089      	sub	sp, #36	@ 0x24
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f003 0307 	and.w	r3, r3, #7
 800577e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	f1c3 0307 	rsb	r3, r3, #7
 8005786:	2b04      	cmp	r3, #4
 8005788:	bf28      	it	cs
 800578a:	2304      	movcs	r3, #4
 800578c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	3304      	adds	r3, #4
 8005792:	2b06      	cmp	r3, #6
 8005794:	d902      	bls.n	800579c <NVIC_EncodePriority+0x30>
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	3b03      	subs	r3, #3
 800579a:	e000      	b.n	800579e <NVIC_EncodePriority+0x32>
 800579c:	2300      	movs	r3, #0
 800579e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057a0:	f04f 32ff 	mov.w	r2, #4294967295
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	fa02 f303 	lsl.w	r3, r2, r3
 80057aa:	43da      	mvns	r2, r3
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	401a      	ands	r2, r3
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80057b4:	f04f 31ff 	mov.w	r1, #4294967295
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	fa01 f303 	lsl.w	r3, r1, r3
 80057be:	43d9      	mvns	r1, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057c4:	4313      	orrs	r3, r2
         );
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3724      	adds	r7, #36	@ 0x24
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bc80      	pop	{r7}
 80057ce:	4770      	bx	lr

080057d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b082      	sub	sp, #8
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	3b01      	subs	r3, #1
 80057dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80057e0:	d301      	bcc.n	80057e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80057e2:	2301      	movs	r3, #1
 80057e4:	e00f      	b.n	8005806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80057e6:	4a0a      	ldr	r2, [pc, #40]	@ (8005810 <SysTick_Config+0x40>)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	3b01      	subs	r3, #1
 80057ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80057ee:	210f      	movs	r1, #15
 80057f0:	f04f 30ff 	mov.w	r0, #4294967295
 80057f4:	f7ff ff90 	bl	8005718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80057f8:	4b05      	ldr	r3, [pc, #20]	@ (8005810 <SysTick_Config+0x40>)
 80057fa:	2200      	movs	r2, #0
 80057fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80057fe:	4b04      	ldr	r3, [pc, #16]	@ (8005810 <SysTick_Config+0x40>)
 8005800:	2207      	movs	r2, #7
 8005802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3708      	adds	r7, #8
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	e000e010 	.word	0xe000e010

08005814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f7ff ff2d 	bl	800567c <__NVIC_SetPriorityGrouping>
}
 8005822:	bf00      	nop
 8005824:	3708      	adds	r7, #8
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800582a:	b580      	push	{r7, lr}
 800582c:	b086      	sub	sp, #24
 800582e:	af00      	add	r7, sp, #0
 8005830:	4603      	mov	r3, r0
 8005832:	60b9      	str	r1, [r7, #8]
 8005834:	607a      	str	r2, [r7, #4]
 8005836:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005838:	2300      	movs	r3, #0
 800583a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800583c:	f7ff ff42 	bl	80056c4 <__NVIC_GetPriorityGrouping>
 8005840:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	68b9      	ldr	r1, [r7, #8]
 8005846:	6978      	ldr	r0, [r7, #20]
 8005848:	f7ff ff90 	bl	800576c <NVIC_EncodePriority>
 800584c:	4602      	mov	r2, r0
 800584e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005852:	4611      	mov	r1, r2
 8005854:	4618      	mov	r0, r3
 8005856:	f7ff ff5f 	bl	8005718 <__NVIC_SetPriority>
}
 800585a:	bf00      	nop
 800585c:	3718      	adds	r7, #24
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}

08005862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005862:	b580      	push	{r7, lr}
 8005864:	b082      	sub	sp, #8
 8005866:	af00      	add	r7, sp, #0
 8005868:	4603      	mov	r3, r0
 800586a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800586c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005870:	4618      	mov	r0, r3
 8005872:	f7ff ff35 	bl	80056e0 <__NVIC_EnableIRQ>
}
 8005876:	bf00      	nop
 8005878:	3708      	adds	r7, #8
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}

0800587e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800587e:	b580      	push	{r7, lr}
 8005880:	b082      	sub	sp, #8
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f7ff ffa2 	bl	80057d0 <SysTick_Config>
 800588c:	4603      	mov	r3, r0
}
 800588e:	4618      	mov	r0, r3
 8005890:	3708      	adds	r7, #8
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
	...

08005898 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b086      	sub	sp, #24
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80058a0:	2300      	movs	r3, #0
 80058a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80058a4:	f7ff fab2 	bl	8004e0c <HAL_GetTick>
 80058a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d101      	bne.n	80058b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e099      	b.n	80059e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2202      	movs	r2, #2
 80058b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f022 0201 	bic.w	r2, r2, #1
 80058d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058d4:	e00f      	b.n	80058f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80058d6:	f7ff fa99 	bl	8004e0c <HAL_GetTick>
 80058da:	4602      	mov	r2, r0
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	2b05      	cmp	r3, #5
 80058e2:	d908      	bls.n	80058f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2220      	movs	r2, #32
 80058e8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2203      	movs	r2, #3
 80058ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e078      	b.n	80059e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0301 	and.w	r3, r3, #1
 8005900:	2b00      	cmp	r3, #0
 8005902:	d1e8      	bne.n	80058d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800590c:	697a      	ldr	r2, [r7, #20]
 800590e:	4b38      	ldr	r3, [pc, #224]	@ (80059f0 <HAL_DMA_Init+0x158>)
 8005910:	4013      	ands	r3, r2
 8005912:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005922:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	691b      	ldr	r3, [r3, #16]
 8005928:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800592e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800593a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	4313      	orrs	r3, r2
 8005946:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800594c:	2b04      	cmp	r3, #4
 800594e:	d107      	bne.n	8005960 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005958:	4313      	orrs	r3, r2
 800595a:	697a      	ldr	r2, [r7, #20]
 800595c:	4313      	orrs	r3, r2
 800595e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	f023 0307 	bic.w	r3, r3, #7
 8005976:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800597c:	697a      	ldr	r2, [r7, #20]
 800597e:	4313      	orrs	r3, r2
 8005980:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005986:	2b04      	cmp	r3, #4
 8005988:	d117      	bne.n	80059ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	4313      	orrs	r3, r2
 8005992:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00e      	beq.n	80059ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 fadd 	bl	8005f5c <DMA_CheckFifoParam>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d008      	beq.n	80059ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2240      	movs	r2, #64	@ 0x40
 80059ac:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80059b6:	2301      	movs	r3, #1
 80059b8:	e016      	b.n	80059e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	697a      	ldr	r2, [r7, #20]
 80059c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 fa96 	bl	8005ef4 <DMA_CalcBaseAndBitshift>
 80059c8:	4603      	mov	r3, r0
 80059ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059d0:	223f      	movs	r2, #63	@ 0x3f
 80059d2:	409a      	lsls	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3718      	adds	r7, #24
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	f010803f 	.word	0xf010803f

080059f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b086      	sub	sp, #24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]
 8005a00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a02:	2300      	movs	r3, #0
 8005a04:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a0a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d101      	bne.n	8005a1a <HAL_DMA_Start_IT+0x26>
 8005a16:	2302      	movs	r3, #2
 8005a18:	e040      	b.n	8005a9c <HAL_DMA_Start_IT+0xa8>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d12f      	bne.n	8005a8e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2202      	movs	r2, #2
 8005a32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	68b9      	ldr	r1, [r7, #8]
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	f000 fa28 	bl	8005e98 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a4c:	223f      	movs	r2, #63	@ 0x3f
 8005a4e:	409a      	lsls	r2, r3
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f042 0216 	orr.w	r2, r2, #22
 8005a62:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d007      	beq.n	8005a7c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f042 0208 	orr.w	r2, r2, #8
 8005a7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f042 0201 	orr.w	r2, r2, #1
 8005a8a:	601a      	str	r2, [r3, #0]
 8005a8c:	e005      	b.n	8005a9a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005a96:	2302      	movs	r3, #2
 8005a98:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3718      	adds	r7, #24
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ab0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005ab2:	f7ff f9ab 	bl	8004e0c <HAL_GetTick>
 8005ab6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d008      	beq.n	8005ad6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2280      	movs	r2, #128	@ 0x80
 8005ac8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e052      	b.n	8005b7c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f022 0216 	bic.w	r2, r2, #22
 8005ae4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	695a      	ldr	r2, [r3, #20]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005af4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d103      	bne.n	8005b06 <HAL_DMA_Abort+0x62>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d007      	beq.n	8005b16 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f022 0208 	bic.w	r2, r2, #8
 8005b14:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f022 0201 	bic.w	r2, r2, #1
 8005b24:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b26:	e013      	b.n	8005b50 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b28:	f7ff f970 	bl	8004e0c <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	2b05      	cmp	r3, #5
 8005b34:	d90c      	bls.n	8005b50 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2220      	movs	r2, #32
 8005b3a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2203      	movs	r2, #3
 8005b40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e015      	b.n	8005b7c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0301 	and.w	r3, r3, #1
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1e4      	bne.n	8005b28 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b62:	223f      	movs	r2, #63	@ 0x3f
 8005b64:	409a      	lsls	r2, r3
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3710      	adds	r7, #16
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b086      	sub	sp, #24
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005b90:	4b8e      	ldr	r3, [pc, #568]	@ (8005dcc <HAL_DMA_IRQHandler+0x248>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a8e      	ldr	r2, [pc, #568]	@ (8005dd0 <HAL_DMA_IRQHandler+0x24c>)
 8005b96:	fba2 2303 	umull	r2, r3, r2, r3
 8005b9a:	0a9b      	lsrs	r3, r3, #10
 8005b9c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ba2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bae:	2208      	movs	r2, #8
 8005bb0:	409a      	lsls	r2, r3
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d01a      	beq.n	8005bf0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0304 	and.w	r3, r3, #4
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d013      	beq.n	8005bf0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f022 0204 	bic.w	r2, r2, #4
 8005bd6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bdc:	2208      	movs	r2, #8
 8005bde:	409a      	lsls	r2, r3
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005be8:	f043 0201 	orr.w	r2, r3, #1
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	409a      	lsls	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d012      	beq.n	8005c26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00b      	beq.n	8005c26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c12:	2201      	movs	r2, #1
 8005c14:	409a      	lsls	r2, r3
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c1e:	f043 0202 	orr.w	r2, r3, #2
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c2a:	2204      	movs	r2, #4
 8005c2c:	409a      	lsls	r2, r3
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	4013      	ands	r3, r2
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d012      	beq.n	8005c5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0302 	and.w	r3, r3, #2
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d00b      	beq.n	8005c5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c48:	2204      	movs	r2, #4
 8005c4a:	409a      	lsls	r2, r3
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c54:	f043 0204 	orr.w	r2, r3, #4
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c60:	2210      	movs	r2, #16
 8005c62:	409a      	lsls	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	4013      	ands	r3, r2
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d043      	beq.n	8005cf4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0308 	and.w	r3, r3, #8
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d03c      	beq.n	8005cf4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c7e:	2210      	movs	r2, #16
 8005c80:	409a      	lsls	r2, r3
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d018      	beq.n	8005cc6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d108      	bne.n	8005cb4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d024      	beq.n	8005cf4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	4798      	blx	r3
 8005cb2:	e01f      	b.n	8005cf4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d01b      	beq.n	8005cf4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	4798      	blx	r3
 8005cc4:	e016      	b.n	8005cf4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d107      	bne.n	8005ce4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f022 0208 	bic.w	r2, r2, #8
 8005ce2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d003      	beq.n	8005cf4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cf8:	2220      	movs	r2, #32
 8005cfa:	409a      	lsls	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	4013      	ands	r3, r2
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f000 808f 	beq.w	8005e24 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0310 	and.w	r3, r3, #16
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	f000 8087 	beq.w	8005e24 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d1a:	2220      	movs	r2, #32
 8005d1c:	409a      	lsls	r2, r3
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	2b05      	cmp	r3, #5
 8005d2c:	d136      	bne.n	8005d9c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f022 0216 	bic.w	r2, r2, #22
 8005d3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	695a      	ldr	r2, [r3, #20]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005d4c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d103      	bne.n	8005d5e <HAL_DMA_IRQHandler+0x1da>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d007      	beq.n	8005d6e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f022 0208 	bic.w	r2, r2, #8
 8005d6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d72:	223f      	movs	r2, #63	@ 0x3f
 8005d74:	409a      	lsls	r2, r3
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d07e      	beq.n	8005e90 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	4798      	blx	r3
        }
        return;
 8005d9a:	e079      	b.n	8005e90 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d01d      	beq.n	8005de6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d10d      	bne.n	8005dd4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d031      	beq.n	8005e24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	4798      	blx	r3
 8005dc8:	e02c      	b.n	8005e24 <HAL_DMA_IRQHandler+0x2a0>
 8005dca:	bf00      	nop
 8005dcc:	2000000c 	.word	0x2000000c
 8005dd0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d023      	beq.n	8005e24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	4798      	blx	r3
 8005de4:	e01e      	b.n	8005e24 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d10f      	bne.n	8005e14 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f022 0210 	bic.w	r2, r2, #16
 8005e02:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d003      	beq.n	8005e24 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d032      	beq.n	8005e92 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e30:	f003 0301 	and.w	r3, r3, #1
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d022      	beq.n	8005e7e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2205      	movs	r2, #5
 8005e3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f022 0201 	bic.w	r2, r2, #1
 8005e4e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	3301      	adds	r3, #1
 8005e54:	60bb      	str	r3, [r7, #8]
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d307      	bcc.n	8005e6c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0301 	and.w	r3, r3, #1
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d1f2      	bne.n	8005e50 <HAL_DMA_IRQHandler+0x2cc>
 8005e6a:	e000      	b.n	8005e6e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005e6c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2201      	movs	r2, #1
 8005e72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d005      	beq.n	8005e92 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	4798      	blx	r3
 8005e8e:	e000      	b.n	8005e92 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005e90:	bf00      	nop
    }
  }
}
 8005e92:	3718      	adds	r7, #24
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
 8005ea4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005eb4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	683a      	ldr	r2, [r7, #0]
 8005ebc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	2b40      	cmp	r3, #64	@ 0x40
 8005ec4:	d108      	bne.n	8005ed8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005ed6:	e007      	b.n	8005ee8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68ba      	ldr	r2, [r7, #8]
 8005ede:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	60da      	str	r2, [r3, #12]
}
 8005ee8:	bf00      	nop
 8005eea:	3714      	adds	r7, #20
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bc80      	pop	{r7}
 8005ef0:	4770      	bx	lr
	...

08005ef4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b085      	sub	sp, #20
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	3b10      	subs	r3, #16
 8005f04:	4a13      	ldr	r2, [pc, #76]	@ (8005f54 <DMA_CalcBaseAndBitshift+0x60>)
 8005f06:	fba2 2303 	umull	r2, r3, r2, r3
 8005f0a:	091b      	lsrs	r3, r3, #4
 8005f0c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005f0e:	4a12      	ldr	r2, [pc, #72]	@ (8005f58 <DMA_CalcBaseAndBitshift+0x64>)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	4413      	add	r3, r2
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	461a      	mov	r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2b03      	cmp	r3, #3
 8005f20:	d909      	bls.n	8005f36 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005f2a:	f023 0303 	bic.w	r3, r3, #3
 8005f2e:	1d1a      	adds	r2, r3, #4
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	659a      	str	r2, [r3, #88]	@ 0x58
 8005f34:	e007      	b.n	8005f46 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005f3e:	f023 0303 	bic.w	r3, r3, #3
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3714      	adds	r7, #20
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bc80      	pop	{r7}
 8005f52:	4770      	bx	lr
 8005f54:	aaaaaaab 	.word	0xaaaaaaab
 8005f58:	0800a7c8 	.word	0x0800a7c8

08005f5c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f64:	2300      	movs	r3, #0
 8005f66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f6c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	699b      	ldr	r3, [r3, #24]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d11f      	bne.n	8005fb6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	2b03      	cmp	r3, #3
 8005f7a:	d856      	bhi.n	800602a <DMA_CheckFifoParam+0xce>
 8005f7c:	a201      	add	r2, pc, #4	@ (adr r2, 8005f84 <DMA_CheckFifoParam+0x28>)
 8005f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f82:	bf00      	nop
 8005f84:	08005f95 	.word	0x08005f95
 8005f88:	08005fa7 	.word	0x08005fa7
 8005f8c:	08005f95 	.word	0x08005f95
 8005f90:	0800602b 	.word	0x0800602b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f98:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d046      	beq.n	800602e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fa4:	e043      	b.n	800602e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005faa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005fae:	d140      	bne.n	8006032 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fb4:	e03d      	b.n	8006032 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	699b      	ldr	r3, [r3, #24]
 8005fba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fbe:	d121      	bne.n	8006004 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	2b03      	cmp	r3, #3
 8005fc4:	d837      	bhi.n	8006036 <DMA_CheckFifoParam+0xda>
 8005fc6:	a201      	add	r2, pc, #4	@ (adr r2, 8005fcc <DMA_CheckFifoParam+0x70>)
 8005fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fcc:	08005fdd 	.word	0x08005fdd
 8005fd0:	08005fe3 	.word	0x08005fe3
 8005fd4:	08005fdd 	.word	0x08005fdd
 8005fd8:	08005ff5 	.word	0x08005ff5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	73fb      	strb	r3, [r7, #15]
      break;
 8005fe0:	e030      	b.n	8006044 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fe6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d025      	beq.n	800603a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ff2:	e022      	b.n	800603a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ff8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005ffc:	d11f      	bne.n	800603e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006002:	e01c      	b.n	800603e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	2b02      	cmp	r3, #2
 8006008:	d903      	bls.n	8006012 <DMA_CheckFifoParam+0xb6>
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	2b03      	cmp	r3, #3
 800600e:	d003      	beq.n	8006018 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006010:	e018      	b.n	8006044 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	73fb      	strb	r3, [r7, #15]
      break;
 8006016:	e015      	b.n	8006044 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800601c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006020:	2b00      	cmp	r3, #0
 8006022:	d00e      	beq.n	8006042 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	73fb      	strb	r3, [r7, #15]
      break;
 8006028:	e00b      	b.n	8006042 <DMA_CheckFifoParam+0xe6>
      break;
 800602a:	bf00      	nop
 800602c:	e00a      	b.n	8006044 <DMA_CheckFifoParam+0xe8>
      break;
 800602e:	bf00      	nop
 8006030:	e008      	b.n	8006044 <DMA_CheckFifoParam+0xe8>
      break;
 8006032:	bf00      	nop
 8006034:	e006      	b.n	8006044 <DMA_CheckFifoParam+0xe8>
      break;
 8006036:	bf00      	nop
 8006038:	e004      	b.n	8006044 <DMA_CheckFifoParam+0xe8>
      break;
 800603a:	bf00      	nop
 800603c:	e002      	b.n	8006044 <DMA_CheckFifoParam+0xe8>
      break;   
 800603e:	bf00      	nop
 8006040:	e000      	b.n	8006044 <DMA_CheckFifoParam+0xe8>
      break;
 8006042:	bf00      	nop
    }
  } 
  
  return status; 
 8006044:	7bfb      	ldrb	r3, [r7, #15]
}
 8006046:	4618      	mov	r0, r3
 8006048:	3714      	adds	r7, #20
 800604a:	46bd      	mov	sp, r7
 800604c:	bc80      	pop	{r7}
 800604e:	4770      	bx	lr

08006050 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006062:	4b23      	ldr	r3, [pc, #140]	@ (80060f0 <HAL_FLASH_Program+0xa0>)
 8006064:	7e1b      	ldrb	r3, [r3, #24]
 8006066:	2b01      	cmp	r3, #1
 8006068:	d101      	bne.n	800606e <HAL_FLASH_Program+0x1e>
 800606a:	2302      	movs	r3, #2
 800606c:	e03b      	b.n	80060e6 <HAL_FLASH_Program+0x96>
 800606e:	4b20      	ldr	r3, [pc, #128]	@ (80060f0 <HAL_FLASH_Program+0xa0>)
 8006070:	2201      	movs	r2, #1
 8006072:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006074:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006078:	f000 f870 	bl	800615c <FLASH_WaitForLastOperation>
 800607c:	4603      	mov	r3, r0
 800607e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8006080:	7dfb      	ldrb	r3, [r7, #23]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d12b      	bne.n	80060de <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d105      	bne.n	8006098 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800608c:	783b      	ldrb	r3, [r7, #0]
 800608e:	4619      	mov	r1, r3
 8006090:	68b8      	ldr	r0, [r7, #8]
 8006092:	f000 f919 	bl	80062c8 <FLASH_Program_Byte>
 8006096:	e016      	b.n	80060c6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2b01      	cmp	r3, #1
 800609c:	d105      	bne.n	80060aa <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800609e:	883b      	ldrh	r3, [r7, #0]
 80060a0:	4619      	mov	r1, r3
 80060a2:	68b8      	ldr	r0, [r7, #8]
 80060a4:	f000 f8ee 	bl	8006284 <FLASH_Program_HalfWord>
 80060a8:	e00d      	b.n	80060c6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d105      	bne.n	80060bc <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	4619      	mov	r1, r3
 80060b4:	68b8      	ldr	r0, [r7, #8]
 80060b6:	f000 f8c3 	bl	8006240 <FLASH_Program_Word>
 80060ba:	e004      	b.n	80060c6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80060bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060c0:	68b8      	ldr	r0, [r7, #8]
 80060c2:	f000 f88b 	bl	80061dc <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80060c6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80060ca:	f000 f847 	bl	800615c <FLASH_WaitForLastOperation>
 80060ce:	4603      	mov	r3, r0
 80060d0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80060d2:	4b08      	ldr	r3, [pc, #32]	@ (80060f4 <HAL_FLASH_Program+0xa4>)
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	4a07      	ldr	r2, [pc, #28]	@ (80060f4 <HAL_FLASH_Program+0xa4>)
 80060d8:	f023 0301 	bic.w	r3, r3, #1
 80060dc:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80060de:	4b04      	ldr	r3, [pc, #16]	@ (80060f0 <HAL_FLASH_Program+0xa0>)
 80060e0:	2200      	movs	r2, #0
 80060e2:	761a      	strb	r2, [r3, #24]
  
  return status;
 80060e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3718      	adds	r7, #24
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	200018e8 	.word	0x200018e8
 80060f4:	40023c00 	.word	0x40023c00

080060f8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80060fe:	2300      	movs	r3, #0
 8006100:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006102:	4b0b      	ldr	r3, [pc, #44]	@ (8006130 <HAL_FLASH_Unlock+0x38>)
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	2b00      	cmp	r3, #0
 8006108:	da0b      	bge.n	8006122 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800610a:	4b09      	ldr	r3, [pc, #36]	@ (8006130 <HAL_FLASH_Unlock+0x38>)
 800610c:	4a09      	ldr	r2, [pc, #36]	@ (8006134 <HAL_FLASH_Unlock+0x3c>)
 800610e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006110:	4b07      	ldr	r3, [pc, #28]	@ (8006130 <HAL_FLASH_Unlock+0x38>)
 8006112:	4a09      	ldr	r2, [pc, #36]	@ (8006138 <HAL_FLASH_Unlock+0x40>)
 8006114:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006116:	4b06      	ldr	r3, [pc, #24]	@ (8006130 <HAL_FLASH_Unlock+0x38>)
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	2b00      	cmp	r3, #0
 800611c:	da01      	bge.n	8006122 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8006122:	79fb      	ldrb	r3, [r7, #7]
}
 8006124:	4618      	mov	r0, r3
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	bc80      	pop	{r7}
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	40023c00 	.word	0x40023c00
 8006134:	45670123 	.word	0x45670123
 8006138:	cdef89ab 	.word	0xcdef89ab

0800613c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800613c:	b480      	push	{r7}
 800613e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8006140:	4b05      	ldr	r3, [pc, #20]	@ (8006158 <HAL_FLASH_Lock+0x1c>)
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	4a04      	ldr	r2, [pc, #16]	@ (8006158 <HAL_FLASH_Lock+0x1c>)
 8006146:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800614a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	46bd      	mov	sp, r7
 8006152:	bc80      	pop	{r7}
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	40023c00 	.word	0x40023c00

0800615c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006164:	2300      	movs	r3, #0
 8006166:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006168:	4b1a      	ldr	r3, [pc, #104]	@ (80061d4 <FLASH_WaitForLastOperation+0x78>)
 800616a:	2200      	movs	r2, #0
 800616c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800616e:	f7fe fe4d 	bl	8004e0c <HAL_GetTick>
 8006172:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006174:	e010      	b.n	8006198 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800617c:	d00c      	beq.n	8006198 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d007      	beq.n	8006194 <FLASH_WaitForLastOperation+0x38>
 8006184:	f7fe fe42 	bl	8004e0c <HAL_GetTick>
 8006188:	4602      	mov	r2, r0
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	1ad3      	subs	r3, r2, r3
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	429a      	cmp	r2, r3
 8006192:	d201      	bcs.n	8006198 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8006194:	2303      	movs	r3, #3
 8006196:	e019      	b.n	80061cc <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006198:	4b0f      	ldr	r3, [pc, #60]	@ (80061d8 <FLASH_WaitForLastOperation+0x7c>)
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d1e8      	bne.n	8006176 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80061a4:	4b0c      	ldr	r3, [pc, #48]	@ (80061d8 <FLASH_WaitForLastOperation+0x7c>)
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	f003 0301 	and.w	r3, r3, #1
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d002      	beq.n	80061b6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80061b0:	4b09      	ldr	r3, [pc, #36]	@ (80061d8 <FLASH_WaitForLastOperation+0x7c>)
 80061b2:	2201      	movs	r2, #1
 80061b4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80061b6:	4b08      	ldr	r3, [pc, #32]	@ (80061d8 <FLASH_WaitForLastOperation+0x7c>)
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d003      	beq.n	80061ca <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80061c2:	f000 f8a1 	bl	8006308 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e000      	b.n	80061cc <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80061ca:	2300      	movs	r3, #0
  
}  
 80061cc:	4618      	mov	r0, r3
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	200018e8 	.word	0x200018e8
 80061d8:	40023c00 	.word	0x40023c00

080061dc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80061e8:	4b14      	ldr	r3, [pc, #80]	@ (800623c <FLASH_Program_DoubleWord+0x60>)
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	4a13      	ldr	r2, [pc, #76]	@ (800623c <FLASH_Program_DoubleWord+0x60>)
 80061ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80061f4:	4b11      	ldr	r3, [pc, #68]	@ (800623c <FLASH_Program_DoubleWord+0x60>)
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	4a10      	ldr	r2, [pc, #64]	@ (800623c <FLASH_Program_DoubleWord+0x60>)
 80061fa:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80061fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006200:	4b0e      	ldr	r3, [pc, #56]	@ (800623c <FLASH_Program_DoubleWord+0x60>)
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	4a0d      	ldr	r2, [pc, #52]	@ (800623c <FLASH_Program_DoubleWord+0x60>)
 8006206:	f043 0301 	orr.w	r3, r3, #1
 800620a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	683a      	ldr	r2, [r7, #0]
 8006210:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8006212:	f3bf 8f6f 	isb	sy
}
 8006216:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8006218:	e9d7 0100 	ldrd	r0, r1, [r7]
 800621c:	f04f 0200 	mov.w	r2, #0
 8006220:	f04f 0300 	mov.w	r3, #0
 8006224:	000a      	movs	r2, r1
 8006226:	2300      	movs	r3, #0
 8006228:	68f9      	ldr	r1, [r7, #12]
 800622a:	3104      	adds	r1, #4
 800622c:	4613      	mov	r3, r2
 800622e:	600b      	str	r3, [r1, #0]
}
 8006230:	bf00      	nop
 8006232:	3714      	adds	r7, #20
 8006234:	46bd      	mov	sp, r7
 8006236:	bc80      	pop	{r7}
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop
 800623c:	40023c00 	.word	0x40023c00

08006240 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800624a:	4b0d      	ldr	r3, [pc, #52]	@ (8006280 <FLASH_Program_Word+0x40>)
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	4a0c      	ldr	r2, [pc, #48]	@ (8006280 <FLASH_Program_Word+0x40>)
 8006250:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006254:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8006256:	4b0a      	ldr	r3, [pc, #40]	@ (8006280 <FLASH_Program_Word+0x40>)
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	4a09      	ldr	r2, [pc, #36]	@ (8006280 <FLASH_Program_Word+0x40>)
 800625c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006260:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006262:	4b07      	ldr	r3, [pc, #28]	@ (8006280 <FLASH_Program_Word+0x40>)
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	4a06      	ldr	r2, [pc, #24]	@ (8006280 <FLASH_Program_Word+0x40>)
 8006268:	f043 0301 	orr.w	r3, r3, #1
 800626c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	683a      	ldr	r2, [r7, #0]
 8006272:	601a      	str	r2, [r3, #0]
}
 8006274:	bf00      	nop
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	bc80      	pop	{r7}
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	40023c00 	.word	0x40023c00

08006284 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	460b      	mov	r3, r1
 800628e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006290:	4b0c      	ldr	r3, [pc, #48]	@ (80062c4 <FLASH_Program_HalfWord+0x40>)
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	4a0b      	ldr	r2, [pc, #44]	@ (80062c4 <FLASH_Program_HalfWord+0x40>)
 8006296:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800629a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800629c:	4b09      	ldr	r3, [pc, #36]	@ (80062c4 <FLASH_Program_HalfWord+0x40>)
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	4a08      	ldr	r2, [pc, #32]	@ (80062c4 <FLASH_Program_HalfWord+0x40>)
 80062a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80062a8:	4b06      	ldr	r3, [pc, #24]	@ (80062c4 <FLASH_Program_HalfWord+0x40>)
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	4a05      	ldr	r2, [pc, #20]	@ (80062c4 <FLASH_Program_HalfWord+0x40>)
 80062ae:	f043 0301 	orr.w	r3, r3, #1
 80062b2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	887a      	ldrh	r2, [r7, #2]
 80062b8:	801a      	strh	r2, [r3, #0]
}
 80062ba:	bf00      	nop
 80062bc:	370c      	adds	r7, #12
 80062be:	46bd      	mov	sp, r7
 80062c0:	bc80      	pop	{r7}
 80062c2:	4770      	bx	lr
 80062c4:	40023c00 	.word	0x40023c00

080062c8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	460b      	mov	r3, r1
 80062d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80062d4:	4b0b      	ldr	r3, [pc, #44]	@ (8006304 <FLASH_Program_Byte+0x3c>)
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	4a0a      	ldr	r2, [pc, #40]	@ (8006304 <FLASH_Program_Byte+0x3c>)
 80062da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80062e0:	4b08      	ldr	r3, [pc, #32]	@ (8006304 <FLASH_Program_Byte+0x3c>)
 80062e2:	4a08      	ldr	r2, [pc, #32]	@ (8006304 <FLASH_Program_Byte+0x3c>)
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80062e8:	4b06      	ldr	r3, [pc, #24]	@ (8006304 <FLASH_Program_Byte+0x3c>)
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	4a05      	ldr	r2, [pc, #20]	@ (8006304 <FLASH_Program_Byte+0x3c>)
 80062ee:	f043 0301 	orr.w	r3, r3, #1
 80062f2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	78fa      	ldrb	r2, [r7, #3]
 80062f8:	701a      	strb	r2, [r3, #0]
}
 80062fa:	bf00      	nop
 80062fc:	370c      	adds	r7, #12
 80062fe:	46bd      	mov	sp, r7
 8006300:	bc80      	pop	{r7}
 8006302:	4770      	bx	lr
 8006304:	40023c00 	.word	0x40023c00

08006308 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8006308:	b480      	push	{r7}
 800630a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800630c:	4b27      	ldr	r3, [pc, #156]	@ (80063ac <FLASH_SetErrorCode+0xa4>)
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	f003 0310 	and.w	r3, r3, #16
 8006314:	2b00      	cmp	r3, #0
 8006316:	d008      	beq.n	800632a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8006318:	4b25      	ldr	r3, [pc, #148]	@ (80063b0 <FLASH_SetErrorCode+0xa8>)
 800631a:	69db      	ldr	r3, [r3, #28]
 800631c:	f043 0308 	orr.w	r3, r3, #8
 8006320:	4a23      	ldr	r2, [pc, #140]	@ (80063b0 <FLASH_SetErrorCode+0xa8>)
 8006322:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8006324:	4b21      	ldr	r3, [pc, #132]	@ (80063ac <FLASH_SetErrorCode+0xa4>)
 8006326:	2210      	movs	r2, #16
 8006328:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800632a:	4b20      	ldr	r3, [pc, #128]	@ (80063ac <FLASH_SetErrorCode+0xa4>)
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	f003 0320 	and.w	r3, r3, #32
 8006332:	2b00      	cmp	r3, #0
 8006334:	d008      	beq.n	8006348 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8006336:	4b1e      	ldr	r3, [pc, #120]	@ (80063b0 <FLASH_SetErrorCode+0xa8>)
 8006338:	69db      	ldr	r3, [r3, #28]
 800633a:	f043 0304 	orr.w	r3, r3, #4
 800633e:	4a1c      	ldr	r2, [pc, #112]	@ (80063b0 <FLASH_SetErrorCode+0xa8>)
 8006340:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8006342:	4b1a      	ldr	r3, [pc, #104]	@ (80063ac <FLASH_SetErrorCode+0xa4>)
 8006344:	2220      	movs	r2, #32
 8006346:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8006348:	4b18      	ldr	r3, [pc, #96]	@ (80063ac <FLASH_SetErrorCode+0xa4>)
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006350:	2b00      	cmp	r3, #0
 8006352:	d008      	beq.n	8006366 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8006354:	4b16      	ldr	r3, [pc, #88]	@ (80063b0 <FLASH_SetErrorCode+0xa8>)
 8006356:	69db      	ldr	r3, [r3, #28]
 8006358:	f043 0302 	orr.w	r3, r3, #2
 800635c:	4a14      	ldr	r2, [pc, #80]	@ (80063b0 <FLASH_SetErrorCode+0xa8>)
 800635e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8006360:	4b12      	ldr	r3, [pc, #72]	@ (80063ac <FLASH_SetErrorCode+0xa4>)
 8006362:	2240      	movs	r2, #64	@ 0x40
 8006364:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8006366:	4b11      	ldr	r3, [pc, #68]	@ (80063ac <FLASH_SetErrorCode+0xa4>)
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800636e:	2b00      	cmp	r3, #0
 8006370:	d008      	beq.n	8006384 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8006372:	4b0f      	ldr	r3, [pc, #60]	@ (80063b0 <FLASH_SetErrorCode+0xa8>)
 8006374:	69db      	ldr	r3, [r3, #28]
 8006376:	f043 0301 	orr.w	r3, r3, #1
 800637a:	4a0d      	ldr	r2, [pc, #52]	@ (80063b0 <FLASH_SetErrorCode+0xa8>)
 800637c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800637e:	4b0b      	ldr	r3, [pc, #44]	@ (80063ac <FLASH_SetErrorCode+0xa4>)
 8006380:	2280      	movs	r2, #128	@ 0x80
 8006382:	60da      	str	r2, [r3, #12]
  }
    
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8006384:	4b09      	ldr	r3, [pc, #36]	@ (80063ac <FLASH_SetErrorCode+0xa4>)
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	f003 0302 	and.w	r3, r3, #2
 800638c:	2b00      	cmp	r3, #0
 800638e:	d008      	beq.n	80063a2 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8006390:	4b07      	ldr	r3, [pc, #28]	@ (80063b0 <FLASH_SetErrorCode+0xa8>)
 8006392:	69db      	ldr	r3, [r3, #28]
 8006394:	f043 0310 	orr.w	r3, r3, #16
 8006398:	4a05      	ldr	r2, [pc, #20]	@ (80063b0 <FLASH_SetErrorCode+0xa8>)
 800639a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800639c:	4b03      	ldr	r3, [pc, #12]	@ (80063ac <FLASH_SetErrorCode+0xa4>)
 800639e:	2202      	movs	r2, #2
 80063a0:	60da      	str	r2, [r3, #12]
  }
}
 80063a2:	bf00      	nop
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bc80      	pop	{r7}
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	40023c00 	.word	0x40023c00
 80063b0:	200018e8 	.word	0x200018e8

080063b4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b087      	sub	sp, #28
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	460b      	mov	r3, r1
 80063be:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80063c0:	2300      	movs	r3, #0
 80063c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80063c4:	78fb      	ldrb	r3, [r7, #3]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d102      	bne.n	80063d0 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80063ca:	2300      	movs	r3, #0
 80063cc:	617b      	str	r3, [r7, #20]
 80063ce:	e010      	b.n	80063f2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80063d0:	78fb      	ldrb	r3, [r7, #3]
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d103      	bne.n	80063de <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80063d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80063da:	617b      	str	r3, [r7, #20]
 80063dc:	e009      	b.n	80063f2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80063de:	78fb      	ldrb	r3, [r7, #3]
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d103      	bne.n	80063ec <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80063e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80063e8:	617b      	str	r3, [r7, #20]
 80063ea:	e002      	b.n	80063f2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80063ec:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80063f0:	617b      	str	r3, [r7, #20]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80063f2:	4b18      	ldr	r3, [pc, #96]	@ (8006454 <FLASH_Erase_Sector+0xa0>)
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	4a17      	ldr	r2, [pc, #92]	@ (8006454 <FLASH_Erase_Sector+0xa0>)
 80063f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063fc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80063fe:	4b15      	ldr	r3, [pc, #84]	@ (8006454 <FLASH_Erase_Sector+0xa0>)
 8006400:	691a      	ldr	r2, [r3, #16]
 8006402:	4914      	ldr	r1, [pc, #80]	@ (8006454 <FLASH_Erase_Sector+0xa0>)
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	4313      	orrs	r3, r2
 8006408:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800640a:	4b12      	ldr	r3, [pc, #72]	@ (8006454 <FLASH_Erase_Sector+0xa0>)
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	4a11      	ldr	r2, [pc, #68]	@ (8006454 <FLASH_Erase_Sector+0xa0>)
 8006410:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8006414:	6113      	str	r3, [r2, #16]
 8006416:	23f8      	movs	r3, #248	@ 0xf8
 8006418:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	fa93 f3a3 	rbit	r3, r3
 8006420:	60fb      	str	r3, [r7, #12]
  return result;
 8006422:	68fb      	ldr	r3, [r7, #12]
  FLASH->CR |= FLASH_CR_SER | (Sector << POSITION_VAL(FLASH_CR_SNB));
 8006424:	fab3 f383 	clz	r3, r3
 8006428:	b2db      	uxtb	r3, r3
 800642a:	461a      	mov	r2, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4093      	lsls	r3, r2
 8006430:	f043 0202 	orr.w	r2, r3, #2
 8006434:	4b07      	ldr	r3, [pc, #28]	@ (8006454 <FLASH_Erase_Sector+0xa0>)
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	4906      	ldr	r1, [pc, #24]	@ (8006454 <FLASH_Erase_Sector+0xa0>)
 800643a:	4313      	orrs	r3, r2
 800643c:	610b      	str	r3, [r1, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800643e:	4b05      	ldr	r3, [pc, #20]	@ (8006454 <FLASH_Erase_Sector+0xa0>)
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	4a04      	ldr	r2, [pc, #16]	@ (8006454 <FLASH_Erase_Sector+0xa0>)
 8006444:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006448:	6113      	str	r3, [r2, #16]
}
 800644a:	bf00      	nop
 800644c:	371c      	adds	r7, #28
 800644e:	46bd      	mov	sp, r7
 8006450:	bc80      	pop	{r7}
 8006452:	4770      	bx	lr
 8006454:	40023c00 	.word	0x40023c00

08006458 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006458:	b480      	push	{r7}
 800645a:	b087      	sub	sp, #28
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006462:	2300      	movs	r3, #0
 8006464:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006466:	e16f      	b.n	8006748 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	2101      	movs	r1, #1
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	fa01 f303 	lsl.w	r3, r1, r3
 8006474:	4013      	ands	r3, r2
 8006476:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2b00      	cmp	r3, #0
 800647c:	f000 8161 	beq.w	8006742 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	f003 0303 	and.w	r3, r3, #3
 8006488:	2b01      	cmp	r3, #1
 800648a:	d005      	beq.n	8006498 <HAL_GPIO_Init+0x40>
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	f003 0303 	and.w	r3, r3, #3
 8006494:	2b02      	cmp	r3, #2
 8006496:	d130      	bne.n	80064fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	005b      	lsls	r3, r3, #1
 80064a2:	2203      	movs	r2, #3
 80064a4:	fa02 f303 	lsl.w	r3, r2, r3
 80064a8:	43db      	mvns	r3, r3
 80064aa:	693a      	ldr	r2, [r7, #16]
 80064ac:	4013      	ands	r3, r2
 80064ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	68da      	ldr	r2, [r3, #12]
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	005b      	lsls	r3, r3, #1
 80064b8:	fa02 f303 	lsl.w	r3, r2, r3
 80064bc:	693a      	ldr	r2, [r7, #16]
 80064be:	4313      	orrs	r3, r2
 80064c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	693a      	ldr	r2, [r7, #16]
 80064c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80064ce:	2201      	movs	r2, #1
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	fa02 f303 	lsl.w	r3, r2, r3
 80064d6:	43db      	mvns	r3, r3
 80064d8:	693a      	ldr	r2, [r7, #16]
 80064da:	4013      	ands	r3, r2
 80064dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	091b      	lsrs	r3, r3, #4
 80064e4:	f003 0201 	and.w	r2, r3, #1
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	fa02 f303 	lsl.w	r3, r2, r3
 80064ee:	693a      	ldr	r2, [r7, #16]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	693a      	ldr	r2, [r7, #16]
 80064f8:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	f003 0303 	and.w	r3, r3, #3
 8006502:	2b03      	cmp	r3, #3
 8006504:	d017      	beq.n	8006536 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	005b      	lsls	r3, r3, #1
 8006510:	2203      	movs	r2, #3
 8006512:	fa02 f303 	lsl.w	r3, r2, r3
 8006516:	43db      	mvns	r3, r3
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	4013      	ands	r3, r2
 800651c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	689a      	ldr	r2, [r3, #8]
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	005b      	lsls	r3, r3, #1
 8006526:	fa02 f303 	lsl.w	r3, r2, r3
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	4313      	orrs	r3, r2
 800652e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	693a      	ldr	r2, [r7, #16]
 8006534:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	f003 0303 	and.w	r3, r3, #3
 800653e:	2b02      	cmp	r3, #2
 8006540:	d123      	bne.n	800658a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	08da      	lsrs	r2, r3, #3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	3208      	adds	r2, #8
 800654a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800654e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	f003 0307 	and.w	r3, r3, #7
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	220f      	movs	r2, #15
 800655a:	fa02 f303 	lsl.w	r3, r2, r3
 800655e:	43db      	mvns	r3, r3
 8006560:	693a      	ldr	r2, [r7, #16]
 8006562:	4013      	ands	r3, r2
 8006564:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	691a      	ldr	r2, [r3, #16]
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	f003 0307 	and.w	r3, r3, #7
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	fa02 f303 	lsl.w	r3, r2, r3
 8006576:	693a      	ldr	r2, [r7, #16]
 8006578:	4313      	orrs	r3, r2
 800657a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	08da      	lsrs	r2, r3, #3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	3208      	adds	r2, #8
 8006584:	6939      	ldr	r1, [r7, #16]
 8006586:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	005b      	lsls	r3, r3, #1
 8006594:	2203      	movs	r2, #3
 8006596:	fa02 f303 	lsl.w	r3, r2, r3
 800659a:	43db      	mvns	r3, r3
 800659c:	693a      	ldr	r2, [r7, #16]
 800659e:	4013      	ands	r3, r2
 80065a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	f003 0203 	and.w	r2, r3, #3
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	005b      	lsls	r3, r3, #1
 80065ae:	fa02 f303 	lsl.w	r3, r2, r3
 80065b2:	693a      	ldr	r2, [r7, #16]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	693a      	ldr	r2, [r7, #16]
 80065bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	f000 80bb 	beq.w	8006742 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065cc:	2300      	movs	r3, #0
 80065ce:	60bb      	str	r3, [r7, #8]
 80065d0:	4b64      	ldr	r3, [pc, #400]	@ (8006764 <HAL_GPIO_Init+0x30c>)
 80065d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065d4:	4a63      	ldr	r2, [pc, #396]	@ (8006764 <HAL_GPIO_Init+0x30c>)
 80065d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80065da:	6453      	str	r3, [r2, #68]	@ 0x44
 80065dc:	4b61      	ldr	r3, [pc, #388]	@ (8006764 <HAL_GPIO_Init+0x30c>)
 80065de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065e4:	60bb      	str	r3, [r7, #8]
 80065e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80065e8:	4a5f      	ldr	r2, [pc, #380]	@ (8006768 <HAL_GPIO_Init+0x310>)
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	089b      	lsrs	r3, r3, #2
 80065ee:	3302      	adds	r3, #2
 80065f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	f003 0303 	and.w	r3, r3, #3
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	220f      	movs	r2, #15
 8006600:	fa02 f303 	lsl.w	r3, r2, r3
 8006604:	43db      	mvns	r3, r3
 8006606:	693a      	ldr	r2, [r7, #16]
 8006608:	4013      	ands	r3, r2
 800660a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a57      	ldr	r2, [pc, #348]	@ (800676c <HAL_GPIO_Init+0x314>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d031      	beq.n	8006678 <HAL_GPIO_Init+0x220>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a56      	ldr	r2, [pc, #344]	@ (8006770 <HAL_GPIO_Init+0x318>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d02b      	beq.n	8006674 <HAL_GPIO_Init+0x21c>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a55      	ldr	r2, [pc, #340]	@ (8006774 <HAL_GPIO_Init+0x31c>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d025      	beq.n	8006670 <HAL_GPIO_Init+0x218>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a54      	ldr	r2, [pc, #336]	@ (8006778 <HAL_GPIO_Init+0x320>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d01f      	beq.n	800666c <HAL_GPIO_Init+0x214>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a53      	ldr	r2, [pc, #332]	@ (800677c <HAL_GPIO_Init+0x324>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d019      	beq.n	8006668 <HAL_GPIO_Init+0x210>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a52      	ldr	r2, [pc, #328]	@ (8006780 <HAL_GPIO_Init+0x328>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d013      	beq.n	8006664 <HAL_GPIO_Init+0x20c>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a51      	ldr	r2, [pc, #324]	@ (8006784 <HAL_GPIO_Init+0x32c>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d00d      	beq.n	8006660 <HAL_GPIO_Init+0x208>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a50      	ldr	r2, [pc, #320]	@ (8006788 <HAL_GPIO_Init+0x330>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d007      	beq.n	800665c <HAL_GPIO_Init+0x204>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a4f      	ldr	r2, [pc, #316]	@ (800678c <HAL_GPIO_Init+0x334>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d101      	bne.n	8006658 <HAL_GPIO_Init+0x200>
 8006654:	2308      	movs	r3, #8
 8006656:	e010      	b.n	800667a <HAL_GPIO_Init+0x222>
 8006658:	2309      	movs	r3, #9
 800665a:	e00e      	b.n	800667a <HAL_GPIO_Init+0x222>
 800665c:	2307      	movs	r3, #7
 800665e:	e00c      	b.n	800667a <HAL_GPIO_Init+0x222>
 8006660:	2306      	movs	r3, #6
 8006662:	e00a      	b.n	800667a <HAL_GPIO_Init+0x222>
 8006664:	2305      	movs	r3, #5
 8006666:	e008      	b.n	800667a <HAL_GPIO_Init+0x222>
 8006668:	2304      	movs	r3, #4
 800666a:	e006      	b.n	800667a <HAL_GPIO_Init+0x222>
 800666c:	2303      	movs	r3, #3
 800666e:	e004      	b.n	800667a <HAL_GPIO_Init+0x222>
 8006670:	2302      	movs	r3, #2
 8006672:	e002      	b.n	800667a <HAL_GPIO_Init+0x222>
 8006674:	2301      	movs	r3, #1
 8006676:	e000      	b.n	800667a <HAL_GPIO_Init+0x222>
 8006678:	2300      	movs	r3, #0
 800667a:	697a      	ldr	r2, [r7, #20]
 800667c:	f002 0203 	and.w	r2, r2, #3
 8006680:	0092      	lsls	r2, r2, #2
 8006682:	4093      	lsls	r3, r2
 8006684:	461a      	mov	r2, r3
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	4313      	orrs	r3, r2
 800668a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800668c:	4936      	ldr	r1, [pc, #216]	@ (8006768 <HAL_GPIO_Init+0x310>)
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	089b      	lsrs	r3, r3, #2
 8006692:	3302      	adds	r3, #2
 8006694:	693a      	ldr	r2, [r7, #16]
 8006696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800669a:	4b3d      	ldr	r3, [pc, #244]	@ (8006790 <HAL_GPIO_Init+0x338>)
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	43db      	mvns	r3, r3
 80066a4:	693a      	ldr	r2, [r7, #16]
 80066a6:	4013      	ands	r3, r2
 80066a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d003      	beq.n	80066be <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80066b6:	693a      	ldr	r2, [r7, #16]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80066be:	4a34      	ldr	r2, [pc, #208]	@ (8006790 <HAL_GPIO_Init+0x338>)
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80066c4:	4b32      	ldr	r3, [pc, #200]	@ (8006790 <HAL_GPIO_Init+0x338>)
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	43db      	mvns	r3, r3
 80066ce:	693a      	ldr	r2, [r7, #16]
 80066d0:	4013      	ands	r3, r2
 80066d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d003      	beq.n	80066e8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80066e0:	693a      	ldr	r2, [r7, #16]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80066e8:	4a29      	ldr	r2, [pc, #164]	@ (8006790 <HAL_GPIO_Init+0x338>)
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80066ee:	4b28      	ldr	r3, [pc, #160]	@ (8006790 <HAL_GPIO_Init+0x338>)
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	43db      	mvns	r3, r3
 80066f8:	693a      	ldr	r2, [r7, #16]
 80066fa:	4013      	ands	r3, r2
 80066fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d003      	beq.n	8006712 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	4313      	orrs	r3, r2
 8006710:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8006712:	4a1f      	ldr	r2, [pc, #124]	@ (8006790 <HAL_GPIO_Init+0x338>)
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006718:	4b1d      	ldr	r3, [pc, #116]	@ (8006790 <HAL_GPIO_Init+0x338>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	43db      	mvns	r3, r3
 8006722:	693a      	ldr	r2, [r7, #16]
 8006724:	4013      	ands	r3, r2
 8006726:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d003      	beq.n	800673c <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8006734:	693a      	ldr	r2, [r7, #16]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	4313      	orrs	r3, r2
 800673a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800673c:	4a14      	ldr	r2, [pc, #80]	@ (8006790 <HAL_GPIO_Init+0x338>)
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	3301      	adds	r3, #1
 8006746:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	fa22 f303 	lsr.w	r3, r2, r3
 8006752:	2b00      	cmp	r3, #0
 8006754:	f47f ae88 	bne.w	8006468 <HAL_GPIO_Init+0x10>
  }
}
 8006758:	bf00      	nop
 800675a:	bf00      	nop
 800675c:	371c      	adds	r7, #28
 800675e:	46bd      	mov	sp, r7
 8006760:	bc80      	pop	{r7}
 8006762:	4770      	bx	lr
 8006764:	40023800 	.word	0x40023800
 8006768:	40013800 	.word	0x40013800
 800676c:	40020000 	.word	0x40020000
 8006770:	40020400 	.word	0x40020400
 8006774:	40020800 	.word	0x40020800
 8006778:	40020c00 	.word	0x40020c00
 800677c:	40021000 	.word	0x40021000
 8006780:	40021400 	.word	0x40021400
 8006784:	40021800 	.word	0x40021800
 8006788:	40021c00 	.word	0x40021c00
 800678c:	40022000 	.word	0x40022000
 8006790:	40013c00 	.word	0x40013c00

08006794 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006794:	b480      	push	{r7}
 8006796:	b085      	sub	sp, #20
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	460b      	mov	r3, r1
 800679e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	691a      	ldr	r2, [r3, #16]
 80067a4:	887b      	ldrh	r3, [r7, #2]
 80067a6:	4013      	ands	r3, r2
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d002      	beq.n	80067b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80067ac:	2301      	movs	r3, #1
 80067ae:	73fb      	strb	r3, [r7, #15]
 80067b0:	e001      	b.n	80067b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80067b2:	2300      	movs	r3, #0
 80067b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80067b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3714      	adds	r7, #20
 80067bc:	46bd      	mov	sp, r7
 80067be:	bc80      	pop	{r7}
 80067c0:	4770      	bx	lr

080067c2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80067c2:	b480      	push	{r7}
 80067c4:	b083      	sub	sp, #12
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
 80067ca:	460b      	mov	r3, r1
 80067cc:	807b      	strh	r3, [r7, #2]
 80067ce:	4613      	mov	r3, r2
 80067d0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80067d2:	787b      	ldrb	r3, [r7, #1]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d003      	beq.n	80067e0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80067d8:	887a      	ldrh	r2, [r7, #2]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80067de:	e003      	b.n	80067e8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80067e0:	887b      	ldrh	r3, [r7, #2]
 80067e2:	041a      	lsls	r2, r3, #16
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	619a      	str	r2, [r3, #24]
}
 80067e8:	bf00      	nop
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bc80      	pop	{r7}
 80067f0:	4770      	bx	lr
	...

080067f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d101      	bne.n	8006806 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e12b      	b.n	8006a5e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800680c:	b2db      	uxtb	r3, r3
 800680e:	2b00      	cmp	r3, #0
 8006810:	d106      	bne.n	8006820 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f7fe f814 	bl	8004848 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2224      	movs	r2, #36	@ 0x24
 8006824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f022 0201 	bic.w	r2, r2, #1
 8006836:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006846:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006856:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006858:	f001 fea2 	bl	80085a0 <HAL_RCC_GetPCLK1Freq>
 800685c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	4a81      	ldr	r2, [pc, #516]	@ (8006a68 <HAL_I2C_Init+0x274>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d807      	bhi.n	8006878 <HAL_I2C_Init+0x84>
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	4a80      	ldr	r2, [pc, #512]	@ (8006a6c <HAL_I2C_Init+0x278>)
 800686c:	4293      	cmp	r3, r2
 800686e:	bf94      	ite	ls
 8006870:	2301      	movls	r3, #1
 8006872:	2300      	movhi	r3, #0
 8006874:	b2db      	uxtb	r3, r3
 8006876:	e006      	b.n	8006886 <HAL_I2C_Init+0x92>
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	4a7d      	ldr	r2, [pc, #500]	@ (8006a70 <HAL_I2C_Init+0x27c>)
 800687c:	4293      	cmp	r3, r2
 800687e:	bf94      	ite	ls
 8006880:	2301      	movls	r3, #1
 8006882:	2300      	movhi	r3, #0
 8006884:	b2db      	uxtb	r3, r3
 8006886:	2b00      	cmp	r3, #0
 8006888:	d001      	beq.n	800688e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e0e7      	b.n	8006a5e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	4a78      	ldr	r2, [pc, #480]	@ (8006a74 <HAL_I2C_Init+0x280>)
 8006892:	fba2 2303 	umull	r2, r3, r2, r3
 8006896:	0c9b      	lsrs	r3, r3, #18
 8006898:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68ba      	ldr	r2, [r7, #8]
 80068aa:	430a      	orrs	r2, r1
 80068ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	6a1b      	ldr	r3, [r3, #32]
 80068b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	4a6a      	ldr	r2, [pc, #424]	@ (8006a68 <HAL_I2C_Init+0x274>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d802      	bhi.n	80068c8 <HAL_I2C_Init+0xd4>
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	3301      	adds	r3, #1
 80068c6:	e009      	b.n	80068dc <HAL_I2C_Init+0xe8>
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80068ce:	fb02 f303 	mul.w	r3, r2, r3
 80068d2:	4a69      	ldr	r2, [pc, #420]	@ (8006a78 <HAL_I2C_Init+0x284>)
 80068d4:	fba2 2303 	umull	r2, r3, r2, r3
 80068d8:	099b      	lsrs	r3, r3, #6
 80068da:	3301      	adds	r3, #1
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	6812      	ldr	r2, [r2, #0]
 80068e0:	430b      	orrs	r3, r1
 80068e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	69db      	ldr	r3, [r3, #28]
 80068ea:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80068ee:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	495c      	ldr	r1, [pc, #368]	@ (8006a68 <HAL_I2C_Init+0x274>)
 80068f8:	428b      	cmp	r3, r1
 80068fa:	d819      	bhi.n	8006930 <HAL_I2C_Init+0x13c>
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	1e59      	subs	r1, r3, #1
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	005b      	lsls	r3, r3, #1
 8006906:	fbb1 f3f3 	udiv	r3, r1, r3
 800690a:	1c59      	adds	r1, r3, #1
 800690c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006910:	400b      	ands	r3, r1
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00a      	beq.n	800692c <HAL_I2C_Init+0x138>
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	1e59      	subs	r1, r3, #1
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	005b      	lsls	r3, r3, #1
 8006920:	fbb1 f3f3 	udiv	r3, r1, r3
 8006924:	3301      	adds	r3, #1
 8006926:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800692a:	e051      	b.n	80069d0 <HAL_I2C_Init+0x1dc>
 800692c:	2304      	movs	r3, #4
 800692e:	e04f      	b.n	80069d0 <HAL_I2C_Init+0x1dc>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d111      	bne.n	800695c <HAL_I2C_Init+0x168>
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	1e58      	subs	r0, r3, #1
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6859      	ldr	r1, [r3, #4]
 8006940:	460b      	mov	r3, r1
 8006942:	005b      	lsls	r3, r3, #1
 8006944:	440b      	add	r3, r1
 8006946:	fbb0 f3f3 	udiv	r3, r0, r3
 800694a:	3301      	adds	r3, #1
 800694c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006950:	2b00      	cmp	r3, #0
 8006952:	bf0c      	ite	eq
 8006954:	2301      	moveq	r3, #1
 8006956:	2300      	movne	r3, #0
 8006958:	b2db      	uxtb	r3, r3
 800695a:	e012      	b.n	8006982 <HAL_I2C_Init+0x18e>
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	1e58      	subs	r0, r3, #1
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6859      	ldr	r1, [r3, #4]
 8006964:	460b      	mov	r3, r1
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	440b      	add	r3, r1
 800696a:	0099      	lsls	r1, r3, #2
 800696c:	440b      	add	r3, r1
 800696e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006972:	3301      	adds	r3, #1
 8006974:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006978:	2b00      	cmp	r3, #0
 800697a:	bf0c      	ite	eq
 800697c:	2301      	moveq	r3, #1
 800697e:	2300      	movne	r3, #0
 8006980:	b2db      	uxtb	r3, r3
 8006982:	2b00      	cmp	r3, #0
 8006984:	d001      	beq.n	800698a <HAL_I2C_Init+0x196>
 8006986:	2301      	movs	r3, #1
 8006988:	e022      	b.n	80069d0 <HAL_I2C_Init+0x1dc>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d10e      	bne.n	80069b0 <HAL_I2C_Init+0x1bc>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	1e58      	subs	r0, r3, #1
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6859      	ldr	r1, [r3, #4]
 800699a:	460b      	mov	r3, r1
 800699c:	005b      	lsls	r3, r3, #1
 800699e:	440b      	add	r3, r1
 80069a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80069a4:	3301      	adds	r3, #1
 80069a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069ae:	e00f      	b.n	80069d0 <HAL_I2C_Init+0x1dc>
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	1e58      	subs	r0, r3, #1
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6859      	ldr	r1, [r3, #4]
 80069b8:	460b      	mov	r3, r1
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	440b      	add	r3, r1
 80069be:	0099      	lsls	r1, r3, #2
 80069c0:	440b      	add	r3, r1
 80069c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80069c6:	3301      	adds	r3, #1
 80069c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80069d0:	6879      	ldr	r1, [r7, #4]
 80069d2:	6809      	ldr	r1, [r1, #0]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	69da      	ldr	r2, [r3, #28]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a1b      	ldr	r3, [r3, #32]
 80069ea:	431a      	orrs	r2, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	430a      	orrs	r2, r1
 80069f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80069fe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	6911      	ldr	r1, [r2, #16]
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	68d2      	ldr	r2, [r2, #12]
 8006a0a:	4311      	orrs	r1, r2
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	6812      	ldr	r2, [r2, #0]
 8006a10:	430b      	orrs	r3, r1
 8006a12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	695a      	ldr	r2, [r3, #20]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	699b      	ldr	r3, [r3, #24]
 8006a26:	431a      	orrs	r2, r3
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	430a      	orrs	r2, r1
 8006a2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f042 0201 	orr.w	r2, r2, #1
 8006a3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2220      	movs	r2, #32
 8006a4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3710      	adds	r7, #16
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	000186a0 	.word	0x000186a0
 8006a6c:	001e847f 	.word	0x001e847f
 8006a70:	003d08ff 	.word	0x003d08ff
 8006a74:	431bde83 	.word	0x431bde83
 8006a78:	10624dd3 	.word	0x10624dd3

08006a7c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b088      	sub	sp, #32
 8006a80:	af02      	add	r7, sp, #8
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	607a      	str	r2, [r7, #4]
 8006a86:	461a      	mov	r2, r3
 8006a88:	460b      	mov	r3, r1
 8006a8a:	817b      	strh	r3, [r7, #10]
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006a90:	f7fe f9bc 	bl	8004e0c <HAL_GetTick>
 8006a94:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	2b20      	cmp	r3, #32
 8006aa0:	f040 80e0 	bne.w	8006c64 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	9300      	str	r3, [sp, #0]
 8006aa8:	2319      	movs	r3, #25
 8006aaa:	2201      	movs	r2, #1
 8006aac:	4970      	ldr	r1, [pc, #448]	@ (8006c70 <HAL_I2C_Master_Transmit+0x1f4>)
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	f000 ff30 	bl	8007914 <I2C_WaitOnFlagUntilTimeout>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d001      	beq.n	8006abe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006aba:	2302      	movs	r3, #2
 8006abc:	e0d3      	b.n	8006c66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d101      	bne.n	8006acc <HAL_I2C_Master_Transmit+0x50>
 8006ac8:	2302      	movs	r3, #2
 8006aca:	e0cc      	b.n	8006c66 <HAL_I2C_Master_Transmit+0x1ea>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 0301 	and.w	r3, r3, #1
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d007      	beq.n	8006af2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f042 0201 	orr.w	r2, r2, #1
 8006af0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006b00:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2221      	movs	r2, #33	@ 0x21
 8006b06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2210      	movs	r2, #16
 8006b0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2200      	movs	r2, #0
 8006b16:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	893a      	ldrh	r2, [r7, #8]
 8006b22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b28:	b29a      	uxth	r2, r3
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	4a50      	ldr	r2, [pc, #320]	@ (8006c74 <HAL_I2C_Master_Transmit+0x1f8>)
 8006b32:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006b34:	8979      	ldrh	r1, [r7, #10]
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	6a3a      	ldr	r2, [r7, #32]
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f000 fcea 	bl	8007514 <I2C_MasterRequestWrite>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d001      	beq.n	8006b4a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e08d      	b.n	8006c66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	613b      	str	r3, [r7, #16]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	695b      	ldr	r3, [r3, #20]
 8006b54:	613b      	str	r3, [r7, #16]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	699b      	ldr	r3, [r3, #24]
 8006b5c:	613b      	str	r3, [r7, #16]
 8006b5e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006b60:	e066      	b.n	8006c30 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b62:	697a      	ldr	r2, [r7, #20]
 8006b64:	6a39      	ldr	r1, [r7, #32]
 8006b66:	68f8      	ldr	r0, [r7, #12]
 8006b68:	f000 ffee 	bl	8007b48 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00d      	beq.n	8006b8e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b76:	2b04      	cmp	r3, #4
 8006b78:	d107      	bne.n	8006b8a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e06b      	b.n	8006c66 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b92:	781a      	ldrb	r2, [r3, #0]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b9e:	1c5a      	adds	r2, r3, #1
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	3b01      	subs	r3, #1
 8006bac:	b29a      	uxth	r2, r3
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	b29a      	uxth	r2, r3
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	695b      	ldr	r3, [r3, #20]
 8006bc4:	f003 0304 	and.w	r3, r3, #4
 8006bc8:	2b04      	cmp	r3, #4
 8006bca:	d11b      	bne.n	8006c04 <HAL_I2C_Master_Transmit+0x188>
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d017      	beq.n	8006c04 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bd8:	781a      	ldrb	r2, [r3, #0]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006be4:	1c5a      	adds	r2, r3, #1
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	3b01      	subs	r3, #1
 8006bf2:	b29a      	uxth	r2, r3
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bfc:	3b01      	subs	r3, #1
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c04:	697a      	ldr	r2, [r7, #20]
 8006c06:	6a39      	ldr	r1, [r7, #32]
 8006c08:	68f8      	ldr	r0, [r7, #12]
 8006c0a:	f000 ffe5 	bl	8007bd8 <I2C_WaitOnBTFFlagUntilTimeout>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d00d      	beq.n	8006c30 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c18:	2b04      	cmp	r3, #4
 8006c1a:	d107      	bne.n	8006c2c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c2a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e01a      	b.n	8006c66 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d194      	bne.n	8006b62 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2220      	movs	r2, #32
 8006c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006c60:	2300      	movs	r3, #0
 8006c62:	e000      	b.n	8006c66 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006c64:	2302      	movs	r3, #2
  }
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3718      	adds	r7, #24
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	00100002 	.word	0x00100002
 8006c74:	ffff0000 	.word	0xffff0000

08006c78 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b088      	sub	sp, #32
 8006c7c:	af02      	add	r7, sp, #8
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	4608      	mov	r0, r1
 8006c82:	4611      	mov	r1, r2
 8006c84:	461a      	mov	r2, r3
 8006c86:	4603      	mov	r3, r0
 8006c88:	817b      	strh	r3, [r7, #10]
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	813b      	strh	r3, [r7, #8]
 8006c8e:	4613      	mov	r3, r2
 8006c90:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006c92:	f7fe f8bb 	bl	8004e0c <HAL_GetTick>
 8006c96:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	2b20      	cmp	r3, #32
 8006ca2:	f040 80d9 	bne.w	8006e58 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	9300      	str	r3, [sp, #0]
 8006caa:	2319      	movs	r3, #25
 8006cac:	2201      	movs	r2, #1
 8006cae:	496d      	ldr	r1, [pc, #436]	@ (8006e64 <HAL_I2C_Mem_Write+0x1ec>)
 8006cb0:	68f8      	ldr	r0, [r7, #12]
 8006cb2:	f000 fe2f 	bl	8007914 <I2C_WaitOnFlagUntilTimeout>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d001      	beq.n	8006cc0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006cbc:	2302      	movs	r3, #2
 8006cbe:	e0cc      	b.n	8006e5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d101      	bne.n	8006cce <HAL_I2C_Mem_Write+0x56>
 8006cca:	2302      	movs	r3, #2
 8006ccc:	e0c5      	b.n	8006e5a <HAL_I2C_Mem_Write+0x1e2>
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 0301 	and.w	r3, r3, #1
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d007      	beq.n	8006cf4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f042 0201 	orr.w	r2, r2, #1
 8006cf2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006d02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2221      	movs	r2, #33	@ 0x21
 8006d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2240      	movs	r2, #64	@ 0x40
 8006d10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2200      	movs	r2, #0
 8006d18:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6a3a      	ldr	r2, [r7, #32]
 8006d1e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006d24:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d2a:	b29a      	uxth	r2, r3
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	4a4d      	ldr	r2, [pc, #308]	@ (8006e68 <HAL_I2C_Mem_Write+0x1f0>)
 8006d34:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006d36:	88f8      	ldrh	r0, [r7, #6]
 8006d38:	893a      	ldrh	r2, [r7, #8]
 8006d3a:	8979      	ldrh	r1, [r7, #10]
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	9301      	str	r3, [sp, #4]
 8006d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d42:	9300      	str	r3, [sp, #0]
 8006d44:	4603      	mov	r3, r0
 8006d46:	68f8      	ldr	r0, [r7, #12]
 8006d48:	f000 fc66 	bl	8007618 <I2C_RequestMemoryWrite>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d052      	beq.n	8006df8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	e081      	b.n	8006e5a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d56:	697a      	ldr	r2, [r7, #20]
 8006d58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d5a:	68f8      	ldr	r0, [r7, #12]
 8006d5c:	f000 fef4 	bl	8007b48 <I2C_WaitOnTXEFlagUntilTimeout>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00d      	beq.n	8006d82 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d6a:	2b04      	cmp	r3, #4
 8006d6c:	d107      	bne.n	8006d7e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e06b      	b.n	8006e5a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d86:	781a      	ldrb	r2, [r3, #0]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d92:	1c5a      	adds	r2, r3, #1
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d9c:	3b01      	subs	r3, #1
 8006d9e:	b29a      	uxth	r2, r3
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	3b01      	subs	r3, #1
 8006dac:	b29a      	uxth	r2, r3
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	695b      	ldr	r3, [r3, #20]
 8006db8:	f003 0304 	and.w	r3, r3, #4
 8006dbc:	2b04      	cmp	r3, #4
 8006dbe:	d11b      	bne.n	8006df8 <HAL_I2C_Mem_Write+0x180>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d017      	beq.n	8006df8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dcc:	781a      	ldrb	r2, [r3, #0]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dd8:	1c5a      	adds	r2, r3, #1
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006de2:	3b01      	subs	r3, #1
 8006de4:	b29a      	uxth	r2, r3
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	3b01      	subs	r3, #1
 8006df2:	b29a      	uxth	r2, r3
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d1aa      	bne.n	8006d56 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e00:	697a      	ldr	r2, [r7, #20]
 8006e02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e04:	68f8      	ldr	r0, [r7, #12]
 8006e06:	f000 fee7 	bl	8007bd8 <I2C_WaitOnBTFFlagUntilTimeout>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d00d      	beq.n	8006e2c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e14:	2b04      	cmp	r3, #4
 8006e16:	d107      	bne.n	8006e28 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e26:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e016      	b.n	8006e5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2220      	movs	r2, #32
 8006e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006e54:	2300      	movs	r3, #0
 8006e56:	e000      	b.n	8006e5a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006e58:	2302      	movs	r3, #2
  }
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3718      	adds	r7, #24
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	00100002 	.word	0x00100002
 8006e68:	ffff0000 	.word	0xffff0000

08006e6c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b08c      	sub	sp, #48	@ 0x30
 8006e70:	af02      	add	r7, sp, #8
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	4608      	mov	r0, r1
 8006e76:	4611      	mov	r1, r2
 8006e78:	461a      	mov	r2, r3
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	817b      	strh	r3, [r7, #10]
 8006e7e:	460b      	mov	r3, r1
 8006e80:	813b      	strh	r3, [r7, #8]
 8006e82:	4613      	mov	r3, r2
 8006e84:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006e86:	f7fd ffc1 	bl	8004e0c <HAL_GetTick>
 8006e8a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	2b20      	cmp	r3, #32
 8006e96:	f040 8208 	bne.w	80072aa <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e9c:	9300      	str	r3, [sp, #0]
 8006e9e:	2319      	movs	r3, #25
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	497b      	ldr	r1, [pc, #492]	@ (8007090 <HAL_I2C_Mem_Read+0x224>)
 8006ea4:	68f8      	ldr	r0, [r7, #12]
 8006ea6:	f000 fd35 	bl	8007914 <I2C_WaitOnFlagUntilTimeout>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d001      	beq.n	8006eb4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006eb0:	2302      	movs	r3, #2
 8006eb2:	e1fb      	b.n	80072ac <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d101      	bne.n	8006ec2 <HAL_I2C_Mem_Read+0x56>
 8006ebe:	2302      	movs	r3, #2
 8006ec0:	e1f4      	b.n	80072ac <HAL_I2C_Mem_Read+0x440>
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 0301 	and.w	r3, r3, #1
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d007      	beq.n	8006ee8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f042 0201 	orr.w	r2, r2, #1
 8006ee6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006ef6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2222      	movs	r2, #34	@ 0x22
 8006efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2240      	movs	r2, #64	@ 0x40
 8006f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f12:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006f18:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f1e:	b29a      	uxth	r2, r3
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	4a5b      	ldr	r2, [pc, #364]	@ (8007094 <HAL_I2C_Mem_Read+0x228>)
 8006f28:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006f2a:	88f8      	ldrh	r0, [r7, #6]
 8006f2c:	893a      	ldrh	r2, [r7, #8]
 8006f2e:	8979      	ldrh	r1, [r7, #10]
 8006f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f32:	9301      	str	r3, [sp, #4]
 8006f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f36:	9300      	str	r3, [sp, #0]
 8006f38:	4603      	mov	r3, r0
 8006f3a:	68f8      	ldr	r0, [r7, #12]
 8006f3c:	f000 fc02 	bl	8007744 <I2C_RequestMemoryRead>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d001      	beq.n	8006f4a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e1b0      	b.n	80072ac <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d113      	bne.n	8006f7a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f52:	2300      	movs	r3, #0
 8006f54:	623b      	str	r3, [r7, #32]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	695b      	ldr	r3, [r3, #20]
 8006f5c:	623b      	str	r3, [r7, #32]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	699b      	ldr	r3, [r3, #24]
 8006f64:	623b      	str	r3, [r7, #32]
 8006f66:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f76:	601a      	str	r2, [r3, #0]
 8006f78:	e184      	b.n	8007284 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d11b      	bne.n	8006fba <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f92:	2300      	movs	r3, #0
 8006f94:	61fb      	str	r3, [r7, #28]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	695b      	ldr	r3, [r3, #20]
 8006f9c:	61fb      	str	r3, [r7, #28]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	699b      	ldr	r3, [r3, #24]
 8006fa4:	61fb      	str	r3, [r7, #28]
 8006fa6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006fb6:	601a      	str	r2, [r3, #0]
 8006fb8:	e164      	b.n	8007284 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fbe:	2b02      	cmp	r3, #2
 8006fc0:	d11b      	bne.n	8006ffa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006fd0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006fe0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	61bb      	str	r3, [r7, #24]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	695b      	ldr	r3, [r3, #20]
 8006fec:	61bb      	str	r3, [r7, #24]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	699b      	ldr	r3, [r3, #24]
 8006ff4:	61bb      	str	r3, [r7, #24]
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	e144      	b.n	8007284 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	617b      	str	r3, [r7, #20]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	695b      	ldr	r3, [r3, #20]
 8007004:	617b      	str	r3, [r7, #20]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	699b      	ldr	r3, [r3, #24]
 800700c:	617b      	str	r3, [r7, #20]
 800700e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007010:	e138      	b.n	8007284 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007016:	2b03      	cmp	r3, #3
 8007018:	f200 80f1 	bhi.w	80071fe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007020:	2b01      	cmp	r3, #1
 8007022:	d123      	bne.n	800706c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007024:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007026:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007028:	68f8      	ldr	r0, [r7, #12]
 800702a:	f000 fe1d 	bl	8007c68 <I2C_WaitOnRXNEFlagUntilTimeout>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d001      	beq.n	8007038 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	e139      	b.n	80072ac <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	691a      	ldr	r2, [r3, #16]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007042:	b2d2      	uxtb	r2, r2
 8007044:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800704a:	1c5a      	adds	r2, r3, #1
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007054:	3b01      	subs	r3, #1
 8007056:	b29a      	uxth	r2, r3
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007060:	b29b      	uxth	r3, r3
 8007062:	3b01      	subs	r3, #1
 8007064:	b29a      	uxth	r2, r3
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800706a:	e10b      	b.n	8007284 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007070:	2b02      	cmp	r3, #2
 8007072:	d14e      	bne.n	8007112 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007076:	9300      	str	r3, [sp, #0]
 8007078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800707a:	2200      	movs	r2, #0
 800707c:	4906      	ldr	r1, [pc, #24]	@ (8007098 <HAL_I2C_Mem_Read+0x22c>)
 800707e:	68f8      	ldr	r0, [r7, #12]
 8007080:	f000 fc48 	bl	8007914 <I2C_WaitOnFlagUntilTimeout>
 8007084:	4603      	mov	r3, r0
 8007086:	2b00      	cmp	r3, #0
 8007088:	d008      	beq.n	800709c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	e10e      	b.n	80072ac <HAL_I2C_Mem_Read+0x440>
 800708e:	bf00      	nop
 8007090:	00100002 	.word	0x00100002
 8007094:	ffff0000 	.word	0xffff0000
 8007098:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80070aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	691a      	ldr	r2, [r3, #16]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070b6:	b2d2      	uxtb	r2, r2
 80070b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070be:	1c5a      	adds	r2, r3, #1
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070c8:	3b01      	subs	r3, #1
 80070ca:	b29a      	uxth	r2, r3
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	3b01      	subs	r3, #1
 80070d8:	b29a      	uxth	r2, r3
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	691a      	ldr	r2, [r3, #16]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070e8:	b2d2      	uxtb	r2, r2
 80070ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070f0:	1c5a      	adds	r2, r3, #1
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070fa:	3b01      	subs	r3, #1
 80070fc:	b29a      	uxth	r2, r3
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007106:	b29b      	uxth	r3, r3
 8007108:	3b01      	subs	r3, #1
 800710a:	b29a      	uxth	r2, r3
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007110:	e0b8      	b.n	8007284 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007114:	9300      	str	r3, [sp, #0]
 8007116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007118:	2200      	movs	r2, #0
 800711a:	4966      	ldr	r1, [pc, #408]	@ (80072b4 <HAL_I2C_Mem_Read+0x448>)
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f000 fbf9 	bl	8007914 <I2C_WaitOnFlagUntilTimeout>
 8007122:	4603      	mov	r3, r0
 8007124:	2b00      	cmp	r3, #0
 8007126:	d001      	beq.n	800712c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	e0bf      	b.n	80072ac <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800713a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	691a      	ldr	r2, [r3, #16]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007146:	b2d2      	uxtb	r2, r2
 8007148:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800714e:	1c5a      	adds	r2, r3, #1
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007158:	3b01      	subs	r3, #1
 800715a:	b29a      	uxth	r2, r3
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007164:	b29b      	uxth	r3, r3
 8007166:	3b01      	subs	r3, #1
 8007168:	b29a      	uxth	r2, r3
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800716e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007170:	9300      	str	r3, [sp, #0]
 8007172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007174:	2200      	movs	r2, #0
 8007176:	494f      	ldr	r1, [pc, #316]	@ (80072b4 <HAL_I2C_Mem_Read+0x448>)
 8007178:	68f8      	ldr	r0, [r7, #12]
 800717a:	f000 fbcb 	bl	8007914 <I2C_WaitOnFlagUntilTimeout>
 800717e:	4603      	mov	r3, r0
 8007180:	2b00      	cmp	r3, #0
 8007182:	d001      	beq.n	8007188 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007184:	2301      	movs	r3, #1
 8007186:	e091      	b.n	80072ac <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007196:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	691a      	ldr	r2, [r3, #16]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071a2:	b2d2      	uxtb	r2, r2
 80071a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071aa:	1c5a      	adds	r2, r3, #1
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071b4:	3b01      	subs	r3, #1
 80071b6:	b29a      	uxth	r2, r3
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	3b01      	subs	r3, #1
 80071c4:	b29a      	uxth	r2, r3
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	691a      	ldr	r2, [r3, #16]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071d4:	b2d2      	uxtb	r2, r2
 80071d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071dc:	1c5a      	adds	r2, r3, #1
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071e6:	3b01      	subs	r3, #1
 80071e8:	b29a      	uxth	r2, r3
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	3b01      	subs	r3, #1
 80071f6:	b29a      	uxth	r2, r3
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80071fc:	e042      	b.n	8007284 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007200:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	f000 fd30 	bl	8007c68 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d001      	beq.n	8007212 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	e04c      	b.n	80072ac <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	691a      	ldr	r2, [r3, #16]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800721c:	b2d2      	uxtb	r2, r2
 800721e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007224:	1c5a      	adds	r2, r3, #1
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800722e:	3b01      	subs	r3, #1
 8007230:	b29a      	uxth	r2, r3
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800723a:	b29b      	uxth	r3, r3
 800723c:	3b01      	subs	r3, #1
 800723e:	b29a      	uxth	r2, r3
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	695b      	ldr	r3, [r3, #20]
 800724a:	f003 0304 	and.w	r3, r3, #4
 800724e:	2b04      	cmp	r3, #4
 8007250:	d118      	bne.n	8007284 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	691a      	ldr	r2, [r3, #16]
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800725c:	b2d2      	uxtb	r2, r2
 800725e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007264:	1c5a      	adds	r2, r3, #1
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800726e:	3b01      	subs	r3, #1
 8007270:	b29a      	uxth	r2, r3
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800727a:	b29b      	uxth	r3, r3
 800727c:	3b01      	subs	r3, #1
 800727e:	b29a      	uxth	r2, r3
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007288:	2b00      	cmp	r3, #0
 800728a:	f47f aec2 	bne.w	8007012 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2220      	movs	r2, #32
 8007292:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2200      	movs	r2, #0
 800729a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80072a6:	2300      	movs	r3, #0
 80072a8:	e000      	b.n	80072ac <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80072aa:	2302      	movs	r3, #2
  }
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3728      	adds	r7, #40	@ 0x28
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	00010004 	.word	0x00010004

080072b8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b08a      	sub	sp, #40	@ 0x28
 80072bc:	af02      	add	r7, sp, #8
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	607a      	str	r2, [r7, #4]
 80072c2:	603b      	str	r3, [r7, #0]
 80072c4:	460b      	mov	r3, r1
 80072c6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80072c8:	f7fd fda0 	bl	8004e0c <HAL_GetTick>
 80072cc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80072ce:	2300      	movs	r3, #0
 80072d0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	2b20      	cmp	r3, #32
 80072dc:	f040 8111 	bne.w	8007502 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	9300      	str	r3, [sp, #0]
 80072e4:	2319      	movs	r3, #25
 80072e6:	2201      	movs	r2, #1
 80072e8:	4988      	ldr	r1, [pc, #544]	@ (800750c <HAL_I2C_IsDeviceReady+0x254>)
 80072ea:	68f8      	ldr	r0, [r7, #12]
 80072ec:	f000 fb12 	bl	8007914 <I2C_WaitOnFlagUntilTimeout>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d001      	beq.n	80072fa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80072f6:	2302      	movs	r3, #2
 80072f8:	e104      	b.n	8007504 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007300:	2b01      	cmp	r3, #1
 8007302:	d101      	bne.n	8007308 <HAL_I2C_IsDeviceReady+0x50>
 8007304:	2302      	movs	r3, #2
 8007306:	e0fd      	b.n	8007504 <HAL_I2C_IsDeviceReady+0x24c>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2201      	movs	r2, #1
 800730c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f003 0301 	and.w	r3, r3, #1
 800731a:	2b01      	cmp	r3, #1
 800731c:	d007      	beq.n	800732e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f042 0201 	orr.w	r2, r2, #1
 800732c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800733c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2224      	movs	r2, #36	@ 0x24
 8007342:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2200      	movs	r2, #0
 800734a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	4a70      	ldr	r2, [pc, #448]	@ (8007510 <HAL_I2C_IsDeviceReady+0x258>)
 8007350:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007360:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8007362:	69fb      	ldr	r3, [r7, #28]
 8007364:	9300      	str	r3, [sp, #0]
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	2200      	movs	r2, #0
 800736a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800736e:	68f8      	ldr	r0, [r7, #12]
 8007370:	f000 fad0 	bl	8007914 <I2C_WaitOnFlagUntilTimeout>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00d      	beq.n	8007396 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007384:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007388:	d103      	bne.n	8007392 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007390:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8007392:	2303      	movs	r3, #3
 8007394:	e0b6      	b.n	8007504 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007396:	897b      	ldrh	r3, [r7, #10]
 8007398:	b2db      	uxtb	r3, r3
 800739a:	461a      	mov	r2, r3
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80073a4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80073a6:	f7fd fd31 	bl	8004e0c <HAL_GetTick>
 80073aa:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	695b      	ldr	r3, [r3, #20]
 80073b2:	f003 0302 	and.w	r3, r3, #2
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	bf0c      	ite	eq
 80073ba:	2301      	moveq	r3, #1
 80073bc:	2300      	movne	r3, #0
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	695b      	ldr	r3, [r3, #20]
 80073c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073d0:	bf0c      	ite	eq
 80073d2:	2301      	moveq	r3, #1
 80073d4:	2300      	movne	r3, #0
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80073da:	e025      	b.n	8007428 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80073dc:	f7fd fd16 	bl	8004e0c <HAL_GetTick>
 80073e0:	4602      	mov	r2, r0
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	1ad3      	subs	r3, r2, r3
 80073e6:	683a      	ldr	r2, [r7, #0]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d302      	bcc.n	80073f2 <HAL_I2C_IsDeviceReady+0x13a>
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d103      	bne.n	80073fa <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	22a0      	movs	r2, #160	@ 0xa0
 80073f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	695b      	ldr	r3, [r3, #20]
 8007400:	f003 0302 	and.w	r3, r3, #2
 8007404:	2b02      	cmp	r3, #2
 8007406:	bf0c      	ite	eq
 8007408:	2301      	moveq	r3, #1
 800740a:	2300      	movne	r3, #0
 800740c:	b2db      	uxtb	r3, r3
 800740e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	695b      	ldr	r3, [r3, #20]
 8007416:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800741a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800741e:	bf0c      	ite	eq
 8007420:	2301      	moveq	r3, #1
 8007422:	2300      	movne	r3, #0
 8007424:	b2db      	uxtb	r3, r3
 8007426:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800742e:	b2db      	uxtb	r3, r3
 8007430:	2ba0      	cmp	r3, #160	@ 0xa0
 8007432:	d005      	beq.n	8007440 <HAL_I2C_IsDeviceReady+0x188>
 8007434:	7dfb      	ldrb	r3, [r7, #23]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d102      	bne.n	8007440 <HAL_I2C_IsDeviceReady+0x188>
 800743a:	7dbb      	ldrb	r3, [r7, #22]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d0cd      	beq.n	80073dc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2220      	movs	r2, #32
 8007444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	695b      	ldr	r3, [r3, #20]
 800744e:	f003 0302 	and.w	r3, r3, #2
 8007452:	2b02      	cmp	r3, #2
 8007454:	d129      	bne.n	80074aa <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007464:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007466:	2300      	movs	r3, #0
 8007468:	613b      	str	r3, [r7, #16]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	695b      	ldr	r3, [r3, #20]
 8007470:	613b      	str	r3, [r7, #16]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	699b      	ldr	r3, [r3, #24]
 8007478:	613b      	str	r3, [r7, #16]
 800747a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800747c:	69fb      	ldr	r3, [r7, #28]
 800747e:	9300      	str	r3, [sp, #0]
 8007480:	2319      	movs	r3, #25
 8007482:	2201      	movs	r2, #1
 8007484:	4921      	ldr	r1, [pc, #132]	@ (800750c <HAL_I2C_IsDeviceReady+0x254>)
 8007486:	68f8      	ldr	r0, [r7, #12]
 8007488:	f000 fa44 	bl	8007914 <I2C_WaitOnFlagUntilTimeout>
 800748c:	4603      	mov	r3, r0
 800748e:	2b00      	cmp	r3, #0
 8007490:	d001      	beq.n	8007496 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	e036      	b.n	8007504 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2220      	movs	r2, #32
 800749a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80074a6:	2300      	movs	r3, #0
 80074a8:	e02c      	b.n	8007504 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80074b8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80074c2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	9300      	str	r3, [sp, #0]
 80074c8:	2319      	movs	r3, #25
 80074ca:	2201      	movs	r2, #1
 80074cc:	490f      	ldr	r1, [pc, #60]	@ (800750c <HAL_I2C_IsDeviceReady+0x254>)
 80074ce:	68f8      	ldr	r0, [r7, #12]
 80074d0:	f000 fa20 	bl	8007914 <I2C_WaitOnFlagUntilTimeout>
 80074d4:	4603      	mov	r3, r0
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d001      	beq.n	80074de <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	e012      	b.n	8007504 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	3301      	adds	r3, #1
 80074e2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80074e4:	69ba      	ldr	r2, [r7, #24]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	429a      	cmp	r2, r3
 80074ea:	f4ff af32 	bcc.w	8007352 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2220      	movs	r2, #32
 80074f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	e000      	b.n	8007504 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8007502:	2302      	movs	r3, #2
  }
}
 8007504:	4618      	mov	r0, r3
 8007506:	3720      	adds	r7, #32
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}
 800750c:	00100002 	.word	0x00100002
 8007510:	ffff0000 	.word	0xffff0000

08007514 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b088      	sub	sp, #32
 8007518:	af02      	add	r7, sp, #8
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	607a      	str	r2, [r7, #4]
 800751e:	603b      	str	r3, [r7, #0]
 8007520:	460b      	mov	r3, r1
 8007522:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007528:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	2b08      	cmp	r3, #8
 800752e:	d006      	beq.n	800753e <I2C_MasterRequestWrite+0x2a>
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	2b01      	cmp	r3, #1
 8007534:	d003      	beq.n	800753e <I2C_MasterRequestWrite+0x2a>
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800753c:	d108      	bne.n	8007550 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800754c:	601a      	str	r2, [r3, #0]
 800754e:	e00b      	b.n	8007568 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007554:	2b12      	cmp	r3, #18
 8007556:	d107      	bne.n	8007568 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	681a      	ldr	r2, [r3, #0]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007566:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	9300      	str	r3, [sp, #0]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007574:	68f8      	ldr	r0, [r7, #12]
 8007576:	f000 f9cd 	bl	8007914 <I2C_WaitOnFlagUntilTimeout>
 800757a:	4603      	mov	r3, r0
 800757c:	2b00      	cmp	r3, #0
 800757e:	d00d      	beq.n	800759c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800758a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800758e:	d103      	bne.n	8007598 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007596:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007598:	2303      	movs	r3, #3
 800759a:	e035      	b.n	8007608 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	691b      	ldr	r3, [r3, #16]
 80075a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80075a4:	d108      	bne.n	80075b8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80075a6:	897b      	ldrh	r3, [r7, #10]
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	461a      	mov	r2, r3
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80075b4:	611a      	str	r2, [r3, #16]
 80075b6:	e01b      	b.n	80075f0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80075b8:	897b      	ldrh	r3, [r7, #10]
 80075ba:	11db      	asrs	r3, r3, #7
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	f003 0306 	and.w	r3, r3, #6
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	f063 030f 	orn	r3, r3, #15
 80075c8:	b2da      	uxtb	r2, r3
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	490e      	ldr	r1, [pc, #56]	@ (8007610 <I2C_MasterRequestWrite+0xfc>)
 80075d6:	68f8      	ldr	r0, [r7, #12]
 80075d8:	f000 fa16 	bl	8007a08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80075dc:	4603      	mov	r3, r0
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d001      	beq.n	80075e6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	e010      	b.n	8007608 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80075e6:	897b      	ldrh	r3, [r7, #10]
 80075e8:	b2da      	uxtb	r2, r3
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	4907      	ldr	r1, [pc, #28]	@ (8007614 <I2C_MasterRequestWrite+0x100>)
 80075f6:	68f8      	ldr	r0, [r7, #12]
 80075f8:	f000 fa06 	bl	8007a08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d001      	beq.n	8007606 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	e000      	b.n	8007608 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007606:	2300      	movs	r3, #0
}
 8007608:	4618      	mov	r0, r3
 800760a:	3718      	adds	r7, #24
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}
 8007610:	00010008 	.word	0x00010008
 8007614:	00010002 	.word	0x00010002

08007618 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b088      	sub	sp, #32
 800761c:	af02      	add	r7, sp, #8
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	4608      	mov	r0, r1
 8007622:	4611      	mov	r1, r2
 8007624:	461a      	mov	r2, r3
 8007626:	4603      	mov	r3, r0
 8007628:	817b      	strh	r3, [r7, #10]
 800762a:	460b      	mov	r3, r1
 800762c:	813b      	strh	r3, [r7, #8]
 800762e:	4613      	mov	r3, r2
 8007630:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007640:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007644:	9300      	str	r3, [sp, #0]
 8007646:	6a3b      	ldr	r3, [r7, #32]
 8007648:	2200      	movs	r2, #0
 800764a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800764e:	68f8      	ldr	r0, [r7, #12]
 8007650:	f000 f960 	bl	8007914 <I2C_WaitOnFlagUntilTimeout>
 8007654:	4603      	mov	r3, r0
 8007656:	2b00      	cmp	r3, #0
 8007658:	d00d      	beq.n	8007676 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007664:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007668:	d103      	bne.n	8007672 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007670:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007672:	2303      	movs	r3, #3
 8007674:	e05f      	b.n	8007736 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007676:	897b      	ldrh	r3, [r7, #10]
 8007678:	b2db      	uxtb	r3, r3
 800767a:	461a      	mov	r2, r3
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007684:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007688:	6a3a      	ldr	r2, [r7, #32]
 800768a:	492d      	ldr	r1, [pc, #180]	@ (8007740 <I2C_RequestMemoryWrite+0x128>)
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f000 f9bb 	bl	8007a08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007692:	4603      	mov	r3, r0
 8007694:	2b00      	cmp	r3, #0
 8007696:	d001      	beq.n	800769c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	e04c      	b.n	8007736 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800769c:	2300      	movs	r3, #0
 800769e:	617b      	str	r3, [r7, #20]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	695b      	ldr	r3, [r3, #20]
 80076a6:	617b      	str	r3, [r7, #20]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	699b      	ldr	r3, [r3, #24]
 80076ae:	617b      	str	r3, [r7, #20]
 80076b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076b4:	6a39      	ldr	r1, [r7, #32]
 80076b6:	68f8      	ldr	r0, [r7, #12]
 80076b8:	f000 fa46 	bl	8007b48 <I2C_WaitOnTXEFlagUntilTimeout>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d00d      	beq.n	80076de <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076c6:	2b04      	cmp	r3, #4
 80076c8:	d107      	bne.n	80076da <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80076d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	e02b      	b.n	8007736 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80076de:	88fb      	ldrh	r3, [r7, #6]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d105      	bne.n	80076f0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80076e4:	893b      	ldrh	r3, [r7, #8]
 80076e6:	b2da      	uxtb	r2, r3
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	611a      	str	r2, [r3, #16]
 80076ee:	e021      	b.n	8007734 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80076f0:	893b      	ldrh	r3, [r7, #8]
 80076f2:	0a1b      	lsrs	r3, r3, #8
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	b2da      	uxtb	r2, r3
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007700:	6a39      	ldr	r1, [r7, #32]
 8007702:	68f8      	ldr	r0, [r7, #12]
 8007704:	f000 fa20 	bl	8007b48 <I2C_WaitOnTXEFlagUntilTimeout>
 8007708:	4603      	mov	r3, r0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d00d      	beq.n	800772a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007712:	2b04      	cmp	r3, #4
 8007714:	d107      	bne.n	8007726 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007724:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e005      	b.n	8007736 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800772a:	893b      	ldrh	r3, [r7, #8]
 800772c:	b2da      	uxtb	r2, r3
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007734:	2300      	movs	r3, #0
}
 8007736:	4618      	mov	r0, r3
 8007738:	3718      	adds	r7, #24
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	00010002 	.word	0x00010002

08007744 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b088      	sub	sp, #32
 8007748:	af02      	add	r7, sp, #8
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	4608      	mov	r0, r1
 800774e:	4611      	mov	r1, r2
 8007750:	461a      	mov	r2, r3
 8007752:	4603      	mov	r3, r0
 8007754:	817b      	strh	r3, [r7, #10]
 8007756:	460b      	mov	r3, r1
 8007758:	813b      	strh	r3, [r7, #8]
 800775a:	4613      	mov	r3, r2
 800775c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800776c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800777c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800777e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007780:	9300      	str	r3, [sp, #0]
 8007782:	6a3b      	ldr	r3, [r7, #32]
 8007784:	2200      	movs	r2, #0
 8007786:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800778a:	68f8      	ldr	r0, [r7, #12]
 800778c:	f000 f8c2 	bl	8007914 <I2C_WaitOnFlagUntilTimeout>
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d00d      	beq.n	80077b2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077a4:	d103      	bne.n	80077ae <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80077ac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80077ae:	2303      	movs	r3, #3
 80077b0:	e0aa      	b.n	8007908 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80077b2:	897b      	ldrh	r3, [r7, #10]
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	461a      	mov	r2, r3
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80077c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80077c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077c4:	6a3a      	ldr	r2, [r7, #32]
 80077c6:	4952      	ldr	r1, [pc, #328]	@ (8007910 <I2C_RequestMemoryRead+0x1cc>)
 80077c8:	68f8      	ldr	r0, [r7, #12]
 80077ca:	f000 f91d 	bl	8007a08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80077ce:	4603      	mov	r3, r0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d001      	beq.n	80077d8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	e097      	b.n	8007908 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077d8:	2300      	movs	r3, #0
 80077da:	617b      	str	r3, [r7, #20]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	695b      	ldr	r3, [r3, #20]
 80077e2:	617b      	str	r3, [r7, #20]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	699b      	ldr	r3, [r3, #24]
 80077ea:	617b      	str	r3, [r7, #20]
 80077ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077f0:	6a39      	ldr	r1, [r7, #32]
 80077f2:	68f8      	ldr	r0, [r7, #12]
 80077f4:	f000 f9a8 	bl	8007b48 <I2C_WaitOnTXEFlagUntilTimeout>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d00d      	beq.n	800781a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007802:	2b04      	cmp	r3, #4
 8007804:	d107      	bne.n	8007816 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007814:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	e076      	b.n	8007908 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800781a:	88fb      	ldrh	r3, [r7, #6]
 800781c:	2b01      	cmp	r3, #1
 800781e:	d105      	bne.n	800782c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007820:	893b      	ldrh	r3, [r7, #8]
 8007822:	b2da      	uxtb	r2, r3
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	611a      	str	r2, [r3, #16]
 800782a:	e021      	b.n	8007870 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800782c:	893b      	ldrh	r3, [r7, #8]
 800782e:	0a1b      	lsrs	r3, r3, #8
 8007830:	b29b      	uxth	r3, r3
 8007832:	b2da      	uxtb	r2, r3
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800783a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800783c:	6a39      	ldr	r1, [r7, #32]
 800783e:	68f8      	ldr	r0, [r7, #12]
 8007840:	f000 f982 	bl	8007b48 <I2C_WaitOnTXEFlagUntilTimeout>
 8007844:	4603      	mov	r3, r0
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00d      	beq.n	8007866 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800784e:	2b04      	cmp	r3, #4
 8007850:	d107      	bne.n	8007862 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007860:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	e050      	b.n	8007908 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007866:	893b      	ldrh	r3, [r7, #8]
 8007868:	b2da      	uxtb	r2, r3
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007870:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007872:	6a39      	ldr	r1, [r7, #32]
 8007874:	68f8      	ldr	r0, [r7, #12]
 8007876:	f000 f967 	bl	8007b48 <I2C_WaitOnTXEFlagUntilTimeout>
 800787a:	4603      	mov	r3, r0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d00d      	beq.n	800789c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007884:	2b04      	cmp	r3, #4
 8007886:	d107      	bne.n	8007898 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007896:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007898:	2301      	movs	r3, #1
 800789a:	e035      	b.n	8007908 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80078aa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80078ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ae:	9300      	str	r3, [sp, #0]
 80078b0:	6a3b      	ldr	r3, [r7, #32]
 80078b2:	2200      	movs	r2, #0
 80078b4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80078b8:	68f8      	ldr	r0, [r7, #12]
 80078ba:	f000 f82b 	bl	8007914 <I2C_WaitOnFlagUntilTimeout>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d00d      	beq.n	80078e0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078d2:	d103      	bne.n	80078dc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80078da:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80078dc:	2303      	movs	r3, #3
 80078de:	e013      	b.n	8007908 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80078e0:	897b      	ldrh	r3, [r7, #10]
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	f043 0301 	orr.w	r3, r3, #1
 80078e8:	b2da      	uxtb	r2, r3
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80078f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f2:	6a3a      	ldr	r2, [r7, #32]
 80078f4:	4906      	ldr	r1, [pc, #24]	@ (8007910 <I2C_RequestMemoryRead+0x1cc>)
 80078f6:	68f8      	ldr	r0, [r7, #12]
 80078f8:	f000 f886 	bl	8007a08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d001      	beq.n	8007906 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007902:	2301      	movs	r3, #1
 8007904:	e000      	b.n	8007908 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007906:	2300      	movs	r3, #0
}
 8007908:	4618      	mov	r0, r3
 800790a:	3718      	adds	r7, #24
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}
 8007910:	00010002 	.word	0x00010002

08007914 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	60f8      	str	r0, [r7, #12]
 800791c:	60b9      	str	r1, [r7, #8]
 800791e:	603b      	str	r3, [r7, #0]
 8007920:	4613      	mov	r3, r2
 8007922:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007924:	e048      	b.n	80079b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800792c:	d044      	beq.n	80079b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800792e:	f7fd fa6d 	bl	8004e0c <HAL_GetTick>
 8007932:	4602      	mov	r2, r0
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	1ad3      	subs	r3, r2, r3
 8007938:	683a      	ldr	r2, [r7, #0]
 800793a:	429a      	cmp	r2, r3
 800793c:	d302      	bcc.n	8007944 <I2C_WaitOnFlagUntilTimeout+0x30>
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d139      	bne.n	80079b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	0c1b      	lsrs	r3, r3, #16
 8007948:	b2db      	uxtb	r3, r3
 800794a:	2b01      	cmp	r3, #1
 800794c:	d10d      	bne.n	800796a <I2C_WaitOnFlagUntilTimeout+0x56>
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	695b      	ldr	r3, [r3, #20]
 8007954:	43da      	mvns	r2, r3
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	4013      	ands	r3, r2
 800795a:	b29b      	uxth	r3, r3
 800795c:	2b00      	cmp	r3, #0
 800795e:	bf0c      	ite	eq
 8007960:	2301      	moveq	r3, #1
 8007962:	2300      	movne	r3, #0
 8007964:	b2db      	uxtb	r3, r3
 8007966:	461a      	mov	r2, r3
 8007968:	e00c      	b.n	8007984 <I2C_WaitOnFlagUntilTimeout+0x70>
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	699b      	ldr	r3, [r3, #24]
 8007970:	43da      	mvns	r2, r3
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	4013      	ands	r3, r2
 8007976:	b29b      	uxth	r3, r3
 8007978:	2b00      	cmp	r3, #0
 800797a:	bf0c      	ite	eq
 800797c:	2301      	moveq	r3, #1
 800797e:	2300      	movne	r3, #0
 8007980:	b2db      	uxtb	r3, r3
 8007982:	461a      	mov	r2, r3
 8007984:	79fb      	ldrb	r3, [r7, #7]
 8007986:	429a      	cmp	r2, r3
 8007988:	d116      	bne.n	80079b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2200      	movs	r2, #0
 800798e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2220      	movs	r2, #32
 8007994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2200      	movs	r2, #0
 800799c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079a4:	f043 0220 	orr.w	r2, r3, #32
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2200      	movs	r2, #0
 80079b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	e023      	b.n	8007a00 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	0c1b      	lsrs	r3, r3, #16
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d10d      	bne.n	80079de <I2C_WaitOnFlagUntilTimeout+0xca>
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	695b      	ldr	r3, [r3, #20]
 80079c8:	43da      	mvns	r2, r3
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	4013      	ands	r3, r2
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	bf0c      	ite	eq
 80079d4:	2301      	moveq	r3, #1
 80079d6:	2300      	movne	r3, #0
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	461a      	mov	r2, r3
 80079dc:	e00c      	b.n	80079f8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	699b      	ldr	r3, [r3, #24]
 80079e4:	43da      	mvns	r2, r3
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	4013      	ands	r3, r2
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	bf0c      	ite	eq
 80079f0:	2301      	moveq	r3, #1
 80079f2:	2300      	movne	r3, #0
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	461a      	mov	r2, r3
 80079f8:	79fb      	ldrb	r3, [r7, #7]
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d093      	beq.n	8007926 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80079fe:	2300      	movs	r3, #0
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3710      	adds	r7, #16
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	607a      	str	r2, [r7, #4]
 8007a14:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007a16:	e071      	b.n	8007afc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	695b      	ldr	r3, [r3, #20]
 8007a1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a26:	d123      	bne.n	8007a70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a36:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007a40:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2200      	movs	r2, #0
 8007a46:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2220      	movs	r2, #32
 8007a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2200      	movs	r2, #0
 8007a54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a5c:	f043 0204 	orr.w	r2, r3, #4
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e067      	b.n	8007b40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a76:	d041      	beq.n	8007afc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a78:	f7fd f9c8 	bl	8004e0c <HAL_GetTick>
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	1ad3      	subs	r3, r2, r3
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d302      	bcc.n	8007a8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d136      	bne.n	8007afc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	0c1b      	lsrs	r3, r3, #16
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d10c      	bne.n	8007ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	695b      	ldr	r3, [r3, #20]
 8007a9e:	43da      	mvns	r2, r3
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	4013      	ands	r3, r2
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	bf14      	ite	ne
 8007aaa:	2301      	movne	r3, #1
 8007aac:	2300      	moveq	r3, #0
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	e00b      	b.n	8007aca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	699b      	ldr	r3, [r3, #24]
 8007ab8:	43da      	mvns	r2, r3
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	4013      	ands	r3, r2
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	bf14      	ite	ne
 8007ac4:	2301      	movne	r3, #1
 8007ac6:	2300      	moveq	r3, #0
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d016      	beq.n	8007afc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2220      	movs	r2, #32
 8007ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ae8:	f043 0220 	orr.w	r2, r3, #32
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2200      	movs	r2, #0
 8007af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007af8:	2301      	movs	r3, #1
 8007afa:	e021      	b.n	8007b40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	0c1b      	lsrs	r3, r3, #16
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d10c      	bne.n	8007b20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	695b      	ldr	r3, [r3, #20]
 8007b0c:	43da      	mvns	r2, r3
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	4013      	ands	r3, r2
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	bf14      	ite	ne
 8007b18:	2301      	movne	r3, #1
 8007b1a:	2300      	moveq	r3, #0
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	e00b      	b.n	8007b38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	699b      	ldr	r3, [r3, #24]
 8007b26:	43da      	mvns	r2, r3
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	4013      	ands	r3, r2
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	bf14      	ite	ne
 8007b32:	2301      	movne	r3, #1
 8007b34:	2300      	moveq	r3, #0
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	f47f af6d 	bne.w	8007a18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007b3e:	2300      	movs	r3, #0
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3710      	adds	r7, #16
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007b54:	e034      	b.n	8007bc0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007b56:	68f8      	ldr	r0, [r7, #12]
 8007b58:	f000 f8e3 	bl	8007d22 <I2C_IsAcknowledgeFailed>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d001      	beq.n	8007b66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	e034      	b.n	8007bd0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b6c:	d028      	beq.n	8007bc0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b6e:	f7fd f94d 	bl	8004e0c <HAL_GetTick>
 8007b72:	4602      	mov	r2, r0
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	1ad3      	subs	r3, r2, r3
 8007b78:	68ba      	ldr	r2, [r7, #8]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d302      	bcc.n	8007b84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d11d      	bne.n	8007bc0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	695b      	ldr	r3, [r3, #20]
 8007b8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b8e:	2b80      	cmp	r3, #128	@ 0x80
 8007b90:	d016      	beq.n	8007bc0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2200      	movs	r2, #0
 8007b96:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2220      	movs	r2, #32
 8007b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bac:	f043 0220 	orr.w	r2, r3, #32
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	e007      	b.n	8007bd0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	695b      	ldr	r3, [r3, #20]
 8007bc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bca:	2b80      	cmp	r3, #128	@ 0x80
 8007bcc:	d1c3      	bne.n	8007b56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007bce:	2300      	movs	r3, #0
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3710      	adds	r7, #16
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b084      	sub	sp, #16
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	60f8      	str	r0, [r7, #12]
 8007be0:	60b9      	str	r1, [r7, #8]
 8007be2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007be4:	e034      	b.n	8007c50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007be6:	68f8      	ldr	r0, [r7, #12]
 8007be8:	f000 f89b 	bl	8007d22 <I2C_IsAcknowledgeFailed>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d001      	beq.n	8007bf6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e034      	b.n	8007c60 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bfc:	d028      	beq.n	8007c50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bfe:	f7fd f905 	bl	8004e0c <HAL_GetTick>
 8007c02:	4602      	mov	r2, r0
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	1ad3      	subs	r3, r2, r3
 8007c08:	68ba      	ldr	r2, [r7, #8]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d302      	bcc.n	8007c14 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d11d      	bne.n	8007c50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	695b      	ldr	r3, [r3, #20]
 8007c1a:	f003 0304 	and.w	r3, r3, #4
 8007c1e:	2b04      	cmp	r3, #4
 8007c20:	d016      	beq.n	8007c50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2200      	movs	r2, #0
 8007c26:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2220      	movs	r2, #32
 8007c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2200      	movs	r2, #0
 8007c34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c3c:	f043 0220 	orr.w	r2, r3, #32
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2200      	movs	r2, #0
 8007c48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	e007      	b.n	8007c60 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	695b      	ldr	r3, [r3, #20]
 8007c56:	f003 0304 	and.w	r3, r3, #4
 8007c5a:	2b04      	cmp	r3, #4
 8007c5c:	d1c3      	bne.n	8007be6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007c5e:	2300      	movs	r3, #0
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3710      	adds	r7, #16
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007c74:	e049      	b.n	8007d0a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	695b      	ldr	r3, [r3, #20]
 8007c7c:	f003 0310 	and.w	r3, r3, #16
 8007c80:	2b10      	cmp	r3, #16
 8007c82:	d119      	bne.n	8007cb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f06f 0210 	mvn.w	r2, #16
 8007c8c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2200      	movs	r2, #0
 8007c92:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2220      	movs	r2, #32
 8007c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	e030      	b.n	8007d1a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cb8:	f7fd f8a8 	bl	8004e0c <HAL_GetTick>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	1ad3      	subs	r3, r2, r3
 8007cc2:	68ba      	ldr	r2, [r7, #8]
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d302      	bcc.n	8007cce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d11d      	bne.n	8007d0a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	695b      	ldr	r3, [r3, #20]
 8007cd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cd8:	2b40      	cmp	r3, #64	@ 0x40
 8007cda:	d016      	beq.n	8007d0a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2220      	movs	r2, #32
 8007ce6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2200      	movs	r2, #0
 8007cee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cf6:	f043 0220 	orr.w	r2, r3, #32
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2200      	movs	r2, #0
 8007d02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	e007      	b.n	8007d1a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	695b      	ldr	r3, [r3, #20]
 8007d10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d14:	2b40      	cmp	r3, #64	@ 0x40
 8007d16:	d1ae      	bne.n	8007c76 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3710      	adds	r7, #16
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007d22:	b480      	push	{r7}
 8007d24:	b083      	sub	sp, #12
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	695b      	ldr	r3, [r3, #20]
 8007d30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d38:	d11b      	bne.n	8007d72 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007d42:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2220      	movs	r2, #32
 8007d4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d5e:	f043 0204 	orr.w	r2, r3, #4
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e000      	b.n	8007d74 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007d72:	2300      	movs	r3, #0
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bc80      	pop	{r7}
 8007d7c:	4770      	bx	lr
	...

08007d80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b08a      	sub	sp, #40	@ 0x28
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d101      	bne.n	8007d92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e23b      	b.n	800820a <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f003 0301 	and.w	r3, r3, #1
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d050      	beq.n	8007e40 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007d9e:	4b9e      	ldr	r3, [pc, #632]	@ (8008018 <HAL_RCC_OscConfig+0x298>)
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	f003 030c 	and.w	r3, r3, #12
 8007da6:	2b04      	cmp	r3, #4
 8007da8:	d00c      	beq.n	8007dc4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007daa:	4b9b      	ldr	r3, [pc, #620]	@ (8008018 <HAL_RCC_OscConfig+0x298>)
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007db2:	2b08      	cmp	r3, #8
 8007db4:	d112      	bne.n	8007ddc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007db6:	4b98      	ldr	r3, [pc, #608]	@ (8008018 <HAL_RCC_OscConfig+0x298>)
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007dbe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007dc2:	d10b      	bne.n	8007ddc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007dc4:	4b94      	ldr	r3, [pc, #592]	@ (8008018 <HAL_RCC_OscConfig+0x298>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d036      	beq.n	8007e3e <HAL_RCC_OscConfig+0xbe>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d132      	bne.n	8007e3e <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	e216      	b.n	800820a <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	685a      	ldr	r2, [r3, #4]
 8007de0:	4b8e      	ldr	r3, [pc, #568]	@ (800801c <HAL_RCC_OscConfig+0x29c>)
 8007de2:	b2d2      	uxtb	r2, r2
 8007de4:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d013      	beq.n	8007e16 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007dee:	f7fd f80d 	bl	8004e0c <HAL_GetTick>
 8007df2:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007df4:	e008      	b.n	8007e08 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007df6:	f7fd f809 	bl	8004e0c <HAL_GetTick>
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	6a3b      	ldr	r3, [r7, #32]
 8007dfe:	1ad3      	subs	r3, r2, r3
 8007e00:	2b64      	cmp	r3, #100	@ 0x64
 8007e02:	d901      	bls.n	8007e08 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8007e04:	2303      	movs	r3, #3
 8007e06:	e200      	b.n	800820a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e08:	4b83      	ldr	r3, [pc, #524]	@ (8008018 <HAL_RCC_OscConfig+0x298>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d0f0      	beq.n	8007df6 <HAL_RCC_OscConfig+0x76>
 8007e14:	e014      	b.n	8007e40 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e16:	f7fc fff9 	bl	8004e0c <HAL_GetTick>
 8007e1a:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e1c:	e008      	b.n	8007e30 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007e1e:	f7fc fff5 	bl	8004e0c <HAL_GetTick>
 8007e22:	4602      	mov	r2, r0
 8007e24:	6a3b      	ldr	r3, [r7, #32]
 8007e26:	1ad3      	subs	r3, r2, r3
 8007e28:	2b64      	cmp	r3, #100	@ 0x64
 8007e2a:	d901      	bls.n	8007e30 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8007e2c:	2303      	movs	r3, #3
 8007e2e:	e1ec      	b.n	800820a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e30:	4b79      	ldr	r3, [pc, #484]	@ (8008018 <HAL_RCC_OscConfig+0x298>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d1f0      	bne.n	8007e1e <HAL_RCC_OscConfig+0x9e>
 8007e3c:	e000      	b.n	8007e40 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e3e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f003 0302 	and.w	r3, r3, #2
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d077      	beq.n	8007f3c <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007e4c:	4b72      	ldr	r3, [pc, #456]	@ (8008018 <HAL_RCC_OscConfig+0x298>)
 8007e4e:	689b      	ldr	r3, [r3, #8]
 8007e50:	f003 030c 	and.w	r3, r3, #12
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d00b      	beq.n	8007e70 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e58:	4b6f      	ldr	r3, [pc, #444]	@ (8008018 <HAL_RCC_OscConfig+0x298>)
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007e60:	2b08      	cmp	r3, #8
 8007e62:	d126      	bne.n	8007eb2 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e64:	4b6c      	ldr	r3, [pc, #432]	@ (8008018 <HAL_RCC_OscConfig+0x298>)
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d120      	bne.n	8007eb2 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e70:	4b69      	ldr	r3, [pc, #420]	@ (8008018 <HAL_RCC_OscConfig+0x298>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 0302 	and.w	r3, r3, #2
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d005      	beq.n	8007e88 <HAL_RCC_OscConfig+0x108>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	68db      	ldr	r3, [r3, #12]
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d001      	beq.n	8007e88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007e84:	2301      	movs	r3, #1
 8007e86:	e1c0      	b.n	800820a <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e88:	4b63      	ldr	r3, [pc, #396]	@ (8008018 <HAL_RCC_OscConfig+0x298>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	691b      	ldr	r3, [r3, #16]
 8007e94:	21f8      	movs	r1, #248	@ 0xf8
 8007e96:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e98:	69b9      	ldr	r1, [r7, #24]
 8007e9a:	fa91 f1a1 	rbit	r1, r1
 8007e9e:	6179      	str	r1, [r7, #20]
  return result;
 8007ea0:	6979      	ldr	r1, [r7, #20]
 8007ea2:	fab1 f181 	clz	r1, r1
 8007ea6:	b2c9      	uxtb	r1, r1
 8007ea8:	408b      	lsls	r3, r1
 8007eaa:	495b      	ldr	r1, [pc, #364]	@ (8008018 <HAL_RCC_OscConfig+0x298>)
 8007eac:	4313      	orrs	r3, r2
 8007eae:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007eb0:	e044      	b.n	8007f3c <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d02a      	beq.n	8007f10 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007eba:	4b59      	ldr	r3, [pc, #356]	@ (8008020 <HAL_RCC_OscConfig+0x2a0>)
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ec0:	f7fc ffa4 	bl	8004e0c <HAL_GetTick>
 8007ec4:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ec6:	e008      	b.n	8007eda <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007ec8:	f7fc ffa0 	bl	8004e0c <HAL_GetTick>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	6a3b      	ldr	r3, [r7, #32]
 8007ed0:	1ad3      	subs	r3, r2, r3
 8007ed2:	2b02      	cmp	r3, #2
 8007ed4:	d901      	bls.n	8007eda <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8007ed6:	2303      	movs	r3, #3
 8007ed8:	e197      	b.n	800820a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007eda:	4b4f      	ldr	r3, [pc, #316]	@ (8008018 <HAL_RCC_OscConfig+0x298>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f003 0302 	and.w	r3, r3, #2
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d0f0      	beq.n	8007ec8 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ee6:	4b4c      	ldr	r3, [pc, #304]	@ (8008018 <HAL_RCC_OscConfig+0x298>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	691b      	ldr	r3, [r3, #16]
 8007ef2:	21f8      	movs	r1, #248	@ 0xf8
 8007ef4:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ef6:	6939      	ldr	r1, [r7, #16]
 8007ef8:	fa91 f1a1 	rbit	r1, r1
 8007efc:	60f9      	str	r1, [r7, #12]
  return result;
 8007efe:	68f9      	ldr	r1, [r7, #12]
 8007f00:	fab1 f181 	clz	r1, r1
 8007f04:	b2c9      	uxtb	r1, r1
 8007f06:	408b      	lsls	r3, r1
 8007f08:	4943      	ldr	r1, [pc, #268]	@ (8008018 <HAL_RCC_OscConfig+0x298>)
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	600b      	str	r3, [r1, #0]
 8007f0e:	e015      	b.n	8007f3c <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007f10:	4b43      	ldr	r3, [pc, #268]	@ (8008020 <HAL_RCC_OscConfig+0x2a0>)
 8007f12:	2200      	movs	r2, #0
 8007f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f16:	f7fc ff79 	bl	8004e0c <HAL_GetTick>
 8007f1a:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f1c:	e008      	b.n	8007f30 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f1e:	f7fc ff75 	bl	8004e0c <HAL_GetTick>
 8007f22:	4602      	mov	r2, r0
 8007f24:	6a3b      	ldr	r3, [r7, #32]
 8007f26:	1ad3      	subs	r3, r2, r3
 8007f28:	2b02      	cmp	r3, #2
 8007f2a:	d901      	bls.n	8007f30 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8007f2c:	2303      	movs	r3, #3
 8007f2e:	e16c      	b.n	800820a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f30:	4b39      	ldr	r3, [pc, #228]	@ (8008018 <HAL_RCC_OscConfig+0x298>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f003 0302 	and.w	r3, r3, #2
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d1f0      	bne.n	8007f1e <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f003 0308 	and.w	r3, r3, #8
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d030      	beq.n	8007faa <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	695b      	ldr	r3, [r3, #20]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d016      	beq.n	8007f7e <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f50:	4b34      	ldr	r3, [pc, #208]	@ (8008024 <HAL_RCC_OscConfig+0x2a4>)
 8007f52:	2201      	movs	r2, #1
 8007f54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f56:	f7fc ff59 	bl	8004e0c <HAL_GetTick>
 8007f5a:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f5c:	e008      	b.n	8007f70 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f5e:	f7fc ff55 	bl	8004e0c <HAL_GetTick>
 8007f62:	4602      	mov	r2, r0
 8007f64:	6a3b      	ldr	r3, [r7, #32]
 8007f66:	1ad3      	subs	r3, r2, r3
 8007f68:	2b02      	cmp	r3, #2
 8007f6a:	d901      	bls.n	8007f70 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8007f6c:	2303      	movs	r3, #3
 8007f6e:	e14c      	b.n	800820a <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f70:	4b29      	ldr	r3, [pc, #164]	@ (8008018 <HAL_RCC_OscConfig+0x298>)
 8007f72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f74:	f003 0302 	and.w	r3, r3, #2
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d0f0      	beq.n	8007f5e <HAL_RCC_OscConfig+0x1de>
 8007f7c:	e015      	b.n	8007faa <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f7e:	4b29      	ldr	r3, [pc, #164]	@ (8008024 <HAL_RCC_OscConfig+0x2a4>)
 8007f80:	2200      	movs	r2, #0
 8007f82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f84:	f7fc ff42 	bl	8004e0c <HAL_GetTick>
 8007f88:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f8a:	e008      	b.n	8007f9e <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f8c:	f7fc ff3e 	bl	8004e0c <HAL_GetTick>
 8007f90:	4602      	mov	r2, r0
 8007f92:	6a3b      	ldr	r3, [r7, #32]
 8007f94:	1ad3      	subs	r3, r2, r3
 8007f96:	2b02      	cmp	r3, #2
 8007f98:	d901      	bls.n	8007f9e <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8007f9a:	2303      	movs	r3, #3
 8007f9c:	e135      	b.n	800820a <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f9e:	4b1e      	ldr	r3, [pc, #120]	@ (8008018 <HAL_RCC_OscConfig+0x298>)
 8007fa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007fa2:	f003 0302 	and.w	r3, r3, #2
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d1f0      	bne.n	8007f8c <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f003 0304 	and.w	r3, r3, #4
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	f000 8087 	beq.w	80080c6 <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007fbe:	4b16      	ldr	r3, [pc, #88]	@ (8008018 <HAL_RCC_OscConfig+0x298>)
 8007fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d110      	bne.n	8007fec <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007fca:	2300      	movs	r3, #0
 8007fcc:	60bb      	str	r3, [r7, #8]
 8007fce:	4b12      	ldr	r3, [pc, #72]	@ (8008018 <HAL_RCC_OscConfig+0x298>)
 8007fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fd2:	4a11      	ldr	r2, [pc, #68]	@ (8008018 <HAL_RCC_OscConfig+0x298>)
 8007fd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007fd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8007fda:	4b0f      	ldr	r3, [pc, #60]	@ (8008018 <HAL_RCC_OscConfig+0x298>)
 8007fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007fe2:	60bb      	str	r3, [r7, #8]
 8007fe4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007fec:	4b0e      	ldr	r3, [pc, #56]	@ (8008028 <HAL_RCC_OscConfig+0x2a8>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a0d      	ldr	r2, [pc, #52]	@ (8008028 <HAL_RCC_OscConfig+0x2a8>)
 8007ff2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ff6:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8008028 <HAL_RCC_OscConfig+0x2a8>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008000:	2b00      	cmp	r3, #0
 8008002:	d122      	bne.n	800804a <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008004:	4b08      	ldr	r3, [pc, #32]	@ (8008028 <HAL_RCC_OscConfig+0x2a8>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a07      	ldr	r2, [pc, #28]	@ (8008028 <HAL_RCC_OscConfig+0x2a8>)
 800800a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800800e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008010:	f7fc fefc 	bl	8004e0c <HAL_GetTick>
 8008014:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008016:	e012      	b.n	800803e <HAL_RCC_OscConfig+0x2be>
 8008018:	40023800 	.word	0x40023800
 800801c:	40023802 	.word	0x40023802
 8008020:	42470000 	.word	0x42470000
 8008024:	42470e80 	.word	0x42470e80
 8008028:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800802c:	f7fc feee 	bl	8004e0c <HAL_GetTick>
 8008030:	4602      	mov	r2, r0
 8008032:	6a3b      	ldr	r3, [r7, #32]
 8008034:	1ad3      	subs	r3, r2, r3
 8008036:	2b02      	cmp	r3, #2
 8008038:	d901      	bls.n	800803e <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 800803a:	2303      	movs	r3, #3
 800803c:	e0e5      	b.n	800820a <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800803e:	4b75      	ldr	r3, [pc, #468]	@ (8008214 <HAL_RCC_OscConfig+0x494>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008046:	2b00      	cmp	r3, #0
 8008048:	d0f0      	beq.n	800802c <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	689a      	ldr	r2, [r3, #8]
 800804e:	4b72      	ldr	r3, [pc, #456]	@ (8008218 <HAL_RCC_OscConfig+0x498>)
 8008050:	b2d2      	uxtb	r2, r2
 8008052:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d015      	beq.n	8008088 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800805c:	f7fc fed6 	bl	8004e0c <HAL_GetTick>
 8008060:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008062:	e00a      	b.n	800807a <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008064:	f7fc fed2 	bl	8004e0c <HAL_GetTick>
 8008068:	4602      	mov	r2, r0
 800806a:	6a3b      	ldr	r3, [r7, #32]
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008072:	4293      	cmp	r3, r2
 8008074:	d901      	bls.n	800807a <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8008076:	2303      	movs	r3, #3
 8008078:	e0c7      	b.n	800820a <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800807a:	4b68      	ldr	r3, [pc, #416]	@ (800821c <HAL_RCC_OscConfig+0x49c>)
 800807c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800807e:	f003 0302 	and.w	r3, r3, #2
 8008082:	2b00      	cmp	r3, #0
 8008084:	d0ee      	beq.n	8008064 <HAL_RCC_OscConfig+0x2e4>
 8008086:	e014      	b.n	80080b2 <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008088:	f7fc fec0 	bl	8004e0c <HAL_GetTick>
 800808c:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800808e:	e00a      	b.n	80080a6 <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008090:	f7fc febc 	bl	8004e0c <HAL_GetTick>
 8008094:	4602      	mov	r2, r0
 8008096:	6a3b      	ldr	r3, [r7, #32]
 8008098:	1ad3      	subs	r3, r2, r3
 800809a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800809e:	4293      	cmp	r3, r2
 80080a0:	d901      	bls.n	80080a6 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 80080a2:	2303      	movs	r3, #3
 80080a4:	e0b1      	b.n	800820a <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80080a6:	4b5d      	ldr	r3, [pc, #372]	@ (800821c <HAL_RCC_OscConfig+0x49c>)
 80080a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080aa:	f003 0302 	and.w	r3, r3, #2
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d1ee      	bne.n	8008090 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80080b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d105      	bne.n	80080c6 <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80080ba:	4b58      	ldr	r3, [pc, #352]	@ (800821c <HAL_RCC_OscConfig+0x49c>)
 80080bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080be:	4a57      	ldr	r2, [pc, #348]	@ (800821c <HAL_RCC_OscConfig+0x49c>)
 80080c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80080c4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	699b      	ldr	r3, [r3, #24]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	f000 809c 	beq.w	8008208 <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80080d0:	4b52      	ldr	r3, [pc, #328]	@ (800821c <HAL_RCC_OscConfig+0x49c>)
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	f003 030c 	and.w	r3, r3, #12
 80080d8:	2b08      	cmp	r3, #8
 80080da:	d061      	beq.n	80081a0 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	699b      	ldr	r3, [r3, #24]
 80080e0:	2b02      	cmp	r3, #2
 80080e2:	d146      	bne.n	8008172 <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080e4:	4b4e      	ldr	r3, [pc, #312]	@ (8008220 <HAL_RCC_OscConfig+0x4a0>)
 80080e6:	2200      	movs	r2, #0
 80080e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080ea:	f7fc fe8f 	bl	8004e0c <HAL_GetTick>
 80080ee:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080f0:	e008      	b.n	8008104 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080f2:	f7fc fe8b 	bl	8004e0c <HAL_GetTick>
 80080f6:	4602      	mov	r2, r0
 80080f8:	6a3b      	ldr	r3, [r7, #32]
 80080fa:	1ad3      	subs	r3, r2, r3
 80080fc:	2b64      	cmp	r3, #100	@ 0x64
 80080fe:	d901      	bls.n	8008104 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8008100:	2303      	movs	r3, #3
 8008102:	e082      	b.n	800820a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008104:	4b45      	ldr	r3, [pc, #276]	@ (800821c <HAL_RCC_OscConfig+0x49c>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800810c:	2b00      	cmp	r3, #0
 800810e:	d1f0      	bne.n	80080f2 <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008110:	4b42      	ldr	r3, [pc, #264]	@ (800821c <HAL_RCC_OscConfig+0x49c>)
 8008112:	685a      	ldr	r2, [r3, #4]
 8008114:	4b43      	ldr	r3, [pc, #268]	@ (8008224 <HAL_RCC_OscConfig+0x4a4>)
 8008116:	4013      	ands	r3, r2
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	69d1      	ldr	r1, [r2, #28]
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	6a12      	ldr	r2, [r2, #32]
 8008120:	4311      	orrs	r1, r2
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008126:	0192      	lsls	r2, r2, #6
 8008128:	4311      	orrs	r1, r2
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800812e:	0612      	lsls	r2, r2, #24
 8008130:	4311      	orrs	r1, r2
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008136:	0852      	lsrs	r2, r2, #1
 8008138:	3a01      	subs	r2, #1
 800813a:	0412      	lsls	r2, r2, #16
 800813c:	430a      	orrs	r2, r1
 800813e:	4937      	ldr	r1, [pc, #220]	@ (800821c <HAL_RCC_OscConfig+0x49c>)
 8008140:	4313      	orrs	r3, r2
 8008142:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008144:	4b36      	ldr	r3, [pc, #216]	@ (8008220 <HAL_RCC_OscConfig+0x4a0>)
 8008146:	2201      	movs	r2, #1
 8008148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800814a:	f7fc fe5f 	bl	8004e0c <HAL_GetTick>
 800814e:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008150:	e008      	b.n	8008164 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008152:	f7fc fe5b 	bl	8004e0c <HAL_GetTick>
 8008156:	4602      	mov	r2, r0
 8008158:	6a3b      	ldr	r3, [r7, #32]
 800815a:	1ad3      	subs	r3, r2, r3
 800815c:	2b64      	cmp	r3, #100	@ 0x64
 800815e:	d901      	bls.n	8008164 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8008160:	2303      	movs	r3, #3
 8008162:	e052      	b.n	800820a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008164:	4b2d      	ldr	r3, [pc, #180]	@ (800821c <HAL_RCC_OscConfig+0x49c>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800816c:	2b00      	cmp	r3, #0
 800816e:	d0f0      	beq.n	8008152 <HAL_RCC_OscConfig+0x3d2>
 8008170:	e04a      	b.n	8008208 <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008172:	4b2b      	ldr	r3, [pc, #172]	@ (8008220 <HAL_RCC_OscConfig+0x4a0>)
 8008174:	2200      	movs	r2, #0
 8008176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008178:	f7fc fe48 	bl	8004e0c <HAL_GetTick>
 800817c:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800817e:	e008      	b.n	8008192 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008180:	f7fc fe44 	bl	8004e0c <HAL_GetTick>
 8008184:	4602      	mov	r2, r0
 8008186:	6a3b      	ldr	r3, [r7, #32]
 8008188:	1ad3      	subs	r3, r2, r3
 800818a:	2b64      	cmp	r3, #100	@ 0x64
 800818c:	d901      	bls.n	8008192 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 800818e:	2303      	movs	r3, #3
 8008190:	e03b      	b.n	800820a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008192:	4b22      	ldr	r3, [pc, #136]	@ (800821c <HAL_RCC_OscConfig+0x49c>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800819a:	2b00      	cmp	r3, #0
 800819c:	d1f0      	bne.n	8008180 <HAL_RCC_OscConfig+0x400>
 800819e:	e033      	b.n	8008208 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	699b      	ldr	r3, [r3, #24]
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d101      	bne.n	80081ac <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 80081a8:	2301      	movs	r3, #1
 80081aa:	e02e      	b.n	800820a <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 80081ac:	4b1b      	ldr	r3, [pc, #108]	@ (800821c <HAL_RCC_OscConfig+0x49c>)
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081b2:	69fb      	ldr	r3, [r7, #28]
 80081b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	69db      	ldr	r3, [r3, #28]
 80081bc:	429a      	cmp	r2, r3
 80081be:	d121      	bne.n	8008204 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80081c0:	69fb      	ldr	r3, [r7, #28]
 80081c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d11a      	bne.n	8008204 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80081ce:	69fa      	ldr	r2, [r7, #28]
 80081d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80081d4:	4013      	ands	r3, r2
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80081da:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80081dc:	4293      	cmp	r3, r2
 80081de:	d111      	bne.n	8008204 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80081e0:	69fb      	ldr	r3, [r7, #28]
 80081e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081ea:	085b      	lsrs	r3, r3, #1
 80081ec:	3b01      	subs	r3, #1
 80081ee:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d107      	bne.n	8008204 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80081f4:	69fb      	ldr	r3, [r7, #28]
 80081f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081fe:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008200:	429a      	cmp	r2, r3
 8008202:	d001      	beq.n	8008208 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 8008204:	2301      	movs	r3, #1
 8008206:	e000      	b.n	800820a <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3728      	adds	r7, #40	@ 0x28
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	40007000 	.word	0x40007000
 8008218:	40023870 	.word	0x40023870
 800821c:	40023800 	.word	0x40023800
 8008220:	42470060 	.word	0x42470060
 8008224:	f0bc8000 	.word	0xf0bc8000

08008228 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b086      	sub	sp, #24
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d101      	bne.n	800823c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008238:	2301      	movs	r3, #1
 800823a:	e0d2      	b.n	80083e2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800823c:	4b6b      	ldr	r3, [pc, #428]	@ (80083ec <HAL_RCC_ClockConfig+0x1c4>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f003 030f 	and.w	r3, r3, #15
 8008244:	683a      	ldr	r2, [r7, #0]
 8008246:	429a      	cmp	r2, r3
 8008248:	d90c      	bls.n	8008264 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800824a:	4b68      	ldr	r3, [pc, #416]	@ (80083ec <HAL_RCC_ClockConfig+0x1c4>)
 800824c:	683a      	ldr	r2, [r7, #0]
 800824e:	b2d2      	uxtb	r2, r2
 8008250:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008252:	4b66      	ldr	r3, [pc, #408]	@ (80083ec <HAL_RCC_ClockConfig+0x1c4>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f003 030f 	and.w	r3, r3, #15
 800825a:	683a      	ldr	r2, [r7, #0]
 800825c:	429a      	cmp	r2, r3
 800825e:	d001      	beq.n	8008264 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008260:	2301      	movs	r3, #1
 8008262:	e0be      	b.n	80083e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f003 0302 	and.w	r3, r3, #2
 800826c:	2b00      	cmp	r3, #0
 800826e:	d020      	beq.n	80082b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f003 0304 	and.w	r3, r3, #4
 8008278:	2b00      	cmp	r3, #0
 800827a:	d005      	beq.n	8008288 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800827c:	4b5c      	ldr	r3, [pc, #368]	@ (80083f0 <HAL_RCC_ClockConfig+0x1c8>)
 800827e:	689b      	ldr	r3, [r3, #8]
 8008280:	4a5b      	ldr	r2, [pc, #364]	@ (80083f0 <HAL_RCC_ClockConfig+0x1c8>)
 8008282:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008286:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f003 0308 	and.w	r3, r3, #8
 8008290:	2b00      	cmp	r3, #0
 8008292:	d005      	beq.n	80082a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8008294:	4b56      	ldr	r3, [pc, #344]	@ (80083f0 <HAL_RCC_ClockConfig+0x1c8>)
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	4a55      	ldr	r2, [pc, #340]	@ (80083f0 <HAL_RCC_ClockConfig+0x1c8>)
 800829a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800829e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80082a0:	4b53      	ldr	r3, [pc, #332]	@ (80083f0 <HAL_RCC_ClockConfig+0x1c8>)
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	4950      	ldr	r1, [pc, #320]	@ (80083f0 <HAL_RCC_ClockConfig+0x1c8>)
 80082ae:	4313      	orrs	r3, r2
 80082b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f003 0301 	and.w	r3, r3, #1
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d040      	beq.n	8008340 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d107      	bne.n	80082d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082c6:	4b4a      	ldr	r3, [pc, #296]	@ (80083f0 <HAL_RCC_ClockConfig+0x1c8>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d115      	bne.n	80082fe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80082d2:	2301      	movs	r3, #1
 80082d4:	e085      	b.n	80083e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	2b02      	cmp	r3, #2
 80082dc:	d107      	bne.n	80082ee <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80082de:	4b44      	ldr	r3, [pc, #272]	@ (80083f0 <HAL_RCC_ClockConfig+0x1c8>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d109      	bne.n	80082fe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	e079      	b.n	80083e2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082ee:	4b40      	ldr	r3, [pc, #256]	@ (80083f0 <HAL_RCC_ClockConfig+0x1c8>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f003 0302 	and.w	r3, r3, #2
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d101      	bne.n	80082fe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80082fa:	2301      	movs	r3, #1
 80082fc:	e071      	b.n	80083e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80082fe:	4b3c      	ldr	r3, [pc, #240]	@ (80083f0 <HAL_RCC_ClockConfig+0x1c8>)
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	f023 0203 	bic.w	r2, r3, #3
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	4939      	ldr	r1, [pc, #228]	@ (80083f0 <HAL_RCC_ClockConfig+0x1c8>)
 800830c:	4313      	orrs	r3, r2
 800830e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008310:	f7fc fd7c 	bl	8004e0c <HAL_GetTick>
 8008314:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008316:	e00a      	b.n	800832e <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008318:	f7fc fd78 	bl	8004e0c <HAL_GetTick>
 800831c:	4602      	mov	r2, r0
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	1ad3      	subs	r3, r2, r3
 8008322:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008326:	4293      	cmp	r3, r2
 8008328:	d901      	bls.n	800832e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800832a:	2303      	movs	r3, #3
 800832c:	e059      	b.n	80083e2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800832e:	4b30      	ldr	r3, [pc, #192]	@ (80083f0 <HAL_RCC_ClockConfig+0x1c8>)
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	f003 020c 	and.w	r2, r3, #12
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	429a      	cmp	r2, r3
 800833e:	d1eb      	bne.n	8008318 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008340:	4b2a      	ldr	r3, [pc, #168]	@ (80083ec <HAL_RCC_ClockConfig+0x1c4>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f003 030f 	and.w	r3, r3, #15
 8008348:	683a      	ldr	r2, [r7, #0]
 800834a:	429a      	cmp	r2, r3
 800834c:	d20c      	bcs.n	8008368 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800834e:	4b27      	ldr	r3, [pc, #156]	@ (80083ec <HAL_RCC_ClockConfig+0x1c4>)
 8008350:	683a      	ldr	r2, [r7, #0]
 8008352:	b2d2      	uxtb	r2, r2
 8008354:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008356:	4b25      	ldr	r3, [pc, #148]	@ (80083ec <HAL_RCC_ClockConfig+0x1c4>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f003 030f 	and.w	r3, r3, #15
 800835e:	683a      	ldr	r2, [r7, #0]
 8008360:	429a      	cmp	r2, r3
 8008362:	d001      	beq.n	8008368 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8008364:	2301      	movs	r3, #1
 8008366:	e03c      	b.n	80083e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f003 0304 	and.w	r3, r3, #4
 8008370:	2b00      	cmp	r3, #0
 8008372:	d008      	beq.n	8008386 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008374:	4b1e      	ldr	r3, [pc, #120]	@ (80083f0 <HAL_RCC_ClockConfig+0x1c8>)
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	491b      	ldr	r1, [pc, #108]	@ (80083f0 <HAL_RCC_ClockConfig+0x1c8>)
 8008382:	4313      	orrs	r3, r2
 8008384:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f003 0308 	and.w	r3, r3, #8
 800838e:	2b00      	cmp	r3, #0
 8008390:	d009      	beq.n	80083a6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008392:	4b17      	ldr	r3, [pc, #92]	@ (80083f0 <HAL_RCC_ClockConfig+0x1c8>)
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	691b      	ldr	r3, [r3, #16]
 800839e:	00db      	lsls	r3, r3, #3
 80083a0:	4913      	ldr	r1, [pc, #76]	@ (80083f0 <HAL_RCC_ClockConfig+0x1c8>)
 80083a2:	4313      	orrs	r3, r2
 80083a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80083a6:	f000 f82b 	bl	8008400 <HAL_RCC_GetSysClockFreq>
 80083aa:	4601      	mov	r1, r0
 80083ac:	4b10      	ldr	r3, [pc, #64]	@ (80083f0 <HAL_RCC_ClockConfig+0x1c8>)
 80083ae:	689b      	ldr	r3, [r3, #8]
 80083b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80083b4:	22f0      	movs	r2, #240	@ 0xf0
 80083b6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083b8:	693a      	ldr	r2, [r7, #16]
 80083ba:	fa92 f2a2 	rbit	r2, r2
 80083be:	60fa      	str	r2, [r7, #12]
  return result;
 80083c0:	68fa      	ldr	r2, [r7, #12]
 80083c2:	fab2 f282 	clz	r2, r2
 80083c6:	b2d2      	uxtb	r2, r2
 80083c8:	40d3      	lsrs	r3, r2
 80083ca:	4a0a      	ldr	r2, [pc, #40]	@ (80083f4 <HAL_RCC_ClockConfig+0x1cc>)
 80083cc:	5cd3      	ldrb	r3, [r2, r3]
 80083ce:	fa21 f303 	lsr.w	r3, r1, r3
 80083d2:	4a09      	ldr	r2, [pc, #36]	@ (80083f8 <HAL_RCC_ClockConfig+0x1d0>)
 80083d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80083d6:	4b09      	ldr	r3, [pc, #36]	@ (80083fc <HAL_RCC_ClockConfig+0x1d4>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4618      	mov	r0, r3
 80083dc:	f7fc fcd4 	bl	8004d88 <HAL_InitTick>

  return HAL_OK;
 80083e0:	2300      	movs	r3, #0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3718      	adds	r7, #24
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	40023c00 	.word	0x40023c00
 80083f0:	40023800 	.word	0x40023800
 80083f4:	0800a7b0 	.word	0x0800a7b0
 80083f8:	2000000c 	.word	0x2000000c
 80083fc:	20000018 	.word	0x20000018

08008400 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008400:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008404:	b090      	sub	sp, #64	@ 0x40
 8008406:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008408:	2300      	movs	r3, #0
 800840a:	637b      	str	r3, [r7, #52]	@ 0x34
 800840c:	2300      	movs	r3, #0
 800840e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008410:	2300      	movs	r3, #0
 8008412:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8008414:	2300      	movs	r3, #0
 8008416:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008418:	4b59      	ldr	r3, [pc, #356]	@ (8008580 <HAL_RCC_GetSysClockFreq+0x180>)
 800841a:	689b      	ldr	r3, [r3, #8]
 800841c:	f003 030c 	and.w	r3, r3, #12
 8008420:	2b08      	cmp	r3, #8
 8008422:	d00d      	beq.n	8008440 <HAL_RCC_GetSysClockFreq+0x40>
 8008424:	2b08      	cmp	r3, #8
 8008426:	f200 80a2 	bhi.w	800856e <HAL_RCC_GetSysClockFreq+0x16e>
 800842a:	2b00      	cmp	r3, #0
 800842c:	d002      	beq.n	8008434 <HAL_RCC_GetSysClockFreq+0x34>
 800842e:	2b04      	cmp	r3, #4
 8008430:	d003      	beq.n	800843a <HAL_RCC_GetSysClockFreq+0x3a>
 8008432:	e09c      	b.n	800856e <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008434:	4b53      	ldr	r3, [pc, #332]	@ (8008584 <HAL_RCC_GetSysClockFreq+0x184>)
 8008436:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8008438:	e09c      	b.n	8008574 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800843a:	4b53      	ldr	r3, [pc, #332]	@ (8008588 <HAL_RCC_GetSysClockFreq+0x188>)
 800843c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800843e:	e099      	b.n	8008574 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008440:	4b4f      	ldr	r3, [pc, #316]	@ (8008580 <HAL_RCC_GetSysClockFreq+0x180>)
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008448:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800844a:	4b4d      	ldr	r3, [pc, #308]	@ (8008580 <HAL_RCC_GetSysClockFreq+0x180>)
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008452:	2b00      	cmp	r3, #0
 8008454:	d027      	beq.n	80084a6 <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008456:	4b4a      	ldr	r3, [pc, #296]	@ (8008580 <HAL_RCC_GetSysClockFreq+0x180>)
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	099b      	lsrs	r3, r3, #6
 800845c:	2200      	movs	r2, #0
 800845e:	623b      	str	r3, [r7, #32]
 8008460:	627a      	str	r2, [r7, #36]	@ 0x24
 8008462:	6a3b      	ldr	r3, [r7, #32]
 8008464:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008468:	2100      	movs	r1, #0
 800846a:	4b47      	ldr	r3, [pc, #284]	@ (8008588 <HAL_RCC_GetSysClockFreq+0x188>)
 800846c:	fb03 f201 	mul.w	r2, r3, r1
 8008470:	2300      	movs	r3, #0
 8008472:	fb00 f303 	mul.w	r3, r0, r3
 8008476:	4413      	add	r3, r2
 8008478:	4a43      	ldr	r2, [pc, #268]	@ (8008588 <HAL_RCC_GetSysClockFreq+0x188>)
 800847a:	fba0 2102 	umull	r2, r1, r0, r2
 800847e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8008480:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008482:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008484:	4413      	add	r3, r2
 8008486:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800848a:	2200      	movs	r2, #0
 800848c:	61bb      	str	r3, [r7, #24]
 800848e:	61fa      	str	r2, [r7, #28]
 8008490:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008494:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008498:	f7f8 fe30 	bl	80010fc <__aeabi_uldivmod>
 800849c:	4602      	mov	r2, r0
 800849e:	460b      	mov	r3, r1
 80084a0:	4613      	mov	r3, r2
 80084a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80084a4:	e055      	b.n	8008552 <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80084a6:	4b36      	ldr	r3, [pc, #216]	@ (8008580 <HAL_RCC_GetSysClockFreq+0x180>)
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	099b      	lsrs	r3, r3, #6
 80084ac:	2200      	movs	r2, #0
 80084ae:	613b      	str	r3, [r7, #16]
 80084b0:	617a      	str	r2, [r7, #20]
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80084b8:	f04f 0b00 	mov.w	fp, #0
 80084bc:	4652      	mov	r2, sl
 80084be:	465b      	mov	r3, fp
 80084c0:	f04f 0000 	mov.w	r0, #0
 80084c4:	f04f 0100 	mov.w	r1, #0
 80084c8:	0159      	lsls	r1, r3, #5
 80084ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80084ce:	0150      	lsls	r0, r2, #5
 80084d0:	4602      	mov	r2, r0
 80084d2:	460b      	mov	r3, r1
 80084d4:	ebb2 080a 	subs.w	r8, r2, sl
 80084d8:	eb63 090b 	sbc.w	r9, r3, fp
 80084dc:	f04f 0200 	mov.w	r2, #0
 80084e0:	f04f 0300 	mov.w	r3, #0
 80084e4:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80084e8:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80084ec:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80084f0:	ebb2 0408 	subs.w	r4, r2, r8
 80084f4:	eb63 0509 	sbc.w	r5, r3, r9
 80084f8:	f04f 0200 	mov.w	r2, #0
 80084fc:	f04f 0300 	mov.w	r3, #0
 8008500:	00eb      	lsls	r3, r5, #3
 8008502:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008506:	00e2      	lsls	r2, r4, #3
 8008508:	4614      	mov	r4, r2
 800850a:	461d      	mov	r5, r3
 800850c:	eb14 030a 	adds.w	r3, r4, sl
 8008510:	603b      	str	r3, [r7, #0]
 8008512:	eb45 030b 	adc.w	r3, r5, fp
 8008516:	607b      	str	r3, [r7, #4]
 8008518:	f04f 0200 	mov.w	r2, #0
 800851c:	f04f 0300 	mov.w	r3, #0
 8008520:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008524:	4629      	mov	r1, r5
 8008526:	028b      	lsls	r3, r1, #10
 8008528:	4620      	mov	r0, r4
 800852a:	4629      	mov	r1, r5
 800852c:	4604      	mov	r4, r0
 800852e:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8008532:	4601      	mov	r1, r0
 8008534:	028a      	lsls	r2, r1, #10
 8008536:	4610      	mov	r0, r2
 8008538:	4619      	mov	r1, r3
 800853a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800853c:	2200      	movs	r2, #0
 800853e:	60bb      	str	r3, [r7, #8]
 8008540:	60fa      	str	r2, [r7, #12]
 8008542:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008546:	f7f8 fdd9 	bl	80010fc <__aeabi_uldivmod>
 800854a:	4602      	mov	r2, r0
 800854c:	460b      	mov	r3, r1
 800854e:	4613      	mov	r3, r2
 8008550:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008552:	4b0b      	ldr	r3, [pc, #44]	@ (8008580 <HAL_RCC_GetSysClockFreq+0x180>)
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	0c1b      	lsrs	r3, r3, #16
 8008558:	f003 0303 	and.w	r3, r3, #3
 800855c:	3301      	adds	r3, #1
 800855e:	005b      	lsls	r3, r3, #1
 8008560:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8008562:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008566:	fbb2 f3f3 	udiv	r3, r2, r3
 800856a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800856c:	e002      	b.n	8008574 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800856e:	4b05      	ldr	r3, [pc, #20]	@ (8008584 <HAL_RCC_GetSysClockFreq+0x184>)
 8008570:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008572:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008576:	4618      	mov	r0, r3
 8008578:	3740      	adds	r7, #64	@ 0x40
 800857a:	46bd      	mov	sp, r7
 800857c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008580:	40023800 	.word	0x40023800
 8008584:	00f42400 	.word	0x00f42400
 8008588:	017d7840 	.word	0x017d7840

0800858c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800858c:	b480      	push	{r7}
 800858e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008590:	4b02      	ldr	r3, [pc, #8]	@ (800859c <HAL_RCC_GetHCLKFreq+0x10>)
 8008592:	681b      	ldr	r3, [r3, #0]
}
 8008594:	4618      	mov	r0, r3
 8008596:	46bd      	mov	sp, r7
 8008598:	bc80      	pop	{r7}
 800859a:	4770      	bx	lr
 800859c:	2000000c 	.word	0x2000000c

080085a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b082      	sub	sp, #8
 80085a4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80085a6:	f7ff fff1 	bl	800858c <HAL_RCC_GetHCLKFreq>
 80085aa:	4601      	mov	r1, r0
 80085ac:	4b0b      	ldr	r3, [pc, #44]	@ (80085dc <HAL_RCC_GetPCLK1Freq+0x3c>)
 80085ae:	689b      	ldr	r3, [r3, #8]
 80085b0:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80085b4:	f44f 52e0 	mov.w	r2, #7168	@ 0x1c00
 80085b8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085ba:	687a      	ldr	r2, [r7, #4]
 80085bc:	fa92 f2a2 	rbit	r2, r2
 80085c0:	603a      	str	r2, [r7, #0]
  return result;
 80085c2:	683a      	ldr	r2, [r7, #0]
 80085c4:	fab2 f282 	clz	r2, r2
 80085c8:	b2d2      	uxtb	r2, r2
 80085ca:	40d3      	lsrs	r3, r2
 80085cc:	4a04      	ldr	r2, [pc, #16]	@ (80085e0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80085ce:	5cd3      	ldrb	r3, [r2, r3]
 80085d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3708      	adds	r7, #8
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}
 80085dc:	40023800 	.word	0x40023800
 80085e0:	0800a7c0 	.word	0x0800a7c0

080085e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b082      	sub	sp, #8
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d101      	bne.n	80085f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80085f2:	2301      	movs	r3, #1
 80085f4:	e041      	b.n	800867a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80085fc:	b2db      	uxtb	r3, r3
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d106      	bne.n	8008610 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f7fc f964 	bl	80048d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2202      	movs	r2, #2
 8008614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681a      	ldr	r2, [r3, #0]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	3304      	adds	r3, #4
 8008620:	4619      	mov	r1, r3
 8008622:	4610      	mov	r0, r2
 8008624:	f000 fc22 	bl	8008e6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2201      	movs	r2, #1
 800862c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2201      	movs	r2, #1
 8008634:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2201      	movs	r2, #1
 800863c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2201      	movs	r2, #1
 8008644:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2201      	movs	r2, #1
 800864c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2201      	movs	r2, #1
 8008654:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2201      	movs	r2, #1
 800865c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2201      	movs	r2, #1
 8008664:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2201      	movs	r2, #1
 800866c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2201      	movs	r2, #1
 8008674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008678:	2300      	movs	r3, #0
}
 800867a:	4618      	mov	r0, r3
 800867c:	3708      	adds	r7, #8
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
	...

08008684 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d109      	bne.n	80086a8 <HAL_TIM_PWM_Start+0x24>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800869a:	b2db      	uxtb	r3, r3
 800869c:	2b01      	cmp	r3, #1
 800869e:	bf14      	ite	ne
 80086a0:	2301      	movne	r3, #1
 80086a2:	2300      	moveq	r3, #0
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	e022      	b.n	80086ee <HAL_TIM_PWM_Start+0x6a>
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	2b04      	cmp	r3, #4
 80086ac:	d109      	bne.n	80086c2 <HAL_TIM_PWM_Start+0x3e>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	bf14      	ite	ne
 80086ba:	2301      	movne	r3, #1
 80086bc:	2300      	moveq	r3, #0
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	e015      	b.n	80086ee <HAL_TIM_PWM_Start+0x6a>
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	2b08      	cmp	r3, #8
 80086c6:	d109      	bne.n	80086dc <HAL_TIM_PWM_Start+0x58>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80086ce:	b2db      	uxtb	r3, r3
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	bf14      	ite	ne
 80086d4:	2301      	movne	r3, #1
 80086d6:	2300      	moveq	r3, #0
 80086d8:	b2db      	uxtb	r3, r3
 80086da:	e008      	b.n	80086ee <HAL_TIM_PWM_Start+0x6a>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80086e2:	b2db      	uxtb	r3, r3
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	bf14      	ite	ne
 80086e8:	2301      	movne	r3, #1
 80086ea:	2300      	moveq	r3, #0
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d001      	beq.n	80086f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80086f2:	2301      	movs	r3, #1
 80086f4:	e07c      	b.n	80087f0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d104      	bne.n	8008706 <HAL_TIM_PWM_Start+0x82>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2202      	movs	r2, #2
 8008700:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008704:	e013      	b.n	800872e <HAL_TIM_PWM_Start+0xaa>
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	2b04      	cmp	r3, #4
 800870a:	d104      	bne.n	8008716 <HAL_TIM_PWM_Start+0x92>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2202      	movs	r2, #2
 8008710:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008714:	e00b      	b.n	800872e <HAL_TIM_PWM_Start+0xaa>
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	2b08      	cmp	r3, #8
 800871a:	d104      	bne.n	8008726 <HAL_TIM_PWM_Start+0xa2>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2202      	movs	r2, #2
 8008720:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008724:	e003      	b.n	800872e <HAL_TIM_PWM_Start+0xaa>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2202      	movs	r2, #2
 800872a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2201      	movs	r2, #1
 8008734:	6839      	ldr	r1, [r7, #0]
 8008736:	4618      	mov	r0, r3
 8008738:	f000 fde2 	bl	8009300 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a2d      	ldr	r2, [pc, #180]	@ (80087f8 <HAL_TIM_PWM_Start+0x174>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d004      	beq.n	8008750 <HAL_TIM_PWM_Start+0xcc>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a2c      	ldr	r2, [pc, #176]	@ (80087fc <HAL_TIM_PWM_Start+0x178>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d101      	bne.n	8008754 <HAL_TIM_PWM_Start+0xd0>
 8008750:	2301      	movs	r3, #1
 8008752:	e000      	b.n	8008756 <HAL_TIM_PWM_Start+0xd2>
 8008754:	2300      	movs	r3, #0
 8008756:	2b00      	cmp	r3, #0
 8008758:	d007      	beq.n	800876a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008768:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a22      	ldr	r2, [pc, #136]	@ (80087f8 <HAL_TIM_PWM_Start+0x174>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d022      	beq.n	80087ba <HAL_TIM_PWM_Start+0x136>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800877c:	d01d      	beq.n	80087ba <HAL_TIM_PWM_Start+0x136>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a1f      	ldr	r2, [pc, #124]	@ (8008800 <HAL_TIM_PWM_Start+0x17c>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d018      	beq.n	80087ba <HAL_TIM_PWM_Start+0x136>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a1d      	ldr	r2, [pc, #116]	@ (8008804 <HAL_TIM_PWM_Start+0x180>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d013      	beq.n	80087ba <HAL_TIM_PWM_Start+0x136>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a1c      	ldr	r2, [pc, #112]	@ (8008808 <HAL_TIM_PWM_Start+0x184>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d00e      	beq.n	80087ba <HAL_TIM_PWM_Start+0x136>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a16      	ldr	r2, [pc, #88]	@ (80087fc <HAL_TIM_PWM_Start+0x178>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d009      	beq.n	80087ba <HAL_TIM_PWM_Start+0x136>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a18      	ldr	r2, [pc, #96]	@ (800880c <HAL_TIM_PWM_Start+0x188>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d004      	beq.n	80087ba <HAL_TIM_PWM_Start+0x136>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a16      	ldr	r2, [pc, #88]	@ (8008810 <HAL_TIM_PWM_Start+0x18c>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d111      	bne.n	80087de <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	f003 0307 	and.w	r3, r3, #7
 80087c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2b06      	cmp	r3, #6
 80087ca:	d010      	beq.n	80087ee <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	681a      	ldr	r2, [r3, #0]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f042 0201 	orr.w	r2, r2, #1
 80087da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087dc:	e007      	b.n	80087ee <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f042 0201 	orr.w	r2, r2, #1
 80087ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80087ee:	2300      	movs	r3, #0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3710      	adds	r7, #16
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}
 80087f8:	40010000 	.word	0x40010000
 80087fc:	40010400 	.word	0x40010400
 8008800:	40000400 	.word	0x40000400
 8008804:	40000800 	.word	0x40000800
 8008808:	40000c00 	.word	0x40000c00
 800880c:	40014000 	.word	0x40014000
 8008810:	40001800 	.word	0x40001800

08008814 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b086      	sub	sp, #24
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d101      	bne.n	8008828 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008824:	2301      	movs	r3, #1
 8008826:	e097      	b.n	8008958 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800882e:	b2db      	uxtb	r3, r3
 8008830:	2b00      	cmp	r3, #0
 8008832:	d106      	bne.n	8008842 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f7fc f873 	bl	8004928 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2202      	movs	r2, #2
 8008846:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	6812      	ldr	r2, [r2, #0]
 8008854:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008858:	f023 0307 	bic.w	r3, r3, #7
 800885c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	3304      	adds	r3, #4
 8008866:	4619      	mov	r1, r3
 8008868:	4610      	mov	r0, r2
 800886a:	f000 faff 	bl	8008e6c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	689b      	ldr	r3, [r3, #8]
 8008874:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	699b      	ldr	r3, [r3, #24]
 800887c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	6a1b      	ldr	r3, [r3, #32]
 8008884:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	697a      	ldr	r2, [r7, #20]
 800888c:	4313      	orrs	r3, r2
 800888e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008896:	f023 0303 	bic.w	r3, r3, #3
 800889a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	689a      	ldr	r2, [r3, #8]
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	699b      	ldr	r3, [r3, #24]
 80088a4:	021b      	lsls	r3, r3, #8
 80088a6:	4313      	orrs	r3, r2
 80088a8:	693a      	ldr	r2, [r7, #16]
 80088aa:	4313      	orrs	r3, r2
 80088ac:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80088b4:	f023 030c 	bic.w	r3, r3, #12
 80088b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80088c0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80088c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	68da      	ldr	r2, [r3, #12]
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	69db      	ldr	r3, [r3, #28]
 80088ce:	021b      	lsls	r3, r3, #8
 80088d0:	4313      	orrs	r3, r2
 80088d2:	693a      	ldr	r2, [r7, #16]
 80088d4:	4313      	orrs	r3, r2
 80088d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	691b      	ldr	r3, [r3, #16]
 80088dc:	011a      	lsls	r2, r3, #4
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	6a1b      	ldr	r3, [r3, #32]
 80088e2:	031b      	lsls	r3, r3, #12
 80088e4:	4313      	orrs	r3, r2
 80088e6:	693a      	ldr	r2, [r7, #16]
 80088e8:	4313      	orrs	r3, r2
 80088ea:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80088f2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80088fa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	685a      	ldr	r2, [r3, #4]
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	695b      	ldr	r3, [r3, #20]
 8008904:	011b      	lsls	r3, r3, #4
 8008906:	4313      	orrs	r3, r2
 8008908:	68fa      	ldr	r2, [r7, #12]
 800890a:	4313      	orrs	r3, r2
 800890c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	697a      	ldr	r2, [r7, #20]
 8008914:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	693a      	ldr	r2, [r7, #16]
 800891c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	68fa      	ldr	r2, [r7, #12]
 8008924:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2201      	movs	r2, #1
 800892a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2201      	movs	r2, #1
 8008932:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2201      	movs	r2, #1
 800893a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2201      	movs	r2, #1
 8008942:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2201      	movs	r2, #1
 800894a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2201      	movs	r2, #1
 8008952:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008956:	2300      	movs	r3, #0
}
 8008958:	4618      	mov	r0, r3
 800895a:	3718      	adds	r7, #24
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b084      	sub	sp, #16
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008970:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008978:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008980:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008988:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d110      	bne.n	80089b2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008990:	7bfb      	ldrb	r3, [r7, #15]
 8008992:	2b01      	cmp	r3, #1
 8008994:	d102      	bne.n	800899c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008996:	7b7b      	ldrb	r3, [r7, #13]
 8008998:	2b01      	cmp	r3, #1
 800899a:	d001      	beq.n	80089a0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800899c:	2301      	movs	r3, #1
 800899e:	e069      	b.n	8008a74 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2202      	movs	r2, #2
 80089a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2202      	movs	r2, #2
 80089ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80089b0:	e031      	b.n	8008a16 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	2b04      	cmp	r3, #4
 80089b6:	d110      	bne.n	80089da <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80089b8:	7bbb      	ldrb	r3, [r7, #14]
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	d102      	bne.n	80089c4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80089be:	7b3b      	ldrb	r3, [r7, #12]
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d001      	beq.n	80089c8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80089c4:	2301      	movs	r3, #1
 80089c6:	e055      	b.n	8008a74 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2202      	movs	r2, #2
 80089cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2202      	movs	r2, #2
 80089d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80089d8:	e01d      	b.n	8008a16 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80089da:	7bfb      	ldrb	r3, [r7, #15]
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d108      	bne.n	80089f2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80089e0:	7bbb      	ldrb	r3, [r7, #14]
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	d105      	bne.n	80089f2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80089e6:	7b7b      	ldrb	r3, [r7, #13]
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	d102      	bne.n	80089f2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80089ec:	7b3b      	ldrb	r3, [r7, #12]
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	d001      	beq.n	80089f6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80089f2:	2301      	movs	r3, #1
 80089f4:	e03e      	b.n	8008a74 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2202      	movs	r2, #2
 80089fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2202      	movs	r2, #2
 8008a02:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2202      	movs	r2, #2
 8008a0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2202      	movs	r2, #2
 8008a12:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d003      	beq.n	8008a24 <HAL_TIM_Encoder_Start+0xc4>
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	2b04      	cmp	r3, #4
 8008a20:	d008      	beq.n	8008a34 <HAL_TIM_Encoder_Start+0xd4>
 8008a22:	e00f      	b.n	8008a44 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	2201      	movs	r2, #1
 8008a2a:	2100      	movs	r1, #0
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f000 fc67 	bl	8009300 <TIM_CCxChannelCmd>
      break;
 8008a32:	e016      	b.n	8008a62 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	2201      	movs	r2, #1
 8008a3a:	2104      	movs	r1, #4
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f000 fc5f 	bl	8009300 <TIM_CCxChannelCmd>
      break;
 8008a42:	e00e      	b.n	8008a62 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	2201      	movs	r2, #1
 8008a4a:	2100      	movs	r1, #0
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f000 fc57 	bl	8009300 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	2201      	movs	r2, #1
 8008a58:	2104      	movs	r1, #4
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f000 fc50 	bl	8009300 <TIM_CCxChannelCmd>
      break;
 8008a60:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	681a      	ldr	r2, [r3, #0]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f042 0201 	orr.w	r2, r2, #1
 8008a70:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008a72:	2300      	movs	r3, #0
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3710      	adds	r7, #16
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	691b      	ldr	r3, [r3, #16]
 8008a8a:	f003 0302 	and.w	r3, r3, #2
 8008a8e:	2b02      	cmp	r3, #2
 8008a90:	d122      	bne.n	8008ad8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	68db      	ldr	r3, [r3, #12]
 8008a98:	f003 0302 	and.w	r3, r3, #2
 8008a9c:	2b02      	cmp	r3, #2
 8008a9e:	d11b      	bne.n	8008ad8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f06f 0202 	mvn.w	r2, #2
 8008aa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2201      	movs	r2, #1
 8008aae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	699b      	ldr	r3, [r3, #24]
 8008ab6:	f003 0303 	and.w	r3, r3, #3
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d003      	beq.n	8008ac6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 f9b8 	bl	8008e34 <HAL_TIM_IC_CaptureCallback>
 8008ac4:	e005      	b.n	8008ad2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 f9ab 	bl	8008e22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 f9ba 	bl	8008e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	691b      	ldr	r3, [r3, #16]
 8008ade:	f003 0304 	and.w	r3, r3, #4
 8008ae2:	2b04      	cmp	r3, #4
 8008ae4:	d122      	bne.n	8008b2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	f003 0304 	and.w	r3, r3, #4
 8008af0:	2b04      	cmp	r3, #4
 8008af2:	d11b      	bne.n	8008b2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f06f 0204 	mvn.w	r2, #4
 8008afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2202      	movs	r2, #2
 8008b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	699b      	ldr	r3, [r3, #24]
 8008b0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d003      	beq.n	8008b1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 f98e 	bl	8008e34 <HAL_TIM_IC_CaptureCallback>
 8008b18:	e005      	b.n	8008b26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 f981 	bl	8008e22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 f990 	bl	8008e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	691b      	ldr	r3, [r3, #16]
 8008b32:	f003 0308 	and.w	r3, r3, #8
 8008b36:	2b08      	cmp	r3, #8
 8008b38:	d122      	bne.n	8008b80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	68db      	ldr	r3, [r3, #12]
 8008b40:	f003 0308 	and.w	r3, r3, #8
 8008b44:	2b08      	cmp	r3, #8
 8008b46:	d11b      	bne.n	8008b80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f06f 0208 	mvn.w	r2, #8
 8008b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2204      	movs	r2, #4
 8008b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	69db      	ldr	r3, [r3, #28]
 8008b5e:	f003 0303 	and.w	r3, r3, #3
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d003      	beq.n	8008b6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 f964 	bl	8008e34 <HAL_TIM_IC_CaptureCallback>
 8008b6c:	e005      	b.n	8008b7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 f957 	bl	8008e22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 f966 	bl	8008e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	691b      	ldr	r3, [r3, #16]
 8008b86:	f003 0310 	and.w	r3, r3, #16
 8008b8a:	2b10      	cmp	r3, #16
 8008b8c:	d122      	bne.n	8008bd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	68db      	ldr	r3, [r3, #12]
 8008b94:	f003 0310 	and.w	r3, r3, #16
 8008b98:	2b10      	cmp	r3, #16
 8008b9a:	d11b      	bne.n	8008bd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f06f 0210 	mvn.w	r2, #16
 8008ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2208      	movs	r2, #8
 8008baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	69db      	ldr	r3, [r3, #28]
 8008bb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d003      	beq.n	8008bc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 f93a 	bl	8008e34 <HAL_TIM_IC_CaptureCallback>
 8008bc0:	e005      	b.n	8008bce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 f92d 	bl	8008e22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 f93c 	bl	8008e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	691b      	ldr	r3, [r3, #16]
 8008bda:	f003 0301 	and.w	r3, r3, #1
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d10e      	bne.n	8008c00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	68db      	ldr	r3, [r3, #12]
 8008be8:	f003 0301 	and.w	r3, r3, #1
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d107      	bne.n	8008c00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f06f 0201 	mvn.w	r2, #1
 8008bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 f908 	bl	8008e10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	691b      	ldr	r3, [r3, #16]
 8008c06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c0a:	2b80      	cmp	r3, #128	@ 0x80
 8008c0c:	d10e      	bne.n	8008c2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	68db      	ldr	r3, [r3, #12]
 8008c14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c18:	2b80      	cmp	r3, #128	@ 0x80
 8008c1a:	d107      	bne.n	8008c2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f000 fc62 	bl	80094f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	691b      	ldr	r3, [r3, #16]
 8008c32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c36:	2b40      	cmp	r3, #64	@ 0x40
 8008c38:	d10e      	bne.n	8008c58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	68db      	ldr	r3, [r3, #12]
 8008c40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c44:	2b40      	cmp	r3, #64	@ 0x40
 8008c46:	d107      	bne.n	8008c58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 f900 	bl	8008e58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	691b      	ldr	r3, [r3, #16]
 8008c5e:	f003 0320 	and.w	r3, r3, #32
 8008c62:	2b20      	cmp	r3, #32
 8008c64:	d10e      	bne.n	8008c84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	68db      	ldr	r3, [r3, #12]
 8008c6c:	f003 0320 	and.w	r3, r3, #32
 8008c70:	2b20      	cmp	r3, #32
 8008c72:	d107      	bne.n	8008c84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f06f 0220 	mvn.w	r2, #32
 8008c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 fc2d 	bl	80094de <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008c84:	bf00      	nop
 8008c86:	3708      	adds	r7, #8
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b086      	sub	sp, #24
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	60f8      	str	r0, [r7, #12]
 8008c94:	60b9      	str	r1, [r7, #8]
 8008c96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ca2:	2b01      	cmp	r3, #1
 8008ca4:	d101      	bne.n	8008caa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008ca6:	2302      	movs	r3, #2
 8008ca8:	e0ae      	b.n	8008e08 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2201      	movs	r2, #1
 8008cae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2b0c      	cmp	r3, #12
 8008cb6:	f200 809f 	bhi.w	8008df8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008cba:	a201      	add	r2, pc, #4	@ (adr r2, 8008cc0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cc0:	08008cf5 	.word	0x08008cf5
 8008cc4:	08008df9 	.word	0x08008df9
 8008cc8:	08008df9 	.word	0x08008df9
 8008ccc:	08008df9 	.word	0x08008df9
 8008cd0:	08008d35 	.word	0x08008d35
 8008cd4:	08008df9 	.word	0x08008df9
 8008cd8:	08008df9 	.word	0x08008df9
 8008cdc:	08008df9 	.word	0x08008df9
 8008ce0:	08008d77 	.word	0x08008d77
 8008ce4:	08008df9 	.word	0x08008df9
 8008ce8:	08008df9 	.word	0x08008df9
 8008cec:	08008df9 	.word	0x08008df9
 8008cf0:	08008db7 	.word	0x08008db7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	68b9      	ldr	r1, [r7, #8]
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f000 f954 	bl	8008fa8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	699a      	ldr	r2, [r3, #24]
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f042 0208 	orr.w	r2, r2, #8
 8008d0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	699a      	ldr	r2, [r3, #24]
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f022 0204 	bic.w	r2, r2, #4
 8008d1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	6999      	ldr	r1, [r3, #24]
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	691a      	ldr	r2, [r3, #16]
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	430a      	orrs	r2, r1
 8008d30:	619a      	str	r2, [r3, #24]
      break;
 8008d32:	e064      	b.n	8008dfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	68b9      	ldr	r1, [r7, #8]
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f000 f9a4 	bl	8009088 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	699a      	ldr	r2, [r3, #24]
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008d4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	699a      	ldr	r2, [r3, #24]
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008d5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	6999      	ldr	r1, [r3, #24]
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	691b      	ldr	r3, [r3, #16]
 8008d6a:	021a      	lsls	r2, r3, #8
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	430a      	orrs	r2, r1
 8008d72:	619a      	str	r2, [r3, #24]
      break;
 8008d74:	e043      	b.n	8008dfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	68b9      	ldr	r1, [r7, #8]
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f000 f9f7 	bl	8009170 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	69da      	ldr	r2, [r3, #28]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f042 0208 	orr.w	r2, r2, #8
 8008d90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	69da      	ldr	r2, [r3, #28]
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f022 0204 	bic.w	r2, r2, #4
 8008da0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	69d9      	ldr	r1, [r3, #28]
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	691a      	ldr	r2, [r3, #16]
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	430a      	orrs	r2, r1
 8008db2:	61da      	str	r2, [r3, #28]
      break;
 8008db4:	e023      	b.n	8008dfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	68b9      	ldr	r1, [r7, #8]
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f000 fa4b 	bl	8009258 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	69da      	ldr	r2, [r3, #28]
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008dd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	69da      	ldr	r2, [r3, #28]
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008de0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	69d9      	ldr	r1, [r3, #28]
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	691b      	ldr	r3, [r3, #16]
 8008dec:	021a      	lsls	r2, r3, #8
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	430a      	orrs	r2, r1
 8008df4:	61da      	str	r2, [r3, #28]
      break;
 8008df6:	e002      	b.n	8008dfe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	75fb      	strb	r3, [r7, #23]
      break;
 8008dfc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2200      	movs	r2, #0
 8008e02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008e06:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3718      	adds	r7, #24
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b083      	sub	sp, #12
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008e18:	bf00      	nop
 8008e1a:	370c      	adds	r7, #12
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bc80      	pop	{r7}
 8008e20:	4770      	bx	lr

08008e22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e22:	b480      	push	{r7}
 8008e24:	b083      	sub	sp, #12
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008e2a:	bf00      	nop
 8008e2c:	370c      	adds	r7, #12
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bc80      	pop	{r7}
 8008e32:	4770      	bx	lr

08008e34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b083      	sub	sp, #12
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008e3c:	bf00      	nop
 8008e3e:	370c      	adds	r7, #12
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bc80      	pop	{r7}
 8008e44:	4770      	bx	lr

08008e46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008e46:	b480      	push	{r7}
 8008e48:	b083      	sub	sp, #12
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008e4e:	bf00      	nop
 8008e50:	370c      	adds	r7, #12
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bc80      	pop	{r7}
 8008e56:	4770      	bx	lr

08008e58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b083      	sub	sp, #12
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008e60:	bf00      	nop
 8008e62:	370c      	adds	r7, #12
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bc80      	pop	{r7}
 8008e68:	4770      	bx	lr
	...

08008e6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b085      	sub	sp, #20
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	4a3f      	ldr	r2, [pc, #252]	@ (8008f7c <TIM_Base_SetConfig+0x110>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d013      	beq.n	8008eac <TIM_Base_SetConfig+0x40>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e8a:	d00f      	beq.n	8008eac <TIM_Base_SetConfig+0x40>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	4a3c      	ldr	r2, [pc, #240]	@ (8008f80 <TIM_Base_SetConfig+0x114>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d00b      	beq.n	8008eac <TIM_Base_SetConfig+0x40>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	4a3b      	ldr	r2, [pc, #236]	@ (8008f84 <TIM_Base_SetConfig+0x118>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d007      	beq.n	8008eac <TIM_Base_SetConfig+0x40>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	4a3a      	ldr	r2, [pc, #232]	@ (8008f88 <TIM_Base_SetConfig+0x11c>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d003      	beq.n	8008eac <TIM_Base_SetConfig+0x40>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	4a39      	ldr	r2, [pc, #228]	@ (8008f8c <TIM_Base_SetConfig+0x120>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d108      	bne.n	8008ebe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008eb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	68fa      	ldr	r2, [r7, #12]
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	4a2e      	ldr	r2, [pc, #184]	@ (8008f7c <TIM_Base_SetConfig+0x110>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d02b      	beq.n	8008f1e <TIM_Base_SetConfig+0xb2>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ecc:	d027      	beq.n	8008f1e <TIM_Base_SetConfig+0xb2>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	4a2b      	ldr	r2, [pc, #172]	@ (8008f80 <TIM_Base_SetConfig+0x114>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d023      	beq.n	8008f1e <TIM_Base_SetConfig+0xb2>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	4a2a      	ldr	r2, [pc, #168]	@ (8008f84 <TIM_Base_SetConfig+0x118>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d01f      	beq.n	8008f1e <TIM_Base_SetConfig+0xb2>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	4a29      	ldr	r2, [pc, #164]	@ (8008f88 <TIM_Base_SetConfig+0x11c>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d01b      	beq.n	8008f1e <TIM_Base_SetConfig+0xb2>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	4a28      	ldr	r2, [pc, #160]	@ (8008f8c <TIM_Base_SetConfig+0x120>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d017      	beq.n	8008f1e <TIM_Base_SetConfig+0xb2>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	4a27      	ldr	r2, [pc, #156]	@ (8008f90 <TIM_Base_SetConfig+0x124>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d013      	beq.n	8008f1e <TIM_Base_SetConfig+0xb2>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	4a26      	ldr	r2, [pc, #152]	@ (8008f94 <TIM_Base_SetConfig+0x128>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d00f      	beq.n	8008f1e <TIM_Base_SetConfig+0xb2>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	4a25      	ldr	r2, [pc, #148]	@ (8008f98 <TIM_Base_SetConfig+0x12c>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d00b      	beq.n	8008f1e <TIM_Base_SetConfig+0xb2>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	4a24      	ldr	r2, [pc, #144]	@ (8008f9c <TIM_Base_SetConfig+0x130>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d007      	beq.n	8008f1e <TIM_Base_SetConfig+0xb2>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	4a23      	ldr	r2, [pc, #140]	@ (8008fa0 <TIM_Base_SetConfig+0x134>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d003      	beq.n	8008f1e <TIM_Base_SetConfig+0xb2>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	4a22      	ldr	r2, [pc, #136]	@ (8008fa4 <TIM_Base_SetConfig+0x138>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d108      	bne.n	8008f30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	68db      	ldr	r3, [r3, #12]
 8008f2a:	68fa      	ldr	r2, [r7, #12]
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	695b      	ldr	r3, [r3, #20]
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	68fa      	ldr	r2, [r7, #12]
 8008f42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	689a      	ldr	r2, [r3, #8]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	681a      	ldr	r2, [r3, #0]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	4a09      	ldr	r2, [pc, #36]	@ (8008f7c <TIM_Base_SetConfig+0x110>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d003      	beq.n	8008f64 <TIM_Base_SetConfig+0xf8>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	4a0b      	ldr	r2, [pc, #44]	@ (8008f8c <TIM_Base_SetConfig+0x120>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d103      	bne.n	8008f6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	691a      	ldr	r2, [r3, #16]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	615a      	str	r2, [r3, #20]
}
 8008f72:	bf00      	nop
 8008f74:	3714      	adds	r7, #20
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bc80      	pop	{r7}
 8008f7a:	4770      	bx	lr
 8008f7c:	40010000 	.word	0x40010000
 8008f80:	40000400 	.word	0x40000400
 8008f84:	40000800 	.word	0x40000800
 8008f88:	40000c00 	.word	0x40000c00
 8008f8c:	40010400 	.word	0x40010400
 8008f90:	40014000 	.word	0x40014000
 8008f94:	40014400 	.word	0x40014400
 8008f98:	40014800 	.word	0x40014800
 8008f9c:	40001800 	.word	0x40001800
 8008fa0:	40001c00 	.word	0x40001c00
 8008fa4:	40002000 	.word	0x40002000

08008fa8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b087      	sub	sp, #28
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6a1b      	ldr	r3, [r3, #32]
 8008fb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6a1b      	ldr	r3, [r3, #32]
 8008fbc:	f023 0201 	bic.w	r2, r3, #1
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	699b      	ldr	r3, [r3, #24]
 8008fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f023 0303 	bic.w	r3, r3, #3
 8008fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	68fa      	ldr	r2, [r7, #12]
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	f023 0302 	bic.w	r3, r3, #2
 8008ff0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	689b      	ldr	r3, [r3, #8]
 8008ff6:	697a      	ldr	r2, [r7, #20]
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	4a20      	ldr	r2, [pc, #128]	@ (8009080 <TIM_OC1_SetConfig+0xd8>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d003      	beq.n	800900c <TIM_OC1_SetConfig+0x64>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	4a1f      	ldr	r2, [pc, #124]	@ (8009084 <TIM_OC1_SetConfig+0xdc>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d10c      	bne.n	8009026 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	f023 0308 	bic.w	r3, r3, #8
 8009012:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	68db      	ldr	r3, [r3, #12]
 8009018:	697a      	ldr	r2, [r7, #20]
 800901a:	4313      	orrs	r3, r2
 800901c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	f023 0304 	bic.w	r3, r3, #4
 8009024:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	4a15      	ldr	r2, [pc, #84]	@ (8009080 <TIM_OC1_SetConfig+0xd8>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d003      	beq.n	8009036 <TIM_OC1_SetConfig+0x8e>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	4a14      	ldr	r2, [pc, #80]	@ (8009084 <TIM_OC1_SetConfig+0xdc>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d111      	bne.n	800905a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800903c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009044:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	695b      	ldr	r3, [r3, #20]
 800904a:	693a      	ldr	r2, [r7, #16]
 800904c:	4313      	orrs	r3, r2
 800904e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	699b      	ldr	r3, [r3, #24]
 8009054:	693a      	ldr	r2, [r7, #16]
 8009056:	4313      	orrs	r3, r2
 8009058:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	693a      	ldr	r2, [r7, #16]
 800905e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	68fa      	ldr	r2, [r7, #12]
 8009064:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	685a      	ldr	r2, [r3, #4]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	697a      	ldr	r2, [r7, #20]
 8009072:	621a      	str	r2, [r3, #32]
}
 8009074:	bf00      	nop
 8009076:	371c      	adds	r7, #28
 8009078:	46bd      	mov	sp, r7
 800907a:	bc80      	pop	{r7}
 800907c:	4770      	bx	lr
 800907e:	bf00      	nop
 8009080:	40010000 	.word	0x40010000
 8009084:	40010400 	.word	0x40010400

08009088 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009088:	b480      	push	{r7}
 800908a:	b087      	sub	sp, #28
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6a1b      	ldr	r3, [r3, #32]
 8009096:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6a1b      	ldr	r3, [r3, #32]
 800909c:	f023 0210 	bic.w	r2, r3, #16
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	699b      	ldr	r3, [r3, #24]
 80090ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80090be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	021b      	lsls	r3, r3, #8
 80090c6:	68fa      	ldr	r2, [r7, #12]
 80090c8:	4313      	orrs	r3, r2
 80090ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	f023 0320 	bic.w	r3, r3, #32
 80090d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	689b      	ldr	r3, [r3, #8]
 80090d8:	011b      	lsls	r3, r3, #4
 80090da:	697a      	ldr	r2, [r7, #20]
 80090dc:	4313      	orrs	r3, r2
 80090de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	4a21      	ldr	r2, [pc, #132]	@ (8009168 <TIM_OC2_SetConfig+0xe0>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d003      	beq.n	80090f0 <TIM_OC2_SetConfig+0x68>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	4a20      	ldr	r2, [pc, #128]	@ (800916c <TIM_OC2_SetConfig+0xe4>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d10d      	bne.n	800910c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80090f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	68db      	ldr	r3, [r3, #12]
 80090fc:	011b      	lsls	r3, r3, #4
 80090fe:	697a      	ldr	r2, [r7, #20]
 8009100:	4313      	orrs	r3, r2
 8009102:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800910a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	4a16      	ldr	r2, [pc, #88]	@ (8009168 <TIM_OC2_SetConfig+0xe0>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d003      	beq.n	800911c <TIM_OC2_SetConfig+0x94>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	4a15      	ldr	r2, [pc, #84]	@ (800916c <TIM_OC2_SetConfig+0xe4>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d113      	bne.n	8009144 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009122:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800912a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	695b      	ldr	r3, [r3, #20]
 8009130:	009b      	lsls	r3, r3, #2
 8009132:	693a      	ldr	r2, [r7, #16]
 8009134:	4313      	orrs	r3, r2
 8009136:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	699b      	ldr	r3, [r3, #24]
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	693a      	ldr	r2, [r7, #16]
 8009140:	4313      	orrs	r3, r2
 8009142:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	693a      	ldr	r2, [r7, #16]
 8009148:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	68fa      	ldr	r2, [r7, #12]
 800914e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	685a      	ldr	r2, [r3, #4]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	697a      	ldr	r2, [r7, #20]
 800915c:	621a      	str	r2, [r3, #32]
}
 800915e:	bf00      	nop
 8009160:	371c      	adds	r7, #28
 8009162:	46bd      	mov	sp, r7
 8009164:	bc80      	pop	{r7}
 8009166:	4770      	bx	lr
 8009168:	40010000 	.word	0x40010000
 800916c:	40010400 	.word	0x40010400

08009170 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009170:	b480      	push	{r7}
 8009172:	b087      	sub	sp, #28
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6a1b      	ldr	r3, [r3, #32]
 800917e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6a1b      	ldr	r3, [r3, #32]
 8009184:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	69db      	ldr	r3, [r3, #28]
 8009196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800919e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	f023 0303 	bic.w	r3, r3, #3
 80091a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	68fa      	ldr	r2, [r7, #12]
 80091ae:	4313      	orrs	r3, r2
 80091b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80091b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	689b      	ldr	r3, [r3, #8]
 80091be:	021b      	lsls	r3, r3, #8
 80091c0:	697a      	ldr	r2, [r7, #20]
 80091c2:	4313      	orrs	r3, r2
 80091c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	4a21      	ldr	r2, [pc, #132]	@ (8009250 <TIM_OC3_SetConfig+0xe0>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d003      	beq.n	80091d6 <TIM_OC3_SetConfig+0x66>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	4a20      	ldr	r2, [pc, #128]	@ (8009254 <TIM_OC3_SetConfig+0xe4>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d10d      	bne.n	80091f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80091dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	68db      	ldr	r3, [r3, #12]
 80091e2:	021b      	lsls	r3, r3, #8
 80091e4:	697a      	ldr	r2, [r7, #20]
 80091e6:	4313      	orrs	r3, r2
 80091e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80091f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	4a16      	ldr	r2, [pc, #88]	@ (8009250 <TIM_OC3_SetConfig+0xe0>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d003      	beq.n	8009202 <TIM_OC3_SetConfig+0x92>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	4a15      	ldr	r2, [pc, #84]	@ (8009254 <TIM_OC3_SetConfig+0xe4>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d113      	bne.n	800922a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009208:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009210:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	695b      	ldr	r3, [r3, #20]
 8009216:	011b      	lsls	r3, r3, #4
 8009218:	693a      	ldr	r2, [r7, #16]
 800921a:	4313      	orrs	r3, r2
 800921c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	699b      	ldr	r3, [r3, #24]
 8009222:	011b      	lsls	r3, r3, #4
 8009224:	693a      	ldr	r2, [r7, #16]
 8009226:	4313      	orrs	r3, r2
 8009228:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	693a      	ldr	r2, [r7, #16]
 800922e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	68fa      	ldr	r2, [r7, #12]
 8009234:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	685a      	ldr	r2, [r3, #4]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	697a      	ldr	r2, [r7, #20]
 8009242:	621a      	str	r2, [r3, #32]
}
 8009244:	bf00      	nop
 8009246:	371c      	adds	r7, #28
 8009248:	46bd      	mov	sp, r7
 800924a:	bc80      	pop	{r7}
 800924c:	4770      	bx	lr
 800924e:	bf00      	nop
 8009250:	40010000 	.word	0x40010000
 8009254:	40010400 	.word	0x40010400

08009258 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009258:	b480      	push	{r7}
 800925a:	b087      	sub	sp, #28
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6a1b      	ldr	r3, [r3, #32]
 8009266:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6a1b      	ldr	r3, [r3, #32]
 800926c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	69db      	ldr	r3, [r3, #28]
 800927e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800928e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	021b      	lsls	r3, r3, #8
 8009296:	68fa      	ldr	r2, [r7, #12]
 8009298:	4313      	orrs	r3, r2
 800929a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80092a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	689b      	ldr	r3, [r3, #8]
 80092a8:	031b      	lsls	r3, r3, #12
 80092aa:	693a      	ldr	r2, [r7, #16]
 80092ac:	4313      	orrs	r3, r2
 80092ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	4a11      	ldr	r2, [pc, #68]	@ (80092f8 <TIM_OC4_SetConfig+0xa0>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d003      	beq.n	80092c0 <TIM_OC4_SetConfig+0x68>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	4a10      	ldr	r2, [pc, #64]	@ (80092fc <TIM_OC4_SetConfig+0xa4>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d109      	bne.n	80092d4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80092c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	695b      	ldr	r3, [r3, #20]
 80092cc:	019b      	lsls	r3, r3, #6
 80092ce:	697a      	ldr	r2, [r7, #20]
 80092d0:	4313      	orrs	r3, r2
 80092d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	697a      	ldr	r2, [r7, #20]
 80092d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	68fa      	ldr	r2, [r7, #12]
 80092de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	685a      	ldr	r2, [r3, #4]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	693a      	ldr	r2, [r7, #16]
 80092ec:	621a      	str	r2, [r3, #32]
}
 80092ee:	bf00      	nop
 80092f0:	371c      	adds	r7, #28
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bc80      	pop	{r7}
 80092f6:	4770      	bx	lr
 80092f8:	40010000 	.word	0x40010000
 80092fc:	40010400 	.word	0x40010400

08009300 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009300:	b480      	push	{r7}
 8009302:	b087      	sub	sp, #28
 8009304:	af00      	add	r7, sp, #0
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	60b9      	str	r1, [r7, #8]
 800930a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	f003 031f 	and.w	r3, r3, #31
 8009312:	2201      	movs	r2, #1
 8009314:	fa02 f303 	lsl.w	r3, r2, r3
 8009318:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	6a1a      	ldr	r2, [r3, #32]
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	43db      	mvns	r3, r3
 8009322:	401a      	ands	r2, r3
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	6a1a      	ldr	r2, [r3, #32]
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	f003 031f 	and.w	r3, r3, #31
 8009332:	6879      	ldr	r1, [r7, #4]
 8009334:	fa01 f303 	lsl.w	r3, r1, r3
 8009338:	431a      	orrs	r2, r3
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	621a      	str	r2, [r3, #32]
}
 800933e:	bf00      	nop
 8009340:	371c      	adds	r7, #28
 8009342:	46bd      	mov	sp, r7
 8009344:	bc80      	pop	{r7}
 8009346:	4770      	bx	lr

08009348 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009348:	b480      	push	{r7}
 800934a:	b085      	sub	sp, #20
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009358:	2b01      	cmp	r3, #1
 800935a:	d101      	bne.n	8009360 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800935c:	2302      	movs	r3, #2
 800935e:	e05a      	b.n	8009416 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2201      	movs	r2, #1
 8009364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2202      	movs	r2, #2
 800936c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	689b      	ldr	r3, [r3, #8]
 800937e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009386:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	68fa      	ldr	r2, [r7, #12]
 800938e:	4313      	orrs	r3, r2
 8009390:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	68fa      	ldr	r2, [r7, #12]
 8009398:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4a20      	ldr	r2, [pc, #128]	@ (8009420 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d022      	beq.n	80093ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093ac:	d01d      	beq.n	80093ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	4a1c      	ldr	r2, [pc, #112]	@ (8009424 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d018      	beq.n	80093ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4a1a      	ldr	r2, [pc, #104]	@ (8009428 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d013      	beq.n	80093ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4a19      	ldr	r2, [pc, #100]	@ (800942c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d00e      	beq.n	80093ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4a17      	ldr	r2, [pc, #92]	@ (8009430 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d009      	beq.n	80093ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4a16      	ldr	r2, [pc, #88]	@ (8009434 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d004      	beq.n	80093ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4a14      	ldr	r2, [pc, #80]	@ (8009438 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d10c      	bne.n	8009404 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80093f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	685b      	ldr	r3, [r3, #4]
 80093f6:	68ba      	ldr	r2, [r7, #8]
 80093f8:	4313      	orrs	r3, r2
 80093fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	68ba      	ldr	r2, [r7, #8]
 8009402:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2201      	movs	r2, #1
 8009408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2200      	movs	r2, #0
 8009410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009414:	2300      	movs	r3, #0
}
 8009416:	4618      	mov	r0, r3
 8009418:	3714      	adds	r7, #20
 800941a:	46bd      	mov	sp, r7
 800941c:	bc80      	pop	{r7}
 800941e:	4770      	bx	lr
 8009420:	40010000 	.word	0x40010000
 8009424:	40000400 	.word	0x40000400
 8009428:	40000800 	.word	0x40000800
 800942c:	40000c00 	.word	0x40000c00
 8009430:	40010400 	.word	0x40010400
 8009434:	40014000 	.word	0x40014000
 8009438:	40001800 	.word	0x40001800

0800943c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800943c:	b480      	push	{r7}
 800943e:	b085      	sub	sp, #20
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009446:	2300      	movs	r3, #0
 8009448:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009450:	2b01      	cmp	r3, #1
 8009452:	d101      	bne.n	8009458 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009454:	2302      	movs	r3, #2
 8009456:	e03d      	b.n	80094d4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2201      	movs	r2, #1
 800945c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	68db      	ldr	r3, [r3, #12]
 800946a:	4313      	orrs	r3, r2
 800946c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	689b      	ldr	r3, [r3, #8]
 8009478:	4313      	orrs	r3, r2
 800947a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	685b      	ldr	r3, [r3, #4]
 8009486:	4313      	orrs	r3, r2
 8009488:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4313      	orrs	r3, r2
 8009496:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	691b      	ldr	r3, [r3, #16]
 80094a2:	4313      	orrs	r3, r2
 80094a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	695b      	ldr	r3, [r3, #20]
 80094b0:	4313      	orrs	r3, r2
 80094b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	69db      	ldr	r3, [r3, #28]
 80094be:	4313      	orrs	r3, r2
 80094c0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	68fa      	ldr	r2, [r7, #12]
 80094c8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2200      	movs	r2, #0
 80094ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80094d2:	2300      	movs	r3, #0
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3714      	adds	r7, #20
 80094d8:	46bd      	mov	sp, r7
 80094da:	bc80      	pop	{r7}
 80094dc:	4770      	bx	lr

080094de <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80094de:	b480      	push	{r7}
 80094e0:	b083      	sub	sp, #12
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80094e6:	bf00      	nop
 80094e8:	370c      	adds	r7, #12
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bc80      	pop	{r7}
 80094ee:	4770      	bx	lr

080094f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b083      	sub	sp, #12
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80094f8:	bf00      	nop
 80094fa:	370c      	adds	r7, #12
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bc80      	pop	{r7}
 8009500:	4770      	bx	lr
	...

08009504 <malloc>:
 8009504:	4b02      	ldr	r3, [pc, #8]	@ (8009510 <malloc+0xc>)
 8009506:	4601      	mov	r1, r0
 8009508:	6818      	ldr	r0, [r3, #0]
 800950a:	f000 b82d 	b.w	8009568 <_malloc_r>
 800950e:	bf00      	nop
 8009510:	20000020 	.word	0x20000020

08009514 <free>:
 8009514:	4b02      	ldr	r3, [pc, #8]	@ (8009520 <free+0xc>)
 8009516:	4601      	mov	r1, r0
 8009518:	6818      	ldr	r0, [r3, #0]
 800951a:	f000 b8f5 	b.w	8009708 <_free_r>
 800951e:	bf00      	nop
 8009520:	20000020 	.word	0x20000020

08009524 <sbrk_aligned>:
 8009524:	b570      	push	{r4, r5, r6, lr}
 8009526:	4e0f      	ldr	r6, [pc, #60]	@ (8009564 <sbrk_aligned+0x40>)
 8009528:	460c      	mov	r4, r1
 800952a:	6831      	ldr	r1, [r6, #0]
 800952c:	4605      	mov	r5, r0
 800952e:	b911      	cbnz	r1, 8009536 <sbrk_aligned+0x12>
 8009530:	f000 f8ae 	bl	8009690 <_sbrk_r>
 8009534:	6030      	str	r0, [r6, #0]
 8009536:	4621      	mov	r1, r4
 8009538:	4628      	mov	r0, r5
 800953a:	f000 f8a9 	bl	8009690 <_sbrk_r>
 800953e:	1c43      	adds	r3, r0, #1
 8009540:	d103      	bne.n	800954a <sbrk_aligned+0x26>
 8009542:	f04f 34ff 	mov.w	r4, #4294967295
 8009546:	4620      	mov	r0, r4
 8009548:	bd70      	pop	{r4, r5, r6, pc}
 800954a:	1cc4      	adds	r4, r0, #3
 800954c:	f024 0403 	bic.w	r4, r4, #3
 8009550:	42a0      	cmp	r0, r4
 8009552:	d0f8      	beq.n	8009546 <sbrk_aligned+0x22>
 8009554:	1a21      	subs	r1, r4, r0
 8009556:	4628      	mov	r0, r5
 8009558:	f000 f89a 	bl	8009690 <_sbrk_r>
 800955c:	3001      	adds	r0, #1
 800955e:	d1f2      	bne.n	8009546 <sbrk_aligned+0x22>
 8009560:	e7ef      	b.n	8009542 <sbrk_aligned+0x1e>
 8009562:	bf00      	nop
 8009564:	20001908 	.word	0x20001908

08009568 <_malloc_r>:
 8009568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800956c:	1ccd      	adds	r5, r1, #3
 800956e:	f025 0503 	bic.w	r5, r5, #3
 8009572:	3508      	adds	r5, #8
 8009574:	2d0c      	cmp	r5, #12
 8009576:	bf38      	it	cc
 8009578:	250c      	movcc	r5, #12
 800957a:	2d00      	cmp	r5, #0
 800957c:	4606      	mov	r6, r0
 800957e:	db01      	blt.n	8009584 <_malloc_r+0x1c>
 8009580:	42a9      	cmp	r1, r5
 8009582:	d904      	bls.n	800958e <_malloc_r+0x26>
 8009584:	230c      	movs	r3, #12
 8009586:	6033      	str	r3, [r6, #0]
 8009588:	2000      	movs	r0, #0
 800958a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800958e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009664 <_malloc_r+0xfc>
 8009592:	f000 f869 	bl	8009668 <__malloc_lock>
 8009596:	f8d8 3000 	ldr.w	r3, [r8]
 800959a:	461c      	mov	r4, r3
 800959c:	bb44      	cbnz	r4, 80095f0 <_malloc_r+0x88>
 800959e:	4629      	mov	r1, r5
 80095a0:	4630      	mov	r0, r6
 80095a2:	f7ff ffbf 	bl	8009524 <sbrk_aligned>
 80095a6:	1c43      	adds	r3, r0, #1
 80095a8:	4604      	mov	r4, r0
 80095aa:	d158      	bne.n	800965e <_malloc_r+0xf6>
 80095ac:	f8d8 4000 	ldr.w	r4, [r8]
 80095b0:	4627      	mov	r7, r4
 80095b2:	2f00      	cmp	r7, #0
 80095b4:	d143      	bne.n	800963e <_malloc_r+0xd6>
 80095b6:	2c00      	cmp	r4, #0
 80095b8:	d04b      	beq.n	8009652 <_malloc_r+0xea>
 80095ba:	6823      	ldr	r3, [r4, #0]
 80095bc:	4639      	mov	r1, r7
 80095be:	4630      	mov	r0, r6
 80095c0:	eb04 0903 	add.w	r9, r4, r3
 80095c4:	f000 f864 	bl	8009690 <_sbrk_r>
 80095c8:	4581      	cmp	r9, r0
 80095ca:	d142      	bne.n	8009652 <_malloc_r+0xea>
 80095cc:	6821      	ldr	r1, [r4, #0]
 80095ce:	4630      	mov	r0, r6
 80095d0:	1a6d      	subs	r5, r5, r1
 80095d2:	4629      	mov	r1, r5
 80095d4:	f7ff ffa6 	bl	8009524 <sbrk_aligned>
 80095d8:	3001      	adds	r0, #1
 80095da:	d03a      	beq.n	8009652 <_malloc_r+0xea>
 80095dc:	6823      	ldr	r3, [r4, #0]
 80095de:	442b      	add	r3, r5
 80095e0:	6023      	str	r3, [r4, #0]
 80095e2:	f8d8 3000 	ldr.w	r3, [r8]
 80095e6:	685a      	ldr	r2, [r3, #4]
 80095e8:	bb62      	cbnz	r2, 8009644 <_malloc_r+0xdc>
 80095ea:	f8c8 7000 	str.w	r7, [r8]
 80095ee:	e00f      	b.n	8009610 <_malloc_r+0xa8>
 80095f0:	6822      	ldr	r2, [r4, #0]
 80095f2:	1b52      	subs	r2, r2, r5
 80095f4:	d420      	bmi.n	8009638 <_malloc_r+0xd0>
 80095f6:	2a0b      	cmp	r2, #11
 80095f8:	d917      	bls.n	800962a <_malloc_r+0xc2>
 80095fa:	1961      	adds	r1, r4, r5
 80095fc:	42a3      	cmp	r3, r4
 80095fe:	6025      	str	r5, [r4, #0]
 8009600:	bf18      	it	ne
 8009602:	6059      	strne	r1, [r3, #4]
 8009604:	6863      	ldr	r3, [r4, #4]
 8009606:	bf08      	it	eq
 8009608:	f8c8 1000 	streq.w	r1, [r8]
 800960c:	5162      	str	r2, [r4, r5]
 800960e:	604b      	str	r3, [r1, #4]
 8009610:	4630      	mov	r0, r6
 8009612:	f000 f82f 	bl	8009674 <__malloc_unlock>
 8009616:	f104 000b 	add.w	r0, r4, #11
 800961a:	1d23      	adds	r3, r4, #4
 800961c:	f020 0007 	bic.w	r0, r0, #7
 8009620:	1ac2      	subs	r2, r0, r3
 8009622:	bf1c      	itt	ne
 8009624:	1a1b      	subne	r3, r3, r0
 8009626:	50a3      	strne	r3, [r4, r2]
 8009628:	e7af      	b.n	800958a <_malloc_r+0x22>
 800962a:	6862      	ldr	r2, [r4, #4]
 800962c:	42a3      	cmp	r3, r4
 800962e:	bf0c      	ite	eq
 8009630:	f8c8 2000 	streq.w	r2, [r8]
 8009634:	605a      	strne	r2, [r3, #4]
 8009636:	e7eb      	b.n	8009610 <_malloc_r+0xa8>
 8009638:	4623      	mov	r3, r4
 800963a:	6864      	ldr	r4, [r4, #4]
 800963c:	e7ae      	b.n	800959c <_malloc_r+0x34>
 800963e:	463c      	mov	r4, r7
 8009640:	687f      	ldr	r7, [r7, #4]
 8009642:	e7b6      	b.n	80095b2 <_malloc_r+0x4a>
 8009644:	461a      	mov	r2, r3
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	42a3      	cmp	r3, r4
 800964a:	d1fb      	bne.n	8009644 <_malloc_r+0xdc>
 800964c:	2300      	movs	r3, #0
 800964e:	6053      	str	r3, [r2, #4]
 8009650:	e7de      	b.n	8009610 <_malloc_r+0xa8>
 8009652:	230c      	movs	r3, #12
 8009654:	4630      	mov	r0, r6
 8009656:	6033      	str	r3, [r6, #0]
 8009658:	f000 f80c 	bl	8009674 <__malloc_unlock>
 800965c:	e794      	b.n	8009588 <_malloc_r+0x20>
 800965e:	6005      	str	r5, [r0, #0]
 8009660:	e7d6      	b.n	8009610 <_malloc_r+0xa8>
 8009662:	bf00      	nop
 8009664:	2000190c 	.word	0x2000190c

08009668 <__malloc_lock>:
 8009668:	4801      	ldr	r0, [pc, #4]	@ (8009670 <__malloc_lock+0x8>)
 800966a:	f000 b84b 	b.w	8009704 <__retarget_lock_acquire_recursive>
 800966e:	bf00      	nop
 8009670:	20001a4c 	.word	0x20001a4c

08009674 <__malloc_unlock>:
 8009674:	4801      	ldr	r0, [pc, #4]	@ (800967c <__malloc_unlock+0x8>)
 8009676:	f000 b846 	b.w	8009706 <__retarget_lock_release_recursive>
 800967a:	bf00      	nop
 800967c:	20001a4c 	.word	0x20001a4c

08009680 <memset>:
 8009680:	4603      	mov	r3, r0
 8009682:	4402      	add	r2, r0
 8009684:	4293      	cmp	r3, r2
 8009686:	d100      	bne.n	800968a <memset+0xa>
 8009688:	4770      	bx	lr
 800968a:	f803 1b01 	strb.w	r1, [r3], #1
 800968e:	e7f9      	b.n	8009684 <memset+0x4>

08009690 <_sbrk_r>:
 8009690:	b538      	push	{r3, r4, r5, lr}
 8009692:	2300      	movs	r3, #0
 8009694:	4d05      	ldr	r5, [pc, #20]	@ (80096ac <_sbrk_r+0x1c>)
 8009696:	4604      	mov	r4, r0
 8009698:	4608      	mov	r0, r1
 800969a:	602b      	str	r3, [r5, #0]
 800969c:	f7fb fa3e 	bl	8004b1c <_sbrk>
 80096a0:	1c43      	adds	r3, r0, #1
 80096a2:	d102      	bne.n	80096aa <_sbrk_r+0x1a>
 80096a4:	682b      	ldr	r3, [r5, #0]
 80096a6:	b103      	cbz	r3, 80096aa <_sbrk_r+0x1a>
 80096a8:	6023      	str	r3, [r4, #0]
 80096aa:	bd38      	pop	{r3, r4, r5, pc}
 80096ac:	20001a48 	.word	0x20001a48

080096b0 <__errno>:
 80096b0:	4b01      	ldr	r3, [pc, #4]	@ (80096b8 <__errno+0x8>)
 80096b2:	6818      	ldr	r0, [r3, #0]
 80096b4:	4770      	bx	lr
 80096b6:	bf00      	nop
 80096b8:	20000020 	.word	0x20000020

080096bc <__libc_init_array>:
 80096bc:	b570      	push	{r4, r5, r6, lr}
 80096be:	2600      	movs	r6, #0
 80096c0:	4d0c      	ldr	r5, [pc, #48]	@ (80096f4 <__libc_init_array+0x38>)
 80096c2:	4c0d      	ldr	r4, [pc, #52]	@ (80096f8 <__libc_init_array+0x3c>)
 80096c4:	1b64      	subs	r4, r4, r5
 80096c6:	10a4      	asrs	r4, r4, #2
 80096c8:	42a6      	cmp	r6, r4
 80096ca:	d109      	bne.n	80096e0 <__libc_init_array+0x24>
 80096cc:	f000 f864 	bl	8009798 <_init>
 80096d0:	2600      	movs	r6, #0
 80096d2:	4d0a      	ldr	r5, [pc, #40]	@ (80096fc <__libc_init_array+0x40>)
 80096d4:	4c0a      	ldr	r4, [pc, #40]	@ (8009700 <__libc_init_array+0x44>)
 80096d6:	1b64      	subs	r4, r4, r5
 80096d8:	10a4      	asrs	r4, r4, #2
 80096da:	42a6      	cmp	r6, r4
 80096dc:	d105      	bne.n	80096ea <__libc_init_array+0x2e>
 80096de:	bd70      	pop	{r4, r5, r6, pc}
 80096e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80096e4:	4798      	blx	r3
 80096e6:	3601      	adds	r6, #1
 80096e8:	e7ee      	b.n	80096c8 <__libc_init_array+0xc>
 80096ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80096ee:	4798      	blx	r3
 80096f0:	3601      	adds	r6, #1
 80096f2:	e7f2      	b.n	80096da <__libc_init_array+0x1e>
 80096f4:	0800a7d8 	.word	0x0800a7d8
 80096f8:	0800a7d8 	.word	0x0800a7d8
 80096fc:	0800a7d8 	.word	0x0800a7d8
 8009700:	0800a7dc 	.word	0x0800a7dc

08009704 <__retarget_lock_acquire_recursive>:
 8009704:	4770      	bx	lr

08009706 <__retarget_lock_release_recursive>:
 8009706:	4770      	bx	lr

08009708 <_free_r>:
 8009708:	b538      	push	{r3, r4, r5, lr}
 800970a:	4605      	mov	r5, r0
 800970c:	2900      	cmp	r1, #0
 800970e:	d040      	beq.n	8009792 <_free_r+0x8a>
 8009710:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009714:	1f0c      	subs	r4, r1, #4
 8009716:	2b00      	cmp	r3, #0
 8009718:	bfb8      	it	lt
 800971a:	18e4      	addlt	r4, r4, r3
 800971c:	f7ff ffa4 	bl	8009668 <__malloc_lock>
 8009720:	4a1c      	ldr	r2, [pc, #112]	@ (8009794 <_free_r+0x8c>)
 8009722:	6813      	ldr	r3, [r2, #0]
 8009724:	b933      	cbnz	r3, 8009734 <_free_r+0x2c>
 8009726:	6063      	str	r3, [r4, #4]
 8009728:	6014      	str	r4, [r2, #0]
 800972a:	4628      	mov	r0, r5
 800972c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009730:	f7ff bfa0 	b.w	8009674 <__malloc_unlock>
 8009734:	42a3      	cmp	r3, r4
 8009736:	d908      	bls.n	800974a <_free_r+0x42>
 8009738:	6820      	ldr	r0, [r4, #0]
 800973a:	1821      	adds	r1, r4, r0
 800973c:	428b      	cmp	r3, r1
 800973e:	bf01      	itttt	eq
 8009740:	6819      	ldreq	r1, [r3, #0]
 8009742:	685b      	ldreq	r3, [r3, #4]
 8009744:	1809      	addeq	r1, r1, r0
 8009746:	6021      	streq	r1, [r4, #0]
 8009748:	e7ed      	b.n	8009726 <_free_r+0x1e>
 800974a:	461a      	mov	r2, r3
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	b10b      	cbz	r3, 8009754 <_free_r+0x4c>
 8009750:	42a3      	cmp	r3, r4
 8009752:	d9fa      	bls.n	800974a <_free_r+0x42>
 8009754:	6811      	ldr	r1, [r2, #0]
 8009756:	1850      	adds	r0, r2, r1
 8009758:	42a0      	cmp	r0, r4
 800975a:	d10b      	bne.n	8009774 <_free_r+0x6c>
 800975c:	6820      	ldr	r0, [r4, #0]
 800975e:	4401      	add	r1, r0
 8009760:	1850      	adds	r0, r2, r1
 8009762:	4283      	cmp	r3, r0
 8009764:	6011      	str	r1, [r2, #0]
 8009766:	d1e0      	bne.n	800972a <_free_r+0x22>
 8009768:	6818      	ldr	r0, [r3, #0]
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	4408      	add	r0, r1
 800976e:	6010      	str	r0, [r2, #0]
 8009770:	6053      	str	r3, [r2, #4]
 8009772:	e7da      	b.n	800972a <_free_r+0x22>
 8009774:	d902      	bls.n	800977c <_free_r+0x74>
 8009776:	230c      	movs	r3, #12
 8009778:	602b      	str	r3, [r5, #0]
 800977a:	e7d6      	b.n	800972a <_free_r+0x22>
 800977c:	6820      	ldr	r0, [r4, #0]
 800977e:	1821      	adds	r1, r4, r0
 8009780:	428b      	cmp	r3, r1
 8009782:	bf01      	itttt	eq
 8009784:	6819      	ldreq	r1, [r3, #0]
 8009786:	685b      	ldreq	r3, [r3, #4]
 8009788:	1809      	addeq	r1, r1, r0
 800978a:	6021      	streq	r1, [r4, #0]
 800978c:	6063      	str	r3, [r4, #4]
 800978e:	6054      	str	r4, [r2, #4]
 8009790:	e7cb      	b.n	800972a <_free_r+0x22>
 8009792:	bd38      	pop	{r3, r4, r5, pc}
 8009794:	2000190c 	.word	0x2000190c

08009798 <_init>:
 8009798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800979a:	bf00      	nop
 800979c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800979e:	bc08      	pop	{r3}
 80097a0:	469e      	mov	lr, r3
 80097a2:	4770      	bx	lr

080097a4 <_fini>:
 80097a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097a6:	bf00      	nop
 80097a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097aa:	bc08      	pop	{r3}
 80097ac:	469e      	mov	lr, r3
 80097ae:	4770      	bx	lr
