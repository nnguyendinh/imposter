
imposter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007340  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080074c8  080074c8  000084c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074e0  080074e0  00009074  2**0
                  CONTENTS
  4 .ARM          00000008  080074e0  080074e0  000084e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074e8  080074e8  00009074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074e8  080074e8  000084e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080074ec  080074ec  000084ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  080074f0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001570  20000074  08007564  00009074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015e4  08007564  000095e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e58f  00000000  00000000  0000909d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031a8  00000000  00000000  0001762c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f40  00000000  00000000  0001a7d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b9e  00000000  00000000  0001b718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002013c  00000000  00000000  0001c2b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014644  00000000  00000000  0003c3f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bc00f  00000000  00000000  00050a36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010ca45  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004318  00000000  00000000  0010ca88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00110da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080074b0 	.word	0x080074b0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	080074b0 	.word	0x080074b0

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	@ 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__gedf2>:
 8000794:	f04f 3cff 	mov.w	ip, #4294967295
 8000798:	e006      	b.n	80007a8 <__cmpdf2+0x4>
 800079a:	bf00      	nop

0800079c <__ledf2>:
 800079c:	f04f 0c01 	mov.w	ip, #1
 80007a0:	e002      	b.n	80007a8 <__cmpdf2+0x4>
 80007a2:	bf00      	nop

080007a4 <__cmpdf2>:
 80007a4:	f04f 0c01 	mov.w	ip, #1
 80007a8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007be:	d01b      	beq.n	80007f8 <__cmpdf2+0x54>
 80007c0:	b001      	add	sp, #4
 80007c2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007c6:	bf0c      	ite	eq
 80007c8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007cc:	ea91 0f03 	teqne	r1, r3
 80007d0:	bf02      	ittt	eq
 80007d2:	ea90 0f02 	teqeq	r0, r2
 80007d6:	2000      	moveq	r0, #0
 80007d8:	4770      	bxeq	lr
 80007da:	f110 0f00 	cmn.w	r0, #0
 80007de:	ea91 0f03 	teq	r1, r3
 80007e2:	bf58      	it	pl
 80007e4:	4299      	cmppl	r1, r3
 80007e6:	bf08      	it	eq
 80007e8:	4290      	cmpeq	r0, r2
 80007ea:	bf2c      	ite	cs
 80007ec:	17d8      	asrcs	r0, r3, #31
 80007ee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80007f2:	f040 0001 	orr.w	r0, r0, #1
 80007f6:	4770      	bx	lr
 80007f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000800:	d102      	bne.n	8000808 <__cmpdf2+0x64>
 8000802:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000806:	d107      	bne.n	8000818 <__cmpdf2+0x74>
 8000808:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800080c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000810:	d1d6      	bne.n	80007c0 <__cmpdf2+0x1c>
 8000812:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000816:	d0d3      	beq.n	80007c0 <__cmpdf2+0x1c>
 8000818:	f85d 0b04 	ldr.w	r0, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop

08000820 <__aeabi_cdrcmple>:
 8000820:	4684      	mov	ip, r0
 8000822:	4610      	mov	r0, r2
 8000824:	4662      	mov	r2, ip
 8000826:	468c      	mov	ip, r1
 8000828:	4619      	mov	r1, r3
 800082a:	4663      	mov	r3, ip
 800082c:	e000      	b.n	8000830 <__aeabi_cdcmpeq>
 800082e:	bf00      	nop

08000830 <__aeabi_cdcmpeq>:
 8000830:	b501      	push	{r0, lr}
 8000832:	f7ff ffb7 	bl	80007a4 <__cmpdf2>
 8000836:	2800      	cmp	r0, #0
 8000838:	bf48      	it	mi
 800083a:	f110 0f00 	cmnmi.w	r0, #0
 800083e:	bd01      	pop	{r0, pc}

08000840 <__aeabi_dcmpeq>:
 8000840:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000844:	f7ff fff4 	bl	8000830 <__aeabi_cdcmpeq>
 8000848:	bf0c      	ite	eq
 800084a:	2001      	moveq	r0, #1
 800084c:	2000      	movne	r0, #0
 800084e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000852:	bf00      	nop

08000854 <__aeabi_dcmplt>:
 8000854:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000858:	f7ff ffea 	bl	8000830 <__aeabi_cdcmpeq>
 800085c:	bf34      	ite	cc
 800085e:	2001      	movcc	r0, #1
 8000860:	2000      	movcs	r0, #0
 8000862:	f85d fb08 	ldr.w	pc, [sp], #8
 8000866:	bf00      	nop

08000868 <__aeabi_dcmple>:
 8000868:	f84d ed08 	str.w	lr, [sp, #-8]!
 800086c:	f7ff ffe0 	bl	8000830 <__aeabi_cdcmpeq>
 8000870:	bf94      	ite	ls
 8000872:	2001      	movls	r0, #1
 8000874:	2000      	movhi	r0, #0
 8000876:	f85d fb08 	ldr.w	pc, [sp], #8
 800087a:	bf00      	nop

0800087c <__aeabi_dcmpge>:
 800087c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000880:	f7ff ffce 	bl	8000820 <__aeabi_cdrcmple>
 8000884:	bf94      	ite	ls
 8000886:	2001      	movls	r0, #1
 8000888:	2000      	movhi	r0, #0
 800088a:	f85d fb08 	ldr.w	pc, [sp], #8
 800088e:	bf00      	nop

08000890 <__aeabi_dcmpgt>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff ffc4 	bl	8000820 <__aeabi_cdrcmple>
 8000898:	bf34      	ite	cc
 800089a:	2001      	movcc	r0, #1
 800089c:	2000      	movcs	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_d2f>:
 80008a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008ac:	bf24      	itt	cs
 80008ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80008b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80008b6:	d90d      	bls.n	80008d4 <__aeabi_d2f+0x30>
 80008b8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80008bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008c4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80008c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008cc:	bf08      	it	eq
 80008ce:	f020 0001 	biceq.w	r0, r0, #1
 80008d2:	4770      	bx	lr
 80008d4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80008d8:	d121      	bne.n	800091e <__aeabi_d2f+0x7a>
 80008da:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80008de:	bfbc      	itt	lt
 80008e0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80008e4:	4770      	bxlt	lr
 80008e6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008ee:	f1c2 0218 	rsb	r2, r2, #24
 80008f2:	f1c2 0c20 	rsb	ip, r2, #32
 80008f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80008fa:	fa20 f002 	lsr.w	r0, r0, r2
 80008fe:	bf18      	it	ne
 8000900:	f040 0001 	orrne.w	r0, r0, #1
 8000904:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000908:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800090c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000910:	ea40 000c 	orr.w	r0, r0, ip
 8000914:	fa23 f302 	lsr.w	r3, r3, r2
 8000918:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800091c:	e7cc      	b.n	80008b8 <__aeabi_d2f+0x14>
 800091e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000922:	d107      	bne.n	8000934 <__aeabi_d2f+0x90>
 8000924:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000928:	bf1e      	ittt	ne
 800092a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800092e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000932:	4770      	bxne	lr
 8000934:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000938:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800093c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop

08000944 <__aeabi_frsub>:
 8000944:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000948:	e002      	b.n	8000950 <__addsf3>
 800094a:	bf00      	nop

0800094c <__aeabi_fsub>:
 800094c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000950 <__addsf3>:
 8000950:	0042      	lsls	r2, r0, #1
 8000952:	bf1f      	itttt	ne
 8000954:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000958:	ea92 0f03 	teqne	r2, r3
 800095c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000960:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000964:	d06a      	beq.n	8000a3c <__addsf3+0xec>
 8000966:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800096a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800096e:	bfc1      	itttt	gt
 8000970:	18d2      	addgt	r2, r2, r3
 8000972:	4041      	eorgt	r1, r0
 8000974:	4048      	eorgt	r0, r1
 8000976:	4041      	eorgt	r1, r0
 8000978:	bfb8      	it	lt
 800097a:	425b      	neglt	r3, r3
 800097c:	2b19      	cmp	r3, #25
 800097e:	bf88      	it	hi
 8000980:	4770      	bxhi	lr
 8000982:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000986:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800098a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000996:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800099a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800099e:	bf18      	it	ne
 80009a0:	4249      	negne	r1, r1
 80009a2:	ea92 0f03 	teq	r2, r3
 80009a6:	d03f      	beq.n	8000a28 <__addsf3+0xd8>
 80009a8:	f1a2 0201 	sub.w	r2, r2, #1
 80009ac:	fa41 fc03 	asr.w	ip, r1, r3
 80009b0:	eb10 000c 	adds.w	r0, r0, ip
 80009b4:	f1c3 0320 	rsb	r3, r3, #32
 80009b8:	fa01 f103 	lsl.w	r1, r1, r3
 80009bc:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80009c0:	d502      	bpl.n	80009c8 <__addsf3+0x78>
 80009c2:	4249      	negs	r1, r1
 80009c4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009c8:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80009cc:	d313      	bcc.n	80009f6 <__addsf3+0xa6>
 80009ce:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80009d2:	d306      	bcc.n	80009e2 <__addsf3+0x92>
 80009d4:	0840      	lsrs	r0, r0, #1
 80009d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80009da:	f102 0201 	add.w	r2, r2, #1
 80009de:	2afe      	cmp	r2, #254	@ 0xfe
 80009e0:	d251      	bcs.n	8000a86 <__addsf3+0x136>
 80009e2:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80009e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009ea:	bf08      	it	eq
 80009ec:	f020 0001 	biceq.w	r0, r0, #1
 80009f0:	ea40 0003 	orr.w	r0, r0, r3
 80009f4:	4770      	bx	lr
 80009f6:	0049      	lsls	r1, r1, #1
 80009f8:	eb40 0000 	adc.w	r0, r0, r0
 80009fc:	3a01      	subs	r2, #1
 80009fe:	bf28      	it	cs
 8000a00:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a04:	d2ed      	bcs.n	80009e2 <__addsf3+0x92>
 8000a06:	fab0 fc80 	clz	ip, r0
 8000a0a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a0e:	ebb2 020c 	subs.w	r2, r2, ip
 8000a12:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a16:	bfaa      	itet	ge
 8000a18:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a1c:	4252      	neglt	r2, r2
 8000a1e:	4318      	orrge	r0, r3
 8000a20:	bfbc      	itt	lt
 8000a22:	40d0      	lsrlt	r0, r2
 8000a24:	4318      	orrlt	r0, r3
 8000a26:	4770      	bx	lr
 8000a28:	f092 0f00 	teq	r2, #0
 8000a2c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000a30:	bf06      	itte	eq
 8000a32:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000a36:	3201      	addeq	r2, #1
 8000a38:	3b01      	subne	r3, #1
 8000a3a:	e7b5      	b.n	80009a8 <__addsf3+0x58>
 8000a3c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a40:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a44:	bf18      	it	ne
 8000a46:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a4a:	d021      	beq.n	8000a90 <__addsf3+0x140>
 8000a4c:	ea92 0f03 	teq	r2, r3
 8000a50:	d004      	beq.n	8000a5c <__addsf3+0x10c>
 8000a52:	f092 0f00 	teq	r2, #0
 8000a56:	bf08      	it	eq
 8000a58:	4608      	moveq	r0, r1
 8000a5a:	4770      	bx	lr
 8000a5c:	ea90 0f01 	teq	r0, r1
 8000a60:	bf1c      	itt	ne
 8000a62:	2000      	movne	r0, #0
 8000a64:	4770      	bxne	lr
 8000a66:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000a6a:	d104      	bne.n	8000a76 <__addsf3+0x126>
 8000a6c:	0040      	lsls	r0, r0, #1
 8000a6e:	bf28      	it	cs
 8000a70:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000a74:	4770      	bx	lr
 8000a76:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000a7a:	bf3c      	itt	cc
 8000a7c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000a80:	4770      	bxcc	lr
 8000a82:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a86:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000a8a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a8e:	4770      	bx	lr
 8000a90:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a94:	bf16      	itet	ne
 8000a96:	4608      	movne	r0, r1
 8000a98:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a9c:	4601      	movne	r1, r0
 8000a9e:	0242      	lsls	r2, r0, #9
 8000aa0:	bf06      	itte	eq
 8000aa2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aa6:	ea90 0f01 	teqeq	r0, r1
 8000aaa:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_ui2f>:
 8000ab0:	f04f 0300 	mov.w	r3, #0
 8000ab4:	e004      	b.n	8000ac0 <__aeabi_i2f+0x8>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_i2f>:
 8000ab8:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000abc:	bf48      	it	mi
 8000abe:	4240      	negmi	r0, r0
 8000ac0:	ea5f 0c00 	movs.w	ip, r0
 8000ac4:	bf08      	it	eq
 8000ac6:	4770      	bxeq	lr
 8000ac8:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000acc:	4601      	mov	r1, r0
 8000ace:	f04f 0000 	mov.w	r0, #0
 8000ad2:	e01c      	b.n	8000b0e <__aeabi_l2f+0x2a>

08000ad4 <__aeabi_ul2f>:
 8000ad4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ad8:	bf08      	it	eq
 8000ada:	4770      	bxeq	lr
 8000adc:	f04f 0300 	mov.w	r3, #0
 8000ae0:	e00a      	b.n	8000af8 <__aeabi_l2f+0x14>
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_l2f>:
 8000ae4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ae8:	bf08      	it	eq
 8000aea:	4770      	bxeq	lr
 8000aec:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000af0:	d502      	bpl.n	8000af8 <__aeabi_l2f+0x14>
 8000af2:	4240      	negs	r0, r0
 8000af4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af8:	ea5f 0c01 	movs.w	ip, r1
 8000afc:	bf02      	ittt	eq
 8000afe:	4684      	moveq	ip, r0
 8000b00:	4601      	moveq	r1, r0
 8000b02:	2000      	moveq	r0, #0
 8000b04:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000b08:	bf08      	it	eq
 8000b0a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000b0e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000b12:	fabc f28c 	clz	r2, ip
 8000b16:	3a08      	subs	r2, #8
 8000b18:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b1c:	db10      	blt.n	8000b40 <__aeabi_l2f+0x5c>
 8000b1e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b22:	4463      	add	r3, ip
 8000b24:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b28:	f1c2 0220 	rsb	r2, r2, #32
 8000b2c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000b30:	fa20 f202 	lsr.w	r2, r0, r2
 8000b34:	eb43 0002 	adc.w	r0, r3, r2
 8000b38:	bf08      	it	eq
 8000b3a:	f020 0001 	biceq.w	r0, r0, #1
 8000b3e:	4770      	bx	lr
 8000b40:	f102 0220 	add.w	r2, r2, #32
 8000b44:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b48:	f1c2 0220 	rsb	r2, r2, #32
 8000b4c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b50:	fa21 f202 	lsr.w	r2, r1, r2
 8000b54:	eb43 0002 	adc.w	r0, r3, r2
 8000b58:	bf08      	it	eq
 8000b5a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_fmul>:
 8000b60:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000b64:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b68:	bf1e      	ittt	ne
 8000b6a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b6e:	ea92 0f0c 	teqne	r2, ip
 8000b72:	ea93 0f0c 	teqne	r3, ip
 8000b76:	d06f      	beq.n	8000c58 <__aeabi_fmul+0xf8>
 8000b78:	441a      	add	r2, r3
 8000b7a:	ea80 0c01 	eor.w	ip, r0, r1
 8000b7e:	0240      	lsls	r0, r0, #9
 8000b80:	bf18      	it	ne
 8000b82:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b86:	d01e      	beq.n	8000bc6 <__aeabi_fmul+0x66>
 8000b88:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000b8c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b90:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b94:	fba0 3101 	umull	r3, r1, r0, r1
 8000b98:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000b9c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ba0:	bf3e      	ittt	cc
 8000ba2:	0049      	lslcc	r1, r1, #1
 8000ba4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ba8:	005b      	lslcc	r3, r3, #1
 8000baa:	ea40 0001 	orr.w	r0, r0, r1
 8000bae:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000bb2:	2afd      	cmp	r2, #253	@ 0xfd
 8000bb4:	d81d      	bhi.n	8000bf2 <__aeabi_fmul+0x92>
 8000bb6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	4770      	bx	lr
 8000bc6:	f090 0f00 	teq	r0, #0
 8000bca:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000bce:	bf08      	it	eq
 8000bd0:	0249      	lsleq	r1, r1, #9
 8000bd2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bd6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000bda:	3a7f      	subs	r2, #127	@ 0x7f
 8000bdc:	bfc2      	ittt	gt
 8000bde:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000be2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000be6:	4770      	bxgt	lr
 8000be8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bec:	f04f 0300 	mov.w	r3, #0
 8000bf0:	3a01      	subs	r2, #1
 8000bf2:	dc5d      	bgt.n	8000cb0 <__aeabi_fmul+0x150>
 8000bf4:	f112 0f19 	cmn.w	r2, #25
 8000bf8:	bfdc      	itt	le
 8000bfa:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bxle	lr
 8000c00:	f1c2 0200 	rsb	r2, r2, #0
 8000c04:	0041      	lsls	r1, r0, #1
 8000c06:	fa21 f102 	lsr.w	r1, r1, r2
 8000c0a:	f1c2 0220 	rsb	r2, r2, #32
 8000c0e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c12:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c16:	f140 0000 	adc.w	r0, r0, #0
 8000c1a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c1e:	bf08      	it	eq
 8000c20:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c24:	4770      	bx	lr
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000c2e:	bf02      	ittt	eq
 8000c30:	0040      	lsleq	r0, r0, #1
 8000c32:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000c36:	3a01      	subeq	r2, #1
 8000c38:	d0f9      	beq.n	8000c2e <__aeabi_fmul+0xce>
 8000c3a:	ea40 000c 	orr.w	r0, r0, ip
 8000c3e:	f093 0f00 	teq	r3, #0
 8000c42:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c46:	bf02      	ittt	eq
 8000c48:	0049      	lsleq	r1, r1, #1
 8000c4a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000c4e:	3b01      	subeq	r3, #1
 8000c50:	d0f9      	beq.n	8000c46 <__aeabi_fmul+0xe6>
 8000c52:	ea41 010c 	orr.w	r1, r1, ip
 8000c56:	e78f      	b.n	8000b78 <__aeabi_fmul+0x18>
 8000c58:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c5c:	ea92 0f0c 	teq	r2, ip
 8000c60:	bf18      	it	ne
 8000c62:	ea93 0f0c 	teqne	r3, ip
 8000c66:	d00a      	beq.n	8000c7e <__aeabi_fmul+0x11e>
 8000c68:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000c6c:	bf18      	it	ne
 8000c6e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000c72:	d1d8      	bne.n	8000c26 <__aeabi_fmul+0xc6>
 8000c74:	ea80 0001 	eor.w	r0, r0, r1
 8000c78:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000c7c:	4770      	bx	lr
 8000c7e:	f090 0f00 	teq	r0, #0
 8000c82:	bf17      	itett	ne
 8000c84:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000c88:	4608      	moveq	r0, r1
 8000c8a:	f091 0f00 	teqne	r1, #0
 8000c8e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000c92:	d014      	beq.n	8000cbe <__aeabi_fmul+0x15e>
 8000c94:	ea92 0f0c 	teq	r2, ip
 8000c98:	d101      	bne.n	8000c9e <__aeabi_fmul+0x13e>
 8000c9a:	0242      	lsls	r2, r0, #9
 8000c9c:	d10f      	bne.n	8000cbe <__aeabi_fmul+0x15e>
 8000c9e:	ea93 0f0c 	teq	r3, ip
 8000ca2:	d103      	bne.n	8000cac <__aeabi_fmul+0x14c>
 8000ca4:	024b      	lsls	r3, r1, #9
 8000ca6:	bf18      	it	ne
 8000ca8:	4608      	movne	r0, r1
 8000caa:	d108      	bne.n	8000cbe <__aeabi_fmul+0x15e>
 8000cac:	ea80 0001 	eor.w	r0, r0, r1
 8000cb0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000cb4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cbc:	4770      	bx	lr
 8000cbe:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_fdiv>:
 8000cc8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ccc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cd0:	bf1e      	ittt	ne
 8000cd2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cd6:	ea92 0f0c 	teqne	r2, ip
 8000cda:	ea93 0f0c 	teqne	r3, ip
 8000cde:	d069      	beq.n	8000db4 <__aeabi_fdiv+0xec>
 8000ce0:	eba2 0203 	sub.w	r2, r2, r3
 8000ce4:	ea80 0c01 	eor.w	ip, r0, r1
 8000ce8:	0249      	lsls	r1, r1, #9
 8000cea:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cee:	d037      	beq.n	8000d60 <__aeabi_fdiv+0x98>
 8000cf0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000cf4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000cf8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000cfc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d00:	428b      	cmp	r3, r1
 8000d02:	bf38      	it	cc
 8000d04:	005b      	lslcc	r3, r3, #1
 8000d06:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000d0a:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	bf24      	itt	cs
 8000d12:	1a5b      	subcs	r3, r3, r1
 8000d14:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d18:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d1c:	bf24      	itt	cs
 8000d1e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d22:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d26:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d2a:	bf24      	itt	cs
 8000d2c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d30:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d34:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d38:	bf24      	itt	cs
 8000d3a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d3e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d42:	011b      	lsls	r3, r3, #4
 8000d44:	bf18      	it	ne
 8000d46:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d4a:	d1e0      	bne.n	8000d0e <__aeabi_fdiv+0x46>
 8000d4c:	2afd      	cmp	r2, #253	@ 0xfd
 8000d4e:	f63f af50 	bhi.w	8000bf2 <__aeabi_fmul+0x92>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d58:	bf08      	it	eq
 8000d5a:	f020 0001 	biceq.w	r0, r0, #1
 8000d5e:	4770      	bx	lr
 8000d60:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d64:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d68:	327f      	adds	r2, #127	@ 0x7f
 8000d6a:	bfc2      	ittt	gt
 8000d6c:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d70:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d74:	4770      	bxgt	lr
 8000d76:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d7a:	f04f 0300 	mov.w	r3, #0
 8000d7e:	3a01      	subs	r2, #1
 8000d80:	e737      	b.n	8000bf2 <__aeabi_fmul+0x92>
 8000d82:	f092 0f00 	teq	r2, #0
 8000d86:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0040      	lsleq	r0, r0, #1
 8000d8e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d92:	3a01      	subeq	r2, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fdiv+0xc2>
 8000d96:	ea40 000c 	orr.w	r0, r0, ip
 8000d9a:	f093 0f00 	teq	r3, #0
 8000d9e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000da2:	bf02      	ittt	eq
 8000da4:	0049      	lsleq	r1, r1, #1
 8000da6:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000daa:	3b01      	subeq	r3, #1
 8000dac:	d0f9      	beq.n	8000da2 <__aeabi_fdiv+0xda>
 8000dae:	ea41 010c 	orr.w	r1, r1, ip
 8000db2:	e795      	b.n	8000ce0 <__aeabi_fdiv+0x18>
 8000db4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000db8:	ea92 0f0c 	teq	r2, ip
 8000dbc:	d108      	bne.n	8000dd0 <__aeabi_fdiv+0x108>
 8000dbe:	0242      	lsls	r2, r0, #9
 8000dc0:	f47f af7d 	bne.w	8000cbe <__aeabi_fmul+0x15e>
 8000dc4:	ea93 0f0c 	teq	r3, ip
 8000dc8:	f47f af70 	bne.w	8000cac <__aeabi_fmul+0x14c>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	e776      	b.n	8000cbe <__aeabi_fmul+0x15e>
 8000dd0:	ea93 0f0c 	teq	r3, ip
 8000dd4:	d104      	bne.n	8000de0 <__aeabi_fdiv+0x118>
 8000dd6:	024b      	lsls	r3, r1, #9
 8000dd8:	f43f af4c 	beq.w	8000c74 <__aeabi_fmul+0x114>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	e76e      	b.n	8000cbe <__aeabi_fmul+0x15e>
 8000de0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000de4:	bf18      	it	ne
 8000de6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000dea:	d1ca      	bne.n	8000d82 <__aeabi_fdiv+0xba>
 8000dec:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000df0:	f47f af5c 	bne.w	8000cac <__aeabi_fmul+0x14c>
 8000df4:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000df8:	f47f af3c 	bne.w	8000c74 <__aeabi_fmul+0x114>
 8000dfc:	e75f      	b.n	8000cbe <__aeabi_fmul+0x15e>
 8000dfe:	bf00      	nop

08000e00 <__gesf2>:
 8000e00:	f04f 3cff 	mov.w	ip, #4294967295
 8000e04:	e006      	b.n	8000e14 <__cmpsf2+0x4>
 8000e06:	bf00      	nop

08000e08 <__lesf2>:
 8000e08:	f04f 0c01 	mov.w	ip, #1
 8000e0c:	e002      	b.n	8000e14 <__cmpsf2+0x4>
 8000e0e:	bf00      	nop

08000e10 <__cmpsf2>:
 8000e10:	f04f 0c01 	mov.w	ip, #1
 8000e14:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e18:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e24:	bf18      	it	ne
 8000e26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e2a:	d011      	beq.n	8000e50 <__cmpsf2+0x40>
 8000e2c:	b001      	add	sp, #4
 8000e2e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e32:	bf18      	it	ne
 8000e34:	ea90 0f01 	teqne	r0, r1
 8000e38:	bf58      	it	pl
 8000e3a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e3e:	bf88      	it	hi
 8000e40:	17c8      	asrhi	r0, r1, #31
 8000e42:	bf38      	it	cc
 8000e44:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e48:	bf18      	it	ne
 8000e4a:	f040 0001 	orrne.w	r0, r0, #1
 8000e4e:	4770      	bx	lr
 8000e50:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e54:	d102      	bne.n	8000e5c <__cmpsf2+0x4c>
 8000e56:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e5a:	d105      	bne.n	8000e68 <__cmpsf2+0x58>
 8000e5c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e60:	d1e4      	bne.n	8000e2c <__cmpsf2+0x1c>
 8000e62:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e66:	d0e1      	beq.n	8000e2c <__cmpsf2+0x1c>
 8000e68:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop

08000e70 <__aeabi_cfrcmple>:
 8000e70:	4684      	mov	ip, r0
 8000e72:	4608      	mov	r0, r1
 8000e74:	4661      	mov	r1, ip
 8000e76:	e7ff      	b.n	8000e78 <__aeabi_cfcmpeq>

08000e78 <__aeabi_cfcmpeq>:
 8000e78:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e7a:	f7ff ffc9 	bl	8000e10 <__cmpsf2>
 8000e7e:	2800      	cmp	r0, #0
 8000e80:	bf48      	it	mi
 8000e82:	f110 0f00 	cmnmi.w	r0, #0
 8000e86:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e88 <__aeabi_fcmpeq>:
 8000e88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e8c:	f7ff fff4 	bl	8000e78 <__aeabi_cfcmpeq>
 8000e90:	bf0c      	ite	eq
 8000e92:	2001      	moveq	r0, #1
 8000e94:	2000      	movne	r0, #0
 8000e96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e9a:	bf00      	nop

08000e9c <__aeabi_fcmplt>:
 8000e9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ea0:	f7ff ffea 	bl	8000e78 <__aeabi_cfcmpeq>
 8000ea4:	bf34      	ite	cc
 8000ea6:	2001      	movcc	r0, #1
 8000ea8:	2000      	movcs	r0, #0
 8000eaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eae:	bf00      	nop

08000eb0 <__aeabi_fcmple>:
 8000eb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eb4:	f7ff ffe0 	bl	8000e78 <__aeabi_cfcmpeq>
 8000eb8:	bf94      	ite	ls
 8000eba:	2001      	movls	r0, #1
 8000ebc:	2000      	movhi	r0, #0
 8000ebe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_fcmpge>:
 8000ec4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ec8:	f7ff ffd2 	bl	8000e70 <__aeabi_cfrcmple>
 8000ecc:	bf94      	ite	ls
 8000ece:	2001      	movls	r0, #1
 8000ed0:	2000      	movhi	r0, #0
 8000ed2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ed6:	bf00      	nop

08000ed8 <__aeabi_fcmpgt>:
 8000ed8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000edc:	f7ff ffc8 	bl	8000e70 <__aeabi_cfrcmple>
 8000ee0:	bf34      	ite	cc
 8000ee2:	2001      	movcc	r0, #1
 8000ee4:	2000      	movcs	r0, #0
 8000ee6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eea:	bf00      	nop

08000eec <__aeabi_f2uiz>:
 8000eec:	0042      	lsls	r2, r0, #1
 8000eee:	d20e      	bcs.n	8000f0e <__aeabi_f2uiz+0x22>
 8000ef0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000ef4:	d30b      	bcc.n	8000f0e <__aeabi_f2uiz+0x22>
 8000ef6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000efa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000efe:	d409      	bmi.n	8000f14 <__aeabi_f2uiz+0x28>
 8000f00:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f04:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f08:	fa23 f002 	lsr.w	r0, r3, r2
 8000f0c:	4770      	bx	lr
 8000f0e:	f04f 0000 	mov.w	r0, #0
 8000f12:	4770      	bx	lr
 8000f14:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f18:	d101      	bne.n	8000f1e <__aeabi_f2uiz+0x32>
 8000f1a:	0242      	lsls	r2, r0, #9
 8000f1c:	d102      	bne.n	8000f24 <__aeabi_f2uiz+0x38>
 8000f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8000f22:	4770      	bx	lr
 8000f24:	f04f 0000 	mov.w	r0, #0
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop

08000f2c <__aeabi_uldivmod>:
 8000f2c:	b953      	cbnz	r3, 8000f44 <__aeabi_uldivmod+0x18>
 8000f2e:	b94a      	cbnz	r2, 8000f44 <__aeabi_uldivmod+0x18>
 8000f30:	2900      	cmp	r1, #0
 8000f32:	bf08      	it	eq
 8000f34:	2800      	cmpeq	r0, #0
 8000f36:	bf1c      	itt	ne
 8000f38:	f04f 31ff 	movne.w	r1, #4294967295
 8000f3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000f40:	f000 b968 	b.w	8001214 <__aeabi_idiv0>
 8000f44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f4c:	f000 f806 	bl	8000f5c <__udivmoddi4>
 8000f50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f58:	b004      	add	sp, #16
 8000f5a:	4770      	bx	lr

08000f5c <__udivmoddi4>:
 8000f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f60:	9d08      	ldr	r5, [sp, #32]
 8000f62:	460c      	mov	r4, r1
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d14e      	bne.n	8001006 <__udivmoddi4+0xaa>
 8000f68:	4694      	mov	ip, r2
 8000f6a:	458c      	cmp	ip, r1
 8000f6c:	4686      	mov	lr, r0
 8000f6e:	fab2 f282 	clz	r2, r2
 8000f72:	d962      	bls.n	800103a <__udivmoddi4+0xde>
 8000f74:	b14a      	cbz	r2, 8000f8a <__udivmoddi4+0x2e>
 8000f76:	f1c2 0320 	rsb	r3, r2, #32
 8000f7a:	4091      	lsls	r1, r2
 8000f7c:	fa20 f303 	lsr.w	r3, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	4319      	orrs	r1, r3
 8000f86:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f8e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000f92:	fb07 1114 	mls	r1, r7, r4, r1
 8000f96:	fa1f f68c 	uxth.w	r6, ip
 8000f9a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa2:	fb04 f106 	mul.w	r1, r4, r6
 8000fa6:	4299      	cmp	r1, r3
 8000fa8:	d90a      	bls.n	8000fc0 <__udivmoddi4+0x64>
 8000faa:	eb1c 0303 	adds.w	r3, ip, r3
 8000fae:	f104 30ff 	add.w	r0, r4, #4294967295
 8000fb2:	f080 8110 	bcs.w	80011d6 <__udivmoddi4+0x27a>
 8000fb6:	4299      	cmp	r1, r3
 8000fb8:	f240 810d 	bls.w	80011d6 <__udivmoddi4+0x27a>
 8000fbc:	3c02      	subs	r4, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a59      	subs	r1, r3, r1
 8000fc2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fc6:	fb07 1110 	mls	r1, r7, r0, r1
 8000fca:	fb00 f606 	mul.w	r6, r0, r6
 8000fce:	fa1f f38e 	uxth.w	r3, lr
 8000fd2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fd6:	429e      	cmp	r6, r3
 8000fd8:	d90a      	bls.n	8000ff0 <__udivmoddi4+0x94>
 8000fda:	eb1c 0303 	adds.w	r3, ip, r3
 8000fde:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fe2:	f080 80fa 	bcs.w	80011da <__udivmoddi4+0x27e>
 8000fe6:	429e      	cmp	r6, r3
 8000fe8:	f240 80f7 	bls.w	80011da <__udivmoddi4+0x27e>
 8000fec:	4463      	add	r3, ip
 8000fee:	3802      	subs	r0, #2
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	1b9b      	subs	r3, r3, r6
 8000ff4:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ff8:	b11d      	cbz	r5, 8001002 <__udivmoddi4+0xa6>
 8000ffa:	40d3      	lsrs	r3, r2
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	e9c5 3200 	strd	r3, r2, [r5]
 8001002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001006:	428b      	cmp	r3, r1
 8001008:	d905      	bls.n	8001016 <__udivmoddi4+0xba>
 800100a:	b10d      	cbz	r5, 8001010 <__udivmoddi4+0xb4>
 800100c:	e9c5 0100 	strd	r0, r1, [r5]
 8001010:	2100      	movs	r1, #0
 8001012:	4608      	mov	r0, r1
 8001014:	e7f5      	b.n	8001002 <__udivmoddi4+0xa6>
 8001016:	fab3 f183 	clz	r1, r3
 800101a:	2900      	cmp	r1, #0
 800101c:	d146      	bne.n	80010ac <__udivmoddi4+0x150>
 800101e:	42a3      	cmp	r3, r4
 8001020:	d302      	bcc.n	8001028 <__udivmoddi4+0xcc>
 8001022:	4290      	cmp	r0, r2
 8001024:	f0c0 80ee 	bcc.w	8001204 <__udivmoddi4+0x2a8>
 8001028:	1a86      	subs	r6, r0, r2
 800102a:	eb64 0303 	sbc.w	r3, r4, r3
 800102e:	2001      	movs	r0, #1
 8001030:	2d00      	cmp	r5, #0
 8001032:	d0e6      	beq.n	8001002 <__udivmoddi4+0xa6>
 8001034:	e9c5 6300 	strd	r6, r3, [r5]
 8001038:	e7e3      	b.n	8001002 <__udivmoddi4+0xa6>
 800103a:	2a00      	cmp	r2, #0
 800103c:	f040 808f 	bne.w	800115e <__udivmoddi4+0x202>
 8001040:	eba1 040c 	sub.w	r4, r1, ip
 8001044:	2101      	movs	r1, #1
 8001046:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800104a:	fa1f f78c 	uxth.w	r7, ip
 800104e:	fbb4 f6f8 	udiv	r6, r4, r8
 8001052:	fb08 4416 	mls	r4, r8, r6, r4
 8001056:	fb07 f006 	mul.w	r0, r7, r6
 800105a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800105e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001062:	4298      	cmp	r0, r3
 8001064:	d908      	bls.n	8001078 <__udivmoddi4+0x11c>
 8001066:	eb1c 0303 	adds.w	r3, ip, r3
 800106a:	f106 34ff 	add.w	r4, r6, #4294967295
 800106e:	d202      	bcs.n	8001076 <__udivmoddi4+0x11a>
 8001070:	4298      	cmp	r0, r3
 8001072:	f200 80cb 	bhi.w	800120c <__udivmoddi4+0x2b0>
 8001076:	4626      	mov	r6, r4
 8001078:	1a1c      	subs	r4, r3, r0
 800107a:	fbb4 f0f8 	udiv	r0, r4, r8
 800107e:	fb08 4410 	mls	r4, r8, r0, r4
 8001082:	fb00 f707 	mul.w	r7, r0, r7
 8001086:	fa1f f38e 	uxth.w	r3, lr
 800108a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800108e:	429f      	cmp	r7, r3
 8001090:	d908      	bls.n	80010a4 <__udivmoddi4+0x148>
 8001092:	eb1c 0303 	adds.w	r3, ip, r3
 8001096:	f100 34ff 	add.w	r4, r0, #4294967295
 800109a:	d202      	bcs.n	80010a2 <__udivmoddi4+0x146>
 800109c:	429f      	cmp	r7, r3
 800109e:	f200 80ae 	bhi.w	80011fe <__udivmoddi4+0x2a2>
 80010a2:	4620      	mov	r0, r4
 80010a4:	1bdb      	subs	r3, r3, r7
 80010a6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80010aa:	e7a5      	b.n	8000ff8 <__udivmoddi4+0x9c>
 80010ac:	f1c1 0720 	rsb	r7, r1, #32
 80010b0:	408b      	lsls	r3, r1
 80010b2:	fa22 fc07 	lsr.w	ip, r2, r7
 80010b6:	ea4c 0c03 	orr.w	ip, ip, r3
 80010ba:	fa24 f607 	lsr.w	r6, r4, r7
 80010be:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80010c2:	fbb6 f8f9 	udiv	r8, r6, r9
 80010c6:	fa1f fe8c 	uxth.w	lr, ip
 80010ca:	fb09 6618 	mls	r6, r9, r8, r6
 80010ce:	fa20 f307 	lsr.w	r3, r0, r7
 80010d2:	408c      	lsls	r4, r1
 80010d4:	fa00 fa01 	lsl.w	sl, r0, r1
 80010d8:	fb08 f00e 	mul.w	r0, r8, lr
 80010dc:	431c      	orrs	r4, r3
 80010de:	0c23      	lsrs	r3, r4, #16
 80010e0:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80010e4:	4298      	cmp	r0, r3
 80010e6:	fa02 f201 	lsl.w	r2, r2, r1
 80010ea:	d90a      	bls.n	8001102 <__udivmoddi4+0x1a6>
 80010ec:	eb1c 0303 	adds.w	r3, ip, r3
 80010f0:	f108 36ff 	add.w	r6, r8, #4294967295
 80010f4:	f080 8081 	bcs.w	80011fa <__udivmoddi4+0x29e>
 80010f8:	4298      	cmp	r0, r3
 80010fa:	d97e      	bls.n	80011fa <__udivmoddi4+0x29e>
 80010fc:	f1a8 0802 	sub.w	r8, r8, #2
 8001100:	4463      	add	r3, ip
 8001102:	1a1e      	subs	r6, r3, r0
 8001104:	fbb6 f3f9 	udiv	r3, r6, r9
 8001108:	fb09 6613 	mls	r6, r9, r3, r6
 800110c:	fb03 fe0e 	mul.w	lr, r3, lr
 8001110:	b2a4      	uxth	r4, r4
 8001112:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001116:	45a6      	cmp	lr, r4
 8001118:	d908      	bls.n	800112c <__udivmoddi4+0x1d0>
 800111a:	eb1c 0404 	adds.w	r4, ip, r4
 800111e:	f103 30ff 	add.w	r0, r3, #4294967295
 8001122:	d266      	bcs.n	80011f2 <__udivmoddi4+0x296>
 8001124:	45a6      	cmp	lr, r4
 8001126:	d964      	bls.n	80011f2 <__udivmoddi4+0x296>
 8001128:	3b02      	subs	r3, #2
 800112a:	4464      	add	r4, ip
 800112c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001130:	fba0 8302 	umull	r8, r3, r0, r2
 8001134:	eba4 040e 	sub.w	r4, r4, lr
 8001138:	429c      	cmp	r4, r3
 800113a:	46c6      	mov	lr, r8
 800113c:	461e      	mov	r6, r3
 800113e:	d350      	bcc.n	80011e2 <__udivmoddi4+0x286>
 8001140:	d04d      	beq.n	80011de <__udivmoddi4+0x282>
 8001142:	b155      	cbz	r5, 800115a <__udivmoddi4+0x1fe>
 8001144:	ebba 030e 	subs.w	r3, sl, lr
 8001148:	eb64 0406 	sbc.w	r4, r4, r6
 800114c:	fa04 f707 	lsl.w	r7, r4, r7
 8001150:	40cb      	lsrs	r3, r1
 8001152:	431f      	orrs	r7, r3
 8001154:	40cc      	lsrs	r4, r1
 8001156:	e9c5 7400 	strd	r7, r4, [r5]
 800115a:	2100      	movs	r1, #0
 800115c:	e751      	b.n	8001002 <__udivmoddi4+0xa6>
 800115e:	fa0c fc02 	lsl.w	ip, ip, r2
 8001162:	f1c2 0320 	rsb	r3, r2, #32
 8001166:	40d9      	lsrs	r1, r3
 8001168:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800116c:	fa20 f303 	lsr.w	r3, r0, r3
 8001170:	fa00 fe02 	lsl.w	lr, r0, r2
 8001174:	fbb1 f0f8 	udiv	r0, r1, r8
 8001178:	fb08 1110 	mls	r1, r8, r0, r1
 800117c:	4094      	lsls	r4, r2
 800117e:	431c      	orrs	r4, r3
 8001180:	fa1f f78c 	uxth.w	r7, ip
 8001184:	0c23      	lsrs	r3, r4, #16
 8001186:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800118a:	fb00 f107 	mul.w	r1, r0, r7
 800118e:	4299      	cmp	r1, r3
 8001190:	d908      	bls.n	80011a4 <__udivmoddi4+0x248>
 8001192:	eb1c 0303 	adds.w	r3, ip, r3
 8001196:	f100 36ff 	add.w	r6, r0, #4294967295
 800119a:	d22c      	bcs.n	80011f6 <__udivmoddi4+0x29a>
 800119c:	4299      	cmp	r1, r3
 800119e:	d92a      	bls.n	80011f6 <__udivmoddi4+0x29a>
 80011a0:	3802      	subs	r0, #2
 80011a2:	4463      	add	r3, ip
 80011a4:	1a5b      	subs	r3, r3, r1
 80011a6:	fbb3 f1f8 	udiv	r1, r3, r8
 80011aa:	fb08 3311 	mls	r3, r8, r1, r3
 80011ae:	b2a4      	uxth	r4, r4
 80011b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80011b4:	fb01 f307 	mul.w	r3, r1, r7
 80011b8:	42a3      	cmp	r3, r4
 80011ba:	d908      	bls.n	80011ce <__udivmoddi4+0x272>
 80011bc:	eb1c 0404 	adds.w	r4, ip, r4
 80011c0:	f101 36ff 	add.w	r6, r1, #4294967295
 80011c4:	d213      	bcs.n	80011ee <__udivmoddi4+0x292>
 80011c6:	42a3      	cmp	r3, r4
 80011c8:	d911      	bls.n	80011ee <__udivmoddi4+0x292>
 80011ca:	3902      	subs	r1, #2
 80011cc:	4464      	add	r4, ip
 80011ce:	1ae4      	subs	r4, r4, r3
 80011d0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80011d4:	e73b      	b.n	800104e <__udivmoddi4+0xf2>
 80011d6:	4604      	mov	r4, r0
 80011d8:	e6f2      	b.n	8000fc0 <__udivmoddi4+0x64>
 80011da:	4608      	mov	r0, r1
 80011dc:	e708      	b.n	8000ff0 <__udivmoddi4+0x94>
 80011de:	45c2      	cmp	sl, r8
 80011e0:	d2af      	bcs.n	8001142 <__udivmoddi4+0x1e6>
 80011e2:	ebb8 0e02 	subs.w	lr, r8, r2
 80011e6:	eb63 060c 	sbc.w	r6, r3, ip
 80011ea:	3801      	subs	r0, #1
 80011ec:	e7a9      	b.n	8001142 <__udivmoddi4+0x1e6>
 80011ee:	4631      	mov	r1, r6
 80011f0:	e7ed      	b.n	80011ce <__udivmoddi4+0x272>
 80011f2:	4603      	mov	r3, r0
 80011f4:	e79a      	b.n	800112c <__udivmoddi4+0x1d0>
 80011f6:	4630      	mov	r0, r6
 80011f8:	e7d4      	b.n	80011a4 <__udivmoddi4+0x248>
 80011fa:	46b0      	mov	r8, r6
 80011fc:	e781      	b.n	8001102 <__udivmoddi4+0x1a6>
 80011fe:	4463      	add	r3, ip
 8001200:	3802      	subs	r0, #2
 8001202:	e74f      	b.n	80010a4 <__udivmoddi4+0x148>
 8001204:	4606      	mov	r6, r0
 8001206:	4623      	mov	r3, r4
 8001208:	4608      	mov	r0, r1
 800120a:	e711      	b.n	8001030 <__udivmoddi4+0xd4>
 800120c:	3e02      	subs	r6, #2
 800120e:	4463      	add	r3, ip
 8001210:	e732      	b.n	8001078 <__udivmoddi4+0x11c>
 8001212:	bf00      	nop

08001214 <__aeabi_idiv0>:
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop

08001218 <move>:
#include <math.h>

extern int16_t goal_forward_left;
extern int16_t goal_forward_right;

void move(int8_t n) {	// Move n cells forward (with acceleration)
 8001218:	b590      	push	{r4, r7, lr}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]

	setState(MOVING);
 8001222:	2001      	movs	r0, #1
 8001224:	f000 ffdc 	bl	80021e0 <setState>

	setPIDGoalA(0);
 8001228:	2000      	movs	r0, #0
 800122a:	f000 ffc5 	bl	80021b8 <setPIDGoalA>
	setPIDGoalD(MOVE_COUNTS*n);
 800122e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001232:	b29b      	uxth	r3, r3
 8001234:	461a      	mov	r2, r3
 8001236:	0112      	lsls	r2, r2, #4
 8001238:	1ad2      	subs	r2, r2, r3
 800123a:	0092      	lsls	r2, r2, #2
 800123c:	4413      	add	r3, r2
 800123e:	461a      	mov	r2, r3
 8001240:	0091      	lsls	r1, r2, #2
 8001242:	461a      	mov	r2, r3
 8001244:	460b      	mov	r3, r1
 8001246:	4413      	add	r3, r2
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	b29b      	uxth	r3, r3
 800124c:	b21b      	sxth	r3, r3
 800124e:	4618      	mov	r0, r3
 8001250:	f000 ff9e 	bl	8002190 <setPIDGoalD>

	while(!PIDdone())
 8001254:	e013      	b.n	800127e <move+0x66>
	{
		setIRAngle(readIR(IR_LEFT), readIR(IR_RIGHT));
 8001256:	2001      	movs	r0, #1
 8001258:	f000 f9d6 	bl	8001608 <readIR>
 800125c:	4603      	mov	r3, r0
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff fc26 	bl	8000ab0 <__aeabi_ui2f>
 8001264:	4604      	mov	r4, r0
 8001266:	2002      	movs	r0, #2
 8001268:	f000 f9ce 	bl	8001608 <readIR>
 800126c:	4603      	mov	r3, r0
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fc1e 	bl	8000ab0 <__aeabi_ui2f>
 8001274:	4603      	mov	r3, r0
 8001276:	4619      	mov	r1, r3
 8001278:	4620      	mov	r0, r4
 800127a:	f000 fff3 	bl	8002264 <setIRAngle>
	while(!PIDdone())
 800127e:	f001 fd59 	bl	8002d34 <PIDdone>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d0e6      	beq.n	8001256 <move+0x3e>
	}

	resetPID();
 8001288:	f001 fd66 	bl	8002d58 <resetPID>

}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	bd90      	pop	{r4, r7, pc}

08001294 <turn>:

void turn(int8_t n) {	// Make n 90 degree turns (no acceleration)
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]

	setState(TURNING);
 800129e:	2002      	movs	r0, #2
 80012a0:	f000 ff9e 	bl	80021e0 <setState>

	setPIDGoalD(0);
 80012a4:	2000      	movs	r0, #0
 80012a6:	f000 ff73 	bl	8002190 <setPIDGoalD>
	setPIDGoalA(TURN_COUNTS*n);
 80012aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	461a      	mov	r2, r3
 80012b2:	0052      	lsls	r2, r2, #1
 80012b4:	441a      	add	r2, r3
 80012b6:	0112      	lsls	r2, r2, #4
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	461a      	mov	r2, r3
 80012bc:	0091      	lsls	r1, r2, #2
 80012be:	461a      	mov	r2, r3
 80012c0:	460b      	mov	r3, r1
 80012c2:	4413      	add	r3, r2
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	b21b      	sxth	r3, r3
 80012ca:	4618      	mov	r0, r3
 80012cc:	f000 ff74 	bl	80021b8 <setPIDGoalA>

	while(!PIDdone())
 80012d0:	bf00      	nop
 80012d2:	f001 fd2f 	bl	8002d34 <PIDdone>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d0fa      	beq.n	80012d2 <turn+0x3e>
	{

	}

	resetPID();
 80012dc:	f001 fd3c 	bl	8002d58 <resetPID>

}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <Delay_Init>:

#include "main.h"
#include "delay.h"

void Delay_Init(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk))
 80012ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001320 <Delay_Init+0x38>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d10e      	bne.n	8001316 <Delay_Init+0x2e>
    {
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80012f8:	4b09      	ldr	r3, [pc, #36]	@ (8001320 <Delay_Init+0x38>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	4a08      	ldr	r2, [pc, #32]	@ (8001320 <Delay_Init+0x38>)
 80012fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001302:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 8001304:	4b07      	ldr	r3, [pc, #28]	@ (8001324 <Delay_Init+0x3c>)
 8001306:	2200      	movs	r2, #0
 8001308:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800130a:	4b06      	ldr	r3, [pc, #24]	@ (8001324 <Delay_Init+0x3c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a05      	ldr	r2, [pc, #20]	@ (8001324 <Delay_Init+0x3c>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	6013      	str	r3, [r2, #0]
    }
}
 8001316:	bf00      	nop
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	e000edf0 	.word	0xe000edf0
 8001324:	e0001000 	.word	0xe0001000

08001328 <delayMicroseconds>:

// Delays for us microseconds
void delayMicroseconds(uint32_t us)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
    volatile uint32_t startTick = DWT->CYCCNT,
 8001330:	4b09      	ldr	r3, [pc, #36]	@ (8001358 <delayMicroseconds+0x30>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	60fb      	str	r3, [r7, #12]
    delayTicks = us * 16; // Our MCU runs at 16 MHz, so each microsecond lasts 16 clock ticks
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	011b      	lsls	r3, r3, #4
 800133a:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 800133c:	bf00      	nop
 800133e:	4b06      	ldr	r3, [pc, #24]	@ (8001358 <delayMicroseconds+0x30>)
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	1ad2      	subs	r2, r2, r3
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	429a      	cmp	r2, r3
 800134a:	d3f8      	bcc.n	800133e <delayMicroseconds+0x16>
}
 800134c:	bf00      	nop
 800134e:	bf00      	nop
 8001350:	3714      	adds	r7, #20
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr
 8001358:	e0001000 	.word	0xe0001000

0800135c <getRightEncoderCounts>:
 */

#include "main.h"
#include "encoders.h"

int16_t getRightEncoderCounts() {
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
	return (-1*(int16_t) TIM3->CNT);
 8001360:	4b04      	ldr	r3, [pc, #16]	@ (8001374 <getRightEncoderCounts+0x18>)
 8001362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001364:	b29b      	uxth	r3, r3
 8001366:	425b      	negs	r3, r3
 8001368:	b29b      	uxth	r3, r3
 800136a:	b21b      	sxth	r3, r3
}
 800136c:	4618      	mov	r0, r3
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr
 8001374:	40000400 	.word	0x40000400

08001378 <getLeftEncoderCounts>:

int16_t getLeftEncoderCounts() {
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
	return (-1*(int16_t) TIM8->CNT);
 800137c:	4b04      	ldr	r3, [pc, #16]	@ (8001390 <getLeftEncoderCounts+0x18>)
 800137e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001380:	b29b      	uxth	r3, r3
 8001382:	425b      	negs	r3, r3
 8001384:	b29b      	uxth	r3, r3
 8001386:	b21b      	sxth	r3, r3
}
 8001388:	4618      	mov	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr
 8001390:	40010400 	.word	0x40010400

08001394 <resetEncoders>:

void resetEncoders() {
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
	TIM3->CNT = (int16_t) 0;
 8001398:	4b04      	ldr	r3, [pc, #16]	@ (80013ac <resetEncoders+0x18>)
 800139a:	2200      	movs	r2, #0
 800139c:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM8->CNT = (int16_t) 0;
 800139e:	4b04      	ldr	r3, [pc, #16]	@ (80013b0 <resetEncoders+0x1c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr
 80013ac:	40000400 	.word	0x40000400
 80013b0:	40010400 	.word	0x40010400

080013b4 <writeFlash>:
#include "stm32f2xx.h"

uint32_t startAddress = 0x080E0000;

void writeFlash(int16_t horzWall[][16], int16_t vertWall[][17], int16_t discovered[][16])
{
 80013b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013b8:	b088      	sub	sp, #32
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	60f8      	str	r0, [r7, #12]
 80013be:	60b9      	str	r1, [r7, #8]
 80013c0:	607a      	str	r2, [r7, #4]
	uint32_t i, j;
	HAL_FLASH_Unlock();
 80013c2:	f004 f817 	bl	80053f4 <HAL_FLASH_Unlock>

	/* Clear All Pending Flags */
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
 80013c6:	4b4b      	ldr	r3, [pc, #300]	@ (80014f4 <writeFlash+0x140>)
 80013c8:	22f3      	movs	r2, #243	@ 0xf3
 80013ca:	60da      	str	r2, [r3, #12]
	FLASH_Erase_Sector(FLASH_SECTOR_11, VOLTAGE_RANGE_3);
 80013cc:	2102      	movs	r1, #2
 80013ce:	200b      	movs	r0, #11
 80013d0:	f004 f96e 	bl	80056b0 <FLASH_Erase_Sector>

	for (i = 0; i < 16; i++) {
 80013d4:	2300      	movs	r3, #0
 80013d6:	61fb      	str	r3, [r7, #28]
 80013d8:	e023      	b.n	8001422 <writeFlash+0x6e>
		for (j = 0; j < 16; j++) {
 80013da:	2300      	movs	r3, #0
 80013dc:	61bb      	str	r3, [r7, #24]
 80013de:	e01a      	b.n	8001416 <writeFlash+0x62>
	 	 	HAL_FLASH_Program (FLASH_TYPEPROGRAM_HALFWORD, (startAddress + (i*16+j)*4), discovered[i][j]);
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	011a      	lsls	r2, r3, #4
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	4413      	add	r3, r2
 80013e8:	009a      	lsls	r2, r3, #2
 80013ea:	4b43      	ldr	r3, [pc, #268]	@ (80014f8 <writeFlash+0x144>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	18d1      	adds	r1, r2, r3
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	015b      	lsls	r3, r3, #5
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	4413      	add	r3, r2
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80013fe:	b21b      	sxth	r3, r3
 8001400:	17da      	asrs	r2, r3, #31
 8001402:	469a      	mov	sl, r3
 8001404:	4693      	mov	fp, r2
 8001406:	4652      	mov	r2, sl
 8001408:	465b      	mov	r3, fp
 800140a:	2001      	movs	r0, #1
 800140c:	f003 ff9e 	bl	800534c <HAL_FLASH_Program>
		for (j = 0; j < 16; j++) {
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	3301      	adds	r3, #1
 8001414:	61bb      	str	r3, [r7, #24]
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	2b0f      	cmp	r3, #15
 800141a:	d9e1      	bls.n	80013e0 <writeFlash+0x2c>
	for (i = 0; i < 16; i++) {
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	3301      	adds	r3, #1
 8001420:	61fb      	str	r3, [r7, #28]
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	2b0f      	cmp	r3, #15
 8001426:	d9d8      	bls.n	80013da <writeFlash+0x26>
		}
	}

	for (int i = 0; i < 16; i++) {
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	e02c      	b.n	8001488 <writeFlash+0xd4>
        for (int j = 0; j < 17; j++) {
 800142e:	2300      	movs	r3, #0
 8001430:	613b      	str	r3, [r7, #16]
 8001432:	e023      	b.n	800147c <writeFlash+0xc8>
            HAL_FLASH_Program (FLASH_TYPEPROGRAM_HALFWORD, (startAddress + (16*16*4) + (i*17+j)*4), vertWall[i][j]);
 8001434:	697a      	ldr	r2, [r7, #20]
 8001436:	4613      	mov	r3, r2
 8001438:	011b      	lsls	r3, r3, #4
 800143a:	441a      	add	r2, r3
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	4413      	add	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	461a      	mov	r2, r3
 8001444:	4b2c      	ldr	r3, [pc, #176]	@ (80014f8 <writeFlash+0x144>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4413      	add	r3, r2
 800144a:	f503 6180 	add.w	r1, r3, #1024	@ 0x400
 800144e:	697a      	ldr	r2, [r7, #20]
 8001450:	4613      	mov	r3, r2
 8001452:	011b      	lsls	r3, r3, #4
 8001454:	4413      	add	r3, r2
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	461a      	mov	r2, r3
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	4413      	add	r3, r2
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001464:	b21b      	sxth	r3, r3
 8001466:	17da      	asrs	r2, r3, #31
 8001468:	4698      	mov	r8, r3
 800146a:	4691      	mov	r9, r2
 800146c:	4642      	mov	r2, r8
 800146e:	464b      	mov	r3, r9
 8001470:	2001      	movs	r0, #1
 8001472:	f003 ff6b 	bl	800534c <HAL_FLASH_Program>
        for (int j = 0; j < 17; j++) {
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	3301      	adds	r3, #1
 800147a:	613b      	str	r3, [r7, #16]
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	2b10      	cmp	r3, #16
 8001480:	ddd8      	ble.n	8001434 <writeFlash+0x80>
	for (int i = 0; i < 16; i++) {
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	3301      	adds	r3, #1
 8001486:	617b      	str	r3, [r7, #20]
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	2b0f      	cmp	r3, #15
 800148c:	ddcf      	ble.n	800142e <writeFlash+0x7a>
        }
	}

    for (i = 0; i < 17; i++) {
 800148e:	2300      	movs	r3, #0
 8001490:	61fb      	str	r3, [r7, #28]
 8001492:	e025      	b.n	80014e0 <writeFlash+0x12c>
        for (j = 0; j < 16; j++) {
 8001494:	2300      	movs	r3, #0
 8001496:	61bb      	str	r3, [r7, #24]
 8001498:	e01c      	b.n	80014d4 <writeFlash+0x120>
            HAL_FLASH_Program (FLASH_TYPEPROGRAM_HALFWORD, (startAddress + (16*16*4) + (16*17*4) + (i*16+j)*4), horzWall[i][j]);
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	011a      	lsls	r2, r3, #4
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	4413      	add	r3, r2
 80014a2:	009a      	lsls	r2, r3, #2
 80014a4:	4b14      	ldr	r3, [pc, #80]	@ (80014f8 <writeFlash+0x144>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4413      	add	r3, r2
 80014aa:	f503 6104 	add.w	r1, r3, #2112	@ 0x840
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	015b      	lsls	r3, r3, #5
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	4413      	add	r3, r2
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80014bc:	b21b      	sxth	r3, r3
 80014be:	17da      	asrs	r2, r3, #31
 80014c0:	461c      	mov	r4, r3
 80014c2:	4615      	mov	r5, r2
 80014c4:	4622      	mov	r2, r4
 80014c6:	462b      	mov	r3, r5
 80014c8:	2001      	movs	r0, #1
 80014ca:	f003 ff3f 	bl	800534c <HAL_FLASH_Program>
        for (j = 0; j < 16; j++) {
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	3301      	adds	r3, #1
 80014d2:	61bb      	str	r3, [r7, #24]
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	2b0f      	cmp	r3, #15
 80014d8:	d9df      	bls.n	800149a <writeFlash+0xe6>
    for (i = 0; i < 17; i++) {
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3301      	adds	r3, #1
 80014de:	61fb      	str	r3, [r7, #28]
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	2b10      	cmp	r3, #16
 80014e4:	d9d6      	bls.n	8001494 <writeFlash+0xe0>
        }
    }

	HAL_FLASH_Lock();
 80014e6:	f003 ffa7 	bl	8005438 <HAL_FLASH_Lock>
}
 80014ea:	bf00      	nop
 80014ec:	3720      	adds	r7, #32
 80014ee:	46bd      	mov	sp, r7
 80014f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80014f4:	40023c00 	.word	0x40023c00
 80014f8:	20000000 	.word	0x20000000

080014fc <readFlash>:

void readFlash(int16_t horzWall[][16], int16_t vertWall[][17], int16_t discovered[][16])
{
 80014fc:	b480      	push	{r7}
 80014fe:	b089      	sub	sp, #36	@ 0x24
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
	uint32_t i, j;

	for (i = 0; i < 16; i++) {
 8001508:	2300      	movs	r3, #0
 800150a:	61fb      	str	r3, [r7, #28]
 800150c:	e01d      	b.n	800154a <readFlash+0x4e>
		for(j = 0; j < 16; j++) {
 800150e:	2300      	movs	r3, #0
 8001510:	61bb      	str	r3, [r7, #24]
 8001512:	e014      	b.n	800153e <readFlash+0x42>
			discovered[i][j] = *(int16_t *)(startAddress + (i*16+j)*4);
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	011a      	lsls	r2, r3, #4
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	4413      	add	r3, r2
 800151c:	009a      	lsls	r2, r3, #2
 800151e:	4b39      	ldr	r3, [pc, #228]	@ (8001604 <readFlash+0x108>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4413      	add	r3, r2
 8001524:	4619      	mov	r1, r3
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	015b      	lsls	r3, r3, #5
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	4413      	add	r3, r2
 800152e:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(j = 0; j < 16; j++) {
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	3301      	adds	r3, #1
 800153c:	61bb      	str	r3, [r7, #24]
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	2b0f      	cmp	r3, #15
 8001542:	d9e7      	bls.n	8001514 <readFlash+0x18>
	for (i = 0; i < 16; i++) {
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	3301      	adds	r3, #1
 8001548:	61fb      	str	r3, [r7, #28]
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	2b0f      	cmp	r3, #15
 800154e:	d9de      	bls.n	800150e <readFlash+0x12>
		}
	}

    for (int i = 0; i < 16; i++) {
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]
 8001554:	e026      	b.n	80015a4 <readFlash+0xa8>
        for (int j = 0; j < 17; j++) {
 8001556:	2300      	movs	r3, #0
 8001558:	613b      	str	r3, [r7, #16]
 800155a:	e01d      	b.n	8001598 <readFlash+0x9c>
            vertWall[i][j] = *(int16_t *)(startAddress + (16*16*4) + (i*17+j)*4);
 800155c:	697a      	ldr	r2, [r7, #20]
 800155e:	4613      	mov	r3, r2
 8001560:	011b      	lsls	r3, r3, #4
 8001562:	441a      	add	r2, r3
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	4413      	add	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	461a      	mov	r2, r3
 800156c:	4b25      	ldr	r3, [pc, #148]	@ (8001604 <readFlash+0x108>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4413      	add	r3, r2
 8001572:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001576:	4619      	mov	r1, r3
 8001578:	697a      	ldr	r2, [r7, #20]
 800157a:	4613      	mov	r3, r2
 800157c:	011b      	lsls	r3, r3, #4
 800157e:	4413      	add	r3, r2
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	461a      	mov	r2, r3
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	4413      	add	r3, r2
 8001588:	f9b1 1000 	ldrsh.w	r1, [r1]
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        for (int j = 0; j < 17; j++) {
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	3301      	adds	r3, #1
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	2b10      	cmp	r3, #16
 800159c:	ddde      	ble.n	800155c <readFlash+0x60>
    for (int i = 0; i < 16; i++) {
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	3301      	adds	r3, #1
 80015a2:	617b      	str	r3, [r7, #20]
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	2b0f      	cmp	r3, #15
 80015a8:	ddd5      	ble.n	8001556 <readFlash+0x5a>
        }
    }

	for (i = 0; i < 17; i++) {
 80015aa:	2300      	movs	r3, #0
 80015ac:	61fb      	str	r3, [r7, #28]
 80015ae:	e01f      	b.n	80015f0 <readFlash+0xf4>
		for (j = 0; j < 16; j++) {
 80015b0:	2300      	movs	r3, #0
 80015b2:	61bb      	str	r3, [r7, #24]
 80015b4:	e016      	b.n	80015e4 <readFlash+0xe8>
			horzWall[i][j] = *(int16_t *)(startAddress + (16*16*4) + (16*17*4) + (i*16+j)*4);
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	011a      	lsls	r2, r3, #4
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	4413      	add	r3, r2
 80015be:	009a      	lsls	r2, r3, #2
 80015c0:	4b10      	ldr	r3, [pc, #64]	@ (8001604 <readFlash+0x108>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4413      	add	r3, r2
 80015c6:	f503 6304 	add.w	r3, r3, #2112	@ 0x840
 80015ca:	4619      	mov	r1, r3
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	015b      	lsls	r3, r3, #5
 80015d0:	68fa      	ldr	r2, [r7, #12]
 80015d2:	4413      	add	r3, r2
 80015d4:	f9b1 1000 	ldrsh.w	r1, [r1]
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (j = 0; j < 16; j++) {
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	3301      	adds	r3, #1
 80015e2:	61bb      	str	r3, [r7, #24]
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	2b0f      	cmp	r3, #15
 80015e8:	d9e5      	bls.n	80015b6 <readFlash+0xba>
	for (i = 0; i < 17; i++) {
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	3301      	adds	r3, #1
 80015ee:	61fb      	str	r3, [r7, #28]
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	2b10      	cmp	r3, #16
 80015f4:	d9dc      	bls.n	80015b0 <readFlash+0xb4>
		}
	}
}
 80015f6:	bf00      	nop
 80015f8:	bf00      	nop
 80015fa:	3724      	adds	r7, #36	@ 0x24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bc80      	pop	{r7}
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	20000000 	.word	0x20000000

08001608 <readIR>:
uint8_t complete = 0;

uint32_t usDelay = 100;

uint16_t readIR(IR ir)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	71fb      	strb	r3, [r7, #7]
	uint16_t readValue;

	switch(ir)
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	2b03      	cmp	r3, #3
 8001616:	d869      	bhi.n	80016ec <readIR+0xe4>
 8001618:	a201      	add	r2, pc, #4	@ (adr r2, 8001620 <readIR+0x18>)
 800161a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800161e:	bf00      	nop
 8001620:	08001631 	.word	0x08001631
 8001624:	0800165f 	.word	0x0800165f
 8001628:	0800168d 	.word	0x0800168d
 800162c:	080016bb 	.word	0x080016bb
	    {
	        case IR_FORWARD_LEFT:
	        	HAL_GPIO_WritePin(ForwardLeftEmitter_GPIO_Port, ForwardLeftEmitter_Pin, GPIO_PIN_SET);
 8001630:	2201      	movs	r2, #1
 8001632:	2180      	movs	r1, #128	@ 0x80
 8001634:	4830      	ldr	r0, [pc, #192]	@ (80016f8 <readIR+0xf0>)
 8001636:	f004 fa42 	bl	8005abe <HAL_GPIO_WritePin>
	        	delayMicroseconds(usDelay);
 800163a:	4b30      	ldr	r3, [pc, #192]	@ (80016fc <readIR+0xf4>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff fe72 	bl	8001328 <delayMicroseconds>
	        	readValue = analogRead(ir);
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	4618      	mov	r0, r3
 8001648:	f000 f85c 	bl	8001704 <analogRead>
 800164c:	4603      	mov	r3, r0
 800164e:	81fb      	strh	r3, [r7, #14]
	        	HAL_GPIO_WritePin(ForwardLeftEmitter_GPIO_Port, ForwardLeftEmitter_Pin, GPIO_PIN_RESET);
 8001650:	2200      	movs	r2, #0
 8001652:	2180      	movs	r1, #128	@ 0x80
 8001654:	4828      	ldr	r0, [pc, #160]	@ (80016f8 <readIR+0xf0>)
 8001656:	f004 fa32 	bl	8005abe <HAL_GPIO_WritePin>
	        	return readValue;
 800165a:	89fb      	ldrh	r3, [r7, #14]
 800165c:	e047      	b.n	80016ee <readIR+0xe6>
	            break;
	        case IR_LEFT:
	        	HAL_GPIO_WritePin(LeftEmitter_GPIO_Port, LeftEmitter_Pin, GPIO_PIN_SET);
 800165e:	2201      	movs	r2, #1
 8001660:	2110      	movs	r1, #16
 8001662:	4825      	ldr	r0, [pc, #148]	@ (80016f8 <readIR+0xf0>)
 8001664:	f004 fa2b 	bl	8005abe <HAL_GPIO_WritePin>
	        	delayMicroseconds(usDelay);
 8001668:	4b24      	ldr	r3, [pc, #144]	@ (80016fc <readIR+0xf4>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fe5b 	bl	8001328 <delayMicroseconds>
	        	readValue = analogRead(ir);
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	4618      	mov	r0, r3
 8001676:	f000 f845 	bl	8001704 <analogRead>
 800167a:	4603      	mov	r3, r0
 800167c:	81fb      	strh	r3, [r7, #14]
	        	HAL_GPIO_WritePin(LeftEmitter_GPIO_Port, LeftEmitter_Pin, GPIO_PIN_RESET);
 800167e:	2200      	movs	r2, #0
 8001680:	2110      	movs	r1, #16
 8001682:	481d      	ldr	r0, [pc, #116]	@ (80016f8 <readIR+0xf0>)
 8001684:	f004 fa1b 	bl	8005abe <HAL_GPIO_WritePin>
	        	return readValue;
 8001688:	89fb      	ldrh	r3, [r7, #14]
 800168a:	e030      	b.n	80016ee <readIR+0xe6>
	            break;
	        case IR_RIGHT:
	        	HAL_GPIO_WritePin(RightEmitter_GPIO_Port, RightEmitter_Pin, GPIO_PIN_SET);
 800168c:	2201      	movs	r2, #1
 800168e:	2104      	movs	r1, #4
 8001690:	4819      	ldr	r0, [pc, #100]	@ (80016f8 <readIR+0xf0>)
 8001692:	f004 fa14 	bl	8005abe <HAL_GPIO_WritePin>
	        	delayMicroseconds(usDelay);
 8001696:	4b19      	ldr	r3, [pc, #100]	@ (80016fc <readIR+0xf4>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff fe44 	bl	8001328 <delayMicroseconds>
	        	readValue = analogRead(ir);
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f000 f82e 	bl	8001704 <analogRead>
 80016a8:	4603      	mov	r3, r0
 80016aa:	81fb      	strh	r3, [r7, #14]
	        	HAL_GPIO_WritePin(RightEmitter_GPIO_Port, RightEmitter_Pin, GPIO_PIN_RESET);
 80016ac:	2200      	movs	r2, #0
 80016ae:	2104      	movs	r1, #4
 80016b0:	4811      	ldr	r0, [pc, #68]	@ (80016f8 <readIR+0xf0>)
 80016b2:	f004 fa04 	bl	8005abe <HAL_GPIO_WritePin>
	        	return readValue;
 80016b6:	89fb      	ldrh	r3, [r7, #14]
 80016b8:	e019      	b.n	80016ee <readIR+0xe6>
	            break;
	        case IR_FORWARD_RIGHT:
	        	HAL_GPIO_WritePin(ForwardRightEmitter_GPIO_Port, ForwardRightEmitter_Pin, GPIO_PIN_SET);
 80016ba:	2201      	movs	r2, #1
 80016bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016c0:	480f      	ldr	r0, [pc, #60]	@ (8001700 <readIR+0xf8>)
 80016c2:	f004 f9fc 	bl	8005abe <HAL_GPIO_WritePin>
	        	delayMicroseconds(usDelay);
 80016c6:	4b0d      	ldr	r3, [pc, #52]	@ (80016fc <readIR+0xf4>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff fe2c 	bl	8001328 <delayMicroseconds>
	        	readValue = analogRead(ir);
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f000 f816 	bl	8001704 <analogRead>
 80016d8:	4603      	mov	r3, r0
 80016da:	81fb      	strh	r3, [r7, #14]
	        	HAL_GPIO_WritePin(ForwardRightEmitter_GPIO_Port, ForwardRightEmitter_Pin, GPIO_PIN_RESET);
 80016dc:	2200      	movs	r2, #0
 80016de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016e2:	4807      	ldr	r0, [pc, #28]	@ (8001700 <readIR+0xf8>)
 80016e4:	f004 f9eb 	bl	8005abe <HAL_GPIO_WritePin>
	        	return readValue;
 80016e8:	89fb      	ldrh	r3, [r7, #14]
 80016ea:	e000      	b.n	80016ee <readIR+0xe6>
	            break;
	        default:
	            return 0;
 80016ec:	2300      	movs	r3, #0
	    }
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40020000 	.word	0x40020000
 80016fc:	20000004 	.word	0x20000004
 8001700:	40020400 	.word	0x40020400

08001704 <analogRead>:
{
	return readIR(IR_FORWARD_RIGHT);
}

uint16_t analogRead(IR ir)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08a      	sub	sp, #40	@ 0x28
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
    ADC_ChannelConfTypeDef sConfig = {0}; //this initializes the IR ADC [Analog to Digital Converter]
 800170e:	f107 030c 	add.w	r3, r7, #12
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]
 800171a:	60da      	str	r2, [r3, #12]
    ADC_HandleTypeDef *hadc1_ptr = Get_HADC1_Ptr(); //this is a pointer to your hal_adc
 800171c:	f000 fc74 	bl	8002008 <Get_HADC1_Ptr>
 8001720:	61f8      	str	r0, [r7, #28]
    //this pointer will also be used to read the analog value, val = HAL_ADC_GetValue(hadc1_ptr);

    //this picks the IR direction to choose the right ADC.
    switch(ir)
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	2b03      	cmp	r3, #3
 8001726:	d817      	bhi.n	8001758 <analogRead+0x54>
 8001728:	a201      	add	r2, pc, #4	@ (adr r2, 8001730 <analogRead+0x2c>)
 800172a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800172e:	bf00      	nop
 8001730:	08001741 	.word	0x08001741
 8001734:	08001747 	.word	0x08001747
 8001738:	0800174d 	.word	0x0800174d
 800173c:	08001753 	.word	0x08001753
    {
        case IR_FORWARD_LEFT:
            sConfig.Channel = ADC_CHANNEL_6;
 8001740:	2306      	movs	r3, #6
 8001742:	60fb      	str	r3, [r7, #12]
            break;
 8001744:	e00a      	b.n	800175c <analogRead+0x58>
        case IR_LEFT:
            sConfig.Channel = ADC_CHANNEL_5;
 8001746:	2305      	movs	r3, #5
 8001748:	60fb      	str	r3, [r7, #12]
            break;
 800174a:	e007      	b.n	800175c <analogRead+0x58>
        case IR_RIGHT:
            sConfig.Channel = ADC_CHANNEL_11;
 800174c:	230b      	movs	r3, #11
 800174e:	60fb      	str	r3, [r7, #12]
            break;
 8001750:	e004      	b.n	800175c <analogRead+0x58>
        case IR_FORWARD_RIGHT:
            sConfig.Channel = ADC_CHANNEL_10;
 8001752:	230a      	movs	r3, #10
 8001754:	60fb      	str	r3, [r7, #12]
            break;
 8001756:	e001      	b.n	800175c <analogRead+0x58>
        default:
            return 0;
 8001758:	2300      	movs	r3, #0
 800175a:	e032      	b.n	80017c2 <analogRead+0xbe>
    }

    sConfig.Rank = 1;
 800175c:	2301      	movs	r3, #1
 800175e:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]

    // make sure everything was set up correctly
    if (HAL_ADC_ConfigChannel(hadc1_ptr, &sConfig) != HAL_OK)
 8001764:	f107 030c 	add.w	r3, r7, #12
 8001768:	4619      	mov	r1, r3
 800176a:	69f8      	ldr	r0, [r7, #28]
 800176c:	f002 fe5c 	bl	8004428 <HAL_ADC_ConfigChannel>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <analogRead+0x76>
    {
        return 0;
 8001776:	2300      	movs	r3, #0
 8001778:	e023      	b.n	80017c2 <analogRead+0xbe>
    }

    complete = 0;
 800177a:	4b14      	ldr	r3, [pc, #80]	@ (80017cc <analogRead+0xc8>)
 800177c:	2200      	movs	r2, #0
 800177e:	701a      	strb	r2, [r3, #0]

    // start filling up the ADC buffer
    HAL_ADC_Start_DMA(hadc1_ptr, (uint32_t*)adc_buf, NUM_SAMPLES);
 8001780:	2280      	movs	r2, #128	@ 0x80
 8001782:	4913      	ldr	r1, [pc, #76]	@ (80017d0 <analogRead+0xcc>)
 8001784:	69f8      	ldr	r0, [r7, #28]
 8001786:	f002 fd0d 	bl	80041a4 <HAL_ADC_Start_DMA>

    // wait for the buffer to become full
    while (complete == 0)
 800178a:	e000      	b.n	800178e <analogRead+0x8a>
    {
        continue;
 800178c:	bf00      	nop
    while (complete == 0)
 800178e:	4b0f      	ldr	r3, [pc, #60]	@ (80017cc <analogRead+0xc8>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d0fa      	beq.n	800178c <analogRead+0x88>
    }

    uint32_t sum = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	627b      	str	r3, [r7, #36]	@ 0x24
    // calculate the sum of the measurements in order to calculate the average
    uint16_t measurement = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	847b      	strh	r3, [r7, #34]	@ 0x22
    while(measurement < NUM_SAMPLES) //this takes multiple measurements
 800179e:	e00a      	b.n	80017b6 <analogRead+0xb2>
    {
        sum += adc_buf[measurement];
 80017a0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80017a2:	4a0b      	ldr	r2, [pc, #44]	@ (80017d0 <analogRead+0xcc>)
 80017a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017a8:	461a      	mov	r2, r3
 80017aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ac:	4413      	add	r3, r2
 80017ae:	627b      	str	r3, [r7, #36]	@ 0x24
        ++measurement;
 80017b0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80017b2:	3301      	adds	r3, #1
 80017b4:	847b      	strh	r3, [r7, #34]	@ 0x22
    while(measurement < NUM_SAMPLES) //this takes multiple measurements
 80017b6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80017b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80017ba:	d9f1      	bls.n	80017a0 <analogRead+0x9c>
    }

    return sum/NUM_SAMPLES;
 80017bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017be:	09db      	lsrs	r3, r3, #7
 80017c0:	b29b      	uxth	r3, r3
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3728      	adds	r7, #40	@ 0x28
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000190 	.word	0x20000190
 80017d0:	20000090 	.word	0x20000090

080017d4 <HAL_ADC_ConvCpltCallback>:

/*
 This function is called when the ADC buffer is filled
 It stops the ADC and changes our "complete" variable to be "true"
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
    // stop the ADC
    HAL_ADC_Stop_DMA(hadc);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f002 fdbf 	bl	8004360 <HAL_ADC_Stop_DMA>
    complete = 1;
 80017e2:	4b03      	ldr	r3, [pc, #12]	@ (80017f0 <HAL_ADC_ConvCpltCallback+0x1c>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	701a      	strb	r2, [r3, #0]
}
 80017e8:	bf00      	nop
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000190 	.word	0x20000190

080017f4 <solve>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void solve(Algorithm alg) {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	71fb      	strb	r3, [r7, #7]
	Action nextMove = solver(alg);
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	4618      	mov	r0, r3
 8001802:	f001 fe8f 	bl	8003524 <solver>
 8001806:	4603      	mov	r3, r0
 8001808:	73fb      	strb	r3, [r7, #15]
	switch(nextMove) {
 800180a:	7bfb      	ldrb	r3, [r7, #15]
 800180c:	2b03      	cmp	r3, #3
 800180e:	d83d      	bhi.n	800188c <solve+0x98>
 8001810:	a201      	add	r2, pc, #4	@ (adr r2, 8001818 <solve+0x24>)
 8001812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001816:	bf00      	nop
 8001818:	08001879 	.word	0x08001879
 800181c:	08001829 	.word	0x08001829
 8001820:	08001883 	.word	0x08001883
 8001824:	0800188b 	.word	0x0800188b
		case FORWARD:
//			move(1);
			if (alg == FLOODFILL)
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d120      	bne.n	8001870 <solve+0x7c>
			{
				int extra_moves = foresight(); // Already has curr position and heading
 800182e:	f002 f807 	bl	8003840 <foresight>
 8001832:	6178      	str	r0, [r7, #20]
				if (extra_moves > max_forward) {
 8001834:	4b17      	ldr	r3, [pc, #92]	@ (8001894 <solve+0xa0>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	429a      	cmp	r2, r3
 800183c:	dd02      	ble.n	8001844 <solve+0x50>
					extra_moves = max_forward;
 800183e:	4b15      	ldr	r3, [pc, #84]	@ (8001894 <solve+0xa0>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	617b      	str	r3, [r7, #20]
				}
				for (int i = 0; i < extra_moves; i++)
 8001844:	2300      	movs	r3, #0
 8001846:	613b      	str	r3, [r7, #16]
 8001848:	e005      	b.n	8001856 <solve+0x62>
				{
					solver(FLOODFILL);
 800184a:	2001      	movs	r0, #1
 800184c:	f001 fe6a 	bl	8003524 <solver>
				for (int i = 0; i < extra_moves; i++)
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	3301      	adds	r3, #1
 8001854:	613b      	str	r3, [r7, #16]
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	429a      	cmp	r2, r3
 800185c:	dbf5      	blt.n	800184a <solve+0x56>
				}
				move(1 + extra_moves);
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	b2db      	uxtb	r3, r3
 8001862:	3301      	adds	r3, #1
 8001864:	b2db      	uxtb	r3, r3
 8001866:	b25b      	sxtb	r3, r3
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff fcd5 	bl	8001218 <move>
			}
			else
				move(1);
			break;
 800186e:	e00d      	b.n	800188c <solve+0x98>
				move(1);
 8001870:	2001      	movs	r0, #1
 8001872:	f7ff fcd1 	bl	8001218 <move>
			break;
 8001876:	e009      	b.n	800188c <solve+0x98>
		case LEFT:
			turn(-1);
 8001878:	f04f 30ff 	mov.w	r0, #4294967295
 800187c:	f7ff fd0a 	bl	8001294 <turn>
			break;
 8001880:	e004      	b.n	800188c <solve+0x98>
		case RIGHT:
			turn(1);
 8001882:	2001      	movs	r0, #1
 8001884:	f7ff fd06 	bl	8001294 <turn>
			break;
 8001888:	e000      	b.n	800188c <solve+0x98>
		case IDLE:
			break;
 800188a:	bf00      	nop
	}
//	if (readIR(IR_FORWARD_LEFT) > 1200 && readIR(IR_FORWARD_RIGHT) > 1200) {
//		frontCorrection();
//	}
}
 800188c:	bf00      	nop
 800188e:	3718      	adds	r7, #24
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000008 	.word	0x20000008

08001898 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800189c:	f002 fbd0 	bl	8004040 <HAL_Init>

  /* USER CODE BEGIN Init */
  Delay_Init();
 80018a0:	f7ff fd22 	bl	80012e8 <Delay_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018a4:	f000 f8ec 	bl	8001a80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018a8:	f000 faec 	bl	8001e84 <MX_GPIO_Init>
  MX_DMA_Init();
 80018ac:	f000 faca 	bl	8001e44 <MX_DMA_Init>
  MX_ADC1_Init();
 80018b0:	f000 f922 	bl	8001af8 <MX_ADC1_Init>
  MX_TIM3_Init();
 80018b4:	f000 fa1a 	bl	8001cec <MX_TIM3_Init>
  MX_TIM8_Init();
 80018b8:	f000 fa6c 	bl	8001d94 <MX_TIM8_Init>
  MX_TIM1_Init();
 80018bc:	f000 f96e 	bl	8001b9c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80018c0:	213c      	movs	r1, #60	@ 0x3c
 80018c2:	485d      	ldr	r0, [pc, #372]	@ (8001a38 <main+0x1a0>)
 80018c4:	f004 fed8 	bl	8006678 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 80018c8:	213c      	movs	r1, #60	@ 0x3c
 80018ca:	485c      	ldr	r0, [pc, #368]	@ (8001a3c <main+0x1a4>)
 80018cc:	f004 fed4 	bl	8006678 <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80018d0:	2100      	movs	r1, #0
 80018d2:	485b      	ldr	r0, [pc, #364]	@ (8001a40 <main+0x1a8>)
 80018d4:	f004 fd62 	bl	800639c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80018d8:	2104      	movs	r1, #4
 80018da:	4859      	ldr	r0, [pc, #356]	@ (8001a40 <main+0x1a8>)
 80018dc:	f004 fd5e 	bl	800639c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80018e0:	2108      	movs	r1, #8
 80018e2:	4857      	ldr	r0, [pc, #348]	@ (8001a40 <main+0x1a8>)
 80018e4:	f004 fd5a 	bl	800639c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80018e8:	210c      	movs	r1, #12
 80018ea:	4855      	ldr	r0, [pc, #340]	@ (8001a40 <main+0x1a8>)
 80018ec:	f004 fd56 	bl	800639c <HAL_TIM_PWM_Start>

  HAL_GPIO_WritePin(ForwardLeftEmitter_GPIO_Port, ForwardLeftEmitter_Pin, GPIO_PIN_SET);
 80018f0:	2201      	movs	r2, #1
 80018f2:	2180      	movs	r1, #128	@ 0x80
 80018f4:	4853      	ldr	r0, [pc, #332]	@ (8001a44 <main+0x1ac>)
 80018f6:	f004 f8e2 	bl	8005abe <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LeftEmitter_GPIO_Port, LeftEmitter_Pin, GPIO_PIN_SET);
 80018fa:	2201      	movs	r2, #1
 80018fc:	2110      	movs	r1, #16
 80018fe:	4851      	ldr	r0, [pc, #324]	@ (8001a44 <main+0x1ac>)
 8001900:	f004 f8dd 	bl	8005abe <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RightEmitter_GPIO_Port, RightEmitter_Pin, GPIO_PIN_SET);
 8001904:	2201      	movs	r2, #1
 8001906:	2104      	movs	r1, #4
 8001908:	484e      	ldr	r0, [pc, #312]	@ (8001a44 <main+0x1ac>)
 800190a:	f004 f8d8 	bl	8005abe <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ForwardRightEmitter_GPIO_Port, ForwardRightEmitter_Pin, GPIO_PIN_SET);
 800190e:	2201      	movs	r2, #1
 8001910:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001914:	484c      	ldr	r0, [pc, #304]	@ (8001a48 <main+0x1b0>)
 8001916:	f004 f8d2 	bl	8005abe <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  S1 = HAL_GPIO_ReadPin(Button1_GPIO_Port, Switch1_Pin);
 800191a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800191e:	484a      	ldr	r0, [pc, #296]	@ (8001a48 <main+0x1b0>)
 8001920:	f004 f8b6 	bl	8005a90 <HAL_GPIO_ReadPin>
 8001924:	4603      	mov	r3, r0
 8001926:	461a      	mov	r2, r3
 8001928:	4b48      	ldr	r3, [pc, #288]	@ (8001a4c <main+0x1b4>)
 800192a:	701a      	strb	r2, [r3, #0]
	  S2 = HAL_GPIO_ReadPin(Switch2_GPIO_Port, Switch2_Pin);
 800192c:	2104      	movs	r1, #4
 800192e:	4848      	ldr	r0, [pc, #288]	@ (8001a50 <main+0x1b8>)
 8001930:	f004 f8ae 	bl	8005a90 <HAL_GPIO_ReadPin>
 8001934:	4603      	mov	r3, r0
 8001936:	461a      	mov	r2, r3
 8001938:	4b46      	ldr	r3, [pc, #280]	@ (8001a54 <main+0x1bc>)
 800193a:	701a      	strb	r2, [r3, #0]
	  S3 = HAL_GPIO_ReadPin(Switch3_GPIO_Port, Switch3_Pin);
 800193c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001940:	4840      	ldr	r0, [pc, #256]	@ (8001a44 <main+0x1ac>)
 8001942:	f004 f8a5 	bl	8005a90 <HAL_GPIO_ReadPin>
 8001946:	4603      	mov	r3, r0
 8001948:	461a      	mov	r2, r3
 800194a:	4b43      	ldr	r3, [pc, #268]	@ (8001a58 <main+0x1c0>)
 800194c:	701a      	strb	r2, [r3, #0]
	  S4 = HAL_GPIO_ReadPin(Switch4_GPIO_Port, Switch4_Pin);
 800194e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001952:	483d      	ldr	r0, [pc, #244]	@ (8001a48 <main+0x1b0>)
 8001954:	f004 f89c 	bl	8005a90 <HAL_GPIO_ReadPin>
 8001958:	4603      	mov	r3, r0
 800195a:	461a      	mov	r2, r3
 800195c:	4b3f      	ldr	r3, [pc, #252]	@ (8001a5c <main+0x1c4>)
 800195e:	701a      	strb	r2, [r3, #0]
	  B1 = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 8001960:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001964:	4838      	ldr	r0, [pc, #224]	@ (8001a48 <main+0x1b0>)
 8001966:	f004 f893 	bl	8005a90 <HAL_GPIO_ReadPin>
 800196a:	4603      	mov	r3, r0
 800196c:	461a      	mov	r2, r3
 800196e:	4b3c      	ldr	r3, [pc, #240]	@ (8001a60 <main+0x1c8>)
 8001970:	701a      	strb	r2, [r3, #0]
	  B2 = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 8001972:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001976:	4834      	ldr	r0, [pc, #208]	@ (8001a48 <main+0x1b0>)
 8001978:	f004 f88a 	bl	8005a90 <HAL_GPIO_ReadPin>
 800197c:	4603      	mov	r3, r0
 800197e:	461a      	mov	r2, r3
 8001980:	4b38      	ldr	r3, [pc, #224]	@ (8001a64 <main+0x1cc>)
 8001982:	701a      	strb	r2, [r3, #0]
//
//	  HAL_GPIO_WritePin(R_LED_GPIO_Port, R_LED_Pin, GPIO_PIN_SET);
//	  HAL_GPIO_WritePin(Y_LED_GPIO_Port, Y_LED_Pin, GPIO_PIN_SET);
//	  HAL_GPIO_WritePin(G_LED_GPIO_Port, G_LED_Pin, GPIO_PIN_SET);

	  forwardLeftIRvalue = readIR(IR_FORWARD_LEFT);
 8001984:	2000      	movs	r0, #0
 8001986:	f7ff fe3f 	bl	8001608 <readIR>
 800198a:	4603      	mov	r3, r0
 800198c:	b21a      	sxth	r2, r3
 800198e:	4b36      	ldr	r3, [pc, #216]	@ (8001a68 <main+0x1d0>)
 8001990:	801a      	strh	r2, [r3, #0]
	  leftIRvalue = readIR(IR_LEFT);
 8001992:	2001      	movs	r0, #1
 8001994:	f7ff fe38 	bl	8001608 <readIR>
 8001998:	4603      	mov	r3, r0
 800199a:	b21a      	sxth	r2, r3
 800199c:	4b33      	ldr	r3, [pc, #204]	@ (8001a6c <main+0x1d4>)
 800199e:	801a      	strh	r2, [r3, #0]
	  rightIRvalue = readIR(IR_RIGHT);
 80019a0:	2002      	movs	r0, #2
 80019a2:	f7ff fe31 	bl	8001608 <readIR>
 80019a6:	4603      	mov	r3, r0
 80019a8:	b21a      	sxth	r2, r3
 80019aa:	4b31      	ldr	r3, [pc, #196]	@ (8001a70 <main+0x1d8>)
 80019ac:	801a      	strh	r2, [r3, #0]
	  forwardRightIRvalue = readIR(IR_FORWARD_RIGHT);
 80019ae:	2003      	movs	r0, #3
 80019b0:	f7ff fe2a 	bl	8001608 <readIR>
 80019b4:	4603      	mov	r3, r0
 80019b6:	b21a      	sxth	r2, r3
 80019b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001a74 <main+0x1dc>)
 80019ba:	801a      	strh	r2, [r3, #0]

    if (B1 == GPIO_PIN_SET)
 80019bc:	4b28      	ldr	r3, [pc, #160]	@ (8001a60 <main+0x1c8>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d11d      	bne.n	8001a00 <main+0x168>
	  {
		  setIRGoals(readIR(IR_FORWARD_LEFT), readIR(IR_FORWARD_RIGHT), readIR(IR_LEFT), readIR(IR_RIGHT));
 80019c4:	2000      	movs	r0, #0
 80019c6:	f7ff fe1f 	bl	8001608 <readIR>
 80019ca:	4603      	mov	r3, r0
 80019cc:	b21c      	sxth	r4, r3
 80019ce:	2003      	movs	r0, #3
 80019d0:	f7ff fe1a 	bl	8001608 <readIR>
 80019d4:	4603      	mov	r3, r0
 80019d6:	b21d      	sxth	r5, r3
 80019d8:	2001      	movs	r0, #1
 80019da:	f7ff fe15 	bl	8001608 <readIR>
 80019de:	4603      	mov	r3, r0
 80019e0:	b21e      	sxth	r6, r3
 80019e2:	2002      	movs	r0, #2
 80019e4:	f7ff fe10 	bl	8001608 <readIR>
 80019e8:	4603      	mov	r3, r0
 80019ea:	b21b      	sxth	r3, r3
 80019ec:	4632      	mov	r2, r6
 80019ee:	4629      	mov	r1, r5
 80019f0:	4620      	mov	r0, r4
 80019f2:	f000 fc05 	bl	8002200 <setIRGoals>
		  irOffset_Set = 1;
 80019f6:	4b20      	ldr	r3, [pc, #128]	@ (8001a78 <main+0x1e0>)
 80019f8:	2201      	movs	r2, #1
 80019fa:	801a      	strh	r2, [r3, #0]
		  loadMaze();
 80019fc:	f002 f820 	bl	8003a40 <loadMaze>
	  }

	  if (B2 == GPIO_PIN_SET)
 8001a00:	4b18      	ldr	r3, [pc, #96]	@ (8001a64 <main+0x1cc>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d102      	bne.n	8001a0e <main+0x176>
	  {
		  start_pressed = 1;
 8001a08:	4b1c      	ldr	r3, [pc, #112]	@ (8001a7c <main+0x1e4>)
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	801a      	strh	r2, [r3, #0]
	  }

    if (start_pressed)
 8001a0e:	4b1b      	ldr	r3, [pc, #108]	@ (8001a7c <main+0x1e4>)
 8001a10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d080      	beq.n	800191a <main+0x82>
	  {
		  move(0);
 8001a18:	2000      	movs	r0, #0
 8001a1a:	f7ff fbfd 	bl	8001218 <move>

		  if (S4 == GPIO_PIN_SET)
 8001a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a5c <main+0x1c4>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d103      	bne.n	8001a2e <main+0x196>
			  solve(FLOODFILL);
 8001a26:	2001      	movs	r0, #1
 8001a28:	f7ff fee4 	bl	80017f4 <solve>
 8001a2c:	e775      	b.n	800191a <main+0x82>
		  else
			  solve(DEAD);
 8001a2e:	2000      	movs	r0, #0
 8001a30:	f7ff fee0 	bl	80017f4 <solve>
	  S1 = HAL_GPIO_ReadPin(Button1_GPIO_Port, Switch1_Pin);
 8001a34:	e771      	b.n	800191a <main+0x82>
 8001a36:	bf00      	nop
 8001a38:	20000284 	.word	0x20000284
 8001a3c:	200002cc 	.word	0x200002cc
 8001a40:	2000023c 	.word	0x2000023c
 8001a44:	40020000 	.word	0x40020000
 8001a48:	40020400 	.word	0x40020400
 8001a4c:	20000314 	.word	0x20000314
 8001a50:	40020c00 	.word	0x40020c00
 8001a54:	20000315 	.word	0x20000315
 8001a58:	20000316 	.word	0x20000316
 8001a5c:	20000317 	.word	0x20000317
 8001a60:	20000318 	.word	0x20000318
 8001a64:	20000319 	.word	0x20000319
 8001a68:	2000031c 	.word	0x2000031c
 8001a6c:	2000031e 	.word	0x2000031e
 8001a70:	20000320 	.word	0x20000320
 8001a74:	20000322 	.word	0x20000322
 8001a78:	20000324 	.word	0x20000324
 8001a7c:	2000031a 	.word	0x2000031a

08001a80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b092      	sub	sp, #72	@ 0x48
 8001a84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a86:	f107 0318 	add.w	r3, r7, #24
 8001a8a:	2230      	movs	r2, #48	@ 0x30
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f005 fc82 	bl	8007398 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a94:	1d3b      	adds	r3, r7, #4
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	605a      	str	r2, [r3, #4]
 8001a9c:	609a      	str	r2, [r3, #8]
 8001a9e:	60da      	str	r2, [r3, #12]
 8001aa0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001aaa:	2310      	movs	r3, #16
 8001aac:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ab2:	f107 0318 	add.w	r3, r7, #24
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f004 f81a 	bl	8005af0 <HAL_RCC_OscConfig>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001ac2:	f000 faab 	bl	800201c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ac6:	230f      	movs	r3, #15
 8001ac8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001aca:	2300      	movs	r3, #0
 8001acc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ada:	1d3b      	adds	r3, r7, #4
 8001adc:	2100      	movs	r1, #0
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f004 fa5a 	bl	8005f98 <HAL_RCC_ClockConfig>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001aea:	f000 fa97 	bl	800201c <Error_Handler>
  }
}
 8001aee:	bf00      	nop
 8001af0:	3748      	adds	r7, #72	@ 0x48
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
	...

08001af8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001afe:	463b      	mov	r3, r7
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001b0a:	4b21      	ldr	r3, [pc, #132]	@ (8001b90 <MX_ADC1_Init+0x98>)
 8001b0c:	4a21      	ldr	r2, [pc, #132]	@ (8001b94 <MX_ADC1_Init+0x9c>)
 8001b0e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001b10:	4b1f      	ldr	r3, [pc, #124]	@ (8001b90 <MX_ADC1_Init+0x98>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b16:	4b1e      	ldr	r3, [pc, #120]	@ (8001b90 <MX_ADC1_Init+0x98>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001b1c:	4b1c      	ldr	r3, [pc, #112]	@ (8001b90 <MX_ADC1_Init+0x98>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b22:	4b1b      	ldr	r3, [pc, #108]	@ (8001b90 <MX_ADC1_Init+0x98>)
 8001b24:	2201      	movs	r2, #1
 8001b26:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b28:	4b19      	ldr	r3, [pc, #100]	@ (8001b90 <MX_ADC1_Init+0x98>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b30:	4b17      	ldr	r3, [pc, #92]	@ (8001b90 <MX_ADC1_Init+0x98>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b36:	4b16      	ldr	r3, [pc, #88]	@ (8001b90 <MX_ADC1_Init+0x98>)
 8001b38:	4a17      	ldr	r2, [pc, #92]	@ (8001b98 <MX_ADC1_Init+0xa0>)
 8001b3a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b3c:	4b14      	ldr	r3, [pc, #80]	@ (8001b90 <MX_ADC1_Init+0x98>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b42:	4b13      	ldr	r3, [pc, #76]	@ (8001b90 <MX_ADC1_Init+0x98>)
 8001b44:	2201      	movs	r2, #1
 8001b46:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001b48:	4b11      	ldr	r3, [pc, #68]	@ (8001b90 <MX_ADC1_Init+0x98>)
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b50:	4b0f      	ldr	r3, [pc, #60]	@ (8001b90 <MX_ADC1_Init+0x98>)
 8001b52:	2201      	movs	r2, #1
 8001b54:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b56:	480e      	ldr	r0, [pc, #56]	@ (8001b90 <MX_ADC1_Init+0x98>)
 8001b58:	f002 fae0 	bl	800411c <HAL_ADC_Init>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001b62:	f000 fa5b 	bl	800201c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001b66:	2305      	movs	r3, #5
 8001b68:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b72:	463b      	mov	r3, r7
 8001b74:	4619      	mov	r1, r3
 8001b76:	4806      	ldr	r0, [pc, #24]	@ (8001b90 <MX_ADC1_Init+0x98>)
 8001b78:	f002 fc56 	bl	8004428 <HAL_ADC_ConfigChannel>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001b82:	f000 fa4b 	bl	800201c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b86:	bf00      	nop
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000194 	.word	0x20000194
 8001b94:	40012000 	.word	0x40012000
 8001b98:	0f000001 	.word	0x0f000001

08001b9c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b092      	sub	sp, #72	@ 0x48
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]
 8001bbc:	615a      	str	r2, [r3, #20]
 8001bbe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001bc0:	1d3b      	adds	r3, r7, #4
 8001bc2:	2220      	movs	r2, #32
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f005 fbe6 	bl	8007398 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001bcc:	4b45      	ldr	r3, [pc, #276]	@ (8001ce4 <MX_TIM1_Init+0x148>)
 8001bce:	4a46      	ldr	r2, [pc, #280]	@ (8001ce8 <MX_TIM1_Init+0x14c>)
 8001bd0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001bd2:	4b44      	ldr	r3, [pc, #272]	@ (8001ce4 <MX_TIM1_Init+0x148>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd8:	4b42      	ldr	r3, [pc, #264]	@ (8001ce4 <MX_TIM1_Init+0x148>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3199;
 8001bde:	4b41      	ldr	r3, [pc, #260]	@ (8001ce4 <MX_TIM1_Init+0x148>)
 8001be0:	f640 427f 	movw	r2, #3199	@ 0xc7f
 8001be4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001be6:	4b3f      	ldr	r3, [pc, #252]	@ (8001ce4 <MX_TIM1_Init+0x148>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bec:	4b3d      	ldr	r3, [pc, #244]	@ (8001ce4 <MX_TIM1_Init+0x148>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf2:	4b3c      	ldr	r3, [pc, #240]	@ (8001ce4 <MX_TIM1_Init+0x148>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001bf8:	483a      	ldr	r0, [pc, #232]	@ (8001ce4 <MX_TIM1_Init+0x148>)
 8001bfa:	f004 fb7f 	bl	80062fc <HAL_TIM_PWM_Init>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001c04:	f000 fa0a 	bl	800201c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c10:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001c14:	4619      	mov	r1, r3
 8001c16:	4833      	ldr	r0, [pc, #204]	@ (8001ce4 <MX_TIM1_Init+0x148>)
 8001c18:	f005 fa22 	bl	8007060 <HAL_TIMEx_MasterConfigSynchronization>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001c22:	f000 f9fb 	bl	800201c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c26:	2360      	movs	r3, #96	@ 0x60
 8001c28:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c32:	2300      	movs	r3, #0
 8001c34:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c36:	2300      	movs	r3, #0
 8001c38:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c46:	2200      	movs	r2, #0
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4826      	ldr	r0, [pc, #152]	@ (8001ce4 <MX_TIM1_Init+0x148>)
 8001c4c:	f004 feaa 	bl	80069a4 <HAL_TIM_PWM_ConfigChannel>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001c56:	f000 f9e1 	bl	800201c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c5e:	2204      	movs	r2, #4
 8001c60:	4619      	mov	r1, r3
 8001c62:	4820      	ldr	r0, [pc, #128]	@ (8001ce4 <MX_TIM1_Init+0x148>)
 8001c64:	f004 fe9e 	bl	80069a4 <HAL_TIM_PWM_ConfigChannel>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001c6e:	f000 f9d5 	bl	800201c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c76:	2208      	movs	r2, #8
 8001c78:	4619      	mov	r1, r3
 8001c7a:	481a      	ldr	r0, [pc, #104]	@ (8001ce4 <MX_TIM1_Init+0x148>)
 8001c7c:	f004 fe92 	bl	80069a4 <HAL_TIM_PWM_ConfigChannel>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8001c86:	f000 f9c9 	bl	800201c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c8e:	220c      	movs	r2, #12
 8001c90:	4619      	mov	r1, r3
 8001c92:	4814      	ldr	r0, [pc, #80]	@ (8001ce4 <MX_TIM1_Init+0x148>)
 8001c94:	f004 fe86 	bl	80069a4 <HAL_TIM_PWM_ConfigChannel>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8001c9e:	f000 f9bd 	bl	800201c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001caa:	2300      	movs	r3, #0
 8001cac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cb6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001cc0:	1d3b      	adds	r3, r7, #4
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4807      	ldr	r0, [pc, #28]	@ (8001ce4 <MX_TIM1_Init+0x148>)
 8001cc6:	f005 fa45 	bl	8007154 <HAL_TIMEx_ConfigBreakDeadTime>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001cd0:	f000 f9a4 	bl	800201c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001cd4:	4803      	ldr	r0, [pc, #12]	@ (8001ce4 <MX_TIM1_Init+0x148>)
 8001cd6:	f002 f823 	bl	8003d20 <HAL_TIM_MspPostInit>

}
 8001cda:	bf00      	nop
 8001cdc:	3748      	adds	r7, #72	@ 0x48
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	2000023c 	.word	0x2000023c
 8001ce8:	40010000 	.word	0x40010000

08001cec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08c      	sub	sp, #48	@ 0x30
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001cf2:	f107 030c 	add.w	r3, r7, #12
 8001cf6:	2224      	movs	r2, #36	@ 0x24
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f005 fb4c 	bl	8007398 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d00:	1d3b      	adds	r3, r7, #4
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d08:	4b20      	ldr	r3, [pc, #128]	@ (8001d8c <MX_TIM3_Init+0xa0>)
 8001d0a:	4a21      	ldr	r2, [pc, #132]	@ (8001d90 <MX_TIM3_Init+0xa4>)
 8001d0c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001d8c <MX_TIM3_Init+0xa0>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d14:	4b1d      	ldr	r3, [pc, #116]	@ (8001d8c <MX_TIM3_Init+0xa0>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001d1a:	4b1c      	ldr	r3, [pc, #112]	@ (8001d8c <MX_TIM3_Init+0xa0>)
 8001d1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d20:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d22:	4b1a      	ldr	r3, [pc, #104]	@ (8001d8c <MX_TIM3_Init+0xa0>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d28:	4b18      	ldr	r3, [pc, #96]	@ (8001d8c <MX_TIM3_Init+0xa0>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d32:	2300      	movs	r3, #0
 8001d34:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d36:	2301      	movs	r3, #1
 8001d38:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d42:	2300      	movs	r3, #0
 8001d44:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d46:	2301      	movs	r3, #1
 8001d48:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001d52:	f107 030c 	add.w	r3, r7, #12
 8001d56:	4619      	mov	r1, r3
 8001d58:	480c      	ldr	r0, [pc, #48]	@ (8001d8c <MX_TIM3_Init+0xa0>)
 8001d5a:	f004 fbe7 	bl	800652c <HAL_TIM_Encoder_Init>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001d64:	f000 f95a 	bl	800201c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d70:	1d3b      	adds	r3, r7, #4
 8001d72:	4619      	mov	r1, r3
 8001d74:	4805      	ldr	r0, [pc, #20]	@ (8001d8c <MX_TIM3_Init+0xa0>)
 8001d76:	f005 f973 	bl	8007060 <HAL_TIMEx_MasterConfigSynchronization>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001d80:	f000 f94c 	bl	800201c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d84:	bf00      	nop
 8001d86:	3730      	adds	r7, #48	@ 0x30
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20000284 	.word	0x20000284
 8001d90:	40000400 	.word	0x40000400

08001d94 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08c      	sub	sp, #48	@ 0x30
 8001d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d9a:	f107 030c 	add.w	r3, r7, #12
 8001d9e:	2224      	movs	r2, #36	@ 0x24
 8001da0:	2100      	movs	r1, #0
 8001da2:	4618      	mov	r0, r3
 8001da4:	f005 faf8 	bl	8007398 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001da8:	1d3b      	adds	r3, r7, #4
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001db0:	4b22      	ldr	r3, [pc, #136]	@ (8001e3c <MX_TIM8_Init+0xa8>)
 8001db2:	4a23      	ldr	r2, [pc, #140]	@ (8001e40 <MX_TIM8_Init+0xac>)
 8001db4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001db6:	4b21      	ldr	r3, [pc, #132]	@ (8001e3c <MX_TIM8_Init+0xa8>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dbc:	4b1f      	ldr	r3, [pc, #124]	@ (8001e3c <MX_TIM8_Init+0xa8>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001dc2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e3c <MX_TIM8_Init+0xa8>)
 8001dc4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001dc8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dca:	4b1c      	ldr	r3, [pc, #112]	@ (8001e3c <MX_TIM8_Init+0xa8>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8001e3c <MX_TIM8_Init+0xa8>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dd6:	4b19      	ldr	r3, [pc, #100]	@ (8001e3c <MX_TIM8_Init+0xa8>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001de0:	2300      	movs	r3, #0
 8001de2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001de4:	2301      	movs	r3, #1
 8001de6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001de8:	2300      	movs	r3, #0
 8001dea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001df0:	2300      	movs	r3, #0
 8001df2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001df4:	2301      	movs	r3, #1
 8001df6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001e00:	f107 030c 	add.w	r3, r7, #12
 8001e04:	4619      	mov	r1, r3
 8001e06:	480d      	ldr	r0, [pc, #52]	@ (8001e3c <MX_TIM8_Init+0xa8>)
 8001e08:	f004 fb90 	bl	800652c <HAL_TIM_Encoder_Init>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001e12:	f000 f903 	bl	800201c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e16:	2300      	movs	r3, #0
 8001e18:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001e1e:	1d3b      	adds	r3, r7, #4
 8001e20:	4619      	mov	r1, r3
 8001e22:	4806      	ldr	r0, [pc, #24]	@ (8001e3c <MX_TIM8_Init+0xa8>)
 8001e24:	f005 f91c 	bl	8007060 <HAL_TIMEx_MasterConfigSynchronization>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8001e2e:	f000 f8f5 	bl	800201c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001e32:	bf00      	nop
 8001e34:	3730      	adds	r7, #48	@ 0x30
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	200002cc 	.word	0x200002cc
 8001e40:	40010400 	.word	0x40010400

08001e44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	607b      	str	r3, [r7, #4]
 8001e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001e80 <MX_DMA_Init+0x3c>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e52:	4a0b      	ldr	r2, [pc, #44]	@ (8001e80 <MX_DMA_Init+0x3c>)
 8001e54:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e5a:	4b09      	ldr	r3, [pc, #36]	@ (8001e80 <MX_DMA_Init+0x3c>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e62:	607b      	str	r3, [r7, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001e66:	2200      	movs	r2, #0
 8001e68:	2100      	movs	r1, #0
 8001e6a:	2038      	movs	r0, #56	@ 0x38
 8001e6c:	f002 fe5b 	bl	8004b26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001e70:	2038      	movs	r0, #56	@ 0x38
 8001e72:	f002 fe74 	bl	8004b5e <HAL_NVIC_EnableIRQ>

}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40023800 	.word	0x40023800

08001e84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b08a      	sub	sp, #40	@ 0x28
 8001e88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8a:	f107 0314 	add.w	r3, r7, #20
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	605a      	str	r2, [r3, #4]
 8001e94:	609a      	str	r2, [r3, #8]
 8001e96:	60da      	str	r2, [r3, #12]
 8001e98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	613b      	str	r3, [r7, #16]
 8001e9e:	4b55      	ldr	r3, [pc, #340]	@ (8001ff4 <MX_GPIO_Init+0x170>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea2:	4a54      	ldr	r2, [pc, #336]	@ (8001ff4 <MX_GPIO_Init+0x170>)
 8001ea4:	f043 0304 	orr.w	r3, r3, #4
 8001ea8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eaa:	4b52      	ldr	r3, [pc, #328]	@ (8001ff4 <MX_GPIO_Init+0x170>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eae:	f003 0304 	and.w	r3, r3, #4
 8001eb2:	613b      	str	r3, [r7, #16]
 8001eb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	4b4e      	ldr	r3, [pc, #312]	@ (8001ff4 <MX_GPIO_Init+0x170>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ebe:	4a4d      	ldr	r2, [pc, #308]	@ (8001ff4 <MX_GPIO_Init+0x170>)
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ec6:	4b4b      	ldr	r3, [pc, #300]	@ (8001ff4 <MX_GPIO_Init+0x170>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60bb      	str	r3, [r7, #8]
 8001ed6:	4b47      	ldr	r3, [pc, #284]	@ (8001ff4 <MX_GPIO_Init+0x170>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eda:	4a46      	ldr	r2, [pc, #280]	@ (8001ff4 <MX_GPIO_Init+0x170>)
 8001edc:	f043 0302 	orr.w	r3, r3, #2
 8001ee0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ee2:	4b44      	ldr	r3, [pc, #272]	@ (8001ff4 <MX_GPIO_Init+0x170>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	60bb      	str	r3, [r7, #8]
 8001eec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	607b      	str	r3, [r7, #4]
 8001ef2:	4b40      	ldr	r3, [pc, #256]	@ (8001ff4 <MX_GPIO_Init+0x170>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef6:	4a3f      	ldr	r2, [pc, #252]	@ (8001ff4 <MX_GPIO_Init+0x170>)
 8001ef8:	f043 0308 	orr.w	r3, r3, #8
 8001efc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001efe:	4b3d      	ldr	r3, [pc, #244]	@ (8001ff4 <MX_GPIO_Init+0x170>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f02:	f003 0308 	and.w	r3, r3, #8
 8001f06:	607b      	str	r3, [r7, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, G_LED_Pin|Y_LED_Pin|R_LED_Pin, GPIO_PIN_RESET);
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001f10:	4839      	ldr	r0, [pc, #228]	@ (8001ff8 <MX_GPIO_Init+0x174>)
 8001f12:	f003 fdd4 	bl	8005abe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RightEmitter_Pin|LeftEmitter_Pin|ForwardLeftEmitter_Pin, GPIO_PIN_RESET);
 8001f16:	2200      	movs	r2, #0
 8001f18:	2194      	movs	r1, #148	@ 0x94
 8001f1a:	4838      	ldr	r0, [pc, #224]	@ (8001ffc <MX_GPIO_Init+0x178>)
 8001f1c:	f003 fdcf 	bl	8005abe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ForwardRightEmitter_GPIO_Port, ForwardRightEmitter_Pin, GPIO_PIN_RESET);
 8001f20:	2200      	movs	r2, #0
 8001f22:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f26:	4836      	ldr	r0, [pc, #216]	@ (8002000 <MX_GPIO_Init+0x17c>)
 8001f28:	f003 fdc9 	bl	8005abe <HAL_GPIO_WritePin>

  /*Configure GPIO pins : G_LED_Pin Y_LED_Pin R_LED_Pin */
  GPIO_InitStruct.Pin = G_LED_Pin|Y_LED_Pin|R_LED_Pin;
 8001f2c:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001f30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f32:	2301      	movs	r3, #1
 8001f34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f3e:	f107 0314 	add.w	r3, r7, #20
 8001f42:	4619      	mov	r1, r3
 8001f44:	482c      	ldr	r0, [pc, #176]	@ (8001ff8 <MX_GPIO_Init+0x174>)
 8001f46:	f003 fc05 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pins : RightEmitter_Pin LeftEmitter_Pin ForwardLeftEmitter_Pin */
  GPIO_InitStruct.Pin = RightEmitter_Pin|LeftEmitter_Pin|ForwardLeftEmitter_Pin;
 8001f4a:	2394      	movs	r3, #148	@ 0x94
 8001f4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f56:	2300      	movs	r3, #0
 8001f58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5a:	f107 0314 	add.w	r3, r7, #20
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4826      	ldr	r0, [pc, #152]	@ (8001ffc <MX_GPIO_Init+0x178>)
 8001f62:	f003 fbf7 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button2_Pin Button1_Pin Switch4_Pin */
  GPIO_InitStruct.Pin = Button2_Pin|Button1_Pin|Switch4_Pin;
 8001f66:	f44f 4341 	mov.w	r3, #49408	@ 0xc100
 8001f6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f74:	f107 0314 	add.w	r3, r7, #20
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4821      	ldr	r0, [pc, #132]	@ (8002000 <MX_GPIO_Init+0x17c>)
 8001f7c:	f003 fbea 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pin : Switch3_Pin */
  GPIO_InitStruct.Pin = Switch3_Pin;
 8001f80:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f86:	2300      	movs	r3, #0
 8001f88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Switch3_GPIO_Port, &GPIO_InitStruct);
 8001f8e:	f107 0314 	add.w	r3, r7, #20
 8001f92:	4619      	mov	r1, r3
 8001f94:	4819      	ldr	r0, [pc, #100]	@ (8001ffc <MX_GPIO_Init+0x178>)
 8001f96:	f003 fbdd 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pin : Switch1_Pin */
  GPIO_InitStruct.Pin = Switch1_Pin;
 8001f9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Switch1_GPIO_Port, &GPIO_InitStruct);
 8001fa8:	f107 0314 	add.w	r3, r7, #20
 8001fac:	4619      	mov	r1, r3
 8001fae:	4812      	ldr	r0, [pc, #72]	@ (8001ff8 <MX_GPIO_Init+0x174>)
 8001fb0:	f003 fbd0 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pin : Switch2_Pin */
  GPIO_InitStruct.Pin = Switch2_Pin;
 8001fb4:	2304      	movs	r3, #4
 8001fb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Switch2_GPIO_Port, &GPIO_InitStruct);
 8001fc0:	f107 0314 	add.w	r3, r7, #20
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	480f      	ldr	r0, [pc, #60]	@ (8002004 <MX_GPIO_Init+0x180>)
 8001fc8:	f003 fbc4 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pin : ForwardRightEmitter_Pin */
  GPIO_InitStruct.Pin = ForwardRightEmitter_Pin;
 8001fcc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ForwardRightEmitter_GPIO_Port, &GPIO_InitStruct);
 8001fde:	f107 0314 	add.w	r3, r7, #20
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4806      	ldr	r0, [pc, #24]	@ (8002000 <MX_GPIO_Init+0x17c>)
 8001fe6:	f003 fbb5 	bl	8005754 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001fea:	bf00      	nop
 8001fec:	3728      	adds	r7, #40	@ 0x28
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	40020800 	.word	0x40020800
 8001ffc:	40020000 	.word	0x40020000
 8002000:	40020400 	.word	0x40020400
 8002004:	40020c00 	.word	0x40020c00

08002008 <Get_HADC1_Ptr>:

/* USER CODE BEGIN 4 */
ADC_HandleTypeDef* Get_HADC1_Ptr(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
	return &hadc1;
 800200c:	4b02      	ldr	r3, [pc, #8]	@ (8002018 <Get_HADC1_Ptr+0x10>)
}
 800200e:	4618      	mov	r0, r3
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	20000194 	.word	0x20000194

0800201c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002020:	b672      	cpsid	i
}
 8002022:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002024:	bf00      	nop
 8002026:	e7fd      	b.n	8002024 <Error_Handler+0x8>

08002028 <limitPWM>:
//#include "pid.h"
//
//extern float velocity_left;
//extern float velocity_right;

float limitPWM(float pwm) {
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
	if (pwm > PWM_MAX)
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f7fe fb57 	bl	80006e4 <__aeabi_f2d>
 8002036:	a30e      	add	r3, pc, #56	@ (adr r3, 8002070 <limitPWM+0x48>)
 8002038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203c:	f7fe fc28 	bl	8000890 <__aeabi_dcmpgt>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <limitPWM+0x22>
		return PWM_MAX;
 8002046:	4b0e      	ldr	r3, [pc, #56]	@ (8002080 <limitPWM+0x58>)
 8002048:	e00d      	b.n	8002066 <limitPWM+0x3e>
	else if (pwm < -PWM_MAX)
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7fe fb4a 	bl	80006e4 <__aeabi_f2d>
 8002050:	a309      	add	r3, pc, #36	@ (adr r3, 8002078 <limitPWM+0x50>)
 8002052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002056:	f7fe fbfd 	bl	8000854 <__aeabi_dcmplt>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <limitPWM+0x3c>
		return -PWM_MAX;
 8002060:	4b08      	ldr	r3, [pc, #32]	@ (8002084 <limitPWM+0x5c>)
 8002062:	e000      	b.n	8002066 <limitPWM+0x3e>
	else
		return pwm;
 8002064:	687b      	ldr	r3, [r7, #4]
}
 8002066:	4618      	mov	r0, r3
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	66666666 	.word	0x66666666
 8002074:	3fee6666 	.word	0x3fee6666
 8002078:	66666666 	.word	0x66666666
 800207c:	bfee6666 	.word	0xbfee6666
 8002080:	3f733333 	.word	0x3f733333
 8002084:	bf733333 	.word	0xbf733333

08002088 <setMotorLPWM>:

void setMotorLPWM(float pwm) {
 8002088:	b590      	push	{r4, r7, lr}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
	if (pwm >= 0)
 8002090:	f04f 0100 	mov.w	r1, #0
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f7fe ff15 	bl	8000ec4 <__aeabi_fcmpge>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d012      	beq.n	80020c6 <setMotorLPWM+0x3e>
	{
		TIM1->CCR1 = 0;
 80020a0:	4b15      	ldr	r3, [pc, #84]	@ (80020f8 <setMotorLPWM+0x70>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM1->CCR2 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7ff ffbe 	bl	8002028 <limitPWM>
 80020ac:	4603      	mov	r3, r0
 80020ae:	4913      	ldr	r1, [pc, #76]	@ (80020fc <setMotorLPWM+0x74>)
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7fe fd55 	bl	8000b60 <__aeabi_fmul>
 80020b6:	4603      	mov	r3, r0
 80020b8:	4c0f      	ldr	r4, [pc, #60]	@ (80020f8 <setMotorLPWM+0x70>)
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7fe ff16 	bl	8000eec <__aeabi_f2uiz>
 80020c0:	4603      	mov	r3, r0
 80020c2:	63a3      	str	r3, [r4, #56]	@ 0x38
	{
		TIM1->CCR2 = 0;
		TIM1->CCR1 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
	}

}
 80020c4:	e013      	b.n	80020ee <setMotorLPWM+0x66>
		TIM1->CCR2 = 0;
 80020c6:	4b0c      	ldr	r3, [pc, #48]	@ (80020f8 <setMotorLPWM+0x70>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM1->CCR1 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f7ff ffab 	bl	8002028 <limitPWM>
 80020d2:	4603      	mov	r3, r0
 80020d4:	4909      	ldr	r1, [pc, #36]	@ (80020fc <setMotorLPWM+0x74>)
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7fe fd42 	bl	8000b60 <__aeabi_fmul>
 80020dc:	4603      	mov	r3, r0
 80020de:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80020e2:	4c05      	ldr	r4, [pc, #20]	@ (80020f8 <setMotorLPWM+0x70>)
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7fe ff01 	bl	8000eec <__aeabi_f2uiz>
 80020ea:	4603      	mov	r3, r0
 80020ec:	6363      	str	r3, [r4, #52]	@ 0x34
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd90      	pop	{r4, r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40010000 	.word	0x40010000
 80020fc:	4547f000 	.word	0x4547f000

08002100 <setMotorRPWM>:

void setMotorRPWM(float pwm) {
 8002100:	b590      	push	{r4, r7, lr}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
	if (pwm >= 0)
 8002108:	f04f 0100 	mov.w	r1, #0
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f7fe fed9 	bl	8000ec4 <__aeabi_fcmpge>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d012      	beq.n	800213e <setMotorRPWM+0x3e>
	{
		TIM1->CCR4 = 0;
 8002118:	4b15      	ldr	r3, [pc, #84]	@ (8002170 <setMotorRPWM+0x70>)
 800211a:	2200      	movs	r2, #0
 800211c:	641a      	str	r2, [r3, #64]	@ 0x40
		TIM1->CCR3 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7ff ff82 	bl	8002028 <limitPWM>
 8002124:	4603      	mov	r3, r0
 8002126:	4913      	ldr	r1, [pc, #76]	@ (8002174 <setMotorRPWM+0x74>)
 8002128:	4618      	mov	r0, r3
 800212a:	f7fe fd19 	bl	8000b60 <__aeabi_fmul>
 800212e:	4603      	mov	r3, r0
 8002130:	4c0f      	ldr	r4, [pc, #60]	@ (8002170 <setMotorRPWM+0x70>)
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe feda 	bl	8000eec <__aeabi_f2uiz>
 8002138:	4603      	mov	r3, r0
 800213a:	63e3      	str	r3, [r4, #60]	@ 0x3c
	else
	{
		TIM1->CCR3 = 0;
		TIM1->CCR4 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
	}
}
 800213c:	e013      	b.n	8002166 <setMotorRPWM+0x66>
		TIM1->CCR3 = 0;
 800213e:	4b0c      	ldr	r3, [pc, #48]	@ (8002170 <setMotorRPWM+0x70>)
 8002140:	2200      	movs	r2, #0
 8002142:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM1->CCR4 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7ff ff6f 	bl	8002028 <limitPWM>
 800214a:	4603      	mov	r3, r0
 800214c:	4909      	ldr	r1, [pc, #36]	@ (8002174 <setMotorRPWM+0x74>)
 800214e:	4618      	mov	r0, r3
 8002150:	f7fe fd06 	bl	8000b60 <__aeabi_fmul>
 8002154:	4603      	mov	r3, r0
 8002156:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800215a:	4c05      	ldr	r4, [pc, #20]	@ (8002170 <setMotorRPWM+0x70>)
 800215c:	4618      	mov	r0, r3
 800215e:	f7fe fec5 	bl	8000eec <__aeabi_f2uiz>
 8002162:	4603      	mov	r3, r0
 8002164:	6423      	str	r3, [r4, #64]	@ 0x40
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	bd90      	pop	{r4, r7, pc}
 800216e:	bf00      	nop
 8002170:	40010000 	.word	0x40010000
 8002174:	4547f000 	.word	0x4547f000

08002178 <resetMotors>:

void resetMotors() {
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
	setMotorLPWM(0);
 800217c:	f04f 0000 	mov.w	r0, #0
 8002180:	f7ff ff82 	bl	8002088 <setMotorLPWM>
	setMotorRPWM(0);
 8002184:	f04f 0000 	mov.w	r0, #0
 8002188:	f7ff ffba 	bl	8002100 <setMotorRPWM>
}
 800218c:	bf00      	nop
 800218e:	bd80      	pop	{r7, pc}

08002190 <setPIDGoalD>:
STATE state = REST;
float left_PWM_value = 0;
float right_PWM_value = 0;
int goal_reached_timer = 0;

void setPIDGoalD(int16_t distance) { goal_distance = distance; }
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	80fb      	strh	r3, [r7, #6]
 800219a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7fe fc8a 	bl	8000ab8 <__aeabi_i2f>
 80021a4:	4603      	mov	r3, r0
 80021a6:	4a03      	ldr	r2, [pc, #12]	@ (80021b4 <setPIDGoalD+0x24>)
 80021a8:	6013      	str	r3, [r2, #0]
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20000330 	.word	0x20000330

080021b8 <setPIDGoalA>:
void setPIDGoalA(int16_t angle) { goal_angle = angle; }
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	80fb      	strh	r3, [r7, #6]
 80021c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7fe fc76 	bl	8000ab8 <__aeabi_i2f>
 80021cc:	4603      	mov	r3, r0
 80021ce:	4a03      	ldr	r2, [pc, #12]	@ (80021dc <setPIDGoalA+0x24>)
 80021d0:	6013      	str	r3, [r2, #0]
 80021d2:	bf00      	nop
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	20000334 	.word	0x20000334

080021e0 <setState>:
void setState(STATE curr_state) { state = curr_state; }
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	71fb      	strb	r3, [r7, #7]
 80021ea:	4a04      	ldr	r2, [pc, #16]	@ (80021fc <setState+0x1c>)
 80021ec:	79fb      	ldrb	r3, [r7, #7]
 80021ee:	7013      	strb	r3, [r2, #0]
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	2000040c 	.word	0x2000040c

08002200 <setIRGoals>:

void setIRGoals(int16_t frontLeftGoal, int16_t frontRightGoal, int16_t leftGoal, int16_t rightGoal) {
 8002200:	b490      	push	{r4, r7}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	4604      	mov	r4, r0
 8002208:	4608      	mov	r0, r1
 800220a:	4611      	mov	r1, r2
 800220c:	461a      	mov	r2, r3
 800220e:	4623      	mov	r3, r4
 8002210:	80fb      	strh	r3, [r7, #6]
 8002212:	4603      	mov	r3, r0
 8002214:	80bb      	strh	r3, [r7, #4]
 8002216:	460b      	mov	r3, r1
 8002218:	807b      	strh	r3, [r7, #2]
 800221a:	4613      	mov	r3, r2
 800221c:	803b      	strh	r3, [r7, #0]

	IRAngleOffset = leftGoal - rightGoal;
 800221e:	887a      	ldrh	r2, [r7, #2]
 8002220:	883b      	ldrh	r3, [r7, #0]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	b29b      	uxth	r3, r3
 8002226:	b21a      	sxth	r2, r3
 8002228:	4b09      	ldr	r3, [pc, #36]	@ (8002250 <setIRGoals+0x50>)
 800222a:	801a      	strh	r2, [r3, #0]
	goal_forward_left = frontLeftGoal;
 800222c:	4a09      	ldr	r2, [pc, #36]	@ (8002254 <setIRGoals+0x54>)
 800222e:	88fb      	ldrh	r3, [r7, #6]
 8002230:	8013      	strh	r3, [r2, #0]
	goal_forward_right = frontRightGoal;
 8002232:	4a09      	ldr	r2, [pc, #36]	@ (8002258 <setIRGoals+0x58>)
 8002234:	88bb      	ldrh	r3, [r7, #4]
 8002236:	8013      	strh	r3, [r2, #0]
	goal_left = leftGoal;
 8002238:	4a08      	ldr	r2, [pc, #32]	@ (800225c <setIRGoals+0x5c>)
 800223a:	887b      	ldrh	r3, [r7, #2]
 800223c:	8013      	strh	r3, [r2, #0]
	goal_right = rightGoal;
 800223e:	4a08      	ldr	r2, [pc, #32]	@ (8002260 <setIRGoals+0x60>)
 8002240:	883b      	ldrh	r3, [r7, #0]
 8002242:	8013      	strh	r3, [r2, #0]

}
 8002244:	bf00      	nop
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bc90      	pop	{r4, r7}
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	20000338 	.word	0x20000338
 8002254:	20000326 	.word	0x20000326
 8002258:	20000328 	.word	0x20000328
 800225c:	2000032a 	.word	0x2000032a
 8002260:	2000032c 	.word	0x2000032c

08002264 <setIRAngle>:
	setPIDGoalD(front_kPx * ((goal_forward_left - curr_forward_left + goal_forward_right - curr_forward_left)/2));

}

// TODO: CHANGE TO USE WALL CHECK FUNCTIONS
void setIRAngle(float left, float right){
 8002264:	b590      	push	{r4, r7, lr}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]

	if (left > 600 && right > 600 && goal_angle == 0)
 800226e:	4947      	ldr	r1, [pc, #284]	@ (800238c <setIRAngle+0x128>)
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f7fe fe31 	bl	8000ed8 <__aeabi_fcmpgt>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d02d      	beq.n	80022d8 <setIRAngle+0x74>
 800227c:	4943      	ldr	r1, [pc, #268]	@ (800238c <setIRAngle+0x128>)
 800227e:	6838      	ldr	r0, [r7, #0]
 8002280:	f7fe fe2a 	bl	8000ed8 <__aeabi_fcmpgt>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d026      	beq.n	80022d8 <setIRAngle+0x74>
 800228a:	4b41      	ldr	r3, [pc, #260]	@ (8002390 <setIRAngle+0x12c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f04f 0100 	mov.w	r1, #0
 8002292:	4618      	mov	r0, r3
 8002294:	f7fe fdf8 	bl	8000e88 <__aeabi_fcmpeq>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d01c      	beq.n	80022d8 <setIRAngle+0x74>
	{
		IRadjustment = (kPir * ((left - right) - IRAngleOffset));
 800229e:	6839      	ldr	r1, [r7, #0]
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f7fe fb53 	bl	800094c <__aeabi_fsub>
 80022a6:	4603      	mov	r3, r0
 80022a8:	461c      	mov	r4, r3
 80022aa:	4b3a      	ldr	r3, [pc, #232]	@ (8002394 <setIRAngle+0x130>)
 80022ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7fe fc01 	bl	8000ab8 <__aeabi_i2f>
 80022b6:	4603      	mov	r3, r0
 80022b8:	4619      	mov	r1, r3
 80022ba:	4620      	mov	r0, r4
 80022bc:	f7fe fb46 	bl	800094c <__aeabi_fsub>
 80022c0:	4603      	mov	r3, r0
 80022c2:	461a      	mov	r2, r3
 80022c4:	4b34      	ldr	r3, [pc, #208]	@ (8002398 <setIRAngle+0x134>)
 80022c6:	4619      	mov	r1, r3
 80022c8:	4610      	mov	r0, r2
 80022ca:	f7fe fc49 	bl	8000b60 <__aeabi_fmul>
 80022ce:	4603      	mov	r3, r0
 80022d0:	461a      	mov	r2, r3
 80022d2:	4b32      	ldr	r3, [pc, #200]	@ (800239c <setIRAngle+0x138>)
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	e054      	b.n	8002382 <setIRAngle+0x11e>
	}
	else if (left > 600 && goal_angle == 0)
 80022d8:	492c      	ldr	r1, [pc, #176]	@ (800238c <setIRAngle+0x128>)
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7fe fdfc 	bl	8000ed8 <__aeabi_fcmpgt>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d020      	beq.n	8002328 <setIRAngle+0xc4>
 80022e6:	4b2a      	ldr	r3, [pc, #168]	@ (8002390 <setIRAngle+0x12c>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f04f 0100 	mov.w	r1, #0
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7fe fdca 	bl	8000e88 <__aeabi_fcmpeq>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d016      	beq.n	8002328 <setIRAngle+0xc4>
	{
		IRadjustment = (kPir2 * (left - goal_left));
 80022fa:	4b29      	ldr	r3, [pc, #164]	@ (80023a0 <setIRAngle+0x13c>)
 80022fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002300:	4618      	mov	r0, r3
 8002302:	f7fe fbd9 	bl	8000ab8 <__aeabi_i2f>
 8002306:	4603      	mov	r3, r0
 8002308:	4619      	mov	r1, r3
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7fe fb1e 	bl	800094c <__aeabi_fsub>
 8002310:	4603      	mov	r3, r0
 8002312:	461a      	mov	r2, r3
 8002314:	4b23      	ldr	r3, [pc, #140]	@ (80023a4 <setIRAngle+0x140>)
 8002316:	4619      	mov	r1, r3
 8002318:	4610      	mov	r0, r2
 800231a:	f7fe fc21 	bl	8000b60 <__aeabi_fmul>
 800231e:	4603      	mov	r3, r0
 8002320:	461a      	mov	r2, r3
 8002322:	4b1e      	ldr	r3, [pc, #120]	@ (800239c <setIRAngle+0x138>)
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	e02c      	b.n	8002382 <setIRAngle+0x11e>
	}
	else if (right > 600 && goal_angle == 0)
 8002328:	4918      	ldr	r1, [pc, #96]	@ (800238c <setIRAngle+0x128>)
 800232a:	6838      	ldr	r0, [r7, #0]
 800232c:	f7fe fdd4 	bl	8000ed8 <__aeabi_fcmpgt>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d020      	beq.n	8002378 <setIRAngle+0x114>
 8002336:	4b16      	ldr	r3, [pc, #88]	@ (8002390 <setIRAngle+0x12c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f04f 0100 	mov.w	r1, #0
 800233e:	4618      	mov	r0, r3
 8002340:	f7fe fda2 	bl	8000e88 <__aeabi_fcmpeq>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d016      	beq.n	8002378 <setIRAngle+0x114>
	{
		IRadjustment = (kPir2 * (goal_right - right));
 800234a:	4b17      	ldr	r3, [pc, #92]	@ (80023a8 <setIRAngle+0x144>)
 800234c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002350:	4618      	mov	r0, r3
 8002352:	f7fe fbb1 	bl	8000ab8 <__aeabi_i2f>
 8002356:	4603      	mov	r3, r0
 8002358:	6839      	ldr	r1, [r7, #0]
 800235a:	4618      	mov	r0, r3
 800235c:	f7fe faf6 	bl	800094c <__aeabi_fsub>
 8002360:	4603      	mov	r3, r0
 8002362:	461a      	mov	r2, r3
 8002364:	4b0f      	ldr	r3, [pc, #60]	@ (80023a4 <setIRAngle+0x140>)
 8002366:	4619      	mov	r1, r3
 8002368:	4610      	mov	r0, r2
 800236a:	f7fe fbf9 	bl	8000b60 <__aeabi_fmul>
 800236e:	4603      	mov	r3, r0
 8002370:	461a      	mov	r2, r3
 8002372:	4b0a      	ldr	r3, [pc, #40]	@ (800239c <setIRAngle+0x138>)
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	e004      	b.n	8002382 <setIRAngle+0x11e>
	}
	else
		IRadjustment = 0;
 8002378:	4b08      	ldr	r3, [pc, #32]	@ (800239c <setIRAngle+0x138>)
 800237a:	f04f 0200 	mov.w	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
}
 8002380:	bf00      	nop
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	bd90      	pop	{r4, r7, pc}
 800238a:	bf00      	nop
 800238c:	44160000 	.word	0x44160000
 8002390:	20000334 	.word	0x20000334
 8002394:	20000338 	.word	0x20000338
 8002398:	3cf5c28f 	.word	0x3cf5c28f
 800239c:	20000408 	.word	0x20000408
 80023a0:	2000032a 	.word	0x2000032a
 80023a4:	3d4ccccd 	.word	0x3d4ccccd
 80023a8:	2000032c 	.word	0x2000032c

080023ac <accelerateLeftPWM>:

float accelerateLeftPWM() {
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
//	if (derivative > velocity_left * 34.0)
//		return left_PWM_value - xacceleration;
//
//	return left_PWM_value;

}
 80023b0:	bf00      	nop
 80023b2:	4618      	mov	r0, r3
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bc80      	pop	{r7}
 80023b8:	4770      	bx	lr

080023ba <accelerateRightPWM>:

float accelerateRightPWM() {
 80023ba:	b480      	push	{r7}
 80023bc:	af00      	add	r7, sp, #0
//	if (derivative > velocity_right * 34.0)
//		return right_PWM_value - xacceleration;
//
//	return right_PWM_value;

}
 80023be:	bf00      	nop
 80023c0:	4618      	mov	r0, r3
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bc80      	pop	{r7}
 80023c6:	4770      	bx	lr

080023c8 <PDController>:

void PDController() {
 80023c8:	b5b0      	push	{r4, r5, r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0

//////////////////////////	CALCULATE DISTANCE AND ANGLE CORRECTION /////////////////////////

	if (state == TURNING)
 80023ce:	4ba4      	ldr	r3, [pc, #656]	@ (8002660 <PDController+0x298>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d103      	bne.n	80023de <PDController+0x16>
		IRadjustment = 0;
 80023d6:	4ba3      	ldr	r3, [pc, #652]	@ (8002664 <PDController+0x29c>)
 80023d8:	f04f 0200 	mov.w	r2, #0
 80023dc:	601a      	str	r2, [r3, #0]

	float adjustedAngle = goal_angle + IRadjustment;
 80023de:	4ba2      	ldr	r3, [pc, #648]	@ (8002668 <PDController+0x2a0>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4aa0      	ldr	r2, [pc, #640]	@ (8002664 <PDController+0x29c>)
 80023e4:	6812      	ldr	r2, [r2, #0]
 80023e6:	4611      	mov	r1, r2
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fe fab1 	bl	8000950 <__addsf3>
 80023ee:	4603      	mov	r3, r0
 80023f0:	607b      	str	r3, [r7, #4]

	angleError = adjustedAngle - (getLeftEncoderCounts() - getRightEncoderCounts());
 80023f2:	f7fe ffc1 	bl	8001378 <getLeftEncoderCounts>
 80023f6:	4603      	mov	r3, r0
 80023f8:	461c      	mov	r4, r3
 80023fa:	f7fe ffaf 	bl	800135c <getRightEncoderCounts>
 80023fe:	4603      	mov	r3, r0
 8002400:	1ae3      	subs	r3, r4, r3
 8002402:	4618      	mov	r0, r3
 8002404:	f7fe fb58 	bl	8000ab8 <__aeabi_i2f>
 8002408:	4603      	mov	r3, r0
 800240a:	4619      	mov	r1, r3
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f7fe fa9d 	bl	800094c <__aeabi_fsub>
 8002412:	4603      	mov	r3, r0
 8002414:	461a      	mov	r2, r3
 8002416:	4b95      	ldr	r3, [pc, #596]	@ (800266c <PDController+0x2a4>)
 8002418:	601a      	str	r2, [r3, #0]
	angleCorrection = kPw * angleError + kDw * (angleError - oldAngleError);
 800241a:	4a95      	ldr	r2, [pc, #596]	@ (8002670 <PDController+0x2a8>)
 800241c:	4b93      	ldr	r3, [pc, #588]	@ (800266c <PDController+0x2a4>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4619      	mov	r1, r3
 8002422:	4610      	mov	r0, r2
 8002424:	f7fe fb9c 	bl	8000b60 <__aeabi_fmul>
 8002428:	4603      	mov	r3, r0
 800242a:	461c      	mov	r4, r3
 800242c:	4b8f      	ldr	r3, [pc, #572]	@ (800266c <PDController+0x2a4>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a90      	ldr	r2, [pc, #576]	@ (8002674 <PDController+0x2ac>)
 8002432:	6812      	ldr	r2, [r2, #0]
 8002434:	4611      	mov	r1, r2
 8002436:	4618      	mov	r0, r3
 8002438:	f7fe fa88 	bl	800094c <__aeabi_fsub>
 800243c:	4603      	mov	r3, r0
 800243e:	461a      	mov	r2, r3
 8002440:	4b8d      	ldr	r3, [pc, #564]	@ (8002678 <PDController+0x2b0>)
 8002442:	4619      	mov	r1, r3
 8002444:	4610      	mov	r0, r2
 8002446:	f7fe fb8b 	bl	8000b60 <__aeabi_fmul>
 800244a:	4603      	mov	r3, r0
 800244c:	4619      	mov	r1, r3
 800244e:	4620      	mov	r0, r4
 8002450:	f7fe fa7e 	bl	8000950 <__addsf3>
 8002454:	4603      	mov	r3, r0
 8002456:	461a      	mov	r2, r3
 8002458:	4b88      	ldr	r3, [pc, #544]	@ (800267c <PDController+0x2b4>)
 800245a:	601a      	str	r2, [r3, #0]

	distanceError = goal_distance - ((getLeftEncoderCounts() + getRightEncoderCounts())/2);
 800245c:	4b88      	ldr	r3, [pc, #544]	@ (8002680 <PDController+0x2b8>)
 800245e:	681c      	ldr	r4, [r3, #0]
 8002460:	f7fe ff8a 	bl	8001378 <getLeftEncoderCounts>
 8002464:	4603      	mov	r3, r0
 8002466:	461d      	mov	r5, r3
 8002468:	f7fe ff78 	bl	800135c <getRightEncoderCounts>
 800246c:	4603      	mov	r3, r0
 800246e:	442b      	add	r3, r5
 8002470:	0fda      	lsrs	r2, r3, #31
 8002472:	4413      	add	r3, r2
 8002474:	105b      	asrs	r3, r3, #1
 8002476:	4618      	mov	r0, r3
 8002478:	f7fe fb1e 	bl	8000ab8 <__aeabi_i2f>
 800247c:	4603      	mov	r3, r0
 800247e:	4619      	mov	r1, r3
 8002480:	4620      	mov	r0, r4
 8002482:	f7fe fa63 	bl	800094c <__aeabi_fsub>
 8002486:	4603      	mov	r3, r0
 8002488:	461a      	mov	r2, r3
 800248a:	4b7e      	ldr	r3, [pc, #504]	@ (8002684 <PDController+0x2bc>)
 800248c:	601a      	str	r2, [r3, #0]

	distanceCorrection = kPx * distanceError + kDx * (distanceError - oldDistanceError);
 800248e:	4a7e      	ldr	r2, [pc, #504]	@ (8002688 <PDController+0x2c0>)
 8002490:	4b7c      	ldr	r3, [pc, #496]	@ (8002684 <PDController+0x2bc>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4619      	mov	r1, r3
 8002496:	4610      	mov	r0, r2
 8002498:	f7fe fb62 	bl	8000b60 <__aeabi_fmul>
 800249c:	4603      	mov	r3, r0
 800249e:	461c      	mov	r4, r3
 80024a0:	4b78      	ldr	r3, [pc, #480]	@ (8002684 <PDController+0x2bc>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a79      	ldr	r2, [pc, #484]	@ (800268c <PDController+0x2c4>)
 80024a6:	6812      	ldr	r2, [r2, #0]
 80024a8:	4611      	mov	r1, r2
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7fe fa4e 	bl	800094c <__aeabi_fsub>
 80024b0:	4603      	mov	r3, r0
 80024b2:	461a      	mov	r2, r3
 80024b4:	f04f 0300 	mov.w	r3, #0
 80024b8:	4619      	mov	r1, r3
 80024ba:	4610      	mov	r0, r2
 80024bc:	f7fe fb50 	bl	8000b60 <__aeabi_fmul>
 80024c0:	4603      	mov	r3, r0
 80024c2:	4619      	mov	r1, r3
 80024c4:	4620      	mov	r0, r4
 80024c6:	f7fe fa43 	bl	8000950 <__addsf3>
 80024ca:	4603      	mov	r3, r0
 80024cc:	461a      	mov	r2, r3
 80024ce:	4b70      	ldr	r3, [pc, #448]	@ (8002690 <PDController+0x2c8>)
 80024d0:	601a      	str	r2, [r3, #0]

	left_distance = getLeftEncoderCounts();
 80024d2:	f7fe ff51 	bl	8001378 <getLeftEncoderCounts>
 80024d6:	4603      	mov	r3, r0
 80024d8:	4618      	mov	r0, r3
 80024da:	f7fe faed 	bl	8000ab8 <__aeabi_i2f>
 80024de:	4603      	mov	r3, r0
 80024e0:	4a6c      	ldr	r2, [pc, #432]	@ (8002694 <PDController+0x2cc>)
 80024e2:	6013      	str	r3, [r2, #0]
	right_distance = getRightEncoderCounts();
 80024e4:	f7fe ff3a 	bl	800135c <getRightEncoderCounts>
 80024e8:	4603      	mov	r3, r0
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fe fae4 	bl	8000ab8 <__aeabi_i2f>
 80024f0:	4603      	mov	r3, r0
 80024f2:	4a69      	ldr	r2, [pc, #420]	@ (8002698 <PDController+0x2d0>)
 80024f4:	6013      	str	r3, [r2, #0]

	if (state == MOVING && fabs(distanceError) > 100)
 80024f6:	4b5a      	ldr	r3, [pc, #360]	@ (8002660 <PDController+0x298>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d13f      	bne.n	800257e <PDController+0x1b6>
 80024fe:	4b61      	ldr	r3, [pc, #388]	@ (8002684 <PDController+0x2bc>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002506:	4965      	ldr	r1, [pc, #404]	@ (800269c <PDController+0x2d4>)
 8002508:	4618      	mov	r0, r3
 800250a:	f7fe fce5 	bl	8000ed8 <__aeabi_fcmpgt>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d034      	beq.n	800257e <PDController+0x1b6>
	{		// If we're going straight and not at the end, apply acceleration
		if (fabs(distanceCorrection - oldDistanceCorrection) > xacceleration)
 8002514:	4b5e      	ldr	r3, [pc, #376]	@ (8002690 <PDController+0x2c8>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a61      	ldr	r2, [pc, #388]	@ (80026a0 <PDController+0x2d8>)
 800251a:	6812      	ldr	r2, [r2, #0]
 800251c:	4611      	mov	r1, r2
 800251e:	4618      	mov	r0, r3
 8002520:	f7fe fa14 	bl	800094c <__aeabi_fsub>
 8002524:	4603      	mov	r3, r0
 8002526:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800252a:	4a57      	ldr	r2, [pc, #348]	@ (8002688 <PDController+0x2c0>)
 800252c:	4611      	mov	r1, r2
 800252e:	4618      	mov	r0, r3
 8002530:	f7fe fcd2 	bl	8000ed8 <__aeabi_fcmpgt>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d021      	beq.n	800257e <PDController+0x1b6>
		{
			distanceCorrection = oldDistanceCorrection + (xacceleration * sign(distanceCorrection - oldDistanceCorrection));
 800253a:	4b55      	ldr	r3, [pc, #340]	@ (8002690 <PDController+0x2c8>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a58      	ldr	r2, [pc, #352]	@ (80026a0 <PDController+0x2d8>)
 8002540:	6812      	ldr	r2, [r2, #0]
 8002542:	4611      	mov	r1, r2
 8002544:	4618      	mov	r0, r3
 8002546:	f7fe fa01 	bl	800094c <__aeabi_fsub>
 800254a:	4603      	mov	r3, r0
 800254c:	4618      	mov	r0, r3
 800254e:	f001 fd2f 	bl	8003fb0 <sign>
 8002552:	4603      	mov	r3, r0
 8002554:	4618      	mov	r0, r3
 8002556:	f7fe faaf 	bl	8000ab8 <__aeabi_i2f>
 800255a:	4603      	mov	r3, r0
 800255c:	4a4a      	ldr	r2, [pc, #296]	@ (8002688 <PDController+0x2c0>)
 800255e:	4611      	mov	r1, r2
 8002560:	4618      	mov	r0, r3
 8002562:	f7fe fafd 	bl	8000b60 <__aeabi_fmul>
 8002566:	4603      	mov	r3, r0
 8002568:	461a      	mov	r2, r3
 800256a:	4b4d      	ldr	r3, [pc, #308]	@ (80026a0 <PDController+0x2d8>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4619      	mov	r1, r3
 8002570:	4610      	mov	r0, r2
 8002572:	f7fe f9ed 	bl	8000950 <__addsf3>
 8002576:	4603      	mov	r3, r0
 8002578:	461a      	mov	r2, r3
 800257a:	4b45      	ldr	r3, [pc, #276]	@ (8002690 <PDController+0x2c8>)
 800257c:	601a      	str	r2, [r3, #0]
		}
	}

////////////////////// ROUND DISTANCE OR ANGLE CORRECTION	//////////////////////////

	switch(state) {		// Apply lower limits of PWM for various states
 800257e:	4b38      	ldr	r3, [pc, #224]	@ (8002660 <PDController+0x298>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	3b01      	subs	r3, #1
 8002584:	2b04      	cmp	r3, #4
 8002586:	f200 80bf 	bhi.w	8002708 <PDController+0x340>
 800258a:	a201      	add	r2, pc, #4	@ (adr r2, 8002590 <PDController+0x1c8>)
 800258c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002590:	080025cd 	.word	0x080025cd
 8002594:	0800262f 	.word	0x0800262f
 8002598:	080025a5 	.word	0x080025a5
 800259c:	08002709 	.word	0x08002709
 80025a0:	080026eb 	.word	0x080026eb
		case EXPLORING:
			distanceCorrection = (accelerateLeftPWM() + accelerateRightPWM())/2;
 80025a4:	f7ff ff02 	bl	80023ac <accelerateLeftPWM>
 80025a8:	4604      	mov	r4, r0
 80025aa:	f7ff ff06 	bl	80023ba <accelerateRightPWM>
 80025ae:	4603      	mov	r3, r0
 80025b0:	4619      	mov	r1, r3
 80025b2:	4620      	mov	r0, r4
 80025b4:	f7fe f9cc 	bl	8000950 <__addsf3>
 80025b8:	4603      	mov	r3, r0
 80025ba:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fe fb82 	bl	8000cc8 <__aeabi_fdiv>
 80025c4:	4603      	mov	r3, r0
 80025c6:	461a      	mov	r2, r3
 80025c8:	4b31      	ldr	r3, [pc, #196]	@ (8002690 <PDController+0x2c8>)
 80025ca:	601a      	str	r2, [r3, #0]
		case MOVING:
			if (fabs(distanceCorrection) > 0.03 && fabs(distanceCorrection) < PWMMinx)
 80025cc:	4b30      	ldr	r3, [pc, #192]	@ (8002690 <PDController+0x2c8>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7fe f885 	bl	80006e4 <__aeabi_f2d>
 80025da:	a31d      	add	r3, pc, #116	@ (adr r3, 8002650 <PDController+0x288>)
 80025dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e0:	f7fe f956 	bl	8000890 <__aeabi_dcmpgt>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d100      	bne.n	80025ec <PDController+0x224>
				distanceCorrection = sign(distanceCorrection) * PWMMinx;
			break;
 80025ea:	e08e      	b.n	800270a <PDController+0x342>
			if (fabs(distanceCorrection) > 0.03 && fabs(distanceCorrection) < PWMMinx)
 80025ec:	4b28      	ldr	r3, [pc, #160]	@ (8002690 <PDController+0x2c8>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80025f4:	4a2b      	ldr	r2, [pc, #172]	@ (80026a4 <PDController+0x2dc>)
 80025f6:	4611      	mov	r1, r2
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7fe fc4f 	bl	8000e9c <__aeabi_fcmplt>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d100      	bne.n	8002606 <PDController+0x23e>
			break;
 8002604:	e081      	b.n	800270a <PDController+0x342>
				distanceCorrection = sign(distanceCorrection) * PWMMinx;
 8002606:	4b22      	ldr	r3, [pc, #136]	@ (8002690 <PDController+0x2c8>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f001 fcd0 	bl	8003fb0 <sign>
 8002610:	4603      	mov	r3, r0
 8002612:	4618      	mov	r0, r3
 8002614:	f7fe fa50 	bl	8000ab8 <__aeabi_i2f>
 8002618:	4603      	mov	r3, r0
 800261a:	4a22      	ldr	r2, [pc, #136]	@ (80026a4 <PDController+0x2dc>)
 800261c:	4611      	mov	r1, r2
 800261e:	4618      	mov	r0, r3
 8002620:	f7fe fa9e 	bl	8000b60 <__aeabi_fmul>
 8002624:	4603      	mov	r3, r0
 8002626:	461a      	mov	r2, r3
 8002628:	4b19      	ldr	r3, [pc, #100]	@ (8002690 <PDController+0x2c8>)
 800262a:	601a      	str	r2, [r3, #0]
			break;
 800262c:	e06d      	b.n	800270a <PDController+0x342>
		case TURNING:
			if (fabs(angleCorrection) > 0.01 && fabs(angleCorrection) < PWMMinw)
 800262e:	4b13      	ldr	r3, [pc, #76]	@ (800267c <PDController+0x2b4>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002636:	4618      	mov	r0, r3
 8002638:	f7fe f854 	bl	80006e4 <__aeabi_f2d>
 800263c:	a306      	add	r3, pc, #24	@ (adr r3, 8002658 <PDController+0x290>)
 800263e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002642:	f7fe f925 	bl	8000890 <__aeabi_dcmpgt>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d12d      	bne.n	80026a8 <PDController+0x2e0>
				angleCorrection = sign(angleCorrection) * PWMMinw;
			break;
 800264c:	e05d      	b.n	800270a <PDController+0x342>
 800264e:	bf00      	nop
 8002650:	eb851eb8 	.word	0xeb851eb8
 8002654:	3f9eb851 	.word	0x3f9eb851
 8002658:	47ae147b 	.word	0x47ae147b
 800265c:	3f847ae1 	.word	0x3f847ae1
 8002660:	2000040c 	.word	0x2000040c
 8002664:	20000408 	.word	0x20000408
 8002668:	20000334 	.word	0x20000334
 800266c:	2000033c 	.word	0x2000033c
 8002670:	3b23d70a 	.word	0x3b23d70a
 8002674:	20000340 	.word	0x20000340
 8002678:	3b656042 	.word	0x3b656042
 800267c:	2000036c 	.word	0x2000036c
 8002680:	20000330 	.word	0x20000330
 8002684:	20000370 	.word	0x20000370
 8002688:	3a83126f 	.word	0x3a83126f
 800268c:	20000374 	.word	0x20000374
 8002690:	200003a0 	.word	0x200003a0
 8002694:	200003a8 	.word	0x200003a8
 8002698:	200003d8 	.word	0x200003d8
 800269c:	42c80000 	.word	0x42c80000
 80026a0:	200003a4 	.word	0x200003a4
 80026a4:	3ea3d70a 	.word	0x3ea3d70a
			if (fabs(angleCorrection) > 0.01 && fabs(angleCorrection) < PWMMinw)
 80026a8:	4b4e      	ldr	r3, [pc, #312]	@ (80027e4 <PDController+0x41c>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80026b0:	4a4d      	ldr	r2, [pc, #308]	@ (80027e8 <PDController+0x420>)
 80026b2:	4611      	mov	r1, r2
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7fe fbf1 	bl	8000e9c <__aeabi_fcmplt>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d100      	bne.n	80026c2 <PDController+0x2fa>
			break;
 80026c0:	e023      	b.n	800270a <PDController+0x342>
				angleCorrection = sign(angleCorrection) * PWMMinw;
 80026c2:	4b48      	ldr	r3, [pc, #288]	@ (80027e4 <PDController+0x41c>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f001 fc72 	bl	8003fb0 <sign>
 80026cc:	4603      	mov	r3, r0
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7fe f9f2 	bl	8000ab8 <__aeabi_i2f>
 80026d4:	4603      	mov	r3, r0
 80026d6:	4a44      	ldr	r2, [pc, #272]	@ (80027e8 <PDController+0x420>)
 80026d8:	4611      	mov	r1, r2
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fe fa40 	bl	8000b60 <__aeabi_fmul>
 80026e0:	4603      	mov	r3, r0
 80026e2:	461a      	mov	r2, r3
 80026e4:	4b3f      	ldr	r3, [pc, #252]	@ (80027e4 <PDController+0x41c>)
 80026e6:	601a      	str	r2, [r3, #0]
			break;
 80026e8:	e00f      	b.n	800270a <PDController+0x342>
		case CURVING:
			if (fabs(distanceError) < 60)
 80026ea:	4b40      	ldr	r3, [pc, #256]	@ (80027ec <PDController+0x424>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80026f2:	493f      	ldr	r1, [pc, #252]	@ (80027f0 <PDController+0x428>)
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7fe fbd1 	bl	8000e9c <__aeabi_fcmplt>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d100      	bne.n	8002702 <PDController+0x33a>
				setState(REST);
		default:
			break;
 8002700:	e002      	b.n	8002708 <PDController+0x340>
				setState(REST);
 8002702:	2000      	movs	r0, #0
 8002704:	f7ff fd6c 	bl	80021e0 <setState>
			break;
 8002708:	bf00      	nop
	}

	if (fabs(distanceCorrection) > PWMMaxx)		// Upper Limit for PWM
 800270a:	4b3a      	ldr	r3, [pc, #232]	@ (80027f4 <PDController+0x42c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002712:	4a39      	ldr	r2, [pc, #228]	@ (80027f8 <PDController+0x430>)
 8002714:	4611      	mov	r1, r2
 8002716:	4618      	mov	r0, r3
 8002718:	f7fe fbde 	bl	8000ed8 <__aeabi_fcmpgt>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d012      	beq.n	8002748 <PDController+0x380>
		distanceCorrection = sign(distanceCorrection) * PWMMaxx;
 8002722:	4b34      	ldr	r3, [pc, #208]	@ (80027f4 <PDController+0x42c>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f001 fc42 	bl	8003fb0 <sign>
 800272c:	4603      	mov	r3, r0
 800272e:	4618      	mov	r0, r3
 8002730:	f7fe f9c2 	bl	8000ab8 <__aeabi_i2f>
 8002734:	4603      	mov	r3, r0
 8002736:	4a30      	ldr	r2, [pc, #192]	@ (80027f8 <PDController+0x430>)
 8002738:	4611      	mov	r1, r2
 800273a:	4618      	mov	r0, r3
 800273c:	f7fe fa10 	bl	8000b60 <__aeabi_fmul>
 8002740:	4603      	mov	r3, r0
 8002742:	461a      	mov	r2, r3
 8002744:	4b2b      	ldr	r3, [pc, #172]	@ (80027f4 <PDController+0x42c>)
 8002746:	601a      	str	r2, [r3, #0]

	if (fabs(angleCorrection) > PWMMaxw)
 8002748:	4b26      	ldr	r3, [pc, #152]	@ (80027e4 <PDController+0x41c>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002750:	4a25      	ldr	r2, [pc, #148]	@ (80027e8 <PDController+0x420>)
 8002752:	4611      	mov	r1, r2
 8002754:	4618      	mov	r0, r3
 8002756:	f7fe fbbf 	bl	8000ed8 <__aeabi_fcmpgt>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d012      	beq.n	8002786 <PDController+0x3be>
		angleCorrection = sign(angleCorrection) * PWMMaxw;
 8002760:	4b20      	ldr	r3, [pc, #128]	@ (80027e4 <PDController+0x41c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4618      	mov	r0, r3
 8002766:	f001 fc23 	bl	8003fb0 <sign>
 800276a:	4603      	mov	r3, r0
 800276c:	4618      	mov	r0, r3
 800276e:	f7fe f9a3 	bl	8000ab8 <__aeabi_i2f>
 8002772:	4603      	mov	r3, r0
 8002774:	4a1c      	ldr	r2, [pc, #112]	@ (80027e8 <PDController+0x420>)
 8002776:	4611      	mov	r1, r2
 8002778:	4618      	mov	r0, r3
 800277a:	f7fe f9f1 	bl	8000b60 <__aeabi_fmul>
 800277e:	4603      	mov	r3, r0
 8002780:	461a      	mov	r2, r3
 8002782:	4b18      	ldr	r3, [pc, #96]	@ (80027e4 <PDController+0x41c>)
 8002784:	601a      	str	r2, [r3, #0]

	if (state == ACCELERATING || state == CURVING)
 8002786:	4b1d      	ldr	r3, [pc, #116]	@ (80027fc <PDController+0x434>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	2b04      	cmp	r3, #4
 800278c:	d003      	beq.n	8002796 <PDController+0x3ce>
 800278e:	4b1b      	ldr	r3, [pc, #108]	@ (80027fc <PDController+0x434>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	2b05      	cmp	r3, #5
 8002794:	d10a      	bne.n	80027ac <PDController+0x3e4>
	{
		left_PWM_value = accelerateLeftPWM();
 8002796:	f7ff fe09 	bl	80023ac <accelerateLeftPWM>
 800279a:	4603      	mov	r3, r0
 800279c:	4a18      	ldr	r2, [pc, #96]	@ (8002800 <PDController+0x438>)
 800279e:	6013      	str	r3, [r2, #0]
		right_PWM_value = accelerateRightPWM();
 80027a0:	f7ff fe0b 	bl	80023ba <accelerateRightPWM>
 80027a4:	4603      	mov	r3, r0
 80027a6:	4a17      	ldr	r2, [pc, #92]	@ (8002804 <PDController+0x43c>)
 80027a8:	6013      	str	r3, [r2, #0]
		return;
 80027aa:	e017      	b.n	80027dc <PDController+0x414>
	}

	left_PWM_value = (distanceCorrection + angleCorrection);
 80027ac:	4b11      	ldr	r3, [pc, #68]	@ (80027f4 <PDController+0x42c>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a0c      	ldr	r2, [pc, #48]	@ (80027e4 <PDController+0x41c>)
 80027b2:	6812      	ldr	r2, [r2, #0]
 80027b4:	4611      	mov	r1, r2
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7fe f8ca 	bl	8000950 <__addsf3>
 80027bc:	4603      	mov	r3, r0
 80027be:	461a      	mov	r2, r3
 80027c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002800 <PDController+0x438>)
 80027c2:	601a      	str	r2, [r3, #0]
	right_PWM_value = (distanceCorrection - angleCorrection);
 80027c4:	4b0b      	ldr	r3, [pc, #44]	@ (80027f4 <PDController+0x42c>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a06      	ldr	r2, [pc, #24]	@ (80027e4 <PDController+0x41c>)
 80027ca:	6812      	ldr	r2, [r2, #0]
 80027cc:	4611      	mov	r1, r2
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7fe f8bc 	bl	800094c <__aeabi_fsub>
 80027d4:	4603      	mov	r3, r0
 80027d6:	461a      	mov	r2, r3
 80027d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002804 <PDController+0x43c>)
 80027da:	601a      	str	r2, [r3, #0]

}
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bdb0      	pop	{r4, r5, r7, pc}
 80027e2:	bf00      	nop
 80027e4:	2000036c 	.word	0x2000036c
 80027e8:	3ea3d70a 	.word	0x3ea3d70a
 80027ec:	20000370 	.word	0x20000370
 80027f0:	42700000 	.word	0x42700000
 80027f4:	200003a0 	.word	0x200003a0
 80027f8:	3f266666 	.word	0x3f266666
 80027fc:	2000040c 	.word	0x2000040c
 8002800:	20000410 	.word	0x20000410
 8002804:	20000414 	.word	0x20000414

08002808 <updatePID>:

void updatePID() {
 8002808:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800280c:	b084      	sub	sp, #16
 800280e:	af00      	add	r7, sp, #0

///// CALCULATE PREVIOUS ANGLE AND DISTANCE ERRORS //////////////////////////

	oldAngleError = oldAngleErrors[9];
 8002810:	4b49      	ldr	r3, [pc, #292]	@ (8002938 <updatePID+0x130>)
 8002812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002814:	4a49      	ldr	r2, [pc, #292]	@ (800293c <updatePID+0x134>)
 8002816:	6013      	str	r3, [r2, #0]
	oldDistanceError = oldDistanceErrors[9];
 8002818:	4b49      	ldr	r3, [pc, #292]	@ (8002940 <updatePID+0x138>)
 800281a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281c:	4a49      	ldr	r2, [pc, #292]	@ (8002944 <updatePID+0x13c>)
 800281e:	6013      	str	r3, [r2, #0]
	old_left_distance = old_left_distances[9];
 8002820:	4b49      	ldr	r3, [pc, #292]	@ (8002948 <updatePID+0x140>)
 8002822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002824:	4a49      	ldr	r2, [pc, #292]	@ (800294c <updatePID+0x144>)
 8002826:	6013      	str	r3, [r2, #0]
	old_right_distance = old_right_distances[9];
 8002828:	4b49      	ldr	r3, [pc, #292]	@ (8002950 <updatePID+0x148>)
 800282a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800282c:	4a49      	ldr	r2, [pc, #292]	@ (8002954 <updatePID+0x14c>)
 800282e:	6013      	str	r3, [r2, #0]

//////////////////////	CALCULATE MOTOR PWM VALUES	/////////////////////

	PDController();
 8002830:	f7ff fdca 	bl	80023c8 <PDController>

////////////////////	NORMALIZE LEFT AND RIGHT PWM VALUES ////////////////

	// Apply lower PWM limits for small adjustments
	if (state == REST || state == ACCELERATING || fabs(distanceError) < 60 || fabs (angleError) < 60)
 8002834:	4b48      	ldr	r3, [pc, #288]	@ (8002958 <updatePID+0x150>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d01a      	beq.n	8002872 <updatePID+0x6a>
 800283c:	4b46      	ldr	r3, [pc, #280]	@ (8002958 <updatePID+0x150>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2b04      	cmp	r3, #4
 8002842:	d016      	beq.n	8002872 <updatePID+0x6a>
 8002844:	4b45      	ldr	r3, [pc, #276]	@ (800295c <updatePID+0x154>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800284c:	4944      	ldr	r1, [pc, #272]	@ (8002960 <updatePID+0x158>)
 800284e:	4618      	mov	r0, r3
 8002850:	f7fe fb24 	bl	8000e9c <__aeabi_fcmplt>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d10b      	bne.n	8002872 <updatePID+0x6a>
 800285a:	4b42      	ldr	r3, [pc, #264]	@ (8002964 <updatePID+0x15c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002862:	493f      	ldr	r1, [pc, #252]	@ (8002960 <updatePID+0x158>)
 8002864:	4618      	mov	r0, r3
 8002866:	f7fe fb19 	bl	8000e9c <__aeabi_fcmplt>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 8081 	beq.w	8002974 <updatePID+0x16c>
	{
		if (fabs(left_PWM_value) > 0.01 && fabs(left_PWM_value) < PWMMin)
 8002872:	4b3d      	ldr	r3, [pc, #244]	@ (8002968 <updatePID+0x160>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800287a:	4618      	mov	r0, r3
 800287c:	f7fd ff32 	bl	80006e4 <__aeabi_f2d>
 8002880:	a32b      	add	r3, pc, #172	@ (adr r3, 8002930 <updatePID+0x128>)
 8002882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002886:	f7fe f803 	bl	8000890 <__aeabi_dcmpgt>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d01e      	beq.n	80028ce <updatePID+0xc6>
 8002890:	4b35      	ldr	r3, [pc, #212]	@ (8002968 <updatePID+0x160>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002898:	4a34      	ldr	r2, [pc, #208]	@ (800296c <updatePID+0x164>)
 800289a:	4611      	mov	r1, r2
 800289c:	4618      	mov	r0, r3
 800289e:	f7fe fafd 	bl	8000e9c <__aeabi_fcmplt>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d012      	beq.n	80028ce <updatePID+0xc6>
		{
			left_PWM_value = sign(left_PWM_value) * PWMMin;
 80028a8:	4b2f      	ldr	r3, [pc, #188]	@ (8002968 <updatePID+0x160>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f001 fb7f 	bl	8003fb0 <sign>
 80028b2:	4603      	mov	r3, r0
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7fe f8ff 	bl	8000ab8 <__aeabi_i2f>
 80028ba:	4603      	mov	r3, r0
 80028bc:	4a2b      	ldr	r2, [pc, #172]	@ (800296c <updatePID+0x164>)
 80028be:	4611      	mov	r1, r2
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7fe f94d 	bl	8000b60 <__aeabi_fmul>
 80028c6:	4603      	mov	r3, r0
 80028c8:	461a      	mov	r2, r3
 80028ca:	4b27      	ldr	r3, [pc, #156]	@ (8002968 <updatePID+0x160>)
 80028cc:	601a      	str	r2, [r3, #0]
		}

		if (fabs(right_PWM_value) > 0.01 && fabs(right_PWM_value) < PWMMin)
 80028ce:	4b28      	ldr	r3, [pc, #160]	@ (8002970 <updatePID+0x168>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7fd ff04 	bl	80006e4 <__aeabi_f2d>
 80028dc:	a314      	add	r3, pc, #80	@ (adr r3, 8002930 <updatePID+0x128>)
 80028de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e2:	f7fd ffd5 	bl	8000890 <__aeabi_dcmpgt>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f000 8113 	beq.w	8002b14 <updatePID+0x30c>
 80028ee:	4b20      	ldr	r3, [pc, #128]	@ (8002970 <updatePID+0x168>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80028f6:	4a1d      	ldr	r2, [pc, #116]	@ (800296c <updatePID+0x164>)
 80028f8:	4611      	mov	r1, r2
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7fe face 	bl	8000e9c <__aeabi_fcmplt>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d100      	bne.n	8002908 <updatePID+0x100>
 8002906:	e105      	b.n	8002b14 <updatePID+0x30c>
		{
			right_PWM_value = sign(right_PWM_value) * PWMMin;
 8002908:	4b19      	ldr	r3, [pc, #100]	@ (8002970 <updatePID+0x168>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4618      	mov	r0, r3
 800290e:	f001 fb4f 	bl	8003fb0 <sign>
 8002912:	4603      	mov	r3, r0
 8002914:	4618      	mov	r0, r3
 8002916:	f7fe f8cf 	bl	8000ab8 <__aeabi_i2f>
 800291a:	4603      	mov	r3, r0
 800291c:	4a13      	ldr	r2, [pc, #76]	@ (800296c <updatePID+0x164>)
 800291e:	4611      	mov	r1, r2
 8002920:	4618      	mov	r0, r3
 8002922:	f7fe f91d 	bl	8000b60 <__aeabi_fmul>
 8002926:	4603      	mov	r3, r0
 8002928:	461a      	mov	r2, r3
 800292a:	4b11      	ldr	r3, [pc, #68]	@ (8002970 <updatePID+0x168>)
 800292c:	601a      	str	r2, [r3, #0]
		if (fabs(right_PWM_value) > 0.01 && fabs(right_PWM_value) < PWMMin)
 800292e:	e0f1      	b.n	8002b14 <updatePID+0x30c>
 8002930:	47ae147b 	.word	0x47ae147b
 8002934:	3f847ae1 	.word	0x3f847ae1
 8002938:	20000344 	.word	0x20000344
 800293c:	20000340 	.word	0x20000340
 8002940:	20000378 	.word	0x20000378
 8002944:	20000374 	.word	0x20000374
 8002948:	200003b0 	.word	0x200003b0
 800294c:	200003ac 	.word	0x200003ac
 8002950:	200003e0 	.word	0x200003e0
 8002954:	200003dc 	.word	0x200003dc
 8002958:	2000040c 	.word	0x2000040c
 800295c:	20000370 	.word	0x20000370
 8002960:	42700000 	.word	0x42700000
 8002964:	2000033c 	.word	0x2000033c
 8002968:	20000410 	.word	0x20000410
 800296c:	3e99999a 	.word	0x3e99999a
 8002970:	20000414 	.word	0x20000414
		}
	}
	else	// If under PWM limits, normalize values
	{
		if (fabs(left_PWM_value) > 0.01 && fabs(left_PWM_value) < PWMMin)
 8002974:	4bb0      	ldr	r3, [pc, #704]	@ (8002c38 <updatePID+0x430>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800297c:	4618      	mov	r0, r3
 800297e:	f7fd feb1 	bl	80006e4 <__aeabi_f2d>
 8002982:	a3a9      	add	r3, pc, #676	@ (adr r3, 8002c28 <updatePID+0x420>)
 8002984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002988:	f7fd ff82 	bl	8000890 <__aeabi_dcmpgt>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d058      	beq.n	8002a44 <updatePID+0x23c>
 8002992:	4ba9      	ldr	r3, [pc, #676]	@ (8002c38 <updatePID+0x430>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800299a:	4aa8      	ldr	r2, [pc, #672]	@ (8002c3c <updatePID+0x434>)
 800299c:	4611      	mov	r1, r2
 800299e:	4618      	mov	r0, r3
 80029a0:	f7fe fa7c 	bl	8000e9c <__aeabi_fcmplt>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d04c      	beq.n	8002a44 <updatePID+0x23c>
		{
			right_PWM_value = right_PWM_value - (sign(right_PWM_value) * (PWMMin - fabs(left_PWM_value)));
 80029aa:	4ba5      	ldr	r3, [pc, #660]	@ (8002c40 <updatePID+0x438>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7fd fe98 	bl	80006e4 <__aeabi_f2d>
 80029b4:	4604      	mov	r4, r0
 80029b6:	460d      	mov	r5, r1
 80029b8:	4ba1      	ldr	r3, [pc, #644]	@ (8002c40 <updatePID+0x438>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f001 faf7 	bl	8003fb0 <sign>
 80029c2:	4603      	mov	r3, r0
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7fd fe7b 	bl	80006c0 <__aeabi_i2d>
 80029ca:	4680      	mov	r8, r0
 80029cc:	4689      	mov	r9, r1
 80029ce:	4b9b      	ldr	r3, [pc, #620]	@ (8002c3c <updatePID+0x434>)
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7fd fe87 	bl	80006e4 <__aeabi_f2d>
 80029d6:	4682      	mov	sl, r0
 80029d8:	468b      	mov	fp, r1
 80029da:	4b97      	ldr	r3, [pc, #604]	@ (8002c38 <updatePID+0x430>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7fd fe7e 	bl	80006e4 <__aeabi_f2d>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	4650      	mov	r0, sl
 80029ee:	4659      	mov	r1, fp
 80029f0:	f7fd fd18 	bl	8000424 <__aeabi_dsub>
 80029f4:	4602      	mov	r2, r0
 80029f6:	460b      	mov	r3, r1
 80029f8:	4640      	mov	r0, r8
 80029fa:	4649      	mov	r1, r9
 80029fc:	f7fd fbe4 	bl	80001c8 <__aeabi_dmul>
 8002a00:	4602      	mov	r2, r0
 8002a02:	460b      	mov	r3, r1
 8002a04:	4620      	mov	r0, r4
 8002a06:	4629      	mov	r1, r5
 8002a08:	f7fd fd0c 	bl	8000424 <__aeabi_dsub>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	460b      	mov	r3, r1
 8002a10:	4610      	mov	r0, r2
 8002a12:	4619      	mov	r1, r3
 8002a14:	f7fd ff46 	bl	80008a4 <__aeabi_d2f>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	4a89      	ldr	r2, [pc, #548]	@ (8002c40 <updatePID+0x438>)
 8002a1c:	6013      	str	r3, [r2, #0]
			left_PWM_value = sign(left_PWM_value) * PWMMin;
 8002a1e:	4b86      	ldr	r3, [pc, #536]	@ (8002c38 <updatePID+0x430>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f001 fac4 	bl	8003fb0 <sign>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7fe f844 	bl	8000ab8 <__aeabi_i2f>
 8002a30:	4603      	mov	r3, r0
 8002a32:	4a82      	ldr	r2, [pc, #520]	@ (8002c3c <updatePID+0x434>)
 8002a34:	4611      	mov	r1, r2
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7fe f892 	bl	8000b60 <__aeabi_fmul>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	461a      	mov	r2, r3
 8002a40:	4b7d      	ldr	r3, [pc, #500]	@ (8002c38 <updatePID+0x430>)
 8002a42:	601a      	str	r2, [r3, #0]
		}

		if (fabs(right_PWM_value) > 0.01 && fabs(right_PWM_value) < PWMMin)
 8002a44:	4b7e      	ldr	r3, [pc, #504]	@ (8002c40 <updatePID+0x438>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7fd fe49 	bl	80006e4 <__aeabi_f2d>
 8002a52:	a375      	add	r3, pc, #468	@ (adr r3, 8002c28 <updatePID+0x420>)
 8002a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a58:	f7fd ff1a 	bl	8000890 <__aeabi_dcmpgt>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d058      	beq.n	8002b14 <updatePID+0x30c>
 8002a62:	4b77      	ldr	r3, [pc, #476]	@ (8002c40 <updatePID+0x438>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a6a:	4a74      	ldr	r2, [pc, #464]	@ (8002c3c <updatePID+0x434>)
 8002a6c:	4611      	mov	r1, r2
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fe fa14 	bl	8000e9c <__aeabi_fcmplt>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d04c      	beq.n	8002b14 <updatePID+0x30c>
		{
			left_PWM_value = left_PWM_value - (sign(left_PWM_value) * (PWMMin - fabs(right_PWM_value)));
 8002a7a:	4b6f      	ldr	r3, [pc, #444]	@ (8002c38 <updatePID+0x430>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fd fe30 	bl	80006e4 <__aeabi_f2d>
 8002a84:	4604      	mov	r4, r0
 8002a86:	460d      	mov	r5, r1
 8002a88:	4b6b      	ldr	r3, [pc, #428]	@ (8002c38 <updatePID+0x430>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f001 fa8f 	bl	8003fb0 <sign>
 8002a92:	4603      	mov	r3, r0
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7fd fe13 	bl	80006c0 <__aeabi_i2d>
 8002a9a:	4680      	mov	r8, r0
 8002a9c:	4689      	mov	r9, r1
 8002a9e:	4b67      	ldr	r3, [pc, #412]	@ (8002c3c <updatePID+0x434>)
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7fd fe1f 	bl	80006e4 <__aeabi_f2d>
 8002aa6:	4682      	mov	sl, r0
 8002aa8:	468b      	mov	fp, r1
 8002aaa:	4b65      	ldr	r3, [pc, #404]	@ (8002c40 <updatePID+0x438>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7fd fe16 	bl	80006e4 <__aeabi_f2d>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	460b      	mov	r3, r1
 8002abc:	4650      	mov	r0, sl
 8002abe:	4659      	mov	r1, fp
 8002ac0:	f7fd fcb0 	bl	8000424 <__aeabi_dsub>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	4640      	mov	r0, r8
 8002aca:	4649      	mov	r1, r9
 8002acc:	f7fd fb7c 	bl	80001c8 <__aeabi_dmul>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	4620      	mov	r0, r4
 8002ad6:	4629      	mov	r1, r5
 8002ad8:	f7fd fca4 	bl	8000424 <__aeabi_dsub>
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	4610      	mov	r0, r2
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	f7fd fede 	bl	80008a4 <__aeabi_d2f>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	4a53      	ldr	r2, [pc, #332]	@ (8002c38 <updatePID+0x430>)
 8002aec:	6013      	str	r3, [r2, #0]
			right_PWM_value = sign(right_PWM_value) * PWMMin;
 8002aee:	4b54      	ldr	r3, [pc, #336]	@ (8002c40 <updatePID+0x438>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f001 fa5c 	bl	8003fb0 <sign>
 8002af8:	4603      	mov	r3, r0
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7fd ffdc 	bl	8000ab8 <__aeabi_i2f>
 8002b00:	4603      	mov	r3, r0
 8002b02:	4a4e      	ldr	r2, [pc, #312]	@ (8002c3c <updatePID+0x434>)
 8002b04:	4611      	mov	r1, r2
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7fe f82a 	bl	8000b60 <__aeabi_fmul>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	461a      	mov	r2, r3
 8002b10:	4b4b      	ldr	r3, [pc, #300]	@ (8002c40 <updatePID+0x438>)
 8002b12:	601a      	str	r2, [r3, #0]
		}
	}

	if (fabs(left_PWM_value) > PWM_MAX)
 8002b14:	4b48      	ldr	r3, [pc, #288]	@ (8002c38 <updatePID+0x430>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7fd fde1 	bl	80006e4 <__aeabi_f2d>
 8002b22:	a343      	add	r3, pc, #268	@ (adr r3, 8002c30 <updatePID+0x428>)
 8002b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b28:	f7fd feb2 	bl	8000890 <__aeabi_dcmpgt>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d016      	beq.n	8002b60 <updatePID+0x358>
	{
		left_PWM_value = sign(left_PWM_value) * PWM_MAX;
 8002b32:	4b41      	ldr	r3, [pc, #260]	@ (8002c38 <updatePID+0x430>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f001 fa3a 	bl	8003fb0 <sign>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7fd fdbe 	bl	80006c0 <__aeabi_i2d>
 8002b44:	a33a      	add	r3, pc, #232	@ (adr r3, 8002c30 <updatePID+0x428>)
 8002b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4a:	f7fd fb3d 	bl	80001c8 <__aeabi_dmul>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	460b      	mov	r3, r1
 8002b52:	4610      	mov	r0, r2
 8002b54:	4619      	mov	r1, r3
 8002b56:	f7fd fea5 	bl	80008a4 <__aeabi_d2f>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	4a36      	ldr	r2, [pc, #216]	@ (8002c38 <updatePID+0x430>)
 8002b5e:	6013      	str	r3, [r2, #0]
	}

	if (fabs(right_PWM_value) > PWM_MAX)
 8002b60:	4b37      	ldr	r3, [pc, #220]	@ (8002c40 <updatePID+0x438>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7fd fdbb 	bl	80006e4 <__aeabi_f2d>
 8002b6e:	a330      	add	r3, pc, #192	@ (adr r3, 8002c30 <updatePID+0x428>)
 8002b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b74:	f7fd fe8c 	bl	8000890 <__aeabi_dcmpgt>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d016      	beq.n	8002bac <updatePID+0x3a4>
	{
		right_PWM_value = sign(right_PWM_value) * PWM_MAX;
 8002b7e:	4b30      	ldr	r3, [pc, #192]	@ (8002c40 <updatePID+0x438>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f001 fa14 	bl	8003fb0 <sign>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7fd fd98 	bl	80006c0 <__aeabi_i2d>
 8002b90:	a327      	add	r3, pc, #156	@ (adr r3, 8002c30 <updatePID+0x428>)
 8002b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b96:	f7fd fb17 	bl	80001c8 <__aeabi_dmul>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	4610      	mov	r0, r2
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	f7fd fe7f 	bl	80008a4 <__aeabi_d2f>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	4a25      	ldr	r2, [pc, #148]	@ (8002c40 <updatePID+0x438>)
 8002baa:	6013      	str	r3, [r2, #0]



//////////////////	SET PWM VALUES AND CHECK FOR GOAL REACHED ////////////////////////

	setMotorLPWM(left_PWM_value);
 8002bac:	4b22      	ldr	r3, [pc, #136]	@ (8002c38 <updatePID+0x430>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff fa69 	bl	8002088 <setMotorLPWM>
	setMotorRPWM(right_PWM_value);
 8002bb6:	4b22      	ldr	r3, [pc, #136]	@ (8002c40 <updatePID+0x438>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7ff faa0 	bl	8002100 <setMotorRPWM>

	if(angleError < 30 && angleError > -30 && distanceError < 30 && distanceError > -30)
 8002bc0:	4b20      	ldr	r3, [pc, #128]	@ (8002c44 <updatePID+0x43c>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4920      	ldr	r1, [pc, #128]	@ (8002c48 <updatePID+0x440>)
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7fe f968 	bl	8000e9c <__aeabi_fcmplt>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d020      	beq.n	8002c14 <updatePID+0x40c>
 8002bd2:	4b1c      	ldr	r3, [pc, #112]	@ (8002c44 <updatePID+0x43c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	491d      	ldr	r1, [pc, #116]	@ (8002c4c <updatePID+0x444>)
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7fe f97d 	bl	8000ed8 <__aeabi_fcmpgt>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d017      	beq.n	8002c14 <updatePID+0x40c>
 8002be4:	4b1a      	ldr	r3, [pc, #104]	@ (8002c50 <updatePID+0x448>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4917      	ldr	r1, [pc, #92]	@ (8002c48 <updatePID+0x440>)
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7fe f956 	bl	8000e9c <__aeabi_fcmplt>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00e      	beq.n	8002c14 <updatePID+0x40c>
 8002bf6:	4b16      	ldr	r3, [pc, #88]	@ (8002c50 <updatePID+0x448>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4914      	ldr	r1, [pc, #80]	@ (8002c4c <updatePID+0x444>)
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7fe f96b 	bl	8000ed8 <__aeabi_fcmpgt>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d005      	beq.n	8002c14 <updatePID+0x40c>
		goal_reached_timer++;					// Increments goal reached timer when errors are within a certain threshold
 8002c08:	4b12      	ldr	r3, [pc, #72]	@ (8002c54 <updatePID+0x44c>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	4a11      	ldr	r2, [pc, #68]	@ (8002c54 <updatePID+0x44c>)
 8002c10:	6013      	str	r3, [r2, #0]
 8002c12:	e002      	b.n	8002c1a <updatePID+0x412>

	else
		goal_reached_timer = 0;
 8002c14:	4b0f      	ldr	r3, [pc, #60]	@ (8002c54 <updatePID+0x44c>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]

///////////////////// UPDATE PREVIOUS ANGLE AND DISTANCE ERRORS //////////////////////////

	oldDistanceCorrection = distanceCorrection;
 8002c1a:	4b0f      	ldr	r3, [pc, #60]	@ (8002c58 <updatePID+0x450>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a0f      	ldr	r2, [pc, #60]	@ (8002c5c <updatePID+0x454>)
 8002c20:	6013      	str	r3, [r2, #0]

	for(int i = 9; i > 0; i--)
 8002c22:	2309      	movs	r3, #9
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	e027      	b.n	8002c78 <updatePID+0x470>
 8002c28:	47ae147b 	.word	0x47ae147b
 8002c2c:	3f847ae1 	.word	0x3f847ae1
 8002c30:	66666666 	.word	0x66666666
 8002c34:	3fee6666 	.word	0x3fee6666
 8002c38:	20000410 	.word	0x20000410
 8002c3c:	3e99999a 	.word	0x3e99999a
 8002c40:	20000414 	.word	0x20000414
 8002c44:	2000033c 	.word	0x2000033c
 8002c48:	41f00000 	.word	0x41f00000
 8002c4c:	c1f00000 	.word	0xc1f00000
 8002c50:	20000370 	.word	0x20000370
 8002c54:	20000418 	.word	0x20000418
 8002c58:	200003a0 	.word	0x200003a0
 8002c5c:	200003a4 	.word	0x200003a4
		oldAngleErrors[i] = oldAngleErrors[i-1];	// Adds the newest angleError to array and shifts everything to the right
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	3b01      	subs	r3, #1
 8002c64:	4a2b      	ldr	r2, [pc, #172]	@ (8002d14 <updatePID+0x50c>)
 8002c66:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002c6a:	492a      	ldr	r1, [pc, #168]	@ (8002d14 <updatePID+0x50c>)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 9; i > 0; i--)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	3b01      	subs	r3, #1
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	dcf0      	bgt.n	8002c60 <updatePID+0x458>
	oldAngleErrors[0] = angleError;
 8002c7e:	4b26      	ldr	r3, [pc, #152]	@ (8002d18 <updatePID+0x510>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a24      	ldr	r2, [pc, #144]	@ (8002d14 <updatePID+0x50c>)
 8002c84:	6013      	str	r3, [r2, #0]

	for(int i = 9; i > 0; i--)
 8002c86:	2309      	movs	r3, #9
 8002c88:	60bb      	str	r3, [r7, #8]
 8002c8a:	e00b      	b.n	8002ca4 <updatePID+0x49c>
		oldDistanceErrors[i] = oldDistanceErrors[i-1];	// Adds the newest distanceError to array and shifts everything right
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	4a22      	ldr	r2, [pc, #136]	@ (8002d1c <updatePID+0x514>)
 8002c92:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002c96:	4921      	ldr	r1, [pc, #132]	@ (8002d1c <updatePID+0x514>)
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 9; i > 0; i--)
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	60bb      	str	r3, [r7, #8]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	dcf0      	bgt.n	8002c8c <updatePID+0x484>
	oldDistanceErrors[0] = distanceError;
 8002caa:	4b1d      	ldr	r3, [pc, #116]	@ (8002d20 <updatePID+0x518>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a1b      	ldr	r2, [pc, #108]	@ (8002d1c <updatePID+0x514>)
 8002cb0:	6013      	str	r3, [r2, #0]

	for(int i = 9; i > 0; i--)
 8002cb2:	2309      	movs	r3, #9
 8002cb4:	607b      	str	r3, [r7, #4]
 8002cb6:	e00b      	b.n	8002cd0 <updatePID+0x4c8>
		old_left_distances[i] = old_left_distances[i-1];
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	4a19      	ldr	r2, [pc, #100]	@ (8002d24 <updatePID+0x51c>)
 8002cbe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002cc2:	4918      	ldr	r1, [pc, #96]	@ (8002d24 <updatePID+0x51c>)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 9; i > 0; i--)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	607b      	str	r3, [r7, #4]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	dcf0      	bgt.n	8002cb8 <updatePID+0x4b0>
	old_left_distances[0] = left_distance;
 8002cd6:	4b14      	ldr	r3, [pc, #80]	@ (8002d28 <updatePID+0x520>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a12      	ldr	r2, [pc, #72]	@ (8002d24 <updatePID+0x51c>)
 8002cdc:	6013      	str	r3, [r2, #0]

	for(int i = 9; i > 0; i--)
 8002cde:	2309      	movs	r3, #9
 8002ce0:	603b      	str	r3, [r7, #0]
 8002ce2:	e00b      	b.n	8002cfc <updatePID+0x4f4>
		old_right_distances[i] = old_right_distances[i-1];
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	4a10      	ldr	r2, [pc, #64]	@ (8002d2c <updatePID+0x524>)
 8002cea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002cee:	490f      	ldr	r1, [pc, #60]	@ (8002d2c <updatePID+0x524>)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 9; i > 0; i--)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	603b      	str	r3, [r7, #0]
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	dcf0      	bgt.n	8002ce4 <updatePID+0x4dc>
	old_right_distances[0] = right_distance;
 8002d02:	4b0b      	ldr	r3, [pc, #44]	@ (8002d30 <updatePID+0x528>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a09      	ldr	r2, [pc, #36]	@ (8002d2c <updatePID+0x524>)
 8002d08:	6013      	str	r3, [r2, #0]

}
 8002d0a:	bf00      	nop
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d14:	20000344 	.word	0x20000344
 8002d18:	2000033c 	.word	0x2000033c
 8002d1c:	20000378 	.word	0x20000378
 8002d20:	20000370 	.word	0x20000370
 8002d24:	200003b0 	.word	0x200003b0
 8002d28:	200003a8 	.word	0x200003a8
 8002d2c:	200003e0 	.word	0x200003e0
 8002d30:	200003d8 	.word	0x200003d8

08002d34 <PIDdone>:

int8_t PIDdone(){ // There is no bool type in C. True/False values are represented as 1 or 0.
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0

	if (goal_reached_timer >= 50)
 8002d38:	4b06      	ldr	r3, [pc, #24]	@ (8002d54 <PIDdone+0x20>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2b31      	cmp	r3, #49	@ 0x31
 8002d3e:	dd06      	ble.n	8002d4e <PIDdone+0x1a>
	{
		resetPID();
 8002d40:	f000 f80a 	bl	8002d58 <resetPID>
		setState(REST);
 8002d44:	2000      	movs	r0, #0
 8002d46:	f7ff fa4b 	bl	80021e0 <setState>
		return 1;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e000      	b.n	8002d50 <PIDdone+0x1c>
	}
	else
		return 0;
 8002d4e:	2300      	movs	r3, #0

}
 8002d50:	4618      	mov	r0, r3
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	20000418 	.word	0x20000418

08002d58 <resetPID>:

void resetPID() {
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0

//////////////	RESET ALL ANGLE AND DISTANCE ERRORS TO 0	////////////////
	angleError = 0;
 8002d5e:	4b3f      	ldr	r3, [pc, #252]	@ (8002e5c <resetPID+0x104>)
 8002d60:	f04f 0200 	mov.w	r2, #0
 8002d64:	601a      	str	r2, [r3, #0]
	oldAngleError = 0;
 8002d66:	4b3e      	ldr	r3, [pc, #248]	@ (8002e60 <resetPID+0x108>)
 8002d68:	f04f 0200 	mov.w	r2, #0
 8002d6c:	601a      	str	r2, [r3, #0]
	angleCorrection = 0;
 8002d6e:	4b3d      	ldr	r3, [pc, #244]	@ (8002e64 <resetPID+0x10c>)
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < 10; i++)
 8002d76:	2300      	movs	r3, #0
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	e008      	b.n	8002d8e <resetPID+0x36>
		oldAngleErrors[i] = 0;
 8002d7c:	4a3a      	ldr	r2, [pc, #232]	@ (8002e68 <resetPID+0x110>)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f04f 0100 	mov.w	r1, #0
 8002d84:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	60fb      	str	r3, [r7, #12]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2b09      	cmp	r3, #9
 8002d92:	ddf3      	ble.n	8002d7c <resetPID+0x24>

	distanceError = 0;
 8002d94:	4b35      	ldr	r3, [pc, #212]	@ (8002e6c <resetPID+0x114>)
 8002d96:	f04f 0200 	mov.w	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
	oldDistanceError = 0;
 8002d9c:	4b34      	ldr	r3, [pc, #208]	@ (8002e70 <resetPID+0x118>)
 8002d9e:	f04f 0200 	mov.w	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]
	distanceCorrection = 0;
 8002da4:	4b33      	ldr	r3, [pc, #204]	@ (8002e74 <resetPID+0x11c>)
 8002da6:	f04f 0200 	mov.w	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < 10; i++)
 8002dac:	2300      	movs	r3, #0
 8002dae:	60bb      	str	r3, [r7, #8]
 8002db0:	e008      	b.n	8002dc4 <resetPID+0x6c>
		oldDistanceErrors[i] = 0;
 8002db2:	4a31      	ldr	r2, [pc, #196]	@ (8002e78 <resetPID+0x120>)
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	f04f 0100 	mov.w	r1, #0
 8002dba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++)
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	60bb      	str	r3, [r7, #8]
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	2b09      	cmp	r3, #9
 8002dc8:	ddf3      	ble.n	8002db2 <resetPID+0x5a>

	left_distance = 0;
 8002dca:	4b2c      	ldr	r3, [pc, #176]	@ (8002e7c <resetPID+0x124>)
 8002dcc:	f04f 0200 	mov.w	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]
	old_left_distance = 0;
 8002dd2:	4b2b      	ldr	r3, [pc, #172]	@ (8002e80 <resetPID+0x128>)
 8002dd4:	f04f 0200 	mov.w	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 10; i++)
 8002dda:	2300      	movs	r3, #0
 8002ddc:	607b      	str	r3, [r7, #4]
 8002dde:	e008      	b.n	8002df2 <resetPID+0x9a>
		old_left_distances[i] = 0;
 8002de0:	4a28      	ldr	r2, [pc, #160]	@ (8002e84 <resetPID+0x12c>)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f04f 0100 	mov.w	r1, #0
 8002de8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	3301      	adds	r3, #1
 8002df0:	607b      	str	r3, [r7, #4]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b09      	cmp	r3, #9
 8002df6:	ddf3      	ble.n	8002de0 <resetPID+0x88>

	right_distance = 0;
 8002df8:	4b23      	ldr	r3, [pc, #140]	@ (8002e88 <resetPID+0x130>)
 8002dfa:	f04f 0200 	mov.w	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]
	old_right_distance = 0;
 8002e00:	4b22      	ldr	r3, [pc, #136]	@ (8002e8c <resetPID+0x134>)
 8002e02:	f04f 0200 	mov.w	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 10; i++)
 8002e08:	2300      	movs	r3, #0
 8002e0a:	603b      	str	r3, [r7, #0]
 8002e0c:	e008      	b.n	8002e20 <resetPID+0xc8>
		old_right_distances[i] = 0;
 8002e0e:	4a20      	ldr	r2, [pc, #128]	@ (8002e90 <resetPID+0x138>)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	f04f 0100 	mov.w	r1, #0
 8002e16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	603b      	str	r3, [r7, #0]
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	2b09      	cmp	r3, #9
 8002e24:	ddf3      	ble.n	8002e0e <resetPID+0xb6>

	IRadjustment = 0;
 8002e26:	4b1b      	ldr	r3, [pc, #108]	@ (8002e94 <resetPID+0x13c>)
 8002e28:	f04f 0200 	mov.w	r2, #0
 8002e2c:	601a      	str	r2, [r3, #0]

////////////// 	RESET ALL GOALS AND ENCODER COUNTS TO 0 	///////////////////
	goal_angle = 0;
 8002e2e:	4b1a      	ldr	r3, [pc, #104]	@ (8002e98 <resetPID+0x140>)
 8002e30:	f04f 0200 	mov.w	r2, #0
 8002e34:	601a      	str	r2, [r3, #0]
	goal_distance = 0;
 8002e36:	4b19      	ldr	r3, [pc, #100]	@ (8002e9c <resetPID+0x144>)
 8002e38:	f04f 0200 	mov.w	r2, #0
 8002e3c:	601a      	str	r2, [r3, #0]
	goal_reached_timer = 0;
 8002e3e:	4b18      	ldr	r3, [pc, #96]	@ (8002ea0 <resetPID+0x148>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]

	resetEncoders();
 8002e44:	f7fe faa6 	bl	8001394 <resetEncoders>
	resetMotors();
 8002e48:	f7ff f996 	bl	8002178 <resetMotors>

	setState(REST);
 8002e4c:	2000      	movs	r0, #0
 8002e4e:	f7ff f9c7 	bl	80021e0 <setState>

}
 8002e52:	bf00      	nop
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	2000033c 	.word	0x2000033c
 8002e60:	20000340 	.word	0x20000340
 8002e64:	2000036c 	.word	0x2000036c
 8002e68:	20000344 	.word	0x20000344
 8002e6c:	20000370 	.word	0x20000370
 8002e70:	20000374 	.word	0x20000374
 8002e74:	200003a0 	.word	0x200003a0
 8002e78:	20000378 	.word	0x20000378
 8002e7c:	200003a8 	.word	0x200003a8
 8002e80:	200003ac 	.word	0x200003ac
 8002e84:	200003b0 	.word	0x200003b0
 8002e88:	200003d8 	.word	0x200003d8
 8002e8c:	200003dc 	.word	0x200003dc
 8002e90:	200003e0 	.word	0x200003e0
 8002e94:	20000408 	.word	0x20000408
 8002e98:	20000334 	.word	0x20000334
 8002e9c:	20000330 	.word	0x20000330
 8002ea0:	20000418 	.word	0x20000418

08002ea4 <newCell>:
int16_t vertWall[16][17];

int16_t discovered[16][16];

struct Cell* newCell(int r, int c)           // Acts as a constructor for a cell cuz C is annoying
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
    struct Cell* p = malloc(sizeof(struct Cell));
 8002eae:	2008      	movs	r0, #8
 8002eb0:	f004 f9b4 	bl	800721c <malloc>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	60fb      	str	r3, [r7, #12]
    p->row = r;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	601a      	str	r2, [r3, #0]
    p->col = c;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	605a      	str	r2, [r3, #4]
    return p;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
	...

08002ed0 <insertQueue>:

void insertQueue(struct Cell* input) {
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
    queue[queueEnd] = input;
 8002ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8002f18 <insertQueue+0x48>)
 8002eda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ede:	4619      	mov	r1, r3
 8002ee0:	4a0e      	ldr	r2, [pc, #56]	@ (8002f1c <insertQueue+0x4c>)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

    queueEnd++;
 8002ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8002f18 <insertQueue+0x48>)
 8002eea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	b21a      	sxth	r2, r3
 8002ef6:	4b08      	ldr	r3, [pc, #32]	@ (8002f18 <insertQueue+0x48>)
 8002ef8:	801a      	strh	r2, [r3, #0]

    if (queueEnd == 512) {
 8002efa:	4b07      	ldr	r3, [pc, #28]	@ (8002f18 <insertQueue+0x48>)
 8002efc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f04:	d102      	bne.n	8002f0c <insertQueue+0x3c>
        queueEnd = 0;
 8002f06:	4b04      	ldr	r3, [pc, #16]	@ (8002f18 <insertQueue+0x48>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	801a      	strh	r2, [r3, #0]
        //reset cause circular queue
    }
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bc80      	pop	{r7}
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	20000e2a 	.word	0x20000e2a
 8002f1c:	20000628 	.word	0x20000628

08002f20 <popQueueFront>:

void popQueueFront()
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
    free(queueFront());
 8002f24:	f000 f81a 	bl	8002f5c <queueFront>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f004 f97e 	bl	800722c <free>

    queueStart++;
 8002f30:	4b09      	ldr	r3, [pc, #36]	@ (8002f58 <popQueueFront+0x38>)
 8002f32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	3301      	adds	r3, #1
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	b21a      	sxth	r2, r3
 8002f3e:	4b06      	ldr	r3, [pc, #24]	@ (8002f58 <popQueueFront+0x38>)
 8002f40:	801a      	strh	r2, [r3, #0]
    if (queueStart == 512) {
 8002f42:	4b05      	ldr	r3, [pc, #20]	@ (8002f58 <popQueueFront+0x38>)
 8002f44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f4c:	d102      	bne.n	8002f54 <popQueueFront+0x34>
        queueStart = 0;
 8002f4e:	4b02      	ldr	r3, [pc, #8]	@ (8002f58 <popQueueFront+0x38>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	801a      	strh	r2, [r3, #0]
        //reset cause circular queue
    }
}
 8002f54:	bf00      	nop
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	20000e28 	.word	0x20000e28

08002f5c <queueFront>:

struct Cell* queueFront()
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
    return queue[queueStart];
 8002f60:	4b05      	ldr	r3, [pc, #20]	@ (8002f78 <queueFront+0x1c>)
 8002f62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f66:	461a      	mov	r2, r3
 8002f68:	4b04      	ldr	r3, [pc, #16]	@ (8002f7c <queueFront+0x20>)
 8002f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bc80      	pop	{r7}
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	20000e28 	.word	0x20000e28
 8002f7c:	20000628 	.word	0x20000628

08002f80 <initElements>:

void initElements()
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
    currPos = newCell(15, 0);           // Sets current position to row 15, column 0
 8002f86:	2100      	movs	r1, #0
 8002f88:	200f      	movs	r0, #15
 8002f8a:	f7ff ff8b 	bl	8002ea4 <newCell>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	4a34      	ldr	r2, [pc, #208]	@ (8003064 <initElements+0xe4>)
 8002f92:	6013      	str	r3, [r2, #0]
    currHead = NORTH;                    // Sets current heading to north
 8002f94:	4b34      	ldr	r3, [pc, #208]	@ (8003068 <initElements+0xe8>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	701a      	strb	r2, [r3, #0]

    if (HAL_GPIO_ReadPin(Switch2_GPIO_Port, Switch2_Pin) == GPIO_PIN_SET)	// This is not the first run and we want to load maze
 8002f9a:	2104      	movs	r1, #4
 8002f9c:	4833      	ldr	r0, [pc, #204]	@ (800306c <initElements+0xec>)
 8002f9e:	f002 fd77 	bl	8005a90 <HAL_GPIO_ReadPin>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d102      	bne.n	8002fae <initElements+0x2e>
    {
    	loadMaze();
 8002fa8:	f000 fd4a 	bl	8003a40 <loadMaze>
 8002fac:	e04f      	b.n	800304e <initElements+0xce>
    }
    else																	// We don't want to load maze from memory
    {
        for (int i = 0; i < 17; i++) {
 8002fae:	2300      	movs	r3, #0
 8002fb0:	617b      	str	r3, [r7, #20]
 8002fb2:	e013      	b.n	8002fdc <initElements+0x5c>
            for (int j = 0; j < 16; j++) {
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	613b      	str	r3, [r7, #16]
 8002fb8:	e00a      	b.n	8002fd0 <initElements+0x50>
                horzWall[i][j] = 0;
 8002fba:	492d      	ldr	r1, [pc, #180]	@ (8003070 <initElements+0xf0>)
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	011a      	lsls	r2, r3, #4
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            for (int j = 0; j < 16; j++) {
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	613b      	str	r3, [r7, #16]
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	2b0f      	cmp	r3, #15
 8002fd4:	ddf1      	ble.n	8002fba <initElements+0x3a>
        for (int i = 0; i < 17; i++) {
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	3301      	adds	r3, #1
 8002fda:	617b      	str	r3, [r7, #20]
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	2b10      	cmp	r3, #16
 8002fe0:	dde8      	ble.n	8002fb4 <initElements+0x34>
            }
        }
        for (int i = 0; i < 16; i++) {
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60fb      	str	r3, [r7, #12]
 8002fe6:	e015      	b.n	8003014 <initElements+0x94>
            for (int j = 0; j < 17; j++) {
 8002fe8:	2300      	movs	r3, #0
 8002fea:	60bb      	str	r3, [r7, #8]
 8002fec:	e00c      	b.n	8003008 <initElements+0x88>
                vertWall[i][j] = 0;
 8002fee:	4921      	ldr	r1, [pc, #132]	@ (8003074 <initElements+0xf4>)
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	011b      	lsls	r3, r3, #4
 8002ff6:	4413      	add	r3, r2
 8002ff8:	68ba      	ldr	r2, [r7, #8]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            for (int j = 0; j < 17; j++) {
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	3301      	adds	r3, #1
 8003006:	60bb      	str	r3, [r7, #8]
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	2b10      	cmp	r3, #16
 800300c:	ddef      	ble.n	8002fee <initElements+0x6e>
        for (int i = 0; i < 16; i++) {
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	3301      	adds	r3, #1
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2b0f      	cmp	r3, #15
 8003018:	dde6      	ble.n	8002fe8 <initElements+0x68>
            }
        }
		for (int i = 0; i < 16; i++) {
 800301a:	2300      	movs	r3, #0
 800301c:	607b      	str	r3, [r7, #4]
 800301e:	e013      	b.n	8003048 <initElements+0xc8>
			for (int j = 0; j < 16; j++) {
 8003020:	2300      	movs	r3, #0
 8003022:	603b      	str	r3, [r7, #0]
 8003024:	e00a      	b.n	800303c <initElements+0xbc>
				discovered[i][j] = 0;
 8003026:	4914      	ldr	r1, [pc, #80]	@ (8003078 <initElements+0xf8>)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	011a      	lsls	r2, r3, #4
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	4413      	add	r3, r2
 8003030:	2200      	movs	r2, #0
 8003032:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for (int j = 0; j < 16; j++) {
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	3301      	adds	r3, #1
 800303a:	603b      	str	r3, [r7, #0]
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	2b0f      	cmp	r3, #15
 8003040:	ddf1      	ble.n	8003026 <initElements+0xa6>
		for (int i = 0; i < 16; i++) {
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	3301      	adds	r3, #1
 8003046:	607b      	str	r3, [r7, #4]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b0f      	cmp	r3, #15
 800304c:	dde8      	ble.n	8003020 <initElements+0xa0>
			}
		}
    }

    queueStart = 0;
 800304e:	4b0b      	ldr	r3, [pc, #44]	@ (800307c <initElements+0xfc>)
 8003050:	2200      	movs	r2, #0
 8003052:	801a      	strh	r2, [r3, #0]
    queueEnd = 0;
 8003054:	4b0a      	ldr	r3, [pc, #40]	@ (8003080 <initElements+0x100>)
 8003056:	2200      	movs	r2, #0
 8003058:	801a      	strh	r2, [r3, #0]
}
 800305a:	bf00      	nop
 800305c:	3718      	adds	r7, #24
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	20000420 	.word	0x20000420
 8003068:	20000424 	.word	0x20000424
 800306c:	40020c00 	.word	0x40020c00
 8003070:	20000e2c 	.word	0x20000e2c
 8003074:	2000104c 	.word	0x2000104c
 8003078:	2000126c 	.word	0x2000126c
 800307c:	20000e28 	.word	0x20000e28
 8003080:	20000e2a 	.word	0x20000e2a

08003084 <setWall>:

void setWall(int dir)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
    switch (dir)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b03      	cmp	r3, #3
 8003090:	d844      	bhi.n	800311c <setWall+0x98>
 8003092:	a201      	add	r2, pc, #4	@ (adr r2, 8003098 <setWall+0x14>)
 8003094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003098:	080030a9 	.word	0x080030a9
 800309c:	080030c3 	.word	0x080030c3
 80030a0:	080030e3 	.word	0x080030e3
 80030a4:	080030ff 	.word	0x080030ff
    {
    case NORTH:
        horzWall[currPos->row][currPos->col] = 1;   // Sets the 2D array value to 1 to represent true (there's no bool type in C)
 80030a8:	4b1f      	ldr	r3, [pc, #124]	@ (8003128 <setWall+0xa4>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003128 <setWall+0xa4>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	491d      	ldr	r1, [pc, #116]	@ (800312c <setWall+0xa8>)
 80030b6:	0112      	lsls	r2, r2, #4
 80030b8:	4413      	add	r3, r2
 80030ba:	2201      	movs	r2, #1
 80030bc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        break;
 80030c0:	e02c      	b.n	800311c <setWall+0x98>
    case EAST:
        vertWall[currPos->row][currPos->col + 1] = 1;   // May need to check 2D array logic my head hurts lol
 80030c2:	4b19      	ldr	r3, [pc, #100]	@ (8003128 <setWall+0xa4>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	4b17      	ldr	r3, [pc, #92]	@ (8003128 <setWall+0xa4>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	1c59      	adds	r1, r3, #1
 80030d0:	4817      	ldr	r0, [pc, #92]	@ (8003130 <setWall+0xac>)
 80030d2:	4613      	mov	r3, r2
 80030d4:	011b      	lsls	r3, r3, #4
 80030d6:	4413      	add	r3, r2
 80030d8:	440b      	add	r3, r1
 80030da:	2201      	movs	r2, #1
 80030dc:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        break;
 80030e0:	e01c      	b.n	800311c <setWall+0x98>
    case SOUTH:
        horzWall[currPos->row + 1][currPos->col] = 1;
 80030e2:	4b11      	ldr	r3, [pc, #68]	@ (8003128 <setWall+0xa4>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	1c5a      	adds	r2, r3, #1
 80030ea:	4b0f      	ldr	r3, [pc, #60]	@ (8003128 <setWall+0xa4>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	490e      	ldr	r1, [pc, #56]	@ (800312c <setWall+0xa8>)
 80030f2:	0112      	lsls	r2, r2, #4
 80030f4:	4413      	add	r3, r2
 80030f6:	2201      	movs	r2, #1
 80030f8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        break;
 80030fc:	e00e      	b.n	800311c <setWall+0x98>
    case WEST:
        vertWall[currPos->row][currPos->col] = 1;
 80030fe:	4b0a      	ldr	r3, [pc, #40]	@ (8003128 <setWall+0xa4>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	4b08      	ldr	r3, [pc, #32]	@ (8003128 <setWall+0xa4>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6859      	ldr	r1, [r3, #4]
 800310a:	4809      	ldr	r0, [pc, #36]	@ (8003130 <setWall+0xac>)
 800310c:	4613      	mov	r3, r2
 800310e:	011b      	lsls	r3, r3, #4
 8003110:	4413      	add	r3, r2
 8003112:	440b      	add	r3, r1
 8003114:	2201      	movs	r2, #1
 8003116:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        break;
 800311a:	bf00      	nop
    }
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	bc80      	pop	{r7}
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	20000420 	.word	0x20000420
 800312c:	20000e2c 	.word	0x20000e2c
 8003130:	2000104c 	.word	0x2000104c

08003134 <detectWalls>:

void detectWalls()
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
    switch (currHead)
 8003138:	4b44      	ldr	r3, [pc, #272]	@ (800324c <detectWalls+0x118>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	2b03      	cmp	r3, #3
 800313e:	d876      	bhi.n	800322e <detectWalls+0xfa>
 8003140:	a201      	add	r2, pc, #4	@ (adr r2, 8003148 <detectWalls+0x14>)
 8003142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003146:	bf00      	nop
 8003148:	08003159 	.word	0x08003159
 800314c:	0800318b 	.word	0x0800318b
 8003150:	080031bd 	.word	0x080031bd
 8003154:	080031ef 	.word	0x080031ef
    {
    case NORTH:
        if (frontWallCheck())
 8003158:	f000 ff0e 	bl	8003f78 <frontWallCheck>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d002      	beq.n	8003168 <detectWalls+0x34>
        {
            setWall(NORTH);
 8003162:	2000      	movs	r0, #0
 8003164:	f7ff ff8e 	bl	8003084 <setWall>
        }
        if (leftWallCheck())
 8003168:	f000 fece 	bl	8003f08 <leftWallCheck>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d002      	beq.n	8003178 <detectWalls+0x44>
        {
            setWall(WEST);
 8003172:	2003      	movs	r0, #3
 8003174:	f7ff ff86 	bl	8003084 <setWall>
        }
        if (rightWallCheck())
 8003178:	f000 fee2 	bl	8003f40 <rightWallCheck>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d04e      	beq.n	8003220 <detectWalls+0xec>
        {
            setWall(EAST);
 8003182:	2001      	movs	r0, #1
 8003184:	f7ff ff7e 	bl	8003084 <setWall>
        }
        break;
 8003188:	e04a      	b.n	8003220 <detectWalls+0xec>
    case EAST:
        if (frontWallCheck())
 800318a:	f000 fef5 	bl	8003f78 <frontWallCheck>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d002      	beq.n	800319a <detectWalls+0x66>
        {
            setWall(EAST);
 8003194:	2001      	movs	r0, #1
 8003196:	f7ff ff75 	bl	8003084 <setWall>
        }
        if (leftWallCheck())
 800319a:	f000 feb5 	bl	8003f08 <leftWallCheck>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d002      	beq.n	80031aa <detectWalls+0x76>
        {
            setWall(NORTH);
 80031a4:	2000      	movs	r0, #0
 80031a6:	f7ff ff6d 	bl	8003084 <setWall>
        }
        if (rightWallCheck())
 80031aa:	f000 fec9 	bl	8003f40 <rightWallCheck>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d037      	beq.n	8003224 <detectWalls+0xf0>
        {
            setWall(SOUTH);
 80031b4:	2002      	movs	r0, #2
 80031b6:	f7ff ff65 	bl	8003084 <setWall>
        }
        break;
 80031ba:	e033      	b.n	8003224 <detectWalls+0xf0>
    case SOUTH:
        if (frontWallCheck())
 80031bc:	f000 fedc 	bl	8003f78 <frontWallCheck>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d002      	beq.n	80031cc <detectWalls+0x98>
        {
            setWall(SOUTH);
 80031c6:	2002      	movs	r0, #2
 80031c8:	f7ff ff5c 	bl	8003084 <setWall>
        }
        if (leftWallCheck())
 80031cc:	f000 fe9c 	bl	8003f08 <leftWallCheck>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d002      	beq.n	80031dc <detectWalls+0xa8>
        {
            setWall(EAST);
 80031d6:	2001      	movs	r0, #1
 80031d8:	f7ff ff54 	bl	8003084 <setWall>
        }
        if (rightWallCheck())
 80031dc:	f000 feb0 	bl	8003f40 <rightWallCheck>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d020      	beq.n	8003228 <detectWalls+0xf4>
        {
            setWall(WEST);
 80031e6:	2003      	movs	r0, #3
 80031e8:	f7ff ff4c 	bl	8003084 <setWall>
        }
        break;
 80031ec:	e01c      	b.n	8003228 <detectWalls+0xf4>
    case WEST:
        if (frontWallCheck())
 80031ee:	f000 fec3 	bl	8003f78 <frontWallCheck>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d002      	beq.n	80031fe <detectWalls+0xca>
        {
            setWall(WEST);
 80031f8:	2003      	movs	r0, #3
 80031fa:	f7ff ff43 	bl	8003084 <setWall>
        }
        if (leftWallCheck())
 80031fe:	f000 fe83 	bl	8003f08 <leftWallCheck>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d002      	beq.n	800320e <detectWalls+0xda>
        {
            setWall(SOUTH);
 8003208:	2002      	movs	r0, #2
 800320a:	f7ff ff3b 	bl	8003084 <setWall>
        }
        if (rightWallCheck())
 800320e:	f000 fe97 	bl	8003f40 <rightWallCheck>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d009      	beq.n	800322c <detectWalls+0xf8>
        {
            setWall(NORTH);
 8003218:	2000      	movs	r0, #0
 800321a:	f7ff ff33 	bl	8003084 <setWall>
        }
        break;
 800321e:	e005      	b.n	800322c <detectWalls+0xf8>
        break;
 8003220:	bf00      	nop
 8003222:	e004      	b.n	800322e <detectWalls+0xfa>
        break;
 8003224:	bf00      	nop
 8003226:	e002      	b.n	800322e <detectWalls+0xfa>
        break;
 8003228:	bf00      	nop
 800322a:	e000      	b.n	800322e <detectWalls+0xfa>
        break;
 800322c:	bf00      	nop
    }

    discovered[currPos->row][currPos->col] = 1;		// Mark current cell as discovered
 800322e:	4b08      	ldr	r3, [pc, #32]	@ (8003250 <detectWalls+0x11c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	4b06      	ldr	r3, [pc, #24]	@ (8003250 <detectWalls+0x11c>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	4906      	ldr	r1, [pc, #24]	@ (8003254 <detectWalls+0x120>)
 800323c:	0112      	lsls	r2, r2, #4
 800323e:	4413      	add	r3, r2
 8003240:	2201      	movs	r2, #1
 8003242:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8003246:	bf00      	nop
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	20000424 	.word	0x20000424
 8003250:	20000420 	.word	0x20000420
 8003254:	2000126c 	.word	0x2000126c

08003258 <recalculate>:

void recalculate()
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
    queueStart = 0;
 800325e:	4bab      	ldr	r3, [pc, #684]	@ (800350c <recalculate+0x2b4>)
 8003260:	2200      	movs	r2, #0
 8003262:	801a      	strh	r2, [r3, #0]
    queueEnd = 0;
 8003264:	4baa      	ldr	r3, [pc, #680]	@ (8003510 <recalculate+0x2b8>)
 8003266:	2200      	movs	r2, #0
 8003268:	801a      	strh	r2, [r3, #0]

    // Mark all cells as -1, meaning that they have not had their Manhattan set yet
    for (int j = 0; j < 16; j++)
 800326a:	2300      	movs	r3, #0
 800326c:	617b      	str	r3, [r7, #20]
 800326e:	e014      	b.n	800329a <recalculate+0x42>
    {
        for (int i = 0; i < 16; i++)
 8003270:	2300      	movs	r3, #0
 8003272:	613b      	str	r3, [r7, #16]
 8003274:	e00b      	b.n	800328e <recalculate+0x36>
        {
            Manhattans[i][j] = -1;
 8003276:	49a7      	ldr	r1, [pc, #668]	@ (8003514 <recalculate+0x2bc>)
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	011a      	lsls	r2, r3, #4
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	4413      	add	r3, r2
 8003280:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003284:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        for (int i = 0; i < 16; i++)
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	3301      	adds	r3, #1
 800328c:	613b      	str	r3, [r7, #16]
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	2b0f      	cmp	r3, #15
 8003292:	ddf0      	ble.n	8003276 <recalculate+0x1e>
    for (int j = 0; j < 16; j++)
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	3301      	adds	r3, #1
 8003298:	617b      	str	r3, [r7, #20]
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	2b0f      	cmp	r3, #15
 800329e:	dde7      	ble.n	8003270 <recalculate+0x18>
        }
    }

    if(goToCenter)
 80032a0:	4b9d      	ldr	r3, [pc, #628]	@ (8003518 <recalculate+0x2c0>)
 80032a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d030      	beq.n	800330c <recalculate+0xb4>
    {
        // Set middle four manhattan distances to 0, and insert all 4 into queue (set middle as destination)
       Manhattans[7][7] = 0;
 80032aa:	4b9a      	ldr	r3, [pc, #616]	@ (8003514 <recalculate+0x2bc>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	f8a3 20ee 	strh.w	r2, [r3, #238]	@ 0xee
       Manhattans[7][8] = 0;
 80032b2:	4b98      	ldr	r3, [pc, #608]	@ (8003514 <recalculate+0x2bc>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	f8a3 20f0 	strh.w	r2, [r3, #240]	@ 0xf0
       Manhattans[8][7] = 0;
 80032ba:	4b96      	ldr	r3, [pc, #600]	@ (8003514 <recalculate+0x2bc>)
 80032bc:	2200      	movs	r2, #0
 80032be:	f8a3 210e 	strh.w	r2, [r3, #270]	@ 0x10e
       Manhattans[8][8] = 0;
 80032c2:	4b94      	ldr	r3, [pc, #592]	@ (8003514 <recalculate+0x2bc>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	f8a3 2110 	strh.w	r2, [r3, #272]	@ 0x110
       insertQueue(newCell(7, 7));
 80032ca:	2107      	movs	r1, #7
 80032cc:	2007      	movs	r0, #7
 80032ce:	f7ff fde9 	bl	8002ea4 <newCell>
 80032d2:	4603      	mov	r3, r0
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7ff fdfb 	bl	8002ed0 <insertQueue>
       insertQueue(newCell(7, 8));
 80032da:	2108      	movs	r1, #8
 80032dc:	2007      	movs	r0, #7
 80032de:	f7ff fde1 	bl	8002ea4 <newCell>
 80032e2:	4603      	mov	r3, r0
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff fdf3 	bl	8002ed0 <insertQueue>
       insertQueue(newCell(8, 7));
 80032ea:	2107      	movs	r1, #7
 80032ec:	2008      	movs	r0, #8
 80032ee:	f7ff fdd9 	bl	8002ea4 <newCell>
 80032f2:	4603      	mov	r3, r0
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff fdeb 	bl	8002ed0 <insertQueue>
       insertQueue(newCell(8, 8));
 80032fa:	2108      	movs	r1, #8
 80032fc:	2008      	movs	r0, #8
 80032fe:	f7ff fdd1 	bl	8002ea4 <newCell>
 8003302:	4603      	mov	r3, r0
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff fde3 	bl	8002ed0 <insertQueue>
 800330a:	e0f1      	b.n	80034f0 <recalculate+0x298>
    }

    else
    {
        // Set starting cell to 0, insert starting cell into queue (set start as destination)
        Manhattans[15][0] = 0;
 800330c:	4b81      	ldr	r3, [pc, #516]	@ (8003514 <recalculate+0x2bc>)
 800330e:	2200      	movs	r2, #0
 8003310:	f8a3 21e0 	strh.w	r2, [r3, #480]	@ 0x1e0
        insertQueue(newCell(15, 0));
 8003314:	2100      	movs	r1, #0
 8003316:	200f      	movs	r0, #15
 8003318:	f7ff fdc4 	bl	8002ea4 <newCell>
 800331c:	4603      	mov	r3, r0
 800331e:	4618      	mov	r0, r3
 8003320:	f7ff fdd6 	bl	8002ed0 <insertQueue>
    }


    //while queue is not empty
    while (queueStart != queueEnd) {
 8003324:	e0e4      	b.n	80034f0 <recalculate+0x298>

        struct Cell* currElement = queueFront();
 8003326:	f7ff fe19 	bl	8002f5c <queueFront>
 800332a:	60f8      	str	r0, [r7, #12]

        int currRow = currElement->row;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	60bb      	str	r3, [r7, #8]
        int currCol = currElement->col;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	607b      	str	r3, [r7, #4]

        // For all accessable neighbors with no set Manhattan distance, add cell to queue and set Manhattan to current Manhattan + 1

        //north wall
        if (currRow > 0 && horzWall[currRow][currCol] != 1 && Manhattans[currRow - 1][currCol] == -1) {
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	2b00      	cmp	r3, #0
 800333c:	dd31      	ble.n	80033a2 <recalculate+0x14a>
 800333e:	4977      	ldr	r1, [pc, #476]	@ (800351c <recalculate+0x2c4>)
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	011a      	lsls	r2, r3, #4
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4413      	add	r3, r2
 8003348:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d028      	beq.n	80033a2 <recalculate+0x14a>
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	3b01      	subs	r3, #1
 8003354:	496f      	ldr	r1, [pc, #444]	@ (8003514 <recalculate+0x2bc>)
 8003356:	011a      	lsls	r2, r3, #4
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4413      	add	r3, r2
 800335c:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003364:	d11d      	bne.n	80033a2 <recalculate+0x14a>
            Manhattans[currRow - 1][currCol] = Manhattans[currRow][currCol] + 1;
 8003366:	496b      	ldr	r1, [pc, #428]	@ (8003514 <recalculate+0x2bc>)
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	011a      	lsls	r2, r3, #4
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4413      	add	r3, r2
 8003370:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003374:	b29b      	uxth	r3, r3
 8003376:	3301      	adds	r3, #1
 8003378:	b29a      	uxth	r2, r3
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	3b01      	subs	r3, #1
 800337e:	b210      	sxth	r0, r2
 8003380:	4964      	ldr	r1, [pc, #400]	@ (8003514 <recalculate+0x2bc>)
 8003382:	011a      	lsls	r2, r3, #4
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4413      	add	r3, r2
 8003388:	4602      	mov	r2, r0
 800338a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            insertQueue(newCell(currRow - 1, currCol));
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	3b01      	subs	r3, #1
 8003392:	6879      	ldr	r1, [r7, #4]
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff fd85 	bl	8002ea4 <newCell>
 800339a:	4603      	mov	r3, r0
 800339c:	4618      	mov	r0, r3
 800339e:	f7ff fd97 	bl	8002ed0 <insertQueue>
        }
        //east wall
        if (currCol < 15 && vertWall[currRow][currCol + 1] != 1 && Manhattans[currRow][currCol + 1] == -1) {
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2b0e      	cmp	r3, #14
 80033a6:	dc34      	bgt.n	8003412 <recalculate+0x1ba>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	1c59      	adds	r1, r3, #1
 80033ac:	485c      	ldr	r0, [pc, #368]	@ (8003520 <recalculate+0x2c8>)
 80033ae:	68ba      	ldr	r2, [r7, #8]
 80033b0:	4613      	mov	r3, r2
 80033b2:	011b      	lsls	r3, r3, #4
 80033b4:	4413      	add	r3, r2
 80033b6:	440b      	add	r3, r1
 80033b8:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d028      	beq.n	8003412 <recalculate+0x1ba>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	3301      	adds	r3, #1
 80033c4:	4953      	ldr	r1, [pc, #332]	@ (8003514 <recalculate+0x2bc>)
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	0112      	lsls	r2, r2, #4
 80033ca:	4413      	add	r3, r2
 80033cc:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80033d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d4:	d11d      	bne.n	8003412 <recalculate+0x1ba>
            Manhattans[currRow][currCol + 1] = Manhattans[currRow][currCol] + 1;
 80033d6:	494f      	ldr	r1, [pc, #316]	@ (8003514 <recalculate+0x2bc>)
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	011a      	lsls	r2, r3, #4
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4413      	add	r3, r2
 80033e0:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	3301      	adds	r3, #1
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	3301      	adds	r3, #1
 80033ee:	b210      	sxth	r0, r2
 80033f0:	4948      	ldr	r1, [pc, #288]	@ (8003514 <recalculate+0x2bc>)
 80033f2:	68ba      	ldr	r2, [r7, #8]
 80033f4:	0112      	lsls	r2, r2, #4
 80033f6:	4413      	add	r3, r2
 80033f8:	4602      	mov	r2, r0
 80033fa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            insertQueue(newCell(currRow, currCol + 1));
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	3301      	adds	r3, #1
 8003402:	4619      	mov	r1, r3
 8003404:	68b8      	ldr	r0, [r7, #8]
 8003406:	f7ff fd4d 	bl	8002ea4 <newCell>
 800340a:	4603      	mov	r3, r0
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff fd5f 	bl	8002ed0 <insertQueue>
        }
        //south wall
        if (currRow < 15 && horzWall[currRow + 1][currCol] != 1 && Manhattans[currRow + 1][currCol] == -1) {
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	2b0e      	cmp	r3, #14
 8003416:	dc32      	bgt.n	800347e <recalculate+0x226>
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	3301      	adds	r3, #1
 800341c:	493f      	ldr	r1, [pc, #252]	@ (800351c <recalculate+0x2c4>)
 800341e:	011a      	lsls	r2, r3, #4
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4413      	add	r3, r2
 8003424:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d028      	beq.n	800347e <recalculate+0x226>
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	3301      	adds	r3, #1
 8003430:	4938      	ldr	r1, [pc, #224]	@ (8003514 <recalculate+0x2bc>)
 8003432:	011a      	lsls	r2, r3, #4
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4413      	add	r3, r2
 8003438:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800343c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003440:	d11d      	bne.n	800347e <recalculate+0x226>
            Manhattans[currRow + 1][currCol] = Manhattans[currRow][currCol] + 1;
 8003442:	4934      	ldr	r1, [pc, #208]	@ (8003514 <recalculate+0x2bc>)
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	011a      	lsls	r2, r3, #4
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4413      	add	r3, r2
 800344c:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003450:	b29b      	uxth	r3, r3
 8003452:	3301      	adds	r3, #1
 8003454:	b29a      	uxth	r2, r3
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	3301      	adds	r3, #1
 800345a:	b210      	sxth	r0, r2
 800345c:	492d      	ldr	r1, [pc, #180]	@ (8003514 <recalculate+0x2bc>)
 800345e:	011a      	lsls	r2, r3, #4
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4413      	add	r3, r2
 8003464:	4602      	mov	r2, r0
 8003466:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            insertQueue(newCell(currRow + 1, currCol));
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	3301      	adds	r3, #1
 800346e:	6879      	ldr	r1, [r7, #4]
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff fd17 	bl	8002ea4 <newCell>
 8003476:	4603      	mov	r3, r0
 8003478:	4618      	mov	r0, r3
 800347a:	f7ff fd29 	bl	8002ed0 <insertQueue>
        }
        //west wall
        if (currCol > 0 && vertWall[currRow][currCol] != 1 && Manhattans[currRow][currCol - 1] == -1) {
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	dd33      	ble.n	80034ec <recalculate+0x294>
 8003484:	4926      	ldr	r1, [pc, #152]	@ (8003520 <recalculate+0x2c8>)
 8003486:	68ba      	ldr	r2, [r7, #8]
 8003488:	4613      	mov	r3, r2
 800348a:	011b      	lsls	r3, r3, #4
 800348c:	4413      	add	r3, r2
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	4413      	add	r3, r2
 8003492:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d028      	beq.n	80034ec <recalculate+0x294>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	3b01      	subs	r3, #1
 800349e:	491d      	ldr	r1, [pc, #116]	@ (8003514 <recalculate+0x2bc>)
 80034a0:	68ba      	ldr	r2, [r7, #8]
 80034a2:	0112      	lsls	r2, r2, #4
 80034a4:	4413      	add	r3, r2
 80034a6:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80034aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ae:	d11d      	bne.n	80034ec <recalculate+0x294>
            Manhattans[currRow][currCol - 1] = Manhattans[currRow][currCol] + 1;
 80034b0:	4918      	ldr	r1, [pc, #96]	@ (8003514 <recalculate+0x2bc>)
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	011a      	lsls	r2, r3, #4
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4413      	add	r3, r2
 80034ba:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80034be:	b29b      	uxth	r3, r3
 80034c0:	3301      	adds	r3, #1
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3b01      	subs	r3, #1
 80034c8:	b210      	sxth	r0, r2
 80034ca:	4912      	ldr	r1, [pc, #72]	@ (8003514 <recalculate+0x2bc>)
 80034cc:	68ba      	ldr	r2, [r7, #8]
 80034ce:	0112      	lsls	r2, r2, #4
 80034d0:	4413      	add	r3, r2
 80034d2:	4602      	mov	r2, r0
 80034d4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            insertQueue(newCell(currRow, currCol - 1));
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3b01      	subs	r3, #1
 80034dc:	4619      	mov	r1, r3
 80034de:	68b8      	ldr	r0, [r7, #8]
 80034e0:	f7ff fce0 	bl	8002ea4 <newCell>
 80034e4:	4603      	mov	r3, r0
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7ff fcf2 	bl	8002ed0 <insertQueue>
        }

        // Deletes cell from queue and frees memory
        popQueueFront();
 80034ec:	f7ff fd18 	bl	8002f20 <popQueueFront>
    while (queueStart != queueEnd) {
 80034f0:	4b06      	ldr	r3, [pc, #24]	@ (800350c <recalculate+0x2b4>)
 80034f2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80034f6:	4b06      	ldr	r3, [pc, #24]	@ (8003510 <recalculate+0x2b8>)
 80034f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	f47f af12 	bne.w	8003326 <recalculate+0xce>
    }
}
 8003502:	bf00      	nop
 8003504:	bf00      	nop
 8003506:	3718      	adds	r7, #24
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	20000e28 	.word	0x20000e28
 8003510:	20000e2a 	.word	0x20000e2a
 8003514:	20000428 	.word	0x20000428
 8003518:	2000000c 	.word	0x2000000c
 800351c:	20000e2c 	.word	0x20000e2c
 8003520:	2000104c 	.word	0x2000104c

08003524 <solver>:

Action solver(Algorithm alg) {
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	4603      	mov	r3, r0
 800352c:	71fb      	strb	r3, [r7, #7]
    switch (alg)
 800352e:	79fb      	ldrb	r3, [r7, #7]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d002      	beq.n	800353a <solver+0x16>
 8003534:	2b01      	cmp	r3, #1
 8003536:	d004      	beq.n	8003542 <solver+0x1e>
 8003538:	e007      	b.n	800354a <solver+0x26>
    {
    case DEAD:
    	return deadReckoning();
 800353a:	f000 f80b 	bl	8003554 <deadReckoning>
 800353e:	4603      	mov	r3, r0
 8003540:	e004      	b.n	800354c <solver+0x28>
    	break;
    case FLOODFILL:
    	return floodFill();
 8003542:	f000 f81b 	bl	800357c <floodFill>
 8003546:	4603      	mov	r3, r0
 8003548:	e000      	b.n	800354c <solver+0x28>
    	break;
    default:
    	return FORWARD;
 800354a:	2301      	movs	r3, #1
    }
}
 800354c:	4618      	mov	r0, r3
 800354e:	3708      	adds	r7, #8
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <deadReckoning>:

Action deadReckoning() {       // The simple left wall following algorithm that they provided
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
	if (!frontWallCheck())
 8003558:	f000 fd0e 	bl	8003f78 <frontWallCheck>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <deadReckoning+0x12>
	{
		return FORWARD;
 8003562:	2301      	movs	r3, #1
 8003564:	e007      	b.n	8003576 <deadReckoning+0x22>
	}
	else if (!rightWallCheck())
 8003566:	f000 fceb 	bl	8003f40 <rightWallCheck>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d101      	bne.n	8003574 <deadReckoning+0x20>
	{
		return RIGHT;
 8003570:	2302      	movs	r3, #2
 8003572:	e000      	b.n	8003576 <deadReckoning+0x22>
	}
	else
	{
		return LEFT;
 8003574:	2300      	movs	r3, #0
	}
}
 8003576:	4618      	mov	r0, r3
 8003578:	bd80      	pop	{r7, pc}
	...

0800357c <floodFill>:

Action floodFill() {
 800357c:	b580      	push	{r7, lr}
 800357e:	b088      	sub	sp, #32
 8003580:	af00      	add	r7, sp, #0
    // Initializes all the elements and calculates Manhattan distances
    if (!initialized)
 8003582:	4ba0      	ldr	r3, [pc, #640]	@ (8003804 <floodFill+0x288>)
 8003584:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d106      	bne.n	800359a <floodFill+0x1e>
    {
        initElements();
 800358c:	f7ff fcf8 	bl	8002f80 <initElements>
        recalculate();
 8003590:	f7ff fe62 	bl	8003258 <recalculate>
        initialized = 1;
 8003594:	4b9b      	ldr	r3, [pc, #620]	@ (8003804 <floodFill+0x288>)
 8003596:	2201      	movs	r2, #1
 8003598:	801a      	strh	r2, [r3, #0]
    }

    // Lights up detected walls and adds them to the 2D wall arrays
    detectWalls();
 800359a:	f7ff fdcb 	bl	8003134 <detectWalls>

    // Display all Manhattan distances in the API dispaly

    int row = currPos->row;
 800359e:	4b9a      	ldr	r3, [pc, #616]	@ (8003808 <floodFill+0x28c>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	61bb      	str	r3, [r7, #24]
    int col = currPos->col;
 80035a6:	4b98      	ldr	r3, [pc, #608]	@ (8003808 <floodFill+0x28c>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	617b      	str	r3, [r7, #20]

    // If goal has already been reached, set new destination to either middle or starting cell
    if (Manhattans[row][col] == 0)
 80035ae:	4997      	ldr	r1, [pc, #604]	@ (800380c <floodFill+0x290>)
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	011a      	lsls	r2, r3, #4
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	4413      	add	r3, r2
 80035b8:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d119      	bne.n	80035f4 <floodFill+0x78>
    {
    	if (HAL_GPIO_ReadPin(Switch3_GPIO_Port, Switch3_Pin) == GPIO_PIN_SET)	// I want to save the finished maze on this run
 80035c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80035c4:	4892      	ldr	r0, [pc, #584]	@ (8003810 <floodFill+0x294>)
 80035c6:	f002 fa63 	bl	8005a90 <HAL_GPIO_ReadPin>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d101      	bne.n	80035d4 <floodFill+0x58>
		{
			saveMaze();
 80035d0:	f000 fa26 	bl	8003a20 <saveMaze>
		}

        if (goToCenter)
 80035d4:	4b8f      	ldr	r3, [pc, #572]	@ (8003814 <floodFill+0x298>)
 80035d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <floodFill+0x6a>
            goToCenter = 0; // Destination is now Starting Cell
 80035de:	4b8d      	ldr	r3, [pc, #564]	@ (8003814 <floodFill+0x298>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	801a      	strh	r2, [r3, #0]
 80035e4:	e002      	b.n	80035ec <floodFill+0x70>
        else
            goToCenter = 1; // Destination is now middle four
 80035e6:	4b8b      	ldr	r3, [pc, #556]	@ (8003814 <floodFill+0x298>)
 80035e8:	2201      	movs	r2, #1
 80035ea:	801a      	strh	r2, [r3, #0]

        recalculate();
 80035ec:	f7ff fe34 	bl	8003258 <recalculate>
        return IDLE;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e11e      	b.n	8003832 <floodFill+0x2b6>
    }

    int northBlocked = horzWall[row][col];
 80035f4:	4988      	ldr	r1, [pc, #544]	@ (8003818 <floodFill+0x29c>)
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	011a      	lsls	r2, r3, #4
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	4413      	add	r3, r2
 80035fe:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003602:	613b      	str	r3, [r7, #16]
    int eastBlocked = vertWall[row][col + 1];
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	1c59      	adds	r1, r3, #1
 8003608:	4884      	ldr	r0, [pc, #528]	@ (800381c <floodFill+0x2a0>)
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	4613      	mov	r3, r2
 800360e:	011b      	lsls	r3, r3, #4
 8003610:	4413      	add	r3, r2
 8003612:	440b      	add	r3, r1
 8003614:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 8003618:	60fb      	str	r3, [r7, #12]
    int southBlocked = horzWall[row + 1][col];
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	3301      	adds	r3, #1
 800361e:	497e      	ldr	r1, [pc, #504]	@ (8003818 <floodFill+0x29c>)
 8003620:	011a      	lsls	r2, r3, #4
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	4413      	add	r3, r2
 8003626:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800362a:	60bb      	str	r3, [r7, #8]
    int westBlocked = vertWall[row][col];
 800362c:	497b      	ldr	r1, [pc, #492]	@ (800381c <floodFill+0x2a0>)
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	4613      	mov	r3, r2
 8003632:	011b      	lsls	r3, r3, #4
 8003634:	4413      	add	r3, r2
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	4413      	add	r3, r2
 800363a:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800363e:	607b      	str	r3, [r7, #4]

    // Find next heading
    int nextHead = -1;
 8003640:	f04f 33ff 	mov.w	r3, #4294967295
 8003644:	61fb      	str	r3, [r7, #28]

    if (row != 0 && Manhattans[row - 1][col] < Manhattans[row][col] && !northBlocked)
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d016      	beq.n	800367a <floodFill+0xfe>
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	3b01      	subs	r3, #1
 8003650:	496e      	ldr	r1, [pc, #440]	@ (800380c <floodFill+0x290>)
 8003652:	011a      	lsls	r2, r3, #4
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	4413      	add	r3, r2
 8003658:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
 800365c:	486b      	ldr	r0, [pc, #428]	@ (800380c <floodFill+0x290>)
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	0119      	lsls	r1, r3, #4
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	440b      	add	r3, r1
 8003666:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 800366a:	429a      	cmp	r2, r3
 800366c:	da05      	bge.n	800367a <floodFill+0xfe>
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d102      	bne.n	800367a <floodFill+0xfe>
        nextHead = NORTH;
 8003674:	2300      	movs	r3, #0
 8003676:	61fb      	str	r3, [r7, #28]
 8003678:	e04c      	b.n	8003714 <floodFill+0x198>
    else if (col != 15 && Manhattans[row][col + 1] < Manhattans[row][col] && !eastBlocked)
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	2b0f      	cmp	r3, #15
 800367e:	d016      	beq.n	80036ae <floodFill+0x132>
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	3301      	adds	r3, #1
 8003684:	4961      	ldr	r1, [pc, #388]	@ (800380c <floodFill+0x290>)
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	0112      	lsls	r2, r2, #4
 800368a:	4413      	add	r3, r2
 800368c:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
 8003690:	485e      	ldr	r0, [pc, #376]	@ (800380c <floodFill+0x290>)
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	0119      	lsls	r1, r3, #4
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	440b      	add	r3, r1
 800369a:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 800369e:	429a      	cmp	r2, r3
 80036a0:	da05      	bge.n	80036ae <floodFill+0x132>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d102      	bne.n	80036ae <floodFill+0x132>
        nextHead = EAST;
 80036a8:	2301      	movs	r3, #1
 80036aa:	61fb      	str	r3, [r7, #28]
 80036ac:	e032      	b.n	8003714 <floodFill+0x198>
    else if (row != 15 && Manhattans[row + 1][col] < Manhattans[row][col] && !southBlocked)
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	2b0f      	cmp	r3, #15
 80036b2:	d016      	beq.n	80036e2 <floodFill+0x166>
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	3301      	adds	r3, #1
 80036b8:	4954      	ldr	r1, [pc, #336]	@ (800380c <floodFill+0x290>)
 80036ba:	011a      	lsls	r2, r3, #4
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	4413      	add	r3, r2
 80036c0:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
 80036c4:	4851      	ldr	r0, [pc, #324]	@ (800380c <floodFill+0x290>)
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	0119      	lsls	r1, r3, #4
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	440b      	add	r3, r1
 80036ce:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	da05      	bge.n	80036e2 <floodFill+0x166>
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d102      	bne.n	80036e2 <floodFill+0x166>
        nextHead = SOUTH;
 80036dc:	2302      	movs	r3, #2
 80036de:	61fb      	str	r3, [r7, #28]
 80036e0:	e018      	b.n	8003714 <floodFill+0x198>
    else if (col != 0 && Manhattans[row][col - 1] < Manhattans[row][col] && !westBlocked)
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d015      	beq.n	8003714 <floodFill+0x198>
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	3b01      	subs	r3, #1
 80036ec:	4947      	ldr	r1, [pc, #284]	@ (800380c <floodFill+0x290>)
 80036ee:	69ba      	ldr	r2, [r7, #24]
 80036f0:	0112      	lsls	r2, r2, #4
 80036f2:	4413      	add	r3, r2
 80036f4:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
 80036f8:	4844      	ldr	r0, [pc, #272]	@ (800380c <floodFill+0x290>)
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	0119      	lsls	r1, r3, #4
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	440b      	add	r3, r1
 8003702:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 8003706:	429a      	cmp	r2, r3
 8003708:	da04      	bge.n	8003714 <floodFill+0x198>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d101      	bne.n	8003714 <floodFill+0x198>
        nextHead = WEST;
 8003710:	2303      	movs	r3, #3
 8003712:	61fb      	str	r3, [r7, #28]

    // If no path available, then recalculta
    if (nextHead == -1)
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800371a:	d103      	bne.n	8003724 <floodFill+0x1a8>
    {
        recalculate();
 800371c:	f7ff fd9c 	bl	8003258 <recalculate>
        return IDLE;
 8003720:	2303      	movs	r3, #3
 8003722:	e086      	b.n	8003832 <floodFill+0x2b6>
    }

    // If next heading is in same direction, move forward
    if (nextHead == currHead)
 8003724:	4b3e      	ldr	r3, [pc, #248]	@ (8003820 <floodFill+0x2a4>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	461a      	mov	r2, r3
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	4293      	cmp	r3, r2
 800372e:	d129      	bne.n	8003784 <floodFill+0x208>
    {
        switch (currHead)
 8003730:	4b3b      	ldr	r3, [pc, #236]	@ (8003820 <floodFill+0x2a4>)
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	2b03      	cmp	r3, #3
 8003736:	d823      	bhi.n	8003780 <floodFill+0x204>
 8003738:	a201      	add	r2, pc, #4	@ (adr r2, 8003740 <floodFill+0x1c4>)
 800373a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800373e:	bf00      	nop
 8003740:	08003751 	.word	0x08003751
 8003744:	0800375d 	.word	0x0800375d
 8003748:	08003769 	.word	0x08003769
 800374c:	08003775 	.word	0x08003775
        {
        case NORTH:
            currPos->row--;
 8003750:	4b2d      	ldr	r3, [pc, #180]	@ (8003808 <floodFill+0x28c>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	3a01      	subs	r2, #1
 8003758:	601a      	str	r2, [r3, #0]
            break;
 800375a:	e011      	b.n	8003780 <floodFill+0x204>
        case EAST:
            currPos->col++;
 800375c:	4b2a      	ldr	r3, [pc, #168]	@ (8003808 <floodFill+0x28c>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	3201      	adds	r2, #1
 8003764:	605a      	str	r2, [r3, #4]
            break;
 8003766:	e00b      	b.n	8003780 <floodFill+0x204>
        case SOUTH:
            currPos->row++;
 8003768:	4b27      	ldr	r3, [pc, #156]	@ (8003808 <floodFill+0x28c>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	3201      	adds	r2, #1
 8003770:	601a      	str	r2, [r3, #0]
            break;
 8003772:	e005      	b.n	8003780 <floodFill+0x204>
        case WEST:
            currPos->col--;
 8003774:	4b24      	ldr	r3, [pc, #144]	@ (8003808 <floodFill+0x28c>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685a      	ldr	r2, [r3, #4]
 800377a:	3a01      	subs	r2, #1
 800377c:	605a      	str	r2, [r3, #4]
            break;
 800377e:	bf00      	nop
        }
        return FORWARD;
 8003780:	2301      	movs	r3, #1
 8003782:	e056      	b.n	8003832 <floodFill+0x2b6>
    }

    // If next heading is in opposite direction, turn right
    if ((nextHead - currHead) % 2 == 0)
 8003784:	4b26      	ldr	r3, [pc, #152]	@ (8003820 <floodFill+0x2a4>)
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	461a      	mov	r2, r3
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	1a9b      	subs	r3, r3, r2
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10f      	bne.n	80037b6 <floodFill+0x23a>
    {
        if (currHead == WEST)
 8003796:	4b22      	ldr	r3, [pc, #136]	@ (8003820 <floodFill+0x2a4>)
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	2b03      	cmp	r3, #3
 800379c:	d103      	bne.n	80037a6 <floodFill+0x22a>
            currHead = NORTH;
 800379e:	4b20      	ldr	r3, [pc, #128]	@ (8003820 <floodFill+0x2a4>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	701a      	strb	r2, [r3, #0]
 80037a4:	e005      	b.n	80037b2 <floodFill+0x236>
        else
            currHead++;
 80037a6:	4b1e      	ldr	r3, [pc, #120]	@ (8003820 <floodFill+0x2a4>)
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	3301      	adds	r3, #1
 80037ac:	b2da      	uxtb	r2, r3
 80037ae:	4b1c      	ldr	r3, [pc, #112]	@ (8003820 <floodFill+0x2a4>)
 80037b0:	701a      	strb	r2, [r3, #0]
        return RIGHT;
 80037b2:	2302      	movs	r3, #2
 80037b4:	e03d      	b.n	8003832 <floodFill+0x2b6>
    }

    // If next heading is right, turn right
    if ((nextHead - currHead) == 1 || nextHead - currHead == -3)
 80037b6:	4b1a      	ldr	r3, [pc, #104]	@ (8003820 <floodFill+0x2a4>)
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	461a      	mov	r2, r3
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	1a9b      	subs	r3, r3, r2
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d007      	beq.n	80037d4 <floodFill+0x258>
 80037c4:	4b16      	ldr	r3, [pc, #88]	@ (8003820 <floodFill+0x2a4>)
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	461a      	mov	r2, r3
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	1a9b      	subs	r3, r3, r2
 80037ce:	f113 0f03 	cmn.w	r3, #3
 80037d2:	d10f      	bne.n	80037f4 <floodFill+0x278>
    {
        if (currHead == WEST)
 80037d4:	4b12      	ldr	r3, [pc, #72]	@ (8003820 <floodFill+0x2a4>)
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	2b03      	cmp	r3, #3
 80037da:	d103      	bne.n	80037e4 <floodFill+0x268>
            currHead = NORTH;
 80037dc:	4b10      	ldr	r3, [pc, #64]	@ (8003820 <floodFill+0x2a4>)
 80037de:	2200      	movs	r2, #0
 80037e0:	701a      	strb	r2, [r3, #0]
 80037e2:	e005      	b.n	80037f0 <floodFill+0x274>
        else
            currHead++;
 80037e4:	4b0e      	ldr	r3, [pc, #56]	@ (8003820 <floodFill+0x2a4>)
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	3301      	adds	r3, #1
 80037ea:	b2da      	uxtb	r2, r3
 80037ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003820 <floodFill+0x2a4>)
 80037ee:	701a      	strb	r2, [r3, #0]
        return RIGHT;
 80037f0:	2302      	movs	r3, #2
 80037f2:	e01e      	b.n	8003832 <floodFill+0x2b6>
    }

    // else, turn left
    if (currHead == NORTH)
 80037f4:	4b0a      	ldr	r3, [pc, #40]	@ (8003820 <floodFill+0x2a4>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d113      	bne.n	8003824 <floodFill+0x2a8>
        currHead = WEST;
 80037fc:	4b08      	ldr	r3, [pc, #32]	@ (8003820 <floodFill+0x2a4>)
 80037fe:	2203      	movs	r2, #3
 8003800:	701a      	strb	r2, [r3, #0]
 8003802:	e015      	b.n	8003830 <floodFill+0x2b4>
 8003804:	2000041c 	.word	0x2000041c
 8003808:	20000420 	.word	0x20000420
 800380c:	20000428 	.word	0x20000428
 8003810:	40020000 	.word	0x40020000
 8003814:	2000000c 	.word	0x2000000c
 8003818:	20000e2c 	.word	0x20000e2c
 800381c:	2000104c 	.word	0x2000104c
 8003820:	20000424 	.word	0x20000424
    else
        currHead--;
 8003824:	4b05      	ldr	r3, [pc, #20]	@ (800383c <floodFill+0x2c0>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	3b01      	subs	r3, #1
 800382a:	b2da      	uxtb	r2, r3
 800382c:	4b03      	ldr	r3, [pc, #12]	@ (800383c <floodFill+0x2c0>)
 800382e:	701a      	strb	r2, [r3, #0]
    return LEFT;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3720      	adds	r7, #32
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	20000424 	.word	0x20000424

08003840 <foresight>:

int foresight() {
 8003840:	b480      	push	{r7}
 8003842:	b089      	sub	sp, #36	@ 0x24
 8003844:	af00      	add	r7, sp, #0
	int row = currPos->row;
 8003846:	4b70      	ldr	r3, [pc, #448]	@ (8003a08 <foresight+0x1c8>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	61fb      	str	r3, [r7, #28]
	int col = currPos->col;
 800384e:	4b6e      	ldr	r3, [pc, #440]	@ (8003a08 <foresight+0x1c8>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	61bb      	str	r3, [r7, #24]

	int extra_moves = 0;
 8003856:	2300      	movs	r3, #0
 8003858:	617b      	str	r3, [r7, #20]

	while(discovered[row][col] != 0)
 800385a:	e0c3      	b.n	80039e4 <foresight+0x1a4>
	{
	    int northBlocked = horzWall[row][col];
 800385c:	496b      	ldr	r1, [pc, #428]	@ (8003a0c <foresight+0x1cc>)
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	011a      	lsls	r2, r3, #4
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	4413      	add	r3, r2
 8003866:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800386a:	60fb      	str	r3, [r7, #12]
	    int eastBlocked = vertWall[row][col + 1];
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	1c59      	adds	r1, r3, #1
 8003870:	4867      	ldr	r0, [pc, #412]	@ (8003a10 <foresight+0x1d0>)
 8003872:	69fa      	ldr	r2, [r7, #28]
 8003874:	4613      	mov	r3, r2
 8003876:	011b      	lsls	r3, r3, #4
 8003878:	4413      	add	r3, r2
 800387a:	440b      	add	r3, r1
 800387c:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 8003880:	60bb      	str	r3, [r7, #8]
	    int southBlocked = horzWall[row + 1][col];
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	3301      	adds	r3, #1
 8003886:	4961      	ldr	r1, [pc, #388]	@ (8003a0c <foresight+0x1cc>)
 8003888:	011a      	lsls	r2, r3, #4
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	4413      	add	r3, r2
 800388e:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003892:	607b      	str	r3, [r7, #4]
	    int westBlocked = vertWall[row][col];
 8003894:	495e      	ldr	r1, [pc, #376]	@ (8003a10 <foresight+0x1d0>)
 8003896:	69fa      	ldr	r2, [r7, #28]
 8003898:	4613      	mov	r3, r2
 800389a:	011b      	lsls	r3, r3, #4
 800389c:	4413      	add	r3, r2
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	4413      	add	r3, r2
 80038a2:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80038a6:	603b      	str	r3, [r7, #0]

	    // Find next heading
	    int nextHead = -1;
 80038a8:	f04f 33ff 	mov.w	r3, #4294967295
 80038ac:	613b      	str	r3, [r7, #16]

	    if (row != 0 && Manhattans[row - 1][col] < Manhattans[row][col] && !northBlocked)
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d016      	beq.n	80038e2 <foresight+0xa2>
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	3b01      	subs	r3, #1
 80038b8:	4956      	ldr	r1, [pc, #344]	@ (8003a14 <foresight+0x1d4>)
 80038ba:	011a      	lsls	r2, r3, #4
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	4413      	add	r3, r2
 80038c0:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
 80038c4:	4853      	ldr	r0, [pc, #332]	@ (8003a14 <foresight+0x1d4>)
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	0119      	lsls	r1, r3, #4
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	440b      	add	r3, r1
 80038ce:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	da05      	bge.n	80038e2 <foresight+0xa2>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d102      	bne.n	80038e2 <foresight+0xa2>
	        nextHead = NORTH;
 80038dc:	2300      	movs	r3, #0
 80038de:	613b      	str	r3, [r7, #16]
 80038e0:	e04c      	b.n	800397c <foresight+0x13c>
	    else if (col != 15 && Manhattans[row][col + 1] < Manhattans[row][col] && !eastBlocked)
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	2b0f      	cmp	r3, #15
 80038e6:	d016      	beq.n	8003916 <foresight+0xd6>
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	3301      	adds	r3, #1
 80038ec:	4949      	ldr	r1, [pc, #292]	@ (8003a14 <foresight+0x1d4>)
 80038ee:	69fa      	ldr	r2, [r7, #28]
 80038f0:	0112      	lsls	r2, r2, #4
 80038f2:	4413      	add	r3, r2
 80038f4:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
 80038f8:	4846      	ldr	r0, [pc, #280]	@ (8003a14 <foresight+0x1d4>)
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	0119      	lsls	r1, r3, #4
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	440b      	add	r3, r1
 8003902:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 8003906:	429a      	cmp	r2, r3
 8003908:	da05      	bge.n	8003916 <foresight+0xd6>
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d102      	bne.n	8003916 <foresight+0xd6>
	        nextHead = EAST;
 8003910:	2301      	movs	r3, #1
 8003912:	613b      	str	r3, [r7, #16]
 8003914:	e032      	b.n	800397c <foresight+0x13c>
	    else if (row != 15 && Manhattans[row + 1][col] < Manhattans[row][col] && !southBlocked)
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	2b0f      	cmp	r3, #15
 800391a:	d016      	beq.n	800394a <foresight+0x10a>
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	3301      	adds	r3, #1
 8003920:	493c      	ldr	r1, [pc, #240]	@ (8003a14 <foresight+0x1d4>)
 8003922:	011a      	lsls	r2, r3, #4
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	4413      	add	r3, r2
 8003928:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
 800392c:	4839      	ldr	r0, [pc, #228]	@ (8003a14 <foresight+0x1d4>)
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	0119      	lsls	r1, r3, #4
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	440b      	add	r3, r1
 8003936:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 800393a:	429a      	cmp	r2, r3
 800393c:	da05      	bge.n	800394a <foresight+0x10a>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d102      	bne.n	800394a <foresight+0x10a>
	        nextHead = SOUTH;
 8003944:	2302      	movs	r3, #2
 8003946:	613b      	str	r3, [r7, #16]
 8003948:	e018      	b.n	800397c <foresight+0x13c>
	    else if (col != 0 && Manhattans[row][col - 1] < Manhattans[row][col] && !westBlocked)
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d015      	beq.n	800397c <foresight+0x13c>
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	3b01      	subs	r3, #1
 8003954:	492f      	ldr	r1, [pc, #188]	@ (8003a14 <foresight+0x1d4>)
 8003956:	69fa      	ldr	r2, [r7, #28]
 8003958:	0112      	lsls	r2, r2, #4
 800395a:	4413      	add	r3, r2
 800395c:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
 8003960:	482c      	ldr	r0, [pc, #176]	@ (8003a14 <foresight+0x1d4>)
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	0119      	lsls	r1, r3, #4
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	440b      	add	r3, r1
 800396a:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 800396e:	429a      	cmp	r2, r3
 8003970:	da04      	bge.n	800397c <foresight+0x13c>
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d101      	bne.n	800397c <foresight+0x13c>
	        nextHead = WEST;
 8003978:	2303      	movs	r3, #3
 800397a:	613b      	str	r3, [r7, #16]

	    if (nextHead != currHead)
 800397c:	4b26      	ldr	r3, [pc, #152]	@ (8003a18 <foresight+0x1d8>)
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	461a      	mov	r2, r3
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	4293      	cmp	r3, r2
 8003986:	d138      	bne.n	80039fa <foresight+0x1ba>
	    	break;

	    extra_moves++;
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	3301      	adds	r3, #1
 800398c:	617b      	str	r3, [r7, #20]

		switch (currHead)
 800398e:	4b22      	ldr	r3, [pc, #136]	@ (8003a18 <foresight+0x1d8>)
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	2b03      	cmp	r3, #3
 8003994:	d81a      	bhi.n	80039cc <foresight+0x18c>
 8003996:	a201      	add	r2, pc, #4	@ (adr r2, 800399c <foresight+0x15c>)
 8003998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800399c:	080039ad 	.word	0x080039ad
 80039a0:	080039b5 	.word	0x080039b5
 80039a4:	080039bd 	.word	0x080039bd
 80039a8:	080039c5 	.word	0x080039c5
		{
			case NORTH:
				row--;
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	3b01      	subs	r3, #1
 80039b0:	61fb      	str	r3, [r7, #28]
				break;
 80039b2:	e00b      	b.n	80039cc <foresight+0x18c>
			case EAST:
				col++;
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	3301      	adds	r3, #1
 80039b8:	61bb      	str	r3, [r7, #24]
				break;
 80039ba:	e007      	b.n	80039cc <foresight+0x18c>
			case SOUTH:
				row++;
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	3301      	adds	r3, #1
 80039c0:	61fb      	str	r3, [r7, #28]
				break;
 80039c2:	e003      	b.n	80039cc <foresight+0x18c>
			case WEST:
				col--;
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	3b01      	subs	r3, #1
 80039c8:	61bb      	str	r3, [r7, #24]
				break;
 80039ca:	bf00      	nop
		}
		if (row < 0 || row > 15 || col < 0 || col > 15)
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	db14      	blt.n	80039fc <foresight+0x1bc>
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	2b0f      	cmp	r3, #15
 80039d6:	dc11      	bgt.n	80039fc <foresight+0x1bc>
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	db0e      	blt.n	80039fc <foresight+0x1bc>
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	2b0f      	cmp	r3, #15
 80039e2:	dc0b      	bgt.n	80039fc <foresight+0x1bc>
	while(discovered[row][col] != 0)
 80039e4:	490d      	ldr	r1, [pc, #52]	@ (8003a1c <foresight+0x1dc>)
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	011a      	lsls	r2, r3, #4
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	4413      	add	r3, r2
 80039ee:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f47f af32 	bne.w	800385c <foresight+0x1c>
 80039f8:	e000      	b.n	80039fc <foresight+0x1bc>
	    	break;
 80039fa:	bf00      	nop
			break;
	}

	return extra_moves;
 80039fc:	697b      	ldr	r3, [r7, #20]
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3724      	adds	r7, #36	@ 0x24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bc80      	pop	{r7}
 8003a06:	4770      	bx	lr
 8003a08:	20000420 	.word	0x20000420
 8003a0c:	20000e2c 	.word	0x20000e2c
 8003a10:	2000104c 	.word	0x2000104c
 8003a14:	20000428 	.word	0x20000428
 8003a18:	20000424 	.word	0x20000424
 8003a1c:	2000126c 	.word	0x2000126c

08003a20 <saveMaze>:

void saveMaze() {
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0

	writeFlash(horzWall, vertWall, discovered);
 8003a24:	4a03      	ldr	r2, [pc, #12]	@ (8003a34 <saveMaze+0x14>)
 8003a26:	4904      	ldr	r1, [pc, #16]	@ (8003a38 <saveMaze+0x18>)
 8003a28:	4804      	ldr	r0, [pc, #16]	@ (8003a3c <saveMaze+0x1c>)
 8003a2a:	f7fd fcc3 	bl	80013b4 <writeFlash>

}
 8003a2e:	bf00      	nop
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	2000126c 	.word	0x2000126c
 8003a38:	2000104c 	.word	0x2000104c
 8003a3c:	20000e2c 	.word	0x20000e2c

08003a40 <loadMaze>:
void loadMaze() {
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0

	readFlash(horzWall, vertWall, discovered);
 8003a44:	4a03      	ldr	r2, [pc, #12]	@ (8003a54 <loadMaze+0x14>)
 8003a46:	4904      	ldr	r1, [pc, #16]	@ (8003a58 <loadMaze+0x18>)
 8003a48:	4804      	ldr	r0, [pc, #16]	@ (8003a5c <loadMaze+0x1c>)
 8003a4a:	f7fd fd57 	bl	80014fc <readFlash>

}
 8003a4e:	bf00      	nop
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	2000126c 	.word	0x2000126c
 8003a58:	2000104c 	.word	0x2000104c
 8003a5c:	20000e2c 	.word	0x20000e2c

08003a60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a66:	2300      	movs	r3, #0
 8003a68:	607b      	str	r3, [r7, #4]
 8003a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8003aa8 <HAL_MspInit+0x48>)
 8003a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a6e:	4a0e      	ldr	r2, [pc, #56]	@ (8003aa8 <HAL_MspInit+0x48>)
 8003a70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a74:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a76:	4b0c      	ldr	r3, [pc, #48]	@ (8003aa8 <HAL_MspInit+0x48>)
 8003a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a7e:	607b      	str	r3, [r7, #4]
 8003a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a82:	2300      	movs	r3, #0
 8003a84:	603b      	str	r3, [r7, #0]
 8003a86:	4b08      	ldr	r3, [pc, #32]	@ (8003aa8 <HAL_MspInit+0x48>)
 8003a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8a:	4a07      	ldr	r2, [pc, #28]	@ (8003aa8 <HAL_MspInit+0x48>)
 8003a8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a90:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a92:	4b05      	ldr	r3, [pc, #20]	@ (8003aa8 <HAL_MspInit+0x48>)
 8003a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a9a:	603b      	str	r3, [r7, #0]
 8003a9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a9e:	bf00      	nop
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bc80      	pop	{r7}
 8003aa6:	4770      	bx	lr
 8003aa8:	40023800 	.word	0x40023800

08003aac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b08a      	sub	sp, #40	@ 0x28
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ab4:	f107 0314 	add.w	r3, r7, #20
 8003ab8:	2200      	movs	r2, #0
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	605a      	str	r2, [r3, #4]
 8003abe:	609a      	str	r2, [r3, #8]
 8003ac0:	60da      	str	r2, [r3, #12]
 8003ac2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a3c      	ldr	r2, [pc, #240]	@ (8003bbc <HAL_ADC_MspInit+0x110>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d171      	bne.n	8003bb2 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003ace:	2300      	movs	r3, #0
 8003ad0:	613b      	str	r3, [r7, #16]
 8003ad2:	4b3b      	ldr	r3, [pc, #236]	@ (8003bc0 <HAL_ADC_MspInit+0x114>)
 8003ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ad6:	4a3a      	ldr	r2, [pc, #232]	@ (8003bc0 <HAL_ADC_MspInit+0x114>)
 8003ad8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003adc:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ade:	4b38      	ldr	r3, [pc, #224]	@ (8003bc0 <HAL_ADC_MspInit+0x114>)
 8003ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ae2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ae6:	613b      	str	r3, [r7, #16]
 8003ae8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003aea:	2300      	movs	r3, #0
 8003aec:	60fb      	str	r3, [r7, #12]
 8003aee:	4b34      	ldr	r3, [pc, #208]	@ (8003bc0 <HAL_ADC_MspInit+0x114>)
 8003af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af2:	4a33      	ldr	r2, [pc, #204]	@ (8003bc0 <HAL_ADC_MspInit+0x114>)
 8003af4:	f043 0304 	orr.w	r3, r3, #4
 8003af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003afa:	4b31      	ldr	r3, [pc, #196]	@ (8003bc0 <HAL_ADC_MspInit+0x114>)
 8003afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003afe:	f003 0304 	and.w	r3, r3, #4
 8003b02:	60fb      	str	r3, [r7, #12]
 8003b04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b06:	2300      	movs	r3, #0
 8003b08:	60bb      	str	r3, [r7, #8]
 8003b0a:	4b2d      	ldr	r3, [pc, #180]	@ (8003bc0 <HAL_ADC_MspInit+0x114>)
 8003b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b0e:	4a2c      	ldr	r2, [pc, #176]	@ (8003bc0 <HAL_ADC_MspInit+0x114>)
 8003b10:	f043 0301 	orr.w	r3, r3, #1
 8003b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b16:	4b2a      	ldr	r3, [pc, #168]	@ (8003bc0 <HAL_ADC_MspInit+0x114>)
 8003b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	60bb      	str	r3, [r7, #8]
 8003b20:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ForwardRightReceiver_Pin|RightReceiver_Pin;
 8003b22:	2303      	movs	r3, #3
 8003b24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b26:	2303      	movs	r3, #3
 8003b28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b2e:	f107 0314 	add.w	r3, r7, #20
 8003b32:	4619      	mov	r1, r3
 8003b34:	4823      	ldr	r0, [pc, #140]	@ (8003bc4 <HAL_ADC_MspInit+0x118>)
 8003b36:	f001 fe0d 	bl	8005754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LeftReceiver_Pin|ForwardLeftReceiver_Pin;
 8003b3a:	2360      	movs	r3, #96	@ 0x60
 8003b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b42:	2300      	movs	r3, #0
 8003b44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b46:	f107 0314 	add.w	r3, r7, #20
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	481e      	ldr	r0, [pc, #120]	@ (8003bc8 <HAL_ADC_MspInit+0x11c>)
 8003b4e:	f001 fe01 	bl	8005754 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003b52:	4b1e      	ldr	r3, [pc, #120]	@ (8003bcc <HAL_ADC_MspInit+0x120>)
 8003b54:	4a1e      	ldr	r2, [pc, #120]	@ (8003bd0 <HAL_ADC_MspInit+0x124>)
 8003b56:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003b58:	4b1c      	ldr	r3, [pc, #112]	@ (8003bcc <HAL_ADC_MspInit+0x120>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b5e:	4b1b      	ldr	r3, [pc, #108]	@ (8003bcc <HAL_ADC_MspInit+0x120>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b64:	4b19      	ldr	r3, [pc, #100]	@ (8003bcc <HAL_ADC_MspInit+0x120>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003b6a:	4b18      	ldr	r3, [pc, #96]	@ (8003bcc <HAL_ADC_MspInit+0x120>)
 8003b6c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b70:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003b72:	4b16      	ldr	r3, [pc, #88]	@ (8003bcc <HAL_ADC_MspInit+0x120>)
 8003b74:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003b78:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003b7a:	4b14      	ldr	r3, [pc, #80]	@ (8003bcc <HAL_ADC_MspInit+0x120>)
 8003b7c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003b80:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003b82:	4b12      	ldr	r3, [pc, #72]	@ (8003bcc <HAL_ADC_MspInit+0x120>)
 8003b84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b88:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003b8a:	4b10      	ldr	r3, [pc, #64]	@ (8003bcc <HAL_ADC_MspInit+0x120>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b90:	4b0e      	ldr	r3, [pc, #56]	@ (8003bcc <HAL_ADC_MspInit+0x120>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003b96:	480d      	ldr	r0, [pc, #52]	@ (8003bcc <HAL_ADC_MspInit+0x120>)
 8003b98:	f000 fffc 	bl	8004b94 <HAL_DMA_Init>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8003ba2:	f7fe fa3b 	bl	800201c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a08      	ldr	r2, [pc, #32]	@ (8003bcc <HAL_ADC_MspInit+0x120>)
 8003baa:	639a      	str	r2, [r3, #56]	@ 0x38
 8003bac:	4a07      	ldr	r2, [pc, #28]	@ (8003bcc <HAL_ADC_MspInit+0x120>)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003bb2:	bf00      	nop
 8003bb4:	3728      	adds	r7, #40	@ 0x28
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	40012000 	.word	0x40012000
 8003bc0:	40023800 	.word	0x40023800
 8003bc4:	40020800 	.word	0x40020800
 8003bc8:	40020000 	.word	0x40020000
 8003bcc:	200001dc 	.word	0x200001dc
 8003bd0:	40026410 	.word	0x40026410

08003bd4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a0e      	ldr	r2, [pc, #56]	@ (8003c1c <HAL_TIM_PWM_MspInit+0x48>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d115      	bne.n	8003c12 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003be6:	2300      	movs	r3, #0
 8003be8:	60fb      	str	r3, [r7, #12]
 8003bea:	4b0d      	ldr	r3, [pc, #52]	@ (8003c20 <HAL_TIM_PWM_MspInit+0x4c>)
 8003bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bee:	4a0c      	ldr	r2, [pc, #48]	@ (8003c20 <HAL_TIM_PWM_MspInit+0x4c>)
 8003bf0:	f043 0301 	orr.w	r3, r3, #1
 8003bf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8003c20 <HAL_TIM_PWM_MspInit+0x4c>)
 8003bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	60fb      	str	r3, [r7, #12]
 8003c00:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003c02:	2200      	movs	r2, #0
 8003c04:	2100      	movs	r1, #0
 8003c06:	2019      	movs	r0, #25
 8003c08:	f000 ff8d 	bl	8004b26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003c0c:	2019      	movs	r0, #25
 8003c0e:	f000 ffa6 	bl	8004b5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003c12:	bf00      	nop
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	40010000 	.word	0x40010000
 8003c20:	40023800 	.word	0x40023800

08003c24 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b08c      	sub	sp, #48	@ 0x30
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c2c:	f107 031c 	add.w	r3, r7, #28
 8003c30:	2200      	movs	r2, #0
 8003c32:	601a      	str	r2, [r3, #0]
 8003c34:	605a      	str	r2, [r3, #4]
 8003c36:	609a      	str	r2, [r3, #8]
 8003c38:	60da      	str	r2, [r3, #12]
 8003c3a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a32      	ldr	r2, [pc, #200]	@ (8003d0c <HAL_TIM_Encoder_MspInit+0xe8>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d12c      	bne.n	8003ca0 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003c46:	2300      	movs	r3, #0
 8003c48:	61bb      	str	r3, [r7, #24]
 8003c4a:	4b31      	ldr	r3, [pc, #196]	@ (8003d10 <HAL_TIM_Encoder_MspInit+0xec>)
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4e:	4a30      	ldr	r2, [pc, #192]	@ (8003d10 <HAL_TIM_Encoder_MspInit+0xec>)
 8003c50:	f043 0302 	orr.w	r3, r3, #2
 8003c54:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c56:	4b2e      	ldr	r3, [pc, #184]	@ (8003d10 <HAL_TIM_Encoder_MspInit+0xec>)
 8003c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	61bb      	str	r3, [r7, #24]
 8003c60:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c62:	2300      	movs	r3, #0
 8003c64:	617b      	str	r3, [r7, #20]
 8003c66:	4b2a      	ldr	r3, [pc, #168]	@ (8003d10 <HAL_TIM_Encoder_MspInit+0xec>)
 8003c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c6a:	4a29      	ldr	r2, [pc, #164]	@ (8003d10 <HAL_TIM_Encoder_MspInit+0xec>)
 8003c6c:	f043 0302 	orr.w	r3, r3, #2
 8003c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c72:	4b27      	ldr	r3, [pc, #156]	@ (8003d10 <HAL_TIM_Encoder_MspInit+0xec>)
 8003c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c76:	f003 0302 	and.w	r3, r3, #2
 8003c7a:	617b      	str	r3, [r7, #20]
 8003c7c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = RightEncoderCh1_Pin|RightEncoderCh2_Pin;
 8003c7e:	2330      	movs	r3, #48	@ 0x30
 8003c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c82:	2302      	movs	r3, #2
 8003c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c86:	2300      	movs	r3, #0
 8003c88:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003c8e:	2302      	movs	r3, #2
 8003c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c92:	f107 031c 	add.w	r3, r7, #28
 8003c96:	4619      	mov	r1, r3
 8003c98:	481e      	ldr	r0, [pc, #120]	@ (8003d14 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003c9a:	f001 fd5b 	bl	8005754 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003c9e:	e030      	b.n	8003d02 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a1c      	ldr	r2, [pc, #112]	@ (8003d18 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d12b      	bne.n	8003d02 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003caa:	2300      	movs	r3, #0
 8003cac:	613b      	str	r3, [r7, #16]
 8003cae:	4b18      	ldr	r3, [pc, #96]	@ (8003d10 <HAL_TIM_Encoder_MspInit+0xec>)
 8003cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cb2:	4a17      	ldr	r2, [pc, #92]	@ (8003d10 <HAL_TIM_Encoder_MspInit+0xec>)
 8003cb4:	f043 0302 	orr.w	r3, r3, #2
 8003cb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003cba:	4b15      	ldr	r3, [pc, #84]	@ (8003d10 <HAL_TIM_Encoder_MspInit+0xec>)
 8003cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	613b      	str	r3, [r7, #16]
 8003cc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	60fb      	str	r3, [r7, #12]
 8003cca:	4b11      	ldr	r3, [pc, #68]	@ (8003d10 <HAL_TIM_Encoder_MspInit+0xec>)
 8003ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cce:	4a10      	ldr	r2, [pc, #64]	@ (8003d10 <HAL_TIM_Encoder_MspInit+0xec>)
 8003cd0:	f043 0304 	orr.w	r3, r3, #4
 8003cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8003d10 <HAL_TIM_Encoder_MspInit+0xec>)
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cda:	f003 0304 	and.w	r3, r3, #4
 8003cde:	60fb      	str	r3, [r7, #12]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LeftEncoderCh1_Pin|LeftEncoderCh2_Pin;
 8003ce2:	23c0      	movs	r3, #192	@ 0xc0
 8003ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cea:	2300      	movs	r3, #0
 8003cec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cf6:	f107 031c 	add.w	r3, r7, #28
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	4807      	ldr	r0, [pc, #28]	@ (8003d1c <HAL_TIM_Encoder_MspInit+0xf8>)
 8003cfe:	f001 fd29 	bl	8005754 <HAL_GPIO_Init>
}
 8003d02:	bf00      	nop
 8003d04:	3730      	adds	r7, #48	@ 0x30
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	40000400 	.word	0x40000400
 8003d10:	40023800 	.word	0x40023800
 8003d14:	40020400 	.word	0x40020400
 8003d18:	40010400 	.word	0x40010400
 8003d1c:	40020800 	.word	0x40020800

08003d20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b088      	sub	sp, #32
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d28:	f107 030c 	add.w	r3, r7, #12
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	601a      	str	r2, [r3, #0]
 8003d30:	605a      	str	r2, [r3, #4]
 8003d32:	609a      	str	r2, [r3, #8]
 8003d34:	60da      	str	r2, [r3, #12]
 8003d36:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a12      	ldr	r2, [pc, #72]	@ (8003d88 <HAL_TIM_MspPostInit+0x68>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d11e      	bne.n	8003d80 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d42:	2300      	movs	r3, #0
 8003d44:	60bb      	str	r3, [r7, #8]
 8003d46:	4b11      	ldr	r3, [pc, #68]	@ (8003d8c <HAL_TIM_MspPostInit+0x6c>)
 8003d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d4a:	4a10      	ldr	r2, [pc, #64]	@ (8003d8c <HAL_TIM_MspPostInit+0x6c>)
 8003d4c:	f043 0301 	orr.w	r3, r3, #1
 8003d50:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d52:	4b0e      	ldr	r3, [pc, #56]	@ (8003d8c <HAL_TIM_MspPostInit+0x6c>)
 8003d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	60bb      	str	r3, [r7, #8]
 8003d5c:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LeftMotorCh1_Pin|LeftMotorCh2_Pin|RightMotorCh1_Pin|RightMotorCh2_Pin;
 8003d5e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8003d62:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d64:	2302      	movs	r3, #2
 8003d66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003d70:	2301      	movs	r3, #1
 8003d72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d74:	f107 030c 	add.w	r3, r7, #12
 8003d78:	4619      	mov	r1, r3
 8003d7a:	4805      	ldr	r0, [pc, #20]	@ (8003d90 <HAL_TIM_MspPostInit+0x70>)
 8003d7c:	f001 fcea 	bl	8005754 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003d80:	bf00      	nop
 8003d82:	3720      	adds	r7, #32
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	40010000 	.word	0x40010000
 8003d8c:	40023800 	.word	0x40023800
 8003d90:	40020000 	.word	0x40020000

08003d94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003d98:	bf00      	nop
 8003d9a:	e7fd      	b.n	8003d98 <NMI_Handler+0x4>

08003d9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003da0:	bf00      	nop
 8003da2:	e7fd      	b.n	8003da0 <HardFault_Handler+0x4>

08003da4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003da8:	bf00      	nop
 8003daa:	e7fd      	b.n	8003da8 <MemManage_Handler+0x4>

08003dac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003dac:	b480      	push	{r7}
 8003dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003db0:	bf00      	nop
 8003db2:	e7fd      	b.n	8003db0 <BusFault_Handler+0x4>

08003db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003db8:	bf00      	nop
 8003dba:	e7fd      	b.n	8003db8 <UsageFault_Handler+0x4>

08003dbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003dc0:	bf00      	nop
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bc80      	pop	{r7}
 8003dc6:	4770      	bx	lr

08003dc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003dcc:	bf00      	nop
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bc80      	pop	{r7}
 8003dd2:	4770      	bx	lr

08003dd4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003dd8:	bf00      	nop
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bc80      	pop	{r7}
 8003dde:	4770      	bx	lr

08003de0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003de4:	f000 f97e 	bl	80040e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SysTickFunction();
 8003de8:	f000 f852 	bl	8003e90 <SysTickFunction>
  /* USER CODE END SysTick_IRQn 1 */
}
 8003dec:	bf00      	nop
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003df4:	4802      	ldr	r0, [pc, #8]	@ (8003e00 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003df6:	f002 fccd 	bl	8006794 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003dfa:	bf00      	nop
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	2000023c 	.word	0x2000023c

08003e04 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003e08:	4802      	ldr	r0, [pc, #8]	@ (8003e14 <DMA2_Stream0_IRQHandler+0x10>)
 8003e0a:	f001 f839 	bl	8004e80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003e0e:	bf00      	nop
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	200001dc 	.word	0x200001dc

08003e18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e20:	4a14      	ldr	r2, [pc, #80]	@ (8003e74 <_sbrk+0x5c>)
 8003e22:	4b15      	ldr	r3, [pc, #84]	@ (8003e78 <_sbrk+0x60>)
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e2c:	4b13      	ldr	r3, [pc, #76]	@ (8003e7c <_sbrk+0x64>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d102      	bne.n	8003e3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e34:	4b11      	ldr	r3, [pc, #68]	@ (8003e7c <_sbrk+0x64>)
 8003e36:	4a12      	ldr	r2, [pc, #72]	@ (8003e80 <_sbrk+0x68>)
 8003e38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e3a:	4b10      	ldr	r3, [pc, #64]	@ (8003e7c <_sbrk+0x64>)
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4413      	add	r3, r2
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d207      	bcs.n	8003e58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e48:	f003 fabe 	bl	80073c8 <__errno>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	220c      	movs	r2, #12
 8003e50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e52:	f04f 33ff 	mov.w	r3, #4294967295
 8003e56:	e009      	b.n	8003e6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e58:	4b08      	ldr	r3, [pc, #32]	@ (8003e7c <_sbrk+0x64>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e5e:	4b07      	ldr	r3, [pc, #28]	@ (8003e7c <_sbrk+0x64>)
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4413      	add	r3, r2
 8003e66:	4a05      	ldr	r2, [pc, #20]	@ (8003e7c <_sbrk+0x64>)
 8003e68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3718      	adds	r7, #24
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	20020000 	.word	0x20020000
 8003e78:	00000400 	.word	0x00000400
 8003e7c:	2000146c 	.word	0x2000146c
 8003e80:	200015e8 	.word	0x200015e8

08003e84 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e84:	b480      	push	{r7}
 8003e86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e88:	bf00      	nop
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bc80      	pop	{r7}
 8003e8e:	4770      	bx	lr

08003e90 <SysTickFunction>:

#include "main.h"
#include "pid.h"
#include "encoders.h"

void SysTickFunction(void) {
 8003e90:	b590      	push	{r4, r7, lr}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
	/*
	 * Anything in this function body will be executed every millisecond.
	 * Call you PID update function here.
	 */

	updatePID();
 8003e96:	f7fe fcb7 	bl	8002808 <updatePID>
	 * It also maintains the magnitude of the difference between the left and right encoders so that PID will work seamlessly.
	 *
	 * You may have to adjust it in the event you try to traverse more than 31000 encoder counts at once (~9 meters) without
	 * turning. But that'll be approximately never in Micromouse :)
	 */
	if (getRightEncoderCounts() > 31000 || getLeftEncoderCounts() > 31000
 8003e9a:	f7fd fa5f 	bl	800135c <getRightEncoderCounts>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	f647 1318 	movw	r3, #31000	@ 0x7918
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	dc15      	bgt.n	8003ed6 <SysTickFunction+0x46>
 8003eaa:	f7fd fa65 	bl	8001378 <getLeftEncoderCounts>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	f647 1318 	movw	r3, #31000	@ 0x7918
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	dc0d      	bgt.n	8003ed6 <SysTickFunction+0x46>
			|| getRightEncoderCounts() < -31000 || getLeftEncoderCounts() < -31000) {
 8003eba:	f7fd fa4f 	bl	800135c <getRightEncoderCounts>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	4b10      	ldr	r3, [pc, #64]	@ (8003f04 <SysTickFunction+0x74>)
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	db06      	blt.n	8003ed6 <SysTickFunction+0x46>
 8003ec8:	f7fd fa56 	bl	8001378 <getLeftEncoderCounts>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	461a      	mov	r2, r3
 8003ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8003f04 <SysTickFunction+0x74>)
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	da11      	bge.n	8003efa <SysTickFunction+0x6a>
		int16_t difference = getRightEncoderCounts() - getLeftEncoderCounts();
 8003ed6:	f7fd fa41 	bl	800135c <getRightEncoderCounts>
 8003eda:	4603      	mov	r3, r0
 8003edc:	b29c      	uxth	r4, r3
 8003ede:	f7fd fa4b 	bl	8001378 <getLeftEncoderCounts>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	1ae3      	subs	r3, r4, r3
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	80fb      	strh	r3, [r7, #6]
		resetEncoders();
 8003eec:	f7fd fa52 	bl	8001394 <resetEncoders>
		TIM2->CNT = (int16_t) difference;
 8003ef0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003ef4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ef8:	6253      	str	r3, [r2, #36]	@ 0x24
	}
}
 8003efa:	bf00      	nop
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd90      	pop	{r4, r7, pc}
 8003f02:	bf00      	nop
 8003f04:	ffff86e8 	.word	0xffff86e8

08003f08 <leftWallCheck>:

void setLeftWall(int wall) { left_wall_threshold = wall; }
void setRightWall(int wall) { right_wall_threshold = wall; }
void setFrontWall(int wall) { front_wall_threshold = wall; }

int16_t leftWallCheck() {
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
	if (readIR(IR_LEFT) > left_wall_threshold) {
 8003f0c:	2001      	movs	r0, #1
 8003f0e:	f7fd fb7b 	bl	8001608 <readIR>
 8003f12:	4603      	mov	r3, r0
 8003f14:	461a      	mov	r2, r3
 8003f16:	4b08      	ldr	r3, [pc, #32]	@ (8003f38 <leftWallCheck+0x30>)
 8003f18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	dd03      	ble.n	8003f28 <leftWallCheck+0x20>
		left_wall = 1;
 8003f20:	4b06      	ldr	r3, [pc, #24]	@ (8003f3c <leftWallCheck+0x34>)
 8003f22:	2201      	movs	r2, #1
 8003f24:	801a      	strh	r2, [r3, #0]
 8003f26:	e002      	b.n	8003f2e <leftWallCheck+0x26>
	}
	else {
		left_wall = 0;
 8003f28:	4b04      	ldr	r3, [pc, #16]	@ (8003f3c <leftWallCheck+0x34>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	801a      	strh	r2, [r3, #0]
	}
	return left_wall;
 8003f2e:	4b03      	ldr	r3, [pc, #12]	@ (8003f3c <leftWallCheck+0x34>)
 8003f30:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	20000014 	.word	0x20000014
 8003f3c:	20001470 	.word	0x20001470

08003f40 <rightWallCheck>:

int16_t rightWallCheck() {
 8003f40:	b580      	push	{r7, lr}
 8003f42:	af00      	add	r7, sp, #0
	if (readIR(IR_RIGHT) > right_wall_threshold) {
 8003f44:	2002      	movs	r0, #2
 8003f46:	f7fd fb5f 	bl	8001608 <readIR>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	4b08      	ldr	r3, [pc, #32]	@ (8003f70 <rightWallCheck+0x30>)
 8003f50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	dd03      	ble.n	8003f60 <rightWallCheck+0x20>
		right_wall = 1;
 8003f58:	4b06      	ldr	r3, [pc, #24]	@ (8003f74 <rightWallCheck+0x34>)
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	801a      	strh	r2, [r3, #0]
 8003f5e:	e002      	b.n	8003f66 <rightWallCheck+0x26>
	}
	else {
		right_wall = 0;
 8003f60:	4b04      	ldr	r3, [pc, #16]	@ (8003f74 <rightWallCheck+0x34>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	801a      	strh	r2, [r3, #0]
	}
	return right_wall;
 8003f66:	4b03      	ldr	r3, [pc, #12]	@ (8003f74 <rightWallCheck+0x34>)
 8003f68:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	20000016 	.word	0x20000016
 8003f74:	20001472 	.word	0x20001472

08003f78 <frontWallCheck>:

int16_t frontWallCheck() {
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
	if (readIR(IR_FORWARD_LEFT) > front_wall_threshold) {
 8003f7c:	2000      	movs	r0, #0
 8003f7e:	f7fd fb43 	bl	8001608 <readIR>
 8003f82:	4603      	mov	r3, r0
 8003f84:	461a      	mov	r2, r3
 8003f86:	4b08      	ldr	r3, [pc, #32]	@ (8003fa8 <frontWallCheck+0x30>)
 8003f88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	dd03      	ble.n	8003f98 <frontWallCheck+0x20>
		front_wall = 1;
 8003f90:	4b06      	ldr	r3, [pc, #24]	@ (8003fac <frontWallCheck+0x34>)
 8003f92:	2201      	movs	r2, #1
 8003f94:	801a      	strh	r2, [r3, #0]
 8003f96:	e002      	b.n	8003f9e <frontWallCheck+0x26>
	}
	else {
		front_wall = 0;
 8003f98:	4b04      	ldr	r3, [pc, #16]	@ (8003fac <frontWallCheck+0x34>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	801a      	strh	r2, [r3, #0]
	}
	return front_wall;
 8003f9e:	4b03      	ldr	r3, [pc, #12]	@ (8003fac <frontWallCheck+0x34>)
 8003fa0:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	20000018 	.word	0x20000018
 8003fac:	20001474 	.word	0x20001474

08003fb0 <sign>:

int16_t sign(float x) {
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
	if (x > 0)
 8003fb8:	f04f 0100 	mov.w	r1, #0
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f7fc ff8b 	bl	8000ed8 <__aeabi_fcmpgt>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <sign+0x1c>
	{
		return 1;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e00b      	b.n	8003fe4 <sign+0x34>
	}
	else if (x < 0)
 8003fcc:	f04f 0100 	mov.w	r1, #0
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f7fc ff63 	bl	8000e9c <__aeabi_fcmplt>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d002      	beq.n	8003fe2 <sign+0x32>
	{
		return -1;
 8003fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8003fe0:	e000      	b.n	8003fe4 <sign+0x34>
	}
	else
	{
		return 0;
 8003fe2:	2300      	movs	r3, #0
	}
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3708      	adds	r7, #8
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003fec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004024 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 8003ff0:	f7ff ff48 	bl	8003e84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ff4:	480c      	ldr	r0, [pc, #48]	@ (8004028 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003ff6:	490d      	ldr	r1, [pc, #52]	@ (800402c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003ff8:	4a0d      	ldr	r2, [pc, #52]	@ (8004030 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003ffa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ffc:	e002      	b.n	8004004 <LoopCopyDataInit>

08003ffe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ffe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004000:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004002:	3304      	adds	r3, #4

08004004 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004004:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004006:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004008:	d3f9      	bcc.n	8003ffe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800400a:	4a0a      	ldr	r2, [pc, #40]	@ (8004034 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800400c:	4c0a      	ldr	r4, [pc, #40]	@ (8004038 <LoopFillZerobss+0x22>)
  movs r3, #0
 800400e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004010:	e001      	b.n	8004016 <LoopFillZerobss>

08004012 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004012:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004014:	3204      	adds	r2, #4

08004016 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004016:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004018:	d3fb      	bcc.n	8004012 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800401a:	f003 f9db 	bl	80073d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800401e:	f7fd fc3b 	bl	8001898 <main>
  bx  lr    
 8004022:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004024:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004028:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800402c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8004030:	080074f0 	.word	0x080074f0
  ldr r2, =_sbss
 8004034:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8004038:	200015e4 	.word	0x200015e4

0800403c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800403c:	e7fe      	b.n	800403c <ADC_IRQHandler>
	...

08004040 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004044:	4b0e      	ldr	r3, [pc, #56]	@ (8004080 <HAL_Init+0x40>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a0d      	ldr	r2, [pc, #52]	@ (8004080 <HAL_Init+0x40>)
 800404a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800404e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8004050:	4b0b      	ldr	r3, [pc, #44]	@ (8004080 <HAL_Init+0x40>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a0a      	ldr	r2, [pc, #40]	@ (8004080 <HAL_Init+0x40>)
 8004056:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800405a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800405c:	4b08      	ldr	r3, [pc, #32]	@ (8004080 <HAL_Init+0x40>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a07      	ldr	r2, [pc, #28]	@ (8004080 <HAL_Init+0x40>)
 8004062:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004066:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004068:	2003      	movs	r0, #3
 800406a:	f000 fd51 	bl	8004b10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800406e:	200f      	movs	r0, #15
 8004070:	f000 f808 	bl	8004084 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8004074:	f7ff fcf4 	bl	8003a60 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	40023c00 	.word	0x40023c00

08004084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800408c:	4b12      	ldr	r3, [pc, #72]	@ (80040d8 <HAL_InitTick+0x54>)
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	4b12      	ldr	r3, [pc, #72]	@ (80040dc <HAL_InitTick+0x58>)
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	4619      	mov	r1, r3
 8004096:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800409a:	fbb3 f3f1 	udiv	r3, r3, r1
 800409e:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 fd69 	bl	8004b7a <HAL_SYSTICK_Config>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e00e      	b.n	80040d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b0f      	cmp	r3, #15
 80040b6:	d80a      	bhi.n	80040ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040b8:	2200      	movs	r2, #0
 80040ba:	6879      	ldr	r1, [r7, #4]
 80040bc:	f04f 30ff 	mov.w	r0, #4294967295
 80040c0:	f000 fd31 	bl	8004b26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040c4:	4a06      	ldr	r2, [pc, #24]	@ (80040e0 <HAL_InitTick+0x5c>)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
 80040cc:	e000      	b.n	80040d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3708      	adds	r7, #8
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	20000010 	.word	0x20000010
 80040dc:	20000020 	.word	0x20000020
 80040e0:	2000001c 	.word	0x2000001c

080040e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040e4:	b480      	push	{r7}
 80040e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040e8:	4b05      	ldr	r3, [pc, #20]	@ (8004100 <HAL_IncTick+0x1c>)
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	461a      	mov	r2, r3
 80040ee:	4b05      	ldr	r3, [pc, #20]	@ (8004104 <HAL_IncTick+0x20>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4413      	add	r3, r2
 80040f4:	4a03      	ldr	r2, [pc, #12]	@ (8004104 <HAL_IncTick+0x20>)
 80040f6:	6013      	str	r3, [r2, #0]
}
 80040f8:	bf00      	nop
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bc80      	pop	{r7}
 80040fe:	4770      	bx	lr
 8004100:	20000020 	.word	0x20000020
 8004104:	20001478 	.word	0x20001478

08004108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004108:	b480      	push	{r7}
 800410a:	af00      	add	r7, sp, #0
  return uwTick;
 800410c:	4b02      	ldr	r3, [pc, #8]	@ (8004118 <HAL_GetTick+0x10>)
 800410e:	681b      	ldr	r3, [r3, #0]
}
 8004110:	4618      	mov	r0, r3
 8004112:	46bd      	mov	sp, r7
 8004114:	bc80      	pop	{r7}
 8004116:	4770      	bx	lr
 8004118:	20001478 	.word	0x20001478

0800411c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004124:	2300      	movs	r3, #0
 8004126:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e033      	b.n	800419a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004136:	2b00      	cmp	r3, #0
 8004138:	d109      	bne.n	800414e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f7ff fcb6 	bl	8003aac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004152:	f003 0310 	and.w	r3, r3, #16
 8004156:	2b00      	cmp	r3, #0
 8004158:	d118      	bne.n	800418c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800415e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004162:	f023 0302 	bic.w	r3, r3, #2
 8004166:	f043 0202 	orr.w	r2, r3, #2
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 fa7a 	bl	8004668 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417e:	f023 0303 	bic.w	r3, r3, #3
 8004182:	f043 0201 	orr.w	r2, r3, #1
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	641a      	str	r2, [r3, #64]	@ 0x40
 800418a:	e001      	b.n	8004190 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004198:	7bfb      	ldrb	r3, [r7, #15]
}
 800419a:	4618      	mov	r0, r3
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
	...

080041a4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b086      	sub	sp, #24
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80041b0:	2300      	movs	r3, #0
 80041b2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d101      	bne.n	80041c2 <HAL_ADC_Start_DMA+0x1e>
 80041be:	2302      	movs	r3, #2
 80041c0:	e0bc      	b.n	800433c <HAL_ADC_Start_DMA+0x198>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d018      	beq.n	800420a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	689a      	ldr	r2, [r3, #8]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f042 0201 	orr.w	r2, r2, #1
 80041e6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80041e8:	4b56      	ldr	r3, [pc, #344]	@ (8004344 <HAL_ADC_Start_DMA+0x1a0>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a56      	ldr	r2, [pc, #344]	@ (8004348 <HAL_ADC_Start_DMA+0x1a4>)
 80041ee:	fba2 2303 	umull	r2, r3, r2, r3
 80041f2:	0c9a      	lsrs	r2, r3, #18
 80041f4:	4613      	mov	r3, r2
 80041f6:	005b      	lsls	r3, r3, #1
 80041f8:	4413      	add	r3, r2
 80041fa:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 80041fc:	e002      	b.n	8004204 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	3b01      	subs	r3, #1
 8004202:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1f9      	bne.n	80041fe <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f003 0301 	and.w	r3, r3, #1
 8004214:	2b01      	cmp	r3, #1
 8004216:	f040 8084 	bne.w	8004322 <HAL_ADC_Start_DMA+0x17e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004222:	f023 0301 	bic.w	r3, r3, #1
 8004226:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004238:	2b00      	cmp	r3, #0
 800423a:	d007      	beq.n	800424c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004240:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004244:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004250:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004254:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004258:	d106      	bne.n	8004268 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800425e:	f023 0206 	bic.w	r2, r3, #6
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	645a      	str	r2, [r3, #68]	@ 0x44
 8004266:	e002      	b.n	800426e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800427a:	4a34      	ldr	r2, [pc, #208]	@ (800434c <HAL_ADC_Start_DMA+0x1a8>)
 800427c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004282:	4a33      	ldr	r2, [pc, #204]	@ (8004350 <HAL_ADC_Start_DMA+0x1ac>)
 8004284:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800428a:	4a32      	ldr	r2, [pc, #200]	@ (8004354 <HAL_ADC_Start_DMA+0x1b0>)
 800428c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004296:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	685a      	ldr	r2, [r3, #4]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80042a6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	689a      	ldr	r2, [r3, #8]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042b6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	334c      	adds	r3, #76	@ 0x4c
 80042c2:	4619      	mov	r1, r3
 80042c4:	68ba      	ldr	r2, [r7, #8]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f000 fd12 	bl	8004cf0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80042cc:	4b22      	ldr	r3, [pc, #136]	@ (8004358 <HAL_ADC_Start_DMA+0x1b4>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f003 031f 	and.w	r3, r3, #31
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10f      	bne.n	80042f8 <HAL_ADC_Start_DMA+0x154>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d129      	bne.n	800433a <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80042f4:	609a      	str	r2, [r3, #8]
 80042f6:	e020      	b.n	800433a <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a17      	ldr	r2, [pc, #92]	@ (800435c <HAL_ADC_Start_DMA+0x1b8>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d11b      	bne.n	800433a <HAL_ADC_Start_DMA+0x196>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d114      	bne.n	800433a <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689a      	ldr	r2, [r3, #8]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800431e:	609a      	str	r2, [r3, #8]
 8004320:	e00b      	b.n	800433a <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004326:	f043 0210 	orr.w	r2, r3, #16
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004332:	f043 0201 	orr.w	r2, r3, #1
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3718      	adds	r7, #24
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	20000010 	.word	0x20000010
 8004348:	431bde83 	.word	0x431bde83
 800434c:	08004875 	.word	0x08004875
 8004350:	0800492f 	.word	0x0800492f
 8004354:	0800494b 	.word	0x0800494b
 8004358:	40012300 	.word	0x40012300
 800435c:	40012000 	.word	0x40012000

08004360 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004368:	2300      	movs	r3, #0
 800436a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004372:	2b01      	cmp	r3, #1
 8004374:	d101      	bne.n	800437a <HAL_ADC_Stop_DMA+0x1a>
 8004376:	2302      	movs	r3, #2
 8004378:	e03f      	b.n	80043fa <HAL_ADC_Stop_DMA+0x9a>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	689a      	ldr	r2, [r3, #8]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f022 0201 	bic.w	r2, r2, #1
 8004390:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f003 0301 	and.w	r3, r3, #1
 800439c:	2b00      	cmp	r3, #0
 800439e:	d127      	bne.n	80043f0 <HAL_ADC_Stop_DMA+0x90>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	689a      	ldr	r2, [r3, #8]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80043ae:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d118      	bne.n	80043f0 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 fcec 	bl	8004da0 <HAL_DMA_Abort>
 80043c8:	4603      	mov	r3, r0
 80043ca:	73fb      	strb	r3, [r7, #15]
      
      /* Disable ADC overrun interrupt */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	685a      	ldr	r2, [r3, #4]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 80043da:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80043e4:	f023 0301 	bic.w	r3, r3, #1
 80043e8:	f043 0201 	orr.w	r2, r3, #1
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80043f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004402:	b480      	push	{r7}
 8004404:	b083      	sub	sp, #12
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800440a:	bf00      	nop
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	bc80      	pop	{r7}
 8004412:	4770      	bx	lr

08004414 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	bc80      	pop	{r7}
 8004424:	4770      	bx	lr
	...

08004428 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004432:	2300      	movs	r3, #0
 8004434:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800443c:	2b01      	cmp	r3, #1
 800443e:	d101      	bne.n	8004444 <HAL_ADC_ConfigChannel+0x1c>
 8004440:	2302      	movs	r3, #2
 8004442:	e103      	b.n	800464c <HAL_ADC_ConfigChannel+0x224>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2b09      	cmp	r3, #9
 8004452:	d925      	bls.n	80044a0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68d9      	ldr	r1, [r3, #12]
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	b29b      	uxth	r3, r3
 8004460:	461a      	mov	r2, r3
 8004462:	4613      	mov	r3, r2
 8004464:	005b      	lsls	r3, r3, #1
 8004466:	4413      	add	r3, r2
 8004468:	3b1e      	subs	r3, #30
 800446a:	2207      	movs	r2, #7
 800446c:	fa02 f303 	lsl.w	r3, r2, r3
 8004470:	43da      	mvns	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	400a      	ands	r2, r1
 8004478:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68d9      	ldr	r1, [r3, #12]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	689a      	ldr	r2, [r3, #8]
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	b29b      	uxth	r3, r3
 800448a:	4618      	mov	r0, r3
 800448c:	4603      	mov	r3, r0
 800448e:	005b      	lsls	r3, r3, #1
 8004490:	4403      	add	r3, r0
 8004492:	3b1e      	subs	r3, #30
 8004494:	409a      	lsls	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	60da      	str	r2, [r3, #12]
 800449e:	e022      	b.n	80044e6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6919      	ldr	r1, [r3, #16]
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	461a      	mov	r2, r3
 80044ae:	4613      	mov	r3, r2
 80044b0:	005b      	lsls	r3, r3, #1
 80044b2:	4413      	add	r3, r2
 80044b4:	2207      	movs	r2, #7
 80044b6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ba:	43da      	mvns	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	400a      	ands	r2, r1
 80044c2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	6919      	ldr	r1, [r3, #16]
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	689a      	ldr	r2, [r3, #8]
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	4618      	mov	r0, r3
 80044d6:	4603      	mov	r3, r0
 80044d8:	005b      	lsls	r3, r3, #1
 80044da:	4403      	add	r3, r0
 80044dc:	409a      	lsls	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	430a      	orrs	r2, r1
 80044e4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	2b06      	cmp	r3, #6
 80044ec:	d824      	bhi.n	8004538 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685a      	ldr	r2, [r3, #4]
 80044f8:	4613      	mov	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	4413      	add	r3, r2
 80044fe:	3b05      	subs	r3, #5
 8004500:	221f      	movs	r2, #31
 8004502:	fa02 f303 	lsl.w	r3, r2, r3
 8004506:	43da      	mvns	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	400a      	ands	r2, r1
 800450e:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	b29b      	uxth	r3, r3
 800451c:	4618      	mov	r0, r3
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	685a      	ldr	r2, [r3, #4]
 8004522:	4613      	mov	r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	4413      	add	r3, r2
 8004528:	3b05      	subs	r3, #5
 800452a:	fa00 f203 	lsl.w	r2, r0, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	430a      	orrs	r2, r1
 8004534:	635a      	str	r2, [r3, #52]	@ 0x34
 8004536:	e04c      	b.n	80045d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	2b0c      	cmp	r3, #12
 800453e:	d824      	bhi.n	800458a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	685a      	ldr	r2, [r3, #4]
 800454a:	4613      	mov	r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4413      	add	r3, r2
 8004550:	3b23      	subs	r3, #35	@ 0x23
 8004552:	221f      	movs	r2, #31
 8004554:	fa02 f303 	lsl.w	r3, r2, r3
 8004558:	43da      	mvns	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	400a      	ands	r2, r1
 8004560:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	b29b      	uxth	r3, r3
 800456e:	4618      	mov	r0, r3
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	4613      	mov	r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4413      	add	r3, r2
 800457a:	3b23      	subs	r3, #35	@ 0x23
 800457c:	fa00 f203 	lsl.w	r2, r0, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	430a      	orrs	r2, r1
 8004586:	631a      	str	r2, [r3, #48]	@ 0x30
 8004588:	e023      	b.n	80045d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	4613      	mov	r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	4413      	add	r3, r2
 800459a:	3b41      	subs	r3, #65	@ 0x41
 800459c:	221f      	movs	r2, #31
 800459e:	fa02 f303 	lsl.w	r3, r2, r3
 80045a2:	43da      	mvns	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	400a      	ands	r2, r1
 80045aa:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	4618      	mov	r0, r3
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	4613      	mov	r3, r2
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	4413      	add	r3, r2
 80045c4:	3b41      	subs	r3, #65	@ 0x41
 80045c6:	fa00 f203 	lsl.w	r2, r0, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a20      	ldr	r2, [pc, #128]	@ (8004658 <HAL_ADC_ConfigChannel+0x230>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d109      	bne.n	80045f0 <HAL_ADC_ConfigChannel+0x1c8>
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2b12      	cmp	r3, #18
 80045e2:	d105      	bne.n	80045f0 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80045e4:	4b1d      	ldr	r3, [pc, #116]	@ (800465c <HAL_ADC_ConfigChannel+0x234>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	4a1c      	ldr	r2, [pc, #112]	@ (800465c <HAL_ADC_ConfigChannel+0x234>)
 80045ea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80045ee:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a18      	ldr	r2, [pc, #96]	@ (8004658 <HAL_ADC_ConfigChannel+0x230>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d123      	bne.n	8004642 <HAL_ADC_ConfigChannel+0x21a>
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2b10      	cmp	r3, #16
 8004600:	d003      	beq.n	800460a <HAL_ADC_ConfigChannel+0x1e2>
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2b11      	cmp	r3, #17
 8004608:	d11b      	bne.n	8004642 <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800460a:	4b14      	ldr	r3, [pc, #80]	@ (800465c <HAL_ADC_ConfigChannel+0x234>)
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	4a13      	ldr	r2, [pc, #76]	@ (800465c <HAL_ADC_ConfigChannel+0x234>)
 8004610:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004614:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2b10      	cmp	r3, #16
 800461c:	d111      	bne.n	8004642 <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800461e:	4b10      	ldr	r3, [pc, #64]	@ (8004660 <HAL_ADC_ConfigChannel+0x238>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a10      	ldr	r2, [pc, #64]	@ (8004664 <HAL_ADC_ConfigChannel+0x23c>)
 8004624:	fba2 2303 	umull	r2, r3, r2, r3
 8004628:	0c9a      	lsrs	r2, r3, #18
 800462a:	4613      	mov	r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	4413      	add	r3, r2
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8004634:	e002      	b.n	800463c <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	3b01      	subs	r3, #1
 800463a:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1f9      	bne.n	8004636 <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3714      	adds	r7, #20
 8004650:	46bd      	mov	sp, r7
 8004652:	bc80      	pop	{r7}
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	40012000 	.word	0x40012000
 800465c:	40012300 	.word	0x40012300
 8004660:	20000010 	.word	0x20000010
 8004664:	431bde83 	.word	0x431bde83

08004668 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004670:	4b7e      	ldr	r3, [pc, #504]	@ (800486c <ADC_Init+0x204>)
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	4a7d      	ldr	r2, [pc, #500]	@ (800486c <ADC_Init+0x204>)
 8004676:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800467a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800467c:	4b7b      	ldr	r3, [pc, #492]	@ (800486c <ADC_Init+0x204>)
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	4979      	ldr	r1, [pc, #484]	@ (800486c <ADC_Init+0x204>)
 8004686:	4313      	orrs	r3, r2
 8004688:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004698:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	6859      	ldr	r1, [r3, #4]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	021a      	lsls	r2, r3, #8
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80046bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	6859      	ldr	r1, [r3, #4]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689a      	ldr	r2, [r3, #8]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	430a      	orrs	r2, r1
 80046ce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689a      	ldr	r2, [r3, #8]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6899      	ldr	r1, [r3, #8]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	68da      	ldr	r2, [r3, #12]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f6:	4a5e      	ldr	r2, [pc, #376]	@ (8004870 <ADC_Init+0x208>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d022      	beq.n	8004742 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	689a      	ldr	r2, [r3, #8]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800470a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6899      	ldr	r1, [r3, #8]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	430a      	orrs	r2, r1
 800471c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	689a      	ldr	r2, [r3, #8]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800472c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	6899      	ldr	r1, [r3, #8]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	430a      	orrs	r2, r1
 800473e:	609a      	str	r2, [r3, #8]
 8004740:	e00f      	b.n	8004762 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	689a      	ldr	r2, [r3, #8]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004750:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689a      	ldr	r2, [r3, #8]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004760:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	689a      	ldr	r2, [r3, #8]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 0202 	bic.w	r2, r2, #2
 8004770:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	6899      	ldr	r1, [r3, #8]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	7e1b      	ldrb	r3, [r3, #24]
 800477c:	005a      	lsls	r2, r3, #1
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	430a      	orrs	r2, r1
 8004784:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f893 3020 	ldrb.w	r3, [r3, #32]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d027      	beq.n	80047e0 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800479e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80047ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b4:	3b01      	subs	r3, #1
 80047b6:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 80047ba:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	fa92 f2a2 	rbit	r2, r2
 80047c2:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80047c4:	68ba      	ldr	r2, [r7, #8]
 80047c6:	fab2 f282 	clz	r2, r2
 80047ca:	b2d2      	uxtb	r2, r2
 80047cc:	fa03 f102 	lsl.w	r1, r3, r2
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685a      	ldr	r2, [r3, #4]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	605a      	str	r2, [r3, #4]
 80047de:	e007      	b.n	80047f0 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	685a      	ldr	r2, [r3, #4]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80047fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	69db      	ldr	r3, [r3, #28]
 800480a:	3b01      	subs	r3, #1
 800480c:	051a      	lsls	r2, r3, #20
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	430a      	orrs	r2, r1
 8004814:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	689a      	ldr	r2, [r3, #8]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004824:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	6899      	ldr	r1, [r3, #8]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004832:	025a      	lsls	r2, r3, #9
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	430a      	orrs	r2, r1
 800483a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	689a      	ldr	r2, [r3, #8]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800484a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6899      	ldr	r1, [r3, #8]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	029a      	lsls	r2, r3, #10
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	430a      	orrs	r2, r1
 800485e:	609a      	str	r2, [r3, #8]
}
 8004860:	bf00      	nop
 8004862:	3714      	adds	r7, #20
 8004864:	46bd      	mov	sp, r7
 8004866:	bc80      	pop	{r7}
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	40012300 	.word	0x40012300
 8004870:	0f000001 	.word	0x0f000001

08004874 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004880:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004886:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800488a:	2b00      	cmp	r3, #0
 800488c:	d13c      	bne.n	8004908 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004892:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d12b      	bne.n	8004900 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d127      	bne.n	8004900 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d006      	beq.n	80048cc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d119      	bne.n	8004900 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	685a      	ldr	r2, [r3, #4]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f022 0220 	bic.w	r2, r2, #32
 80048da:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d105      	bne.n	8004900 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f8:	f043 0201 	orr.w	r2, r3, #1
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004900:	68f8      	ldr	r0, [r7, #12]
 8004902:	f7fc ff67 	bl	80017d4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004906:	e00e      	b.n	8004926 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490c:	f003 0310 	and.w	r3, r3, #16
 8004910:	2b00      	cmp	r3, #0
 8004912:	d003      	beq.n	800491c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	f7ff fd7d 	bl	8004414 <HAL_ADC_ErrorCallback>
}
 800491a:	e004      	b.n	8004926 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	4798      	blx	r3
}
 8004926:	bf00      	nop
 8004928:	3710      	adds	r7, #16
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800492e:	b580      	push	{r7, lr}
 8004930:	b084      	sub	sp, #16
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800493a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f7ff fd60 	bl	8004402 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004942:	bf00      	nop
 8004944:	3710      	adds	r7, #16
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800494a:	b580      	push	{r7, lr}
 800494c:	b084      	sub	sp, #16
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004956:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2240      	movs	r2, #64	@ 0x40
 800495c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004962:	f043 0204 	orr.w	r2, r3, #4
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	645a      	str	r2, [r3, #68]	@ 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f7ff fd52 	bl	8004414 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004970:	bf00      	nop
 8004972:	3710      	adds	r7, #16
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f003 0307 	and.w	r3, r3, #7
 8004986:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004988:	4b0c      	ldr	r3, [pc, #48]	@ (80049bc <__NVIC_SetPriorityGrouping+0x44>)
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004994:	4013      	ands	r3, r2
 8004996:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80049a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80049a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049aa:	4a04      	ldr	r2, [pc, #16]	@ (80049bc <__NVIC_SetPriorityGrouping+0x44>)
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	60d3      	str	r3, [r2, #12]
}
 80049b0:	bf00      	nop
 80049b2:	3714      	adds	r7, #20
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bc80      	pop	{r7}
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	e000ed00 	.word	0xe000ed00

080049c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049c0:	b480      	push	{r7}
 80049c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049c4:	4b04      	ldr	r3, [pc, #16]	@ (80049d8 <__NVIC_GetPriorityGrouping+0x18>)
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	0a1b      	lsrs	r3, r3, #8
 80049ca:	f003 0307 	and.w	r3, r3, #7
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bc80      	pop	{r7}
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	e000ed00 	.word	0xe000ed00

080049dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	4603      	mov	r3, r0
 80049e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	db0b      	blt.n	8004a06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049ee:	79fb      	ldrb	r3, [r7, #7]
 80049f0:	f003 021f 	and.w	r2, r3, #31
 80049f4:	4906      	ldr	r1, [pc, #24]	@ (8004a10 <__NVIC_EnableIRQ+0x34>)
 80049f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049fa:	095b      	lsrs	r3, r3, #5
 80049fc:	2001      	movs	r0, #1
 80049fe:	fa00 f202 	lsl.w	r2, r0, r2
 8004a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004a06:	bf00      	nop
 8004a08:	370c      	adds	r7, #12
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bc80      	pop	{r7}
 8004a0e:	4770      	bx	lr
 8004a10:	e000e100 	.word	0xe000e100

08004a14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	6039      	str	r1, [r7, #0]
 8004a1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	db0a      	blt.n	8004a3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	b2da      	uxtb	r2, r3
 8004a2c:	490c      	ldr	r1, [pc, #48]	@ (8004a60 <__NVIC_SetPriority+0x4c>)
 8004a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a32:	0112      	lsls	r2, r2, #4
 8004a34:	b2d2      	uxtb	r2, r2
 8004a36:	440b      	add	r3, r1
 8004a38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a3c:	e00a      	b.n	8004a54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	b2da      	uxtb	r2, r3
 8004a42:	4908      	ldr	r1, [pc, #32]	@ (8004a64 <__NVIC_SetPriority+0x50>)
 8004a44:	79fb      	ldrb	r3, [r7, #7]
 8004a46:	f003 030f 	and.w	r3, r3, #15
 8004a4a:	3b04      	subs	r3, #4
 8004a4c:	0112      	lsls	r2, r2, #4
 8004a4e:	b2d2      	uxtb	r2, r2
 8004a50:	440b      	add	r3, r1
 8004a52:	761a      	strb	r2, [r3, #24]
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bc80      	pop	{r7}
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	e000e100 	.word	0xe000e100
 8004a64:	e000ed00 	.word	0xe000ed00

08004a68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b089      	sub	sp, #36	@ 0x24
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f003 0307 	and.w	r3, r3, #7
 8004a7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	f1c3 0307 	rsb	r3, r3, #7
 8004a82:	2b04      	cmp	r3, #4
 8004a84:	bf28      	it	cs
 8004a86:	2304      	movcs	r3, #4
 8004a88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	3304      	adds	r3, #4
 8004a8e:	2b06      	cmp	r3, #6
 8004a90:	d902      	bls.n	8004a98 <NVIC_EncodePriority+0x30>
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	3b03      	subs	r3, #3
 8004a96:	e000      	b.n	8004a9a <NVIC_EncodePriority+0x32>
 8004a98:	2300      	movs	r3, #0
 8004a9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa6:	43da      	mvns	r2, r3
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	401a      	ands	r2, r3
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8004aba:	43d9      	mvns	r1, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ac0:	4313      	orrs	r3, r2
         );
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3724      	adds	r7, #36	@ 0x24
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bc80      	pop	{r7}
 8004aca:	4770      	bx	lr

08004acc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004adc:	d301      	bcc.n	8004ae2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e00f      	b.n	8004b02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8004b0c <SysTick_Config+0x40>)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004aea:	210f      	movs	r1, #15
 8004aec:	f04f 30ff 	mov.w	r0, #4294967295
 8004af0:	f7ff ff90 	bl	8004a14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004af4:	4b05      	ldr	r3, [pc, #20]	@ (8004b0c <SysTick_Config+0x40>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004afa:	4b04      	ldr	r3, [pc, #16]	@ (8004b0c <SysTick_Config+0x40>)
 8004afc:	2207      	movs	r2, #7
 8004afe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3708      	adds	r7, #8
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	e000e010 	.word	0xe000e010

08004b10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f7ff ff2d 	bl	8004978 <__NVIC_SetPriorityGrouping>
}
 8004b1e:	bf00      	nop
 8004b20:	3708      	adds	r7, #8
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b086      	sub	sp, #24
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	60b9      	str	r1, [r7, #8]
 8004b30:	607a      	str	r2, [r7, #4]
 8004b32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b34:	2300      	movs	r3, #0
 8004b36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b38:	f7ff ff42 	bl	80049c0 <__NVIC_GetPriorityGrouping>
 8004b3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	68b9      	ldr	r1, [r7, #8]
 8004b42:	6978      	ldr	r0, [r7, #20]
 8004b44:	f7ff ff90 	bl	8004a68 <NVIC_EncodePriority>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b4e:	4611      	mov	r1, r2
 8004b50:	4618      	mov	r0, r3
 8004b52:	f7ff ff5f 	bl	8004a14 <__NVIC_SetPriority>
}
 8004b56:	bf00      	nop
 8004b58:	3718      	adds	r7, #24
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b082      	sub	sp, #8
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	4603      	mov	r3, r0
 8004b66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7ff ff35 	bl	80049dc <__NVIC_EnableIRQ>
}
 8004b72:	bf00      	nop
 8004b74:	3708      	adds	r7, #8
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b082      	sub	sp, #8
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f7ff ffa2 	bl	8004acc <SysTick_Config>
 8004b88:	4603      	mov	r3, r0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3708      	adds	r7, #8
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
	...

08004b94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b086      	sub	sp, #24
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004ba0:	f7ff fab2 	bl	8004108 <HAL_GetTick>
 8004ba4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d101      	bne.n	8004bb0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e099      	b.n	8004ce4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f022 0201 	bic.w	r2, r2, #1
 8004bce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bd0:	e00f      	b.n	8004bf2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004bd2:	f7ff fa99 	bl	8004108 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	2b05      	cmp	r3, #5
 8004bde:	d908      	bls.n	8004bf2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2220      	movs	r2, #32
 8004be4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2203      	movs	r2, #3
 8004bea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e078      	b.n	8004ce4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0301 	and.w	r3, r3, #1
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1e8      	bne.n	8004bd2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	4b38      	ldr	r3, [pc, #224]	@ (8004cec <HAL_DMA_Init+0x158>)
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a1b      	ldr	r3, [r3, #32]
 8004c3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c48:	2b04      	cmp	r3, #4
 8004c4a:	d107      	bne.n	8004c5c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c54:	4313      	orrs	r3, r2
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	f023 0307 	bic.w	r3, r3, #7
 8004c72:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c82:	2b04      	cmp	r3, #4
 8004c84:	d117      	bne.n	8004cb6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c8a:	697a      	ldr	r2, [r7, #20]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00e      	beq.n	8004cb6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 fadd 	bl	8005258 <DMA_CheckFifoParam>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d008      	beq.n	8004cb6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2240      	movs	r2, #64	@ 0x40
 8004ca8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e016      	b.n	8004ce4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 fa96 	bl	80051f0 <DMA_CalcBaseAndBitshift>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ccc:	223f      	movs	r2, #63	@ 0x3f
 8004cce:	409a      	lsls	r2, r3
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3718      	adds	r7, #24
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	f010803f 	.word	0xf010803f

08004cf0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
 8004cfc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d06:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d101      	bne.n	8004d16 <HAL_DMA_Start_IT+0x26>
 8004d12:	2302      	movs	r3, #2
 8004d14:	e040      	b.n	8004d98 <HAL_DMA_Start_IT+0xa8>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d12f      	bne.n	8004d8a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2202      	movs	r2, #2
 8004d2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	68b9      	ldr	r1, [r7, #8]
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f000 fa28 	bl	8005194 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d48:	223f      	movs	r2, #63	@ 0x3f
 8004d4a:	409a      	lsls	r2, r3
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 0216 	orr.w	r2, r2, #22
 8004d5e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d007      	beq.n	8004d78 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f042 0208 	orr.w	r2, r2, #8
 8004d76:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f042 0201 	orr.w	r2, r2, #1
 8004d86:	601a      	str	r2, [r3, #0]
 8004d88:	e005      	b.n	8004d96 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004d92:	2302      	movs	r3, #2
 8004d94:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004d96:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3718      	adds	r7, #24
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004dae:	f7ff f9ab 	bl	8004108 <HAL_GetTick>
 8004db2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d008      	beq.n	8004dd2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2280      	movs	r2, #128	@ 0x80
 8004dc4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e052      	b.n	8004e78 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f022 0216 	bic.w	r2, r2, #22
 8004de0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	695a      	ldr	r2, [r3, #20]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004df0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d103      	bne.n	8004e02 <HAL_DMA_Abort+0x62>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d007      	beq.n	8004e12 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f022 0208 	bic.w	r2, r2, #8
 8004e10:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f022 0201 	bic.w	r2, r2, #1
 8004e20:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e22:	e013      	b.n	8004e4c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e24:	f7ff f970 	bl	8004108 <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	2b05      	cmp	r3, #5
 8004e30:	d90c      	bls.n	8004e4c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2220      	movs	r2, #32
 8004e36:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2203      	movs	r2, #3
 8004e3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e015      	b.n	8004e78 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d1e4      	bne.n	8004e24 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e5e:	223f      	movs	r2, #63	@ 0x3f
 8004e60:	409a      	lsls	r2, r3
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004e8c:	4b8e      	ldr	r3, [pc, #568]	@ (80050c8 <HAL_DMA_IRQHandler+0x248>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a8e      	ldr	r2, [pc, #568]	@ (80050cc <HAL_DMA_IRQHandler+0x24c>)
 8004e92:	fba2 2303 	umull	r2, r3, r2, r3
 8004e96:	0a9b      	lsrs	r3, r3, #10
 8004e98:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e9e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eaa:	2208      	movs	r2, #8
 8004eac:	409a      	lsls	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d01a      	beq.n	8004eec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0304 	and.w	r3, r3, #4
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d013      	beq.n	8004eec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f022 0204 	bic.w	r2, r2, #4
 8004ed2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ed8:	2208      	movs	r2, #8
 8004eda:	409a      	lsls	r2, r3
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ee4:	f043 0201 	orr.w	r2, r3, #1
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	409a      	lsls	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d012      	beq.n	8004f22 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00b      	beq.n	8004f22 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f0e:	2201      	movs	r2, #1
 8004f10:	409a      	lsls	r2, r3
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f1a:	f043 0202 	orr.w	r2, r3, #2
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f26:	2204      	movs	r2, #4
 8004f28:	409a      	lsls	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d012      	beq.n	8004f58 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0302 	and.w	r3, r3, #2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00b      	beq.n	8004f58 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f44:	2204      	movs	r2, #4
 8004f46:	409a      	lsls	r2, r3
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f50:	f043 0204 	orr.w	r2, r3, #4
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f5c:	2210      	movs	r2, #16
 8004f5e:	409a      	lsls	r2, r3
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	4013      	ands	r3, r2
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d043      	beq.n	8004ff0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0308 	and.w	r3, r3, #8
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d03c      	beq.n	8004ff0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f7a:	2210      	movs	r2, #16
 8004f7c:	409a      	lsls	r2, r3
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d018      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d108      	bne.n	8004fb0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d024      	beq.n	8004ff0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	4798      	blx	r3
 8004fae:	e01f      	b.n	8004ff0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d01b      	beq.n	8004ff0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	4798      	blx	r3
 8004fc0:	e016      	b.n	8004ff0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d107      	bne.n	8004fe0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f022 0208 	bic.w	r2, r2, #8
 8004fde:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d003      	beq.n	8004ff0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ff4:	2220      	movs	r2, #32
 8004ff6:	409a      	lsls	r2, r3
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	f000 808f 	beq.w	8005120 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0310 	and.w	r3, r3, #16
 800500c:	2b00      	cmp	r3, #0
 800500e:	f000 8087 	beq.w	8005120 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005016:	2220      	movs	r2, #32
 8005018:	409a      	lsls	r2, r3
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005024:	b2db      	uxtb	r3, r3
 8005026:	2b05      	cmp	r3, #5
 8005028:	d136      	bne.n	8005098 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f022 0216 	bic.w	r2, r2, #22
 8005038:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	695a      	ldr	r2, [r3, #20]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005048:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800504e:	2b00      	cmp	r3, #0
 8005050:	d103      	bne.n	800505a <HAL_DMA_IRQHandler+0x1da>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005056:	2b00      	cmp	r3, #0
 8005058:	d007      	beq.n	800506a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f022 0208 	bic.w	r2, r2, #8
 8005068:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800506e:	223f      	movs	r2, #63	@ 0x3f
 8005070:	409a      	lsls	r2, r3
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2201      	movs	r2, #1
 800507a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800508a:	2b00      	cmp	r3, #0
 800508c:	d07e      	beq.n	800518c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	4798      	blx	r3
        }
        return;
 8005096:	e079      	b.n	800518c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d01d      	beq.n	80050e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d10d      	bne.n	80050d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d031      	beq.n	8005120 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	4798      	blx	r3
 80050c4:	e02c      	b.n	8005120 <HAL_DMA_IRQHandler+0x2a0>
 80050c6:	bf00      	nop
 80050c8:	20000010 	.word	0x20000010
 80050cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d023      	beq.n	8005120 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	4798      	blx	r3
 80050e0:	e01e      	b.n	8005120 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10f      	bne.n	8005110 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f022 0210 	bic.w	r2, r2, #16
 80050fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005114:	2b00      	cmp	r3, #0
 8005116:	d003      	beq.n	8005120 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005124:	2b00      	cmp	r3, #0
 8005126:	d032      	beq.n	800518e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800512c:	f003 0301 	and.w	r3, r3, #1
 8005130:	2b00      	cmp	r3, #0
 8005132:	d022      	beq.n	800517a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2205      	movs	r2, #5
 8005138:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f022 0201 	bic.w	r2, r2, #1
 800514a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	3301      	adds	r3, #1
 8005150:	60bb      	str	r3, [r7, #8]
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	429a      	cmp	r2, r3
 8005156:	d307      	bcc.n	8005168 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1f2      	bne.n	800514c <HAL_DMA_IRQHandler+0x2cc>
 8005166:	e000      	b.n	800516a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005168:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800517e:	2b00      	cmp	r3, #0
 8005180:	d005      	beq.n	800518e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	4798      	blx	r3
 800518a:	e000      	b.n	800518e <HAL_DMA_IRQHandler+0x30e>
        return;
 800518c:	bf00      	nop
    }
  }
}
 800518e:	3718      	adds	r7, #24
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
 80051a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80051b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	683a      	ldr	r2, [r7, #0]
 80051b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	2b40      	cmp	r3, #64	@ 0x40
 80051c0:	d108      	bne.n	80051d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68ba      	ldr	r2, [r7, #8]
 80051d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80051d2:	e007      	b.n	80051e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68ba      	ldr	r2, [r7, #8]
 80051da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	60da      	str	r2, [r3, #12]
}
 80051e4:	bf00      	nop
 80051e6:	3714      	adds	r7, #20
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bc80      	pop	{r7}
 80051ec:	4770      	bx	lr
	...

080051f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	3b10      	subs	r3, #16
 8005200:	4a13      	ldr	r2, [pc, #76]	@ (8005250 <DMA_CalcBaseAndBitshift+0x60>)
 8005202:	fba2 2303 	umull	r2, r3, r2, r3
 8005206:	091b      	lsrs	r3, r3, #4
 8005208:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800520a:	4a12      	ldr	r2, [pc, #72]	@ (8005254 <DMA_CalcBaseAndBitshift+0x64>)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	4413      	add	r3, r2
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	461a      	mov	r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2b03      	cmp	r3, #3
 800521c:	d909      	bls.n	8005232 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005226:	f023 0303 	bic.w	r3, r3, #3
 800522a:	1d1a      	adds	r2, r3, #4
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	659a      	str	r2, [r3, #88]	@ 0x58
 8005230:	e007      	b.n	8005242 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800523a:	f023 0303 	bic.w	r3, r3, #3
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005246:	4618      	mov	r0, r3
 8005248:	3714      	adds	r7, #20
 800524a:	46bd      	mov	sp, r7
 800524c:	bc80      	pop	{r7}
 800524e:	4770      	bx	lr
 8005250:	aaaaaaab 	.word	0xaaaaaaab
 8005254:	080074d8 	.word	0x080074d8

08005258 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005260:	2300      	movs	r3, #0
 8005262:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005268:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d11f      	bne.n	80052b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	2b03      	cmp	r3, #3
 8005276:	d856      	bhi.n	8005326 <DMA_CheckFifoParam+0xce>
 8005278:	a201      	add	r2, pc, #4	@ (adr r2, 8005280 <DMA_CheckFifoParam+0x28>)
 800527a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800527e:	bf00      	nop
 8005280:	08005291 	.word	0x08005291
 8005284:	080052a3 	.word	0x080052a3
 8005288:	08005291 	.word	0x08005291
 800528c:	08005327 	.word	0x08005327
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005294:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d046      	beq.n	800532a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052a0:	e043      	b.n	800532a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052a6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80052aa:	d140      	bne.n	800532e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052b0:	e03d      	b.n	800532e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052ba:	d121      	bne.n	8005300 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	2b03      	cmp	r3, #3
 80052c0:	d837      	bhi.n	8005332 <DMA_CheckFifoParam+0xda>
 80052c2:	a201      	add	r2, pc, #4	@ (adr r2, 80052c8 <DMA_CheckFifoParam+0x70>)
 80052c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c8:	080052d9 	.word	0x080052d9
 80052cc:	080052df 	.word	0x080052df
 80052d0:	080052d9 	.word	0x080052d9
 80052d4:	080052f1 	.word	0x080052f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	73fb      	strb	r3, [r7, #15]
      break;
 80052dc:	e030      	b.n	8005340 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d025      	beq.n	8005336 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052ee:	e022      	b.n	8005336 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80052f8:	d11f      	bne.n	800533a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80052fe:	e01c      	b.n	800533a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	2b02      	cmp	r3, #2
 8005304:	d903      	bls.n	800530e <DMA_CheckFifoParam+0xb6>
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	2b03      	cmp	r3, #3
 800530a:	d003      	beq.n	8005314 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800530c:	e018      	b.n	8005340 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	73fb      	strb	r3, [r7, #15]
      break;
 8005312:	e015      	b.n	8005340 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005318:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00e      	beq.n	800533e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	73fb      	strb	r3, [r7, #15]
      break;
 8005324:	e00b      	b.n	800533e <DMA_CheckFifoParam+0xe6>
      break;
 8005326:	bf00      	nop
 8005328:	e00a      	b.n	8005340 <DMA_CheckFifoParam+0xe8>
      break;
 800532a:	bf00      	nop
 800532c:	e008      	b.n	8005340 <DMA_CheckFifoParam+0xe8>
      break;
 800532e:	bf00      	nop
 8005330:	e006      	b.n	8005340 <DMA_CheckFifoParam+0xe8>
      break;
 8005332:	bf00      	nop
 8005334:	e004      	b.n	8005340 <DMA_CheckFifoParam+0xe8>
      break;
 8005336:	bf00      	nop
 8005338:	e002      	b.n	8005340 <DMA_CheckFifoParam+0xe8>
      break;   
 800533a:	bf00      	nop
 800533c:	e000      	b.n	8005340 <DMA_CheckFifoParam+0xe8>
      break;
 800533e:	bf00      	nop
    }
  } 
  
  return status; 
 8005340:	7bfb      	ldrb	r3, [r7, #15]
}
 8005342:	4618      	mov	r0, r3
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	bc80      	pop	{r7}
 800534a:	4770      	bx	lr

0800534c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b086      	sub	sp, #24
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800535e:	4b23      	ldr	r3, [pc, #140]	@ (80053ec <HAL_FLASH_Program+0xa0>)
 8005360:	7e1b      	ldrb	r3, [r3, #24]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d101      	bne.n	800536a <HAL_FLASH_Program+0x1e>
 8005366:	2302      	movs	r3, #2
 8005368:	e03b      	b.n	80053e2 <HAL_FLASH_Program+0x96>
 800536a:	4b20      	ldr	r3, [pc, #128]	@ (80053ec <HAL_FLASH_Program+0xa0>)
 800536c:	2201      	movs	r2, #1
 800536e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005370:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005374:	f000 f870 	bl	8005458 <FLASH_WaitForLastOperation>
 8005378:	4603      	mov	r3, r0
 800537a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800537c:	7dfb      	ldrb	r3, [r7, #23]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d12b      	bne.n	80053da <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d105      	bne.n	8005394 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005388:	783b      	ldrb	r3, [r7, #0]
 800538a:	4619      	mov	r1, r3
 800538c:	68b8      	ldr	r0, [r7, #8]
 800538e:	f000 f919 	bl	80055c4 <FLASH_Program_Byte>
 8005392:	e016      	b.n	80053c2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2b01      	cmp	r3, #1
 8005398:	d105      	bne.n	80053a6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800539a:	883b      	ldrh	r3, [r7, #0]
 800539c:	4619      	mov	r1, r3
 800539e:	68b8      	ldr	r0, [r7, #8]
 80053a0:	f000 f8ee 	bl	8005580 <FLASH_Program_HalfWord>
 80053a4:	e00d      	b.n	80053c2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d105      	bne.n	80053b8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	4619      	mov	r1, r3
 80053b0:	68b8      	ldr	r0, [r7, #8]
 80053b2:	f000 f8c3 	bl	800553c <FLASH_Program_Word>
 80053b6:	e004      	b.n	80053c2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80053b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053bc:	68b8      	ldr	r0, [r7, #8]
 80053be:	f000 f88b 	bl	80054d8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80053c2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80053c6:	f000 f847 	bl	8005458 <FLASH_WaitForLastOperation>
 80053ca:	4603      	mov	r3, r0
 80053cc:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80053ce:	4b08      	ldr	r3, [pc, #32]	@ (80053f0 <HAL_FLASH_Program+0xa4>)
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	4a07      	ldr	r2, [pc, #28]	@ (80053f0 <HAL_FLASH_Program+0xa4>)
 80053d4:	f023 0301 	bic.w	r3, r3, #1
 80053d8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80053da:	4b04      	ldr	r3, [pc, #16]	@ (80053ec <HAL_FLASH_Program+0xa0>)
 80053dc:	2200      	movs	r2, #0
 80053de:	761a      	strb	r2, [r3, #24]
  
  return status;
 80053e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3718      	adds	r7, #24
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	2000147c 	.word	0x2000147c
 80053f0:	40023c00 	.word	0x40023c00

080053f4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80053fa:	2300      	movs	r3, #0
 80053fc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80053fe:	4b0b      	ldr	r3, [pc, #44]	@ (800542c <HAL_FLASH_Unlock+0x38>)
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	2b00      	cmp	r3, #0
 8005404:	da0b      	bge.n	800541e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005406:	4b09      	ldr	r3, [pc, #36]	@ (800542c <HAL_FLASH_Unlock+0x38>)
 8005408:	4a09      	ldr	r2, [pc, #36]	@ (8005430 <HAL_FLASH_Unlock+0x3c>)
 800540a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800540c:	4b07      	ldr	r3, [pc, #28]	@ (800542c <HAL_FLASH_Unlock+0x38>)
 800540e:	4a09      	ldr	r2, [pc, #36]	@ (8005434 <HAL_FLASH_Unlock+0x40>)
 8005410:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005412:	4b06      	ldr	r3, [pc, #24]	@ (800542c <HAL_FLASH_Unlock+0x38>)
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	2b00      	cmp	r3, #0
 8005418:	da01      	bge.n	800541e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800541e:	79fb      	ldrb	r3, [r7, #7]
}
 8005420:	4618      	mov	r0, r3
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	bc80      	pop	{r7}
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	40023c00 	.word	0x40023c00
 8005430:	45670123 	.word	0x45670123
 8005434:	cdef89ab 	.word	0xcdef89ab

08005438 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005438:	b480      	push	{r7}
 800543a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800543c:	4b05      	ldr	r3, [pc, #20]	@ (8005454 <HAL_FLASH_Lock+0x1c>)
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	4a04      	ldr	r2, [pc, #16]	@ (8005454 <HAL_FLASH_Lock+0x1c>)
 8005442:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005446:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	46bd      	mov	sp, r7
 800544e:	bc80      	pop	{r7}
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	40023c00 	.word	0x40023c00

08005458 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005460:	2300      	movs	r3, #0
 8005462:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005464:	4b1a      	ldr	r3, [pc, #104]	@ (80054d0 <FLASH_WaitForLastOperation+0x78>)
 8005466:	2200      	movs	r2, #0
 8005468:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800546a:	f7fe fe4d 	bl	8004108 <HAL_GetTick>
 800546e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005470:	e010      	b.n	8005494 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005478:	d00c      	beq.n	8005494 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d007      	beq.n	8005490 <FLASH_WaitForLastOperation+0x38>
 8005480:	f7fe fe42 	bl	8004108 <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	429a      	cmp	r2, r3
 800548e:	d201      	bcs.n	8005494 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	e019      	b.n	80054c8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005494:	4b0f      	ldr	r3, [pc, #60]	@ (80054d4 <FLASH_WaitForLastOperation+0x7c>)
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1e8      	bne.n	8005472 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80054a0:	4b0c      	ldr	r3, [pc, #48]	@ (80054d4 <FLASH_WaitForLastOperation+0x7c>)
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	f003 0301 	and.w	r3, r3, #1
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d002      	beq.n	80054b2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80054ac:	4b09      	ldr	r3, [pc, #36]	@ (80054d4 <FLASH_WaitForLastOperation+0x7c>)
 80054ae:	2201      	movs	r2, #1
 80054b0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80054b2:	4b08      	ldr	r3, [pc, #32]	@ (80054d4 <FLASH_WaitForLastOperation+0x7c>)
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d003      	beq.n	80054c6 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80054be:	f000 f8a1 	bl	8005604 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e000      	b.n	80054c8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
  
}  
 80054c8:	4618      	mov	r0, r3
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	2000147c 	.word	0x2000147c
 80054d4:	40023c00 	.word	0x40023c00

080054d8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80054e4:	4b14      	ldr	r3, [pc, #80]	@ (8005538 <FLASH_Program_DoubleWord+0x60>)
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	4a13      	ldr	r2, [pc, #76]	@ (8005538 <FLASH_Program_DoubleWord+0x60>)
 80054ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80054f0:	4b11      	ldr	r3, [pc, #68]	@ (8005538 <FLASH_Program_DoubleWord+0x60>)
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	4a10      	ldr	r2, [pc, #64]	@ (8005538 <FLASH_Program_DoubleWord+0x60>)
 80054f6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80054fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80054fc:	4b0e      	ldr	r3, [pc, #56]	@ (8005538 <FLASH_Program_DoubleWord+0x60>)
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	4a0d      	ldr	r2, [pc, #52]	@ (8005538 <FLASH_Program_DoubleWord+0x60>)
 8005502:	f043 0301 	orr.w	r3, r3, #1
 8005506:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	683a      	ldr	r2, [r7, #0]
 800550c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800550e:	f3bf 8f6f 	isb	sy
}
 8005512:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8005514:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005518:	f04f 0200 	mov.w	r2, #0
 800551c:	f04f 0300 	mov.w	r3, #0
 8005520:	000a      	movs	r2, r1
 8005522:	2300      	movs	r3, #0
 8005524:	68f9      	ldr	r1, [r7, #12]
 8005526:	3104      	adds	r1, #4
 8005528:	4613      	mov	r3, r2
 800552a:	600b      	str	r3, [r1, #0]
}
 800552c:	bf00      	nop
 800552e:	3714      	adds	r7, #20
 8005530:	46bd      	mov	sp, r7
 8005532:	bc80      	pop	{r7}
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	40023c00 	.word	0x40023c00

0800553c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005546:	4b0d      	ldr	r3, [pc, #52]	@ (800557c <FLASH_Program_Word+0x40>)
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	4a0c      	ldr	r2, [pc, #48]	@ (800557c <FLASH_Program_Word+0x40>)
 800554c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005550:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8005552:	4b0a      	ldr	r3, [pc, #40]	@ (800557c <FLASH_Program_Word+0x40>)
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	4a09      	ldr	r2, [pc, #36]	@ (800557c <FLASH_Program_Word+0x40>)
 8005558:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800555c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800555e:	4b07      	ldr	r3, [pc, #28]	@ (800557c <FLASH_Program_Word+0x40>)
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	4a06      	ldr	r2, [pc, #24]	@ (800557c <FLASH_Program_Word+0x40>)
 8005564:	f043 0301 	orr.w	r3, r3, #1
 8005568:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	683a      	ldr	r2, [r7, #0]
 800556e:	601a      	str	r2, [r3, #0]
}
 8005570:	bf00      	nop
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	bc80      	pop	{r7}
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	40023c00 	.word	0x40023c00

08005580 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	460b      	mov	r3, r1
 800558a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800558c:	4b0c      	ldr	r3, [pc, #48]	@ (80055c0 <FLASH_Program_HalfWord+0x40>)
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	4a0b      	ldr	r2, [pc, #44]	@ (80055c0 <FLASH_Program_HalfWord+0x40>)
 8005592:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005596:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8005598:	4b09      	ldr	r3, [pc, #36]	@ (80055c0 <FLASH_Program_HalfWord+0x40>)
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	4a08      	ldr	r2, [pc, #32]	@ (80055c0 <FLASH_Program_HalfWord+0x40>)
 800559e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80055a4:	4b06      	ldr	r3, [pc, #24]	@ (80055c0 <FLASH_Program_HalfWord+0x40>)
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	4a05      	ldr	r2, [pc, #20]	@ (80055c0 <FLASH_Program_HalfWord+0x40>)
 80055aa:	f043 0301 	orr.w	r3, r3, #1
 80055ae:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	887a      	ldrh	r2, [r7, #2]
 80055b4:	801a      	strh	r2, [r3, #0]
}
 80055b6:	bf00      	nop
 80055b8:	370c      	adds	r7, #12
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bc80      	pop	{r7}
 80055be:	4770      	bx	lr
 80055c0:	40023c00 	.word	0x40023c00

080055c4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	460b      	mov	r3, r1
 80055ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80055d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005600 <FLASH_Program_Byte+0x3c>)
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	4a0a      	ldr	r2, [pc, #40]	@ (8005600 <FLASH_Program_Byte+0x3c>)
 80055d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80055dc:	4b08      	ldr	r3, [pc, #32]	@ (8005600 <FLASH_Program_Byte+0x3c>)
 80055de:	4a08      	ldr	r2, [pc, #32]	@ (8005600 <FLASH_Program_Byte+0x3c>)
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80055e4:	4b06      	ldr	r3, [pc, #24]	@ (8005600 <FLASH_Program_Byte+0x3c>)
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	4a05      	ldr	r2, [pc, #20]	@ (8005600 <FLASH_Program_Byte+0x3c>)
 80055ea:	f043 0301 	orr.w	r3, r3, #1
 80055ee:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	78fa      	ldrb	r2, [r7, #3]
 80055f4:	701a      	strb	r2, [r3, #0]
}
 80055f6:	bf00      	nop
 80055f8:	370c      	adds	r7, #12
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bc80      	pop	{r7}
 80055fe:	4770      	bx	lr
 8005600:	40023c00 	.word	0x40023c00

08005604 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8005604:	b480      	push	{r7}
 8005606:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8005608:	4b27      	ldr	r3, [pc, #156]	@ (80056a8 <FLASH_SetErrorCode+0xa4>)
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	f003 0310 	and.w	r3, r3, #16
 8005610:	2b00      	cmp	r3, #0
 8005612:	d008      	beq.n	8005626 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005614:	4b25      	ldr	r3, [pc, #148]	@ (80056ac <FLASH_SetErrorCode+0xa8>)
 8005616:	69db      	ldr	r3, [r3, #28]
 8005618:	f043 0308 	orr.w	r3, r3, #8
 800561c:	4a23      	ldr	r2, [pc, #140]	@ (80056ac <FLASH_SetErrorCode+0xa8>)
 800561e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8005620:	4b21      	ldr	r3, [pc, #132]	@ (80056a8 <FLASH_SetErrorCode+0xa4>)
 8005622:	2210      	movs	r2, #16
 8005624:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8005626:	4b20      	ldr	r3, [pc, #128]	@ (80056a8 <FLASH_SetErrorCode+0xa4>)
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	f003 0320 	and.w	r3, r3, #32
 800562e:	2b00      	cmp	r3, #0
 8005630:	d008      	beq.n	8005644 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8005632:	4b1e      	ldr	r3, [pc, #120]	@ (80056ac <FLASH_SetErrorCode+0xa8>)
 8005634:	69db      	ldr	r3, [r3, #28]
 8005636:	f043 0304 	orr.w	r3, r3, #4
 800563a:	4a1c      	ldr	r2, [pc, #112]	@ (80056ac <FLASH_SetErrorCode+0xa8>)
 800563c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800563e:	4b1a      	ldr	r3, [pc, #104]	@ (80056a8 <FLASH_SetErrorCode+0xa4>)
 8005640:	2220      	movs	r2, #32
 8005642:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005644:	4b18      	ldr	r3, [pc, #96]	@ (80056a8 <FLASH_SetErrorCode+0xa4>)
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800564c:	2b00      	cmp	r3, #0
 800564e:	d008      	beq.n	8005662 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005650:	4b16      	ldr	r3, [pc, #88]	@ (80056ac <FLASH_SetErrorCode+0xa8>)
 8005652:	69db      	ldr	r3, [r3, #28]
 8005654:	f043 0302 	orr.w	r3, r3, #2
 8005658:	4a14      	ldr	r2, [pc, #80]	@ (80056ac <FLASH_SetErrorCode+0xa8>)
 800565a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800565c:	4b12      	ldr	r3, [pc, #72]	@ (80056a8 <FLASH_SetErrorCode+0xa4>)
 800565e:	2240      	movs	r2, #64	@ 0x40
 8005660:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8005662:	4b11      	ldr	r3, [pc, #68]	@ (80056a8 <FLASH_SetErrorCode+0xa4>)
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800566a:	2b00      	cmp	r3, #0
 800566c:	d008      	beq.n	8005680 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800566e:	4b0f      	ldr	r3, [pc, #60]	@ (80056ac <FLASH_SetErrorCode+0xa8>)
 8005670:	69db      	ldr	r3, [r3, #28]
 8005672:	f043 0301 	orr.w	r3, r3, #1
 8005676:	4a0d      	ldr	r2, [pc, #52]	@ (80056ac <FLASH_SetErrorCode+0xa8>)
 8005678:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800567a:	4b0b      	ldr	r3, [pc, #44]	@ (80056a8 <FLASH_SetErrorCode+0xa4>)
 800567c:	2280      	movs	r2, #128	@ 0x80
 800567e:	60da      	str	r2, [r3, #12]
  }
    
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005680:	4b09      	ldr	r3, [pc, #36]	@ (80056a8 <FLASH_SetErrorCode+0xa4>)
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	f003 0302 	and.w	r3, r3, #2
 8005688:	2b00      	cmp	r3, #0
 800568a:	d008      	beq.n	800569e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800568c:	4b07      	ldr	r3, [pc, #28]	@ (80056ac <FLASH_SetErrorCode+0xa8>)
 800568e:	69db      	ldr	r3, [r3, #28]
 8005690:	f043 0310 	orr.w	r3, r3, #16
 8005694:	4a05      	ldr	r2, [pc, #20]	@ (80056ac <FLASH_SetErrorCode+0xa8>)
 8005696:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005698:	4b03      	ldr	r3, [pc, #12]	@ (80056a8 <FLASH_SetErrorCode+0xa4>)
 800569a:	2202      	movs	r2, #2
 800569c:	60da      	str	r2, [r3, #12]
  }
}
 800569e:	bf00      	nop
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bc80      	pop	{r7}
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	40023c00 	.word	0x40023c00
 80056ac:	2000147c 	.word	0x2000147c

080056b0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b087      	sub	sp, #28
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	460b      	mov	r3, r1
 80056ba:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80056bc:	2300      	movs	r3, #0
 80056be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80056c0:	78fb      	ldrb	r3, [r7, #3]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d102      	bne.n	80056cc <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80056c6:	2300      	movs	r3, #0
 80056c8:	617b      	str	r3, [r7, #20]
 80056ca:	e010      	b.n	80056ee <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80056cc:	78fb      	ldrb	r3, [r7, #3]
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d103      	bne.n	80056da <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80056d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80056d6:	617b      	str	r3, [r7, #20]
 80056d8:	e009      	b.n	80056ee <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80056da:	78fb      	ldrb	r3, [r7, #3]
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d103      	bne.n	80056e8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80056e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80056e4:	617b      	str	r3, [r7, #20]
 80056e6:	e002      	b.n	80056ee <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80056e8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80056ec:	617b      	str	r3, [r7, #20]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80056ee:	4b18      	ldr	r3, [pc, #96]	@ (8005750 <FLASH_Erase_Sector+0xa0>)
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	4a17      	ldr	r2, [pc, #92]	@ (8005750 <FLASH_Erase_Sector+0xa0>)
 80056f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056f8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80056fa:	4b15      	ldr	r3, [pc, #84]	@ (8005750 <FLASH_Erase_Sector+0xa0>)
 80056fc:	691a      	ldr	r2, [r3, #16]
 80056fe:	4914      	ldr	r1, [pc, #80]	@ (8005750 <FLASH_Erase_Sector+0xa0>)
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	4313      	orrs	r3, r2
 8005704:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8005706:	4b12      	ldr	r3, [pc, #72]	@ (8005750 <FLASH_Erase_Sector+0xa0>)
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	4a11      	ldr	r2, [pc, #68]	@ (8005750 <FLASH_Erase_Sector+0xa0>)
 800570c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005710:	6113      	str	r3, [r2, #16]
 8005712:	23f8      	movs	r3, #248	@ 0xf8
 8005714:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	fa93 f3a3 	rbit	r3, r3
 800571c:	60fb      	str	r3, [r7, #12]
  return result;
 800571e:	68fb      	ldr	r3, [r7, #12]
  FLASH->CR |= FLASH_CR_SER | (Sector << POSITION_VAL(FLASH_CR_SNB));
 8005720:	fab3 f383 	clz	r3, r3
 8005724:	b2db      	uxtb	r3, r3
 8005726:	461a      	mov	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4093      	lsls	r3, r2
 800572c:	f043 0202 	orr.w	r2, r3, #2
 8005730:	4b07      	ldr	r3, [pc, #28]	@ (8005750 <FLASH_Erase_Sector+0xa0>)
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	4906      	ldr	r1, [pc, #24]	@ (8005750 <FLASH_Erase_Sector+0xa0>)
 8005736:	4313      	orrs	r3, r2
 8005738:	610b      	str	r3, [r1, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800573a:	4b05      	ldr	r3, [pc, #20]	@ (8005750 <FLASH_Erase_Sector+0xa0>)
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	4a04      	ldr	r2, [pc, #16]	@ (8005750 <FLASH_Erase_Sector+0xa0>)
 8005740:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005744:	6113      	str	r3, [r2, #16]
}
 8005746:	bf00      	nop
 8005748:	371c      	adds	r7, #28
 800574a:	46bd      	mov	sp, r7
 800574c:	bc80      	pop	{r7}
 800574e:	4770      	bx	lr
 8005750:	40023c00 	.word	0x40023c00

08005754 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005754:	b480      	push	{r7}
 8005756:	b087      	sub	sp, #28
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800575e:	2300      	movs	r3, #0
 8005760:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005762:	e16f      	b.n	8005a44 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	2101      	movs	r1, #1
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	fa01 f303 	lsl.w	r3, r1, r3
 8005770:	4013      	ands	r3, r2
 8005772:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2b00      	cmp	r3, #0
 8005778:	f000 8161 	beq.w	8005a3e <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f003 0303 	and.w	r3, r3, #3
 8005784:	2b01      	cmp	r3, #1
 8005786:	d005      	beq.n	8005794 <HAL_GPIO_Init+0x40>
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	f003 0303 	and.w	r3, r3, #3
 8005790:	2b02      	cmp	r3, #2
 8005792:	d130      	bne.n	80057f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	005b      	lsls	r3, r3, #1
 800579e:	2203      	movs	r2, #3
 80057a0:	fa02 f303 	lsl.w	r3, r2, r3
 80057a4:	43db      	mvns	r3, r3
 80057a6:	693a      	ldr	r2, [r7, #16]
 80057a8:	4013      	ands	r3, r2
 80057aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	68da      	ldr	r2, [r3, #12]
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	005b      	lsls	r3, r3, #1
 80057b4:	fa02 f303 	lsl.w	r3, r2, r3
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80057ca:	2201      	movs	r2, #1
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	fa02 f303 	lsl.w	r3, r2, r3
 80057d2:	43db      	mvns	r3, r3
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	4013      	ands	r3, r2
 80057d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	091b      	lsrs	r3, r3, #4
 80057e0:	f003 0201 	and.w	r2, r3, #1
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	fa02 f303 	lsl.w	r3, r2, r3
 80057ea:	693a      	ldr	r2, [r7, #16]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	f003 0303 	and.w	r3, r3, #3
 80057fe:	2b03      	cmp	r3, #3
 8005800:	d017      	beq.n	8005832 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	005b      	lsls	r3, r3, #1
 800580c:	2203      	movs	r2, #3
 800580e:	fa02 f303 	lsl.w	r3, r2, r3
 8005812:	43db      	mvns	r3, r3
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	4013      	ands	r3, r2
 8005818:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	689a      	ldr	r2, [r3, #8]
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	005b      	lsls	r3, r3, #1
 8005822:	fa02 f303 	lsl.w	r3, r2, r3
 8005826:	693a      	ldr	r2, [r7, #16]
 8005828:	4313      	orrs	r3, r2
 800582a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f003 0303 	and.w	r3, r3, #3
 800583a:	2b02      	cmp	r3, #2
 800583c:	d123      	bne.n	8005886 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	08da      	lsrs	r2, r3, #3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	3208      	adds	r2, #8
 8005846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800584a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	f003 0307 	and.w	r3, r3, #7
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	220f      	movs	r2, #15
 8005856:	fa02 f303 	lsl.w	r3, r2, r3
 800585a:	43db      	mvns	r3, r3
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	4013      	ands	r3, r2
 8005860:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	691a      	ldr	r2, [r3, #16]
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	f003 0307 	and.w	r3, r3, #7
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	fa02 f303 	lsl.w	r3, r2, r3
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	4313      	orrs	r3, r2
 8005876:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	08da      	lsrs	r2, r3, #3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	3208      	adds	r2, #8
 8005880:	6939      	ldr	r1, [r7, #16]
 8005882:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	005b      	lsls	r3, r3, #1
 8005890:	2203      	movs	r2, #3
 8005892:	fa02 f303 	lsl.w	r3, r2, r3
 8005896:	43db      	mvns	r3, r3
 8005898:	693a      	ldr	r2, [r7, #16]
 800589a:	4013      	ands	r3, r2
 800589c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f003 0203 	and.w	r2, r3, #3
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	005b      	lsls	r3, r3, #1
 80058aa:	fa02 f303 	lsl.w	r3, r2, r3
 80058ae:	693a      	ldr	r2, [r7, #16]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f000 80bb 	beq.w	8005a3e <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058c8:	2300      	movs	r3, #0
 80058ca:	60bb      	str	r3, [r7, #8]
 80058cc:	4b64      	ldr	r3, [pc, #400]	@ (8005a60 <HAL_GPIO_Init+0x30c>)
 80058ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058d0:	4a63      	ldr	r2, [pc, #396]	@ (8005a60 <HAL_GPIO_Init+0x30c>)
 80058d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80058d6:	6453      	str	r3, [r2, #68]	@ 0x44
 80058d8:	4b61      	ldr	r3, [pc, #388]	@ (8005a60 <HAL_GPIO_Init+0x30c>)
 80058da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058e0:	60bb      	str	r3, [r7, #8]
 80058e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80058e4:	4a5f      	ldr	r2, [pc, #380]	@ (8005a64 <HAL_GPIO_Init+0x310>)
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	089b      	lsrs	r3, r3, #2
 80058ea:	3302      	adds	r3, #2
 80058ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	f003 0303 	and.w	r3, r3, #3
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	220f      	movs	r2, #15
 80058fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005900:	43db      	mvns	r3, r3
 8005902:	693a      	ldr	r2, [r7, #16]
 8005904:	4013      	ands	r3, r2
 8005906:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a57      	ldr	r2, [pc, #348]	@ (8005a68 <HAL_GPIO_Init+0x314>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d031      	beq.n	8005974 <HAL_GPIO_Init+0x220>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a56      	ldr	r2, [pc, #344]	@ (8005a6c <HAL_GPIO_Init+0x318>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d02b      	beq.n	8005970 <HAL_GPIO_Init+0x21c>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a55      	ldr	r2, [pc, #340]	@ (8005a70 <HAL_GPIO_Init+0x31c>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d025      	beq.n	800596c <HAL_GPIO_Init+0x218>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a54      	ldr	r2, [pc, #336]	@ (8005a74 <HAL_GPIO_Init+0x320>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d01f      	beq.n	8005968 <HAL_GPIO_Init+0x214>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a53      	ldr	r2, [pc, #332]	@ (8005a78 <HAL_GPIO_Init+0x324>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d019      	beq.n	8005964 <HAL_GPIO_Init+0x210>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a52      	ldr	r2, [pc, #328]	@ (8005a7c <HAL_GPIO_Init+0x328>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d013      	beq.n	8005960 <HAL_GPIO_Init+0x20c>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a51      	ldr	r2, [pc, #324]	@ (8005a80 <HAL_GPIO_Init+0x32c>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d00d      	beq.n	800595c <HAL_GPIO_Init+0x208>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a50      	ldr	r2, [pc, #320]	@ (8005a84 <HAL_GPIO_Init+0x330>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d007      	beq.n	8005958 <HAL_GPIO_Init+0x204>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a4f      	ldr	r2, [pc, #316]	@ (8005a88 <HAL_GPIO_Init+0x334>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d101      	bne.n	8005954 <HAL_GPIO_Init+0x200>
 8005950:	2308      	movs	r3, #8
 8005952:	e010      	b.n	8005976 <HAL_GPIO_Init+0x222>
 8005954:	2309      	movs	r3, #9
 8005956:	e00e      	b.n	8005976 <HAL_GPIO_Init+0x222>
 8005958:	2307      	movs	r3, #7
 800595a:	e00c      	b.n	8005976 <HAL_GPIO_Init+0x222>
 800595c:	2306      	movs	r3, #6
 800595e:	e00a      	b.n	8005976 <HAL_GPIO_Init+0x222>
 8005960:	2305      	movs	r3, #5
 8005962:	e008      	b.n	8005976 <HAL_GPIO_Init+0x222>
 8005964:	2304      	movs	r3, #4
 8005966:	e006      	b.n	8005976 <HAL_GPIO_Init+0x222>
 8005968:	2303      	movs	r3, #3
 800596a:	e004      	b.n	8005976 <HAL_GPIO_Init+0x222>
 800596c:	2302      	movs	r3, #2
 800596e:	e002      	b.n	8005976 <HAL_GPIO_Init+0x222>
 8005970:	2301      	movs	r3, #1
 8005972:	e000      	b.n	8005976 <HAL_GPIO_Init+0x222>
 8005974:	2300      	movs	r3, #0
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	f002 0203 	and.w	r2, r2, #3
 800597c:	0092      	lsls	r2, r2, #2
 800597e:	4093      	lsls	r3, r2
 8005980:	461a      	mov	r2, r3
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	4313      	orrs	r3, r2
 8005986:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005988:	4936      	ldr	r1, [pc, #216]	@ (8005a64 <HAL_GPIO_Init+0x310>)
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	089b      	lsrs	r3, r3, #2
 800598e:	3302      	adds	r3, #2
 8005990:	693a      	ldr	r2, [r7, #16]
 8005992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005996:	4b3d      	ldr	r3, [pc, #244]	@ (8005a8c <HAL_GPIO_Init+0x338>)
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	43db      	mvns	r3, r3
 80059a0:	693a      	ldr	r2, [r7, #16]
 80059a2:	4013      	ands	r3, r2
 80059a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d003      	beq.n	80059ba <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80059ba:	4a34      	ldr	r2, [pc, #208]	@ (8005a8c <HAL_GPIO_Init+0x338>)
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80059c0:	4b32      	ldr	r3, [pc, #200]	@ (8005a8c <HAL_GPIO_Init+0x338>)
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	43db      	mvns	r3, r3
 80059ca:	693a      	ldr	r2, [r7, #16]
 80059cc:	4013      	ands	r3, r2
 80059ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d003      	beq.n	80059e4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80059e4:	4a29      	ldr	r2, [pc, #164]	@ (8005a8c <HAL_GPIO_Init+0x338>)
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80059ea:	4b28      	ldr	r3, [pc, #160]	@ (8005a8c <HAL_GPIO_Init+0x338>)
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	43db      	mvns	r3, r3
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	4013      	ands	r3, r2
 80059f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d003      	beq.n	8005a0e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005a06:	693a      	ldr	r2, [r7, #16]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005a0e:	4a1f      	ldr	r2, [pc, #124]	@ (8005a8c <HAL_GPIO_Init+0x338>)
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a14:	4b1d      	ldr	r3, [pc, #116]	@ (8005a8c <HAL_GPIO_Init+0x338>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	43db      	mvns	r3, r3
 8005a1e:	693a      	ldr	r2, [r7, #16]
 8005a20:	4013      	ands	r3, r2
 8005a22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d003      	beq.n	8005a38 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005a38:	4a14      	ldr	r2, [pc, #80]	@ (8005a8c <HAL_GPIO_Init+0x338>)
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	3301      	adds	r3, #1
 8005a42:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	f47f ae88 	bne.w	8005764 <HAL_GPIO_Init+0x10>
  }
}
 8005a54:	bf00      	nop
 8005a56:	bf00      	nop
 8005a58:	371c      	adds	r7, #28
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bc80      	pop	{r7}
 8005a5e:	4770      	bx	lr
 8005a60:	40023800 	.word	0x40023800
 8005a64:	40013800 	.word	0x40013800
 8005a68:	40020000 	.word	0x40020000
 8005a6c:	40020400 	.word	0x40020400
 8005a70:	40020800 	.word	0x40020800
 8005a74:	40020c00 	.word	0x40020c00
 8005a78:	40021000 	.word	0x40021000
 8005a7c:	40021400 	.word	0x40021400
 8005a80:	40021800 	.word	0x40021800
 8005a84:	40021c00 	.word	0x40021c00
 8005a88:	40022000 	.word	0x40022000
 8005a8c:	40013c00 	.word	0x40013c00

08005a90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	460b      	mov	r3, r1
 8005a9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	691a      	ldr	r2, [r3, #16]
 8005aa0:	887b      	ldrh	r3, [r7, #2]
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d002      	beq.n	8005aae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	73fb      	strb	r3, [r7, #15]
 8005aac:	e001      	b.n	8005ab2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3714      	adds	r7, #20
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bc80      	pop	{r7}
 8005abc:	4770      	bx	lr

08005abe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005abe:	b480      	push	{r7}
 8005ac0:	b083      	sub	sp, #12
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	807b      	strh	r3, [r7, #2]
 8005aca:	4613      	mov	r3, r2
 8005acc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ace:	787b      	ldrb	r3, [r7, #1]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d003      	beq.n	8005adc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ad4:	887a      	ldrh	r2, [r7, #2]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005ada:	e003      	b.n	8005ae4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005adc:	887b      	ldrh	r3, [r7, #2]
 8005ade:	041a      	lsls	r2, r3, #16
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	619a      	str	r2, [r3, #24]
}
 8005ae4:	bf00      	nop
 8005ae6:	370c      	adds	r7, #12
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bc80      	pop	{r7}
 8005aec:	4770      	bx	lr
	...

08005af0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b08a      	sub	sp, #40	@ 0x28
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d101      	bne.n	8005b02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e23b      	b.n	8005f7a <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0301 	and.w	r3, r3, #1
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d050      	beq.n	8005bb0 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b0e:	4b9e      	ldr	r3, [pc, #632]	@ (8005d88 <HAL_RCC_OscConfig+0x298>)
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	f003 030c 	and.w	r3, r3, #12
 8005b16:	2b04      	cmp	r3, #4
 8005b18:	d00c      	beq.n	8005b34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b1a:	4b9b      	ldr	r3, [pc, #620]	@ (8005d88 <HAL_RCC_OscConfig+0x298>)
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b22:	2b08      	cmp	r3, #8
 8005b24:	d112      	bne.n	8005b4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b26:	4b98      	ldr	r3, [pc, #608]	@ (8005d88 <HAL_RCC_OscConfig+0x298>)
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b32:	d10b      	bne.n	8005b4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b34:	4b94      	ldr	r3, [pc, #592]	@ (8005d88 <HAL_RCC_OscConfig+0x298>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d036      	beq.n	8005bae <HAL_RCC_OscConfig+0xbe>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d132      	bne.n	8005bae <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e216      	b.n	8005f7a <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685a      	ldr	r2, [r3, #4]
 8005b50:	4b8e      	ldr	r3, [pc, #568]	@ (8005d8c <HAL_RCC_OscConfig+0x29c>)
 8005b52:	b2d2      	uxtb	r2, r2
 8005b54:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d013      	beq.n	8005b86 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b5e:	f7fe fad3 	bl	8004108 <HAL_GetTick>
 8005b62:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b64:	e008      	b.n	8005b78 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b66:	f7fe facf 	bl	8004108 <HAL_GetTick>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	6a3b      	ldr	r3, [r7, #32]
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	2b64      	cmp	r3, #100	@ 0x64
 8005b72:	d901      	bls.n	8005b78 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8005b74:	2303      	movs	r3, #3
 8005b76:	e200      	b.n	8005f7a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b78:	4b83      	ldr	r3, [pc, #524]	@ (8005d88 <HAL_RCC_OscConfig+0x298>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d0f0      	beq.n	8005b66 <HAL_RCC_OscConfig+0x76>
 8005b84:	e014      	b.n	8005bb0 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b86:	f7fe fabf 	bl	8004108 <HAL_GetTick>
 8005b8a:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b8c:	e008      	b.n	8005ba0 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b8e:	f7fe fabb 	bl	8004108 <HAL_GetTick>
 8005b92:	4602      	mov	r2, r0
 8005b94:	6a3b      	ldr	r3, [r7, #32]
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	2b64      	cmp	r3, #100	@ 0x64
 8005b9a:	d901      	bls.n	8005ba0 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e1ec      	b.n	8005f7a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ba0:	4b79      	ldr	r3, [pc, #484]	@ (8005d88 <HAL_RCC_OscConfig+0x298>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d1f0      	bne.n	8005b8e <HAL_RCC_OscConfig+0x9e>
 8005bac:	e000      	b.n	8005bb0 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bae:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0302 	and.w	r3, r3, #2
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d077      	beq.n	8005cac <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005bbc:	4b72      	ldr	r3, [pc, #456]	@ (8005d88 <HAL_RCC_OscConfig+0x298>)
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	f003 030c 	and.w	r3, r3, #12
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00b      	beq.n	8005be0 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bc8:	4b6f      	ldr	r3, [pc, #444]	@ (8005d88 <HAL_RCC_OscConfig+0x298>)
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005bd0:	2b08      	cmp	r3, #8
 8005bd2:	d126      	bne.n	8005c22 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bd4:	4b6c      	ldr	r3, [pc, #432]	@ (8005d88 <HAL_RCC_OscConfig+0x298>)
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d120      	bne.n	8005c22 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005be0:	4b69      	ldr	r3, [pc, #420]	@ (8005d88 <HAL_RCC_OscConfig+0x298>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 0302 	and.w	r3, r3, #2
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d005      	beq.n	8005bf8 <HAL_RCC_OscConfig+0x108>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d001      	beq.n	8005bf8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e1c0      	b.n	8005f7a <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bf8:	4b63      	ldr	r3, [pc, #396]	@ (8005d88 <HAL_RCC_OscConfig+0x298>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	21f8      	movs	r1, #248	@ 0xf8
 8005c06:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c08:	69b9      	ldr	r1, [r7, #24]
 8005c0a:	fa91 f1a1 	rbit	r1, r1
 8005c0e:	6179      	str	r1, [r7, #20]
  return result;
 8005c10:	6979      	ldr	r1, [r7, #20]
 8005c12:	fab1 f181 	clz	r1, r1
 8005c16:	b2c9      	uxtb	r1, r1
 8005c18:	408b      	lsls	r3, r1
 8005c1a:	495b      	ldr	r1, [pc, #364]	@ (8005d88 <HAL_RCC_OscConfig+0x298>)
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c20:	e044      	b.n	8005cac <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d02a      	beq.n	8005c80 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c2a:	4b59      	ldr	r3, [pc, #356]	@ (8005d90 <HAL_RCC_OscConfig+0x2a0>)
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c30:	f7fe fa6a 	bl	8004108 <HAL_GetTick>
 8005c34:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c36:	e008      	b.n	8005c4a <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c38:	f7fe fa66 	bl	8004108 <HAL_GetTick>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	6a3b      	ldr	r3, [r7, #32]
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d901      	bls.n	8005c4a <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e197      	b.n	8005f7a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c4a:	4b4f      	ldr	r3, [pc, #316]	@ (8005d88 <HAL_RCC_OscConfig+0x298>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 0302 	and.w	r3, r3, #2
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d0f0      	beq.n	8005c38 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c56:	4b4c      	ldr	r3, [pc, #304]	@ (8005d88 <HAL_RCC_OscConfig+0x298>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	21f8      	movs	r1, #248	@ 0xf8
 8005c64:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c66:	6939      	ldr	r1, [r7, #16]
 8005c68:	fa91 f1a1 	rbit	r1, r1
 8005c6c:	60f9      	str	r1, [r7, #12]
  return result;
 8005c6e:	68f9      	ldr	r1, [r7, #12]
 8005c70:	fab1 f181 	clz	r1, r1
 8005c74:	b2c9      	uxtb	r1, r1
 8005c76:	408b      	lsls	r3, r1
 8005c78:	4943      	ldr	r1, [pc, #268]	@ (8005d88 <HAL_RCC_OscConfig+0x298>)
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	600b      	str	r3, [r1, #0]
 8005c7e:	e015      	b.n	8005cac <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c80:	4b43      	ldr	r3, [pc, #268]	@ (8005d90 <HAL_RCC_OscConfig+0x2a0>)
 8005c82:	2200      	movs	r2, #0
 8005c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c86:	f7fe fa3f 	bl	8004108 <HAL_GetTick>
 8005c8a:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c8c:	e008      	b.n	8005ca0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c8e:	f7fe fa3b 	bl	8004108 <HAL_GetTick>
 8005c92:	4602      	mov	r2, r0
 8005c94:	6a3b      	ldr	r3, [r7, #32]
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d901      	bls.n	8005ca0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e16c      	b.n	8005f7a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ca0:	4b39      	ldr	r3, [pc, #228]	@ (8005d88 <HAL_RCC_OscConfig+0x298>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 0302 	and.w	r3, r3, #2
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d1f0      	bne.n	8005c8e <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0308 	and.w	r3, r3, #8
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d030      	beq.n	8005d1a <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	695b      	ldr	r3, [r3, #20]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d016      	beq.n	8005cee <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cc0:	4b34      	ldr	r3, [pc, #208]	@ (8005d94 <HAL_RCC_OscConfig+0x2a4>)
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cc6:	f7fe fa1f 	bl	8004108 <HAL_GetTick>
 8005cca:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ccc:	e008      	b.n	8005ce0 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cce:	f7fe fa1b 	bl	8004108 <HAL_GetTick>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	6a3b      	ldr	r3, [r7, #32]
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d901      	bls.n	8005ce0 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e14c      	b.n	8005f7a <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ce0:	4b29      	ldr	r3, [pc, #164]	@ (8005d88 <HAL_RCC_OscConfig+0x298>)
 8005ce2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ce4:	f003 0302 	and.w	r3, r3, #2
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d0f0      	beq.n	8005cce <HAL_RCC_OscConfig+0x1de>
 8005cec:	e015      	b.n	8005d1a <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cee:	4b29      	ldr	r3, [pc, #164]	@ (8005d94 <HAL_RCC_OscConfig+0x2a4>)
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cf4:	f7fe fa08 	bl	8004108 <HAL_GetTick>
 8005cf8:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cfa:	e008      	b.n	8005d0e <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cfc:	f7fe fa04 	bl	8004108 <HAL_GetTick>
 8005d00:	4602      	mov	r2, r0
 8005d02:	6a3b      	ldr	r3, [r7, #32]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d901      	bls.n	8005d0e <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	e135      	b.n	8005f7a <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d0e:	4b1e      	ldr	r3, [pc, #120]	@ (8005d88 <HAL_RCC_OscConfig+0x298>)
 8005d10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d12:	f003 0302 	and.w	r3, r3, #2
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1f0      	bne.n	8005cfc <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0304 	and.w	r3, r3, #4
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	f000 8087 	beq.w	8005e36 <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d2e:	4b16      	ldr	r3, [pc, #88]	@ (8005d88 <HAL_RCC_OscConfig+0x298>)
 8005d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d110      	bne.n	8005d5c <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	60bb      	str	r3, [r7, #8]
 8005d3e:	4b12      	ldr	r3, [pc, #72]	@ (8005d88 <HAL_RCC_OscConfig+0x298>)
 8005d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d42:	4a11      	ldr	r2, [pc, #68]	@ (8005d88 <HAL_RCC_OscConfig+0x298>)
 8005d44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d48:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d4a:	4b0f      	ldr	r3, [pc, #60]	@ (8005d88 <HAL_RCC_OscConfig+0x298>)
 8005d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d52:	60bb      	str	r3, [r7, #8]
 8005d54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d56:	2301      	movs	r3, #1
 8005d58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8005d98 <HAL_RCC_OscConfig+0x2a8>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a0d      	ldr	r2, [pc, #52]	@ (8005d98 <HAL_RCC_OscConfig+0x2a8>)
 8005d62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d66:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d68:	4b0b      	ldr	r3, [pc, #44]	@ (8005d98 <HAL_RCC_OscConfig+0x2a8>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d122      	bne.n	8005dba <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d74:	4b08      	ldr	r3, [pc, #32]	@ (8005d98 <HAL_RCC_OscConfig+0x2a8>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a07      	ldr	r2, [pc, #28]	@ (8005d98 <HAL_RCC_OscConfig+0x2a8>)
 8005d7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d80:	f7fe f9c2 	bl	8004108 <HAL_GetTick>
 8005d84:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d86:	e012      	b.n	8005dae <HAL_RCC_OscConfig+0x2be>
 8005d88:	40023800 	.word	0x40023800
 8005d8c:	40023802 	.word	0x40023802
 8005d90:	42470000 	.word	0x42470000
 8005d94:	42470e80 	.word	0x42470e80
 8005d98:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d9c:	f7fe f9b4 	bl	8004108 <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	6a3b      	ldr	r3, [r7, #32]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e0e5      	b.n	8005f7a <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dae:	4b75      	ldr	r3, [pc, #468]	@ (8005f84 <HAL_RCC_OscConfig+0x494>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d0f0      	beq.n	8005d9c <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	689a      	ldr	r2, [r3, #8]
 8005dbe:	4b72      	ldr	r3, [pc, #456]	@ (8005f88 <HAL_RCC_OscConfig+0x498>)
 8005dc0:	b2d2      	uxtb	r2, r2
 8005dc2:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d015      	beq.n	8005df8 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dcc:	f7fe f99c 	bl	8004108 <HAL_GetTick>
 8005dd0:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dd2:	e00a      	b.n	8005dea <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005dd4:	f7fe f998 	bl	8004108 <HAL_GetTick>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	6a3b      	ldr	r3, [r7, #32]
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d901      	bls.n	8005dea <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e0c7      	b.n	8005f7a <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dea:	4b68      	ldr	r3, [pc, #416]	@ (8005f8c <HAL_RCC_OscConfig+0x49c>)
 8005dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dee:	f003 0302 	and.w	r3, r3, #2
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d0ee      	beq.n	8005dd4 <HAL_RCC_OscConfig+0x2e4>
 8005df6:	e014      	b.n	8005e22 <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005df8:	f7fe f986 	bl	8004108 <HAL_GetTick>
 8005dfc:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dfe:	e00a      	b.n	8005e16 <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e00:	f7fe f982 	bl	8004108 <HAL_GetTick>
 8005e04:	4602      	mov	r2, r0
 8005e06:	6a3b      	ldr	r3, [r7, #32]
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d901      	bls.n	8005e16 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	e0b1      	b.n	8005f7a <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e16:	4b5d      	ldr	r3, [pc, #372]	@ (8005f8c <HAL_RCC_OscConfig+0x49c>)
 8005e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e1a:	f003 0302 	and.w	r3, r3, #2
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d1ee      	bne.n	8005e00 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d105      	bne.n	8005e36 <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e2a:	4b58      	ldr	r3, [pc, #352]	@ (8005f8c <HAL_RCC_OscConfig+0x49c>)
 8005e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e2e:	4a57      	ldr	r2, [pc, #348]	@ (8005f8c <HAL_RCC_OscConfig+0x49c>)
 8005e30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e34:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	699b      	ldr	r3, [r3, #24]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	f000 809c 	beq.w	8005f78 <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e40:	4b52      	ldr	r3, [pc, #328]	@ (8005f8c <HAL_RCC_OscConfig+0x49c>)
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	f003 030c 	and.w	r3, r3, #12
 8005e48:	2b08      	cmp	r3, #8
 8005e4a:	d061      	beq.n	8005f10 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	699b      	ldr	r3, [r3, #24]
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d146      	bne.n	8005ee2 <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e54:	4b4e      	ldr	r3, [pc, #312]	@ (8005f90 <HAL_RCC_OscConfig+0x4a0>)
 8005e56:	2200      	movs	r2, #0
 8005e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e5a:	f7fe f955 	bl	8004108 <HAL_GetTick>
 8005e5e:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e60:	e008      	b.n	8005e74 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e62:	f7fe f951 	bl	8004108 <HAL_GetTick>
 8005e66:	4602      	mov	r2, r0
 8005e68:	6a3b      	ldr	r3, [r7, #32]
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	2b64      	cmp	r3, #100	@ 0x64
 8005e6e:	d901      	bls.n	8005e74 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e082      	b.n	8005f7a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e74:	4b45      	ldr	r3, [pc, #276]	@ (8005f8c <HAL_RCC_OscConfig+0x49c>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1f0      	bne.n	8005e62 <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e80:	4b42      	ldr	r3, [pc, #264]	@ (8005f8c <HAL_RCC_OscConfig+0x49c>)
 8005e82:	685a      	ldr	r2, [r3, #4]
 8005e84:	4b43      	ldr	r3, [pc, #268]	@ (8005f94 <HAL_RCC_OscConfig+0x4a4>)
 8005e86:	4013      	ands	r3, r2
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	69d1      	ldr	r1, [r2, #28]
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	6a12      	ldr	r2, [r2, #32]
 8005e90:	4311      	orrs	r1, r2
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005e96:	0192      	lsls	r2, r2, #6
 8005e98:	4311      	orrs	r1, r2
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005e9e:	0612      	lsls	r2, r2, #24
 8005ea0:	4311      	orrs	r1, r2
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005ea6:	0852      	lsrs	r2, r2, #1
 8005ea8:	3a01      	subs	r2, #1
 8005eaa:	0412      	lsls	r2, r2, #16
 8005eac:	430a      	orrs	r2, r1
 8005eae:	4937      	ldr	r1, [pc, #220]	@ (8005f8c <HAL_RCC_OscConfig+0x49c>)
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005eb4:	4b36      	ldr	r3, [pc, #216]	@ (8005f90 <HAL_RCC_OscConfig+0x4a0>)
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eba:	f7fe f925 	bl	8004108 <HAL_GetTick>
 8005ebe:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ec0:	e008      	b.n	8005ed4 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ec2:	f7fe f921 	bl	8004108 <HAL_GetTick>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	6a3b      	ldr	r3, [r7, #32]
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	2b64      	cmp	r3, #100	@ 0x64
 8005ece:	d901      	bls.n	8005ed4 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e052      	b.n	8005f7a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ed4:	4b2d      	ldr	r3, [pc, #180]	@ (8005f8c <HAL_RCC_OscConfig+0x49c>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d0f0      	beq.n	8005ec2 <HAL_RCC_OscConfig+0x3d2>
 8005ee0:	e04a      	b.n	8005f78 <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ee2:	4b2b      	ldr	r3, [pc, #172]	@ (8005f90 <HAL_RCC_OscConfig+0x4a0>)
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ee8:	f7fe f90e 	bl	8004108 <HAL_GetTick>
 8005eec:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005eee:	e008      	b.n	8005f02 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ef0:	f7fe f90a 	bl	8004108 <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	6a3b      	ldr	r3, [r7, #32]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	2b64      	cmp	r3, #100	@ 0x64
 8005efc:	d901      	bls.n	8005f02 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e03b      	b.n	8005f7a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f02:	4b22      	ldr	r3, [pc, #136]	@ (8005f8c <HAL_RCC_OscConfig+0x49c>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d1f0      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x400>
 8005f0e:	e033      	b.n	8005f78 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	699b      	ldr	r3, [r3, #24]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d101      	bne.n	8005f1c <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e02e      	b.n	8005f7a <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8005f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8005f8c <HAL_RCC_OscConfig+0x49c>)
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	69db      	ldr	r3, [r3, #28]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d121      	bne.n	8005f74 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d11a      	bne.n	8005f74 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f3e:	69fa      	ldr	r2, [r7, #28]
 8005f40:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005f44:	4013      	ands	r3, r2
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005f4a:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d111      	bne.n	8005f74 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f5a:	085b      	lsrs	r3, r3, #1
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d107      	bne.n	8005f74 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f6e:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d001      	beq.n	8005f78 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e000      	b.n	8005f7a <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3728      	adds	r7, #40	@ 0x28
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	40007000 	.word	0x40007000
 8005f88:	40023870 	.word	0x40023870
 8005f8c:	40023800 	.word	0x40023800
 8005f90:	42470060 	.word	0x42470060
 8005f94:	f0bc8000 	.word	0xf0bc8000

08005f98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b086      	sub	sp, #24
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d101      	bne.n	8005fac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e0d2      	b.n	8006152 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005fac:	4b6b      	ldr	r3, [pc, #428]	@ (800615c <HAL_RCC_ClockConfig+0x1c4>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 030f 	and.w	r3, r3, #15
 8005fb4:	683a      	ldr	r2, [r7, #0]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d90c      	bls.n	8005fd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fba:	4b68      	ldr	r3, [pc, #416]	@ (800615c <HAL_RCC_ClockConfig+0x1c4>)
 8005fbc:	683a      	ldr	r2, [r7, #0]
 8005fbe:	b2d2      	uxtb	r2, r2
 8005fc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fc2:	4b66      	ldr	r3, [pc, #408]	@ (800615c <HAL_RCC_ClockConfig+0x1c4>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 030f 	and.w	r3, r3, #15
 8005fca:	683a      	ldr	r2, [r7, #0]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d001      	beq.n	8005fd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e0be      	b.n	8006152 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 0302 	and.w	r3, r3, #2
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d020      	beq.n	8006022 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 0304 	and.w	r3, r3, #4
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d005      	beq.n	8005ff8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005fec:	4b5c      	ldr	r3, [pc, #368]	@ (8006160 <HAL_RCC_ClockConfig+0x1c8>)
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	4a5b      	ldr	r2, [pc, #364]	@ (8006160 <HAL_RCC_ClockConfig+0x1c8>)
 8005ff2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005ff6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0308 	and.w	r3, r3, #8
 8006000:	2b00      	cmp	r3, #0
 8006002:	d005      	beq.n	8006010 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8006004:	4b56      	ldr	r3, [pc, #344]	@ (8006160 <HAL_RCC_ClockConfig+0x1c8>)
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	4a55      	ldr	r2, [pc, #340]	@ (8006160 <HAL_RCC_ClockConfig+0x1c8>)
 800600a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800600e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006010:	4b53      	ldr	r3, [pc, #332]	@ (8006160 <HAL_RCC_ClockConfig+0x1c8>)
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	4950      	ldr	r1, [pc, #320]	@ (8006160 <HAL_RCC_ClockConfig+0x1c8>)
 800601e:	4313      	orrs	r3, r2
 8006020:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0301 	and.w	r3, r3, #1
 800602a:	2b00      	cmp	r3, #0
 800602c:	d040      	beq.n	80060b0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d107      	bne.n	8006046 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006036:	4b4a      	ldr	r3, [pc, #296]	@ (8006160 <HAL_RCC_ClockConfig+0x1c8>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800603e:	2b00      	cmp	r3, #0
 8006040:	d115      	bne.n	800606e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e085      	b.n	8006152 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	2b02      	cmp	r3, #2
 800604c:	d107      	bne.n	800605e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800604e:	4b44      	ldr	r3, [pc, #272]	@ (8006160 <HAL_RCC_ClockConfig+0x1c8>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d109      	bne.n	800606e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e079      	b.n	8006152 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800605e:	4b40      	ldr	r3, [pc, #256]	@ (8006160 <HAL_RCC_ClockConfig+0x1c8>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 0302 	and.w	r3, r3, #2
 8006066:	2b00      	cmp	r3, #0
 8006068:	d101      	bne.n	800606e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e071      	b.n	8006152 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800606e:	4b3c      	ldr	r3, [pc, #240]	@ (8006160 <HAL_RCC_ClockConfig+0x1c8>)
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	f023 0203 	bic.w	r2, r3, #3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	4939      	ldr	r1, [pc, #228]	@ (8006160 <HAL_RCC_ClockConfig+0x1c8>)
 800607c:	4313      	orrs	r3, r2
 800607e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006080:	f7fe f842 	bl	8004108 <HAL_GetTick>
 8006084:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006086:	e00a      	b.n	800609e <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006088:	f7fe f83e 	bl	8004108 <HAL_GetTick>
 800608c:	4602      	mov	r2, r0
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006096:	4293      	cmp	r3, r2
 8006098:	d901      	bls.n	800609e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800609a:	2303      	movs	r3, #3
 800609c:	e059      	b.n	8006152 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800609e:	4b30      	ldr	r3, [pc, #192]	@ (8006160 <HAL_RCC_ClockConfig+0x1c8>)
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	f003 020c 	and.w	r2, r3, #12
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d1eb      	bne.n	8006088 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80060b0:	4b2a      	ldr	r3, [pc, #168]	@ (800615c <HAL_RCC_ClockConfig+0x1c4>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 030f 	and.w	r3, r3, #15
 80060b8:	683a      	ldr	r2, [r7, #0]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d20c      	bcs.n	80060d8 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060be:	4b27      	ldr	r3, [pc, #156]	@ (800615c <HAL_RCC_ClockConfig+0x1c4>)
 80060c0:	683a      	ldr	r2, [r7, #0]
 80060c2:	b2d2      	uxtb	r2, r2
 80060c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060c6:	4b25      	ldr	r3, [pc, #148]	@ (800615c <HAL_RCC_ClockConfig+0x1c4>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 030f 	and.w	r3, r3, #15
 80060ce:	683a      	ldr	r2, [r7, #0]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d001      	beq.n	80060d8 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e03c      	b.n	8006152 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 0304 	and.w	r3, r3, #4
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d008      	beq.n	80060f6 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060e4:	4b1e      	ldr	r3, [pc, #120]	@ (8006160 <HAL_RCC_ClockConfig+0x1c8>)
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	491b      	ldr	r1, [pc, #108]	@ (8006160 <HAL_RCC_ClockConfig+0x1c8>)
 80060f2:	4313      	orrs	r3, r2
 80060f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 0308 	and.w	r3, r3, #8
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d009      	beq.n	8006116 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006102:	4b17      	ldr	r3, [pc, #92]	@ (8006160 <HAL_RCC_ClockConfig+0x1c8>)
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	00db      	lsls	r3, r3, #3
 8006110:	4913      	ldr	r1, [pc, #76]	@ (8006160 <HAL_RCC_ClockConfig+0x1c8>)
 8006112:	4313      	orrs	r3, r2
 8006114:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8006116:	f000 f82b 	bl	8006170 <HAL_RCC_GetSysClockFreq>
 800611a:	4601      	mov	r1, r0
 800611c:	4b10      	ldr	r3, [pc, #64]	@ (8006160 <HAL_RCC_ClockConfig+0x1c8>)
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006124:	22f0      	movs	r2, #240	@ 0xf0
 8006126:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	fa92 f2a2 	rbit	r2, r2
 800612e:	60fa      	str	r2, [r7, #12]
  return result;
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	fab2 f282 	clz	r2, r2
 8006136:	b2d2      	uxtb	r2, r2
 8006138:	40d3      	lsrs	r3, r2
 800613a:	4a0a      	ldr	r2, [pc, #40]	@ (8006164 <HAL_RCC_ClockConfig+0x1cc>)
 800613c:	5cd3      	ldrb	r3, [r2, r3]
 800613e:	fa21 f303 	lsr.w	r3, r1, r3
 8006142:	4a09      	ldr	r2, [pc, #36]	@ (8006168 <HAL_RCC_ClockConfig+0x1d0>)
 8006144:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006146:	4b09      	ldr	r3, [pc, #36]	@ (800616c <HAL_RCC_ClockConfig+0x1d4>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4618      	mov	r0, r3
 800614c:	f7fd ff9a 	bl	8004084 <HAL_InitTick>

  return HAL_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3718      	adds	r7, #24
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	40023c00 	.word	0x40023c00
 8006160:	40023800 	.word	0x40023800
 8006164:	080074c8 	.word	0x080074c8
 8006168:	20000010 	.word	0x20000010
 800616c:	2000001c 	.word	0x2000001c

08006170 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006174:	b090      	sub	sp, #64	@ 0x40
 8006176:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006178:	2300      	movs	r3, #0
 800617a:	637b      	str	r3, [r7, #52]	@ 0x34
 800617c:	2300      	movs	r3, #0
 800617e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006180:	2300      	movs	r3, #0
 8006182:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006184:	2300      	movs	r3, #0
 8006186:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006188:	4b59      	ldr	r3, [pc, #356]	@ (80062f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f003 030c 	and.w	r3, r3, #12
 8006190:	2b08      	cmp	r3, #8
 8006192:	d00d      	beq.n	80061b0 <HAL_RCC_GetSysClockFreq+0x40>
 8006194:	2b08      	cmp	r3, #8
 8006196:	f200 80a2 	bhi.w	80062de <HAL_RCC_GetSysClockFreq+0x16e>
 800619a:	2b00      	cmp	r3, #0
 800619c:	d002      	beq.n	80061a4 <HAL_RCC_GetSysClockFreq+0x34>
 800619e:	2b04      	cmp	r3, #4
 80061a0:	d003      	beq.n	80061aa <HAL_RCC_GetSysClockFreq+0x3a>
 80061a2:	e09c      	b.n	80062de <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80061a4:	4b53      	ldr	r3, [pc, #332]	@ (80062f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80061a6:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80061a8:	e09c      	b.n	80062e4 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80061aa:	4b53      	ldr	r3, [pc, #332]	@ (80062f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80061ac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80061ae:	e099      	b.n	80062e4 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80061b0:	4b4f      	ldr	r3, [pc, #316]	@ (80062f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80061b8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80061ba:	4b4d      	ldr	r3, [pc, #308]	@ (80062f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d027      	beq.n	8006216 <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061c6:	4b4a      	ldr	r3, [pc, #296]	@ (80062f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	099b      	lsrs	r3, r3, #6
 80061cc:	2200      	movs	r2, #0
 80061ce:	623b      	str	r3, [r7, #32]
 80061d0:	627a      	str	r2, [r7, #36]	@ 0x24
 80061d2:	6a3b      	ldr	r3, [r7, #32]
 80061d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80061d8:	2100      	movs	r1, #0
 80061da:	4b47      	ldr	r3, [pc, #284]	@ (80062f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80061dc:	fb03 f201 	mul.w	r2, r3, r1
 80061e0:	2300      	movs	r3, #0
 80061e2:	fb00 f303 	mul.w	r3, r0, r3
 80061e6:	4413      	add	r3, r2
 80061e8:	4a43      	ldr	r2, [pc, #268]	@ (80062f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80061ea:	fba0 2102 	umull	r2, r1, r0, r2
 80061ee:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80061f0:	62ba      	str	r2, [r7, #40]	@ 0x28
 80061f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061f4:	4413      	add	r3, r2
 80061f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061fa:	2200      	movs	r2, #0
 80061fc:	61bb      	str	r3, [r7, #24]
 80061fe:	61fa      	str	r2, [r7, #28]
 8006200:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006204:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006208:	f7fa fe90 	bl	8000f2c <__aeabi_uldivmod>
 800620c:	4602      	mov	r2, r0
 800620e:	460b      	mov	r3, r1
 8006210:	4613      	mov	r3, r2
 8006212:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006214:	e055      	b.n	80062c2 <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006216:	4b36      	ldr	r3, [pc, #216]	@ (80062f0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	099b      	lsrs	r3, r3, #6
 800621c:	2200      	movs	r2, #0
 800621e:	613b      	str	r3, [r7, #16]
 8006220:	617a      	str	r2, [r7, #20]
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006228:	f04f 0b00 	mov.w	fp, #0
 800622c:	4652      	mov	r2, sl
 800622e:	465b      	mov	r3, fp
 8006230:	f04f 0000 	mov.w	r0, #0
 8006234:	f04f 0100 	mov.w	r1, #0
 8006238:	0159      	lsls	r1, r3, #5
 800623a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800623e:	0150      	lsls	r0, r2, #5
 8006240:	4602      	mov	r2, r0
 8006242:	460b      	mov	r3, r1
 8006244:	ebb2 080a 	subs.w	r8, r2, sl
 8006248:	eb63 090b 	sbc.w	r9, r3, fp
 800624c:	f04f 0200 	mov.w	r2, #0
 8006250:	f04f 0300 	mov.w	r3, #0
 8006254:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006258:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800625c:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006260:	ebb2 0408 	subs.w	r4, r2, r8
 8006264:	eb63 0509 	sbc.w	r5, r3, r9
 8006268:	f04f 0200 	mov.w	r2, #0
 800626c:	f04f 0300 	mov.w	r3, #0
 8006270:	00eb      	lsls	r3, r5, #3
 8006272:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006276:	00e2      	lsls	r2, r4, #3
 8006278:	4614      	mov	r4, r2
 800627a:	461d      	mov	r5, r3
 800627c:	eb14 030a 	adds.w	r3, r4, sl
 8006280:	603b      	str	r3, [r7, #0]
 8006282:	eb45 030b 	adc.w	r3, r5, fp
 8006286:	607b      	str	r3, [r7, #4]
 8006288:	f04f 0200 	mov.w	r2, #0
 800628c:	f04f 0300 	mov.w	r3, #0
 8006290:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006294:	4629      	mov	r1, r5
 8006296:	028b      	lsls	r3, r1, #10
 8006298:	4620      	mov	r0, r4
 800629a:	4629      	mov	r1, r5
 800629c:	4604      	mov	r4, r0
 800629e:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80062a2:	4601      	mov	r1, r0
 80062a4:	028a      	lsls	r2, r1, #10
 80062a6:	4610      	mov	r0, r2
 80062a8:	4619      	mov	r1, r3
 80062aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062ac:	2200      	movs	r2, #0
 80062ae:	60bb      	str	r3, [r7, #8]
 80062b0:	60fa      	str	r2, [r7, #12]
 80062b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062b6:	f7fa fe39 	bl	8000f2c <__aeabi_uldivmod>
 80062ba:	4602      	mov	r2, r0
 80062bc:	460b      	mov	r3, r1
 80062be:	4613      	mov	r3, r2
 80062c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80062c2:	4b0b      	ldr	r3, [pc, #44]	@ (80062f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	0c1b      	lsrs	r3, r3, #16
 80062c8:	f003 0303 	and.w	r3, r3, #3
 80062cc:	3301      	adds	r3, #1
 80062ce:	005b      	lsls	r3, r3, #1
 80062d0:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80062d2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80062d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062da:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80062dc:	e002      	b.n	80062e4 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80062de:	4b05      	ldr	r3, [pc, #20]	@ (80062f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80062e0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80062e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80062e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3740      	adds	r7, #64	@ 0x40
 80062ea:	46bd      	mov	sp, r7
 80062ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062f0:	40023800 	.word	0x40023800
 80062f4:	00f42400 	.word	0x00f42400
 80062f8:	017d7840 	.word	0x017d7840

080062fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d101      	bne.n	800630e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e041      	b.n	8006392 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006314:	b2db      	uxtb	r3, r3
 8006316:	2b00      	cmp	r3, #0
 8006318:	d106      	bne.n	8006328 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f7fd fc56 	bl	8003bd4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2202      	movs	r2, #2
 800632c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	3304      	adds	r3, #4
 8006338:	4619      	mov	r1, r3
 800633a:	4610      	mov	r0, r2
 800633c:	f000 fc22 	bl	8006b84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3708      	adds	r7, #8
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
	...

0800639c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d109      	bne.n	80063c0 <HAL_TIM_PWM_Start+0x24>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	bf14      	ite	ne
 80063b8:	2301      	movne	r3, #1
 80063ba:	2300      	moveq	r3, #0
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	e022      	b.n	8006406 <HAL_TIM_PWM_Start+0x6a>
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	2b04      	cmp	r3, #4
 80063c4:	d109      	bne.n	80063da <HAL_TIM_PWM_Start+0x3e>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	bf14      	ite	ne
 80063d2:	2301      	movne	r3, #1
 80063d4:	2300      	moveq	r3, #0
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	e015      	b.n	8006406 <HAL_TIM_PWM_Start+0x6a>
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	2b08      	cmp	r3, #8
 80063de:	d109      	bne.n	80063f4 <HAL_TIM_PWM_Start+0x58>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	bf14      	ite	ne
 80063ec:	2301      	movne	r3, #1
 80063ee:	2300      	moveq	r3, #0
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	e008      	b.n	8006406 <HAL_TIM_PWM_Start+0x6a>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	bf14      	ite	ne
 8006400:	2301      	movne	r3, #1
 8006402:	2300      	moveq	r3, #0
 8006404:	b2db      	uxtb	r3, r3
 8006406:	2b00      	cmp	r3, #0
 8006408:	d001      	beq.n	800640e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	e07c      	b.n	8006508 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d104      	bne.n	800641e <HAL_TIM_PWM_Start+0x82>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2202      	movs	r2, #2
 8006418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800641c:	e013      	b.n	8006446 <HAL_TIM_PWM_Start+0xaa>
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	2b04      	cmp	r3, #4
 8006422:	d104      	bne.n	800642e <HAL_TIM_PWM_Start+0x92>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2202      	movs	r2, #2
 8006428:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800642c:	e00b      	b.n	8006446 <HAL_TIM_PWM_Start+0xaa>
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	2b08      	cmp	r3, #8
 8006432:	d104      	bne.n	800643e <HAL_TIM_PWM_Start+0xa2>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2202      	movs	r2, #2
 8006438:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800643c:	e003      	b.n	8006446 <HAL_TIM_PWM_Start+0xaa>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2202      	movs	r2, #2
 8006442:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2201      	movs	r2, #1
 800644c:	6839      	ldr	r1, [r7, #0]
 800644e:	4618      	mov	r0, r3
 8006450:	f000 fde2 	bl	8007018 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a2d      	ldr	r2, [pc, #180]	@ (8006510 <HAL_TIM_PWM_Start+0x174>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d004      	beq.n	8006468 <HAL_TIM_PWM_Start+0xcc>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a2c      	ldr	r2, [pc, #176]	@ (8006514 <HAL_TIM_PWM_Start+0x178>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d101      	bne.n	800646c <HAL_TIM_PWM_Start+0xd0>
 8006468:	2301      	movs	r3, #1
 800646a:	e000      	b.n	800646e <HAL_TIM_PWM_Start+0xd2>
 800646c:	2300      	movs	r3, #0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d007      	beq.n	8006482 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006480:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a22      	ldr	r2, [pc, #136]	@ (8006510 <HAL_TIM_PWM_Start+0x174>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d022      	beq.n	80064d2 <HAL_TIM_PWM_Start+0x136>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006494:	d01d      	beq.n	80064d2 <HAL_TIM_PWM_Start+0x136>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a1f      	ldr	r2, [pc, #124]	@ (8006518 <HAL_TIM_PWM_Start+0x17c>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d018      	beq.n	80064d2 <HAL_TIM_PWM_Start+0x136>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a1d      	ldr	r2, [pc, #116]	@ (800651c <HAL_TIM_PWM_Start+0x180>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d013      	beq.n	80064d2 <HAL_TIM_PWM_Start+0x136>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a1c      	ldr	r2, [pc, #112]	@ (8006520 <HAL_TIM_PWM_Start+0x184>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d00e      	beq.n	80064d2 <HAL_TIM_PWM_Start+0x136>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a16      	ldr	r2, [pc, #88]	@ (8006514 <HAL_TIM_PWM_Start+0x178>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d009      	beq.n	80064d2 <HAL_TIM_PWM_Start+0x136>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a18      	ldr	r2, [pc, #96]	@ (8006524 <HAL_TIM_PWM_Start+0x188>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d004      	beq.n	80064d2 <HAL_TIM_PWM_Start+0x136>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a16      	ldr	r2, [pc, #88]	@ (8006528 <HAL_TIM_PWM_Start+0x18c>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d111      	bne.n	80064f6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	f003 0307 	and.w	r3, r3, #7
 80064dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2b06      	cmp	r3, #6
 80064e2:	d010      	beq.n	8006506 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f042 0201 	orr.w	r2, r2, #1
 80064f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064f4:	e007      	b.n	8006506 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f042 0201 	orr.w	r2, r2, #1
 8006504:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006506:	2300      	movs	r3, #0
}
 8006508:	4618      	mov	r0, r3
 800650a:	3710      	adds	r7, #16
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	40010000 	.word	0x40010000
 8006514:	40010400 	.word	0x40010400
 8006518:	40000400 	.word	0x40000400
 800651c:	40000800 	.word	0x40000800
 8006520:	40000c00 	.word	0x40000c00
 8006524:	40014000 	.word	0x40014000
 8006528:	40001800 	.word	0x40001800

0800652c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b086      	sub	sp, #24
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d101      	bne.n	8006540 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e097      	b.n	8006670 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b00      	cmp	r3, #0
 800654a:	d106      	bne.n	800655a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f7fd fb65 	bl	8003c24 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2202      	movs	r2, #2
 800655e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	6812      	ldr	r2, [r2, #0]
 800656c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006570:	f023 0307 	bic.w	r3, r3, #7
 8006574:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	3304      	adds	r3, #4
 800657e:	4619      	mov	r1, r3
 8006580:	4610      	mov	r0, r2
 8006582:	f000 faff 	bl	8006b84 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	699b      	ldr	r3, [r3, #24]
 8006594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	6a1b      	ldr	r3, [r3, #32]
 800659c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	697a      	ldr	r2, [r7, #20]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065ae:	f023 0303 	bic.w	r3, r3, #3
 80065b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	689a      	ldr	r2, [r3, #8]
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	699b      	ldr	r3, [r3, #24]
 80065bc:	021b      	lsls	r3, r3, #8
 80065be:	4313      	orrs	r3, r2
 80065c0:	693a      	ldr	r2, [r7, #16]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80065cc:	f023 030c 	bic.w	r3, r3, #12
 80065d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80065d8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80065dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	68da      	ldr	r2, [r3, #12]
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	69db      	ldr	r3, [r3, #28]
 80065e6:	021b      	lsls	r3, r3, #8
 80065e8:	4313      	orrs	r3, r2
 80065ea:	693a      	ldr	r2, [r7, #16]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	011a      	lsls	r2, r3, #4
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	031b      	lsls	r3, r3, #12
 80065fc:	4313      	orrs	r3, r2
 80065fe:	693a      	ldr	r2, [r7, #16]
 8006600:	4313      	orrs	r3, r2
 8006602:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800660a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006612:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	685a      	ldr	r2, [r3, #4]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	695b      	ldr	r3, [r3, #20]
 800661c:	011b      	lsls	r3, r3, #4
 800661e:	4313      	orrs	r3, r2
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	4313      	orrs	r3, r2
 8006624:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	697a      	ldr	r2, [r7, #20]
 800662c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	693a      	ldr	r2, [r7, #16]
 8006634:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68fa      	ldr	r2, [r7, #12]
 800663c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2201      	movs	r2, #1
 8006642:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2201      	movs	r2, #1
 800664a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2201      	movs	r2, #1
 8006652:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2201      	movs	r2, #1
 800665a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2201      	movs	r2, #1
 8006662:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2201      	movs	r2, #1
 800666a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	3718      	adds	r7, #24
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006688:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006690:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006698:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80066a0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d110      	bne.n	80066ca <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80066a8:	7bfb      	ldrb	r3, [r7, #15]
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d102      	bne.n	80066b4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80066ae:	7b7b      	ldrb	r3, [r7, #13]
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d001      	beq.n	80066b8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e069      	b.n	800678c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2202      	movs	r2, #2
 80066bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2202      	movs	r2, #2
 80066c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80066c8:	e031      	b.n	800672e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	2b04      	cmp	r3, #4
 80066ce:	d110      	bne.n	80066f2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80066d0:	7bbb      	ldrb	r3, [r7, #14]
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d102      	bne.n	80066dc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80066d6:	7b3b      	ldrb	r3, [r7, #12]
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d001      	beq.n	80066e0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e055      	b.n	800678c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2202      	movs	r2, #2
 80066e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2202      	movs	r2, #2
 80066ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80066f0:	e01d      	b.n	800672e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80066f2:	7bfb      	ldrb	r3, [r7, #15]
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d108      	bne.n	800670a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80066f8:	7bbb      	ldrb	r3, [r7, #14]
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d105      	bne.n	800670a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80066fe:	7b7b      	ldrb	r3, [r7, #13]
 8006700:	2b01      	cmp	r3, #1
 8006702:	d102      	bne.n	800670a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006704:	7b3b      	ldrb	r3, [r7, #12]
 8006706:	2b01      	cmp	r3, #1
 8006708:	d001      	beq.n	800670e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	e03e      	b.n	800678c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2202      	movs	r2, #2
 8006712:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2202      	movs	r2, #2
 800671a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2202      	movs	r2, #2
 8006722:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2202      	movs	r2, #2
 800672a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d003      	beq.n	800673c <HAL_TIM_Encoder_Start+0xc4>
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	2b04      	cmp	r3, #4
 8006738:	d008      	beq.n	800674c <HAL_TIM_Encoder_Start+0xd4>
 800673a:	e00f      	b.n	800675c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	2201      	movs	r2, #1
 8006742:	2100      	movs	r1, #0
 8006744:	4618      	mov	r0, r3
 8006746:	f000 fc67 	bl	8007018 <TIM_CCxChannelCmd>
      break;
 800674a:	e016      	b.n	800677a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2201      	movs	r2, #1
 8006752:	2104      	movs	r1, #4
 8006754:	4618      	mov	r0, r3
 8006756:	f000 fc5f 	bl	8007018 <TIM_CCxChannelCmd>
      break;
 800675a:	e00e      	b.n	800677a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	2201      	movs	r2, #1
 8006762:	2100      	movs	r1, #0
 8006764:	4618      	mov	r0, r3
 8006766:	f000 fc57 	bl	8007018 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2201      	movs	r2, #1
 8006770:	2104      	movs	r1, #4
 8006772:	4618      	mov	r0, r3
 8006774:	f000 fc50 	bl	8007018 <TIM_CCxChannelCmd>
      break;
 8006778:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f042 0201 	orr.w	r2, r2, #1
 8006788:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3710      	adds	r7, #16
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	f003 0302 	and.w	r3, r3, #2
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d122      	bne.n	80067f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	f003 0302 	and.w	r3, r3, #2
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d11b      	bne.n	80067f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f06f 0202 	mvn.w	r2, #2
 80067c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2201      	movs	r2, #1
 80067c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	f003 0303 	and.w	r3, r3, #3
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d003      	beq.n	80067de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 f9b8 	bl	8006b4c <HAL_TIM_IC_CaptureCallback>
 80067dc:	e005      	b.n	80067ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 f9ab 	bl	8006b3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 f9ba 	bl	8006b5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	f003 0304 	and.w	r3, r3, #4
 80067fa:	2b04      	cmp	r3, #4
 80067fc:	d122      	bne.n	8006844 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	f003 0304 	and.w	r3, r3, #4
 8006808:	2b04      	cmp	r3, #4
 800680a:	d11b      	bne.n	8006844 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f06f 0204 	mvn.w	r2, #4
 8006814:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2202      	movs	r2, #2
 800681a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006826:	2b00      	cmp	r3, #0
 8006828:	d003      	beq.n	8006832 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 f98e 	bl	8006b4c <HAL_TIM_IC_CaptureCallback>
 8006830:	e005      	b.n	800683e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 f981 	bl	8006b3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 f990 	bl	8006b5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	f003 0308 	and.w	r3, r3, #8
 800684e:	2b08      	cmp	r3, #8
 8006850:	d122      	bne.n	8006898 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	f003 0308 	and.w	r3, r3, #8
 800685c:	2b08      	cmp	r3, #8
 800685e:	d11b      	bne.n	8006898 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f06f 0208 	mvn.w	r2, #8
 8006868:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2204      	movs	r2, #4
 800686e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	69db      	ldr	r3, [r3, #28]
 8006876:	f003 0303 	and.w	r3, r3, #3
 800687a:	2b00      	cmp	r3, #0
 800687c:	d003      	beq.n	8006886 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 f964 	bl	8006b4c <HAL_TIM_IC_CaptureCallback>
 8006884:	e005      	b.n	8006892 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 f957 	bl	8006b3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 f966 	bl	8006b5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	f003 0310 	and.w	r3, r3, #16
 80068a2:	2b10      	cmp	r3, #16
 80068a4:	d122      	bne.n	80068ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	f003 0310 	and.w	r3, r3, #16
 80068b0:	2b10      	cmp	r3, #16
 80068b2:	d11b      	bne.n	80068ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f06f 0210 	mvn.w	r2, #16
 80068bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2208      	movs	r2, #8
 80068c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	69db      	ldr	r3, [r3, #28]
 80068ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d003      	beq.n	80068da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 f93a 	bl	8006b4c <HAL_TIM_IC_CaptureCallback>
 80068d8:	e005      	b.n	80068e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 f92d 	bl	8006b3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 f93c 	bl	8006b5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	691b      	ldr	r3, [r3, #16]
 80068f2:	f003 0301 	and.w	r3, r3, #1
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d10e      	bne.n	8006918 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	f003 0301 	and.w	r3, r3, #1
 8006904:	2b01      	cmp	r3, #1
 8006906:	d107      	bne.n	8006918 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f06f 0201 	mvn.w	r2, #1
 8006910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 f908 	bl	8006b28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006922:	2b80      	cmp	r3, #128	@ 0x80
 8006924:	d10e      	bne.n	8006944 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006930:	2b80      	cmp	r3, #128	@ 0x80
 8006932:	d107      	bne.n	8006944 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800693c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 fc62 	bl	8007208 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800694e:	2b40      	cmp	r3, #64	@ 0x40
 8006950:	d10e      	bne.n	8006970 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800695c:	2b40      	cmp	r3, #64	@ 0x40
 800695e:	d107      	bne.n	8006970 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 f900 	bl	8006b70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	f003 0320 	and.w	r3, r3, #32
 800697a:	2b20      	cmp	r3, #32
 800697c:	d10e      	bne.n	800699c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	f003 0320 	and.w	r3, r3, #32
 8006988:	2b20      	cmp	r3, #32
 800698a:	d107      	bne.n	800699c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f06f 0220 	mvn.w	r2, #32
 8006994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 fc2d 	bl	80071f6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800699c:	bf00      	nop
 800699e:	3708      	adds	r7, #8
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b086      	sub	sp, #24
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069b0:	2300      	movs	r3, #0
 80069b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d101      	bne.n	80069c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80069be:	2302      	movs	r3, #2
 80069c0:	e0ae      	b.n	8006b20 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2201      	movs	r2, #1
 80069c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2b0c      	cmp	r3, #12
 80069ce:	f200 809f 	bhi.w	8006b10 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80069d2:	a201      	add	r2, pc, #4	@ (adr r2, 80069d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80069d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d8:	08006a0d 	.word	0x08006a0d
 80069dc:	08006b11 	.word	0x08006b11
 80069e0:	08006b11 	.word	0x08006b11
 80069e4:	08006b11 	.word	0x08006b11
 80069e8:	08006a4d 	.word	0x08006a4d
 80069ec:	08006b11 	.word	0x08006b11
 80069f0:	08006b11 	.word	0x08006b11
 80069f4:	08006b11 	.word	0x08006b11
 80069f8:	08006a8f 	.word	0x08006a8f
 80069fc:	08006b11 	.word	0x08006b11
 8006a00:	08006b11 	.word	0x08006b11
 8006a04:	08006b11 	.word	0x08006b11
 8006a08:	08006acf 	.word	0x08006acf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68b9      	ldr	r1, [r7, #8]
 8006a12:	4618      	mov	r0, r3
 8006a14:	f000 f954 	bl	8006cc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	699a      	ldr	r2, [r3, #24]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f042 0208 	orr.w	r2, r2, #8
 8006a26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	699a      	ldr	r2, [r3, #24]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f022 0204 	bic.w	r2, r2, #4
 8006a36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	6999      	ldr	r1, [r3, #24]
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	691a      	ldr	r2, [r3, #16]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	430a      	orrs	r2, r1
 8006a48:	619a      	str	r2, [r3, #24]
      break;
 8006a4a:	e064      	b.n	8006b16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	68b9      	ldr	r1, [r7, #8]
 8006a52:	4618      	mov	r0, r3
 8006a54:	f000 f9a4 	bl	8006da0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	699a      	ldr	r2, [r3, #24]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	699a      	ldr	r2, [r3, #24]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	6999      	ldr	r1, [r3, #24]
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	021a      	lsls	r2, r3, #8
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	430a      	orrs	r2, r1
 8006a8a:	619a      	str	r2, [r3, #24]
      break;
 8006a8c:	e043      	b.n	8006b16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	68b9      	ldr	r1, [r7, #8]
 8006a94:	4618      	mov	r0, r3
 8006a96:	f000 f9f7 	bl	8006e88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	69da      	ldr	r2, [r3, #28]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f042 0208 	orr.w	r2, r2, #8
 8006aa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	69da      	ldr	r2, [r3, #28]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f022 0204 	bic.w	r2, r2, #4
 8006ab8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	69d9      	ldr	r1, [r3, #28]
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	691a      	ldr	r2, [r3, #16]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	430a      	orrs	r2, r1
 8006aca:	61da      	str	r2, [r3, #28]
      break;
 8006acc:	e023      	b.n	8006b16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68b9      	ldr	r1, [r7, #8]
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f000 fa4b 	bl	8006f70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	69da      	ldr	r2, [r3, #28]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006ae8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	69da      	ldr	r2, [r3, #28]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006af8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	69d9      	ldr	r1, [r3, #28]
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	021a      	lsls	r2, r3, #8
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	430a      	orrs	r2, r1
 8006b0c:	61da      	str	r2, [r3, #28]
      break;
 8006b0e:	e002      	b.n	8006b16 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	75fb      	strb	r3, [r7, #23]
      break;
 8006b14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3718      	adds	r7, #24
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006b30:	bf00      	nop
 8006b32:	370c      	adds	r7, #12
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bc80      	pop	{r7}
 8006b38:	4770      	bx	lr

08006b3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b3a:	b480      	push	{r7}
 8006b3c:	b083      	sub	sp, #12
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b42:	bf00      	nop
 8006b44:	370c      	adds	r7, #12
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bc80      	pop	{r7}
 8006b4a:	4770      	bx	lr

08006b4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b54:	bf00      	nop
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bc80      	pop	{r7}
 8006b5c:	4770      	bx	lr

08006b5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b5e:	b480      	push	{r7}
 8006b60:	b083      	sub	sp, #12
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b66:	bf00      	nop
 8006b68:	370c      	adds	r7, #12
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bc80      	pop	{r7}
 8006b6e:	4770      	bx	lr

08006b70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b78:	bf00      	nop
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bc80      	pop	{r7}
 8006b80:	4770      	bx	lr
	...

08006b84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b085      	sub	sp, #20
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a3f      	ldr	r2, [pc, #252]	@ (8006c94 <TIM_Base_SetConfig+0x110>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d013      	beq.n	8006bc4 <TIM_Base_SetConfig+0x40>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ba2:	d00f      	beq.n	8006bc4 <TIM_Base_SetConfig+0x40>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a3c      	ldr	r2, [pc, #240]	@ (8006c98 <TIM_Base_SetConfig+0x114>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d00b      	beq.n	8006bc4 <TIM_Base_SetConfig+0x40>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a3b      	ldr	r2, [pc, #236]	@ (8006c9c <TIM_Base_SetConfig+0x118>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d007      	beq.n	8006bc4 <TIM_Base_SetConfig+0x40>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a3a      	ldr	r2, [pc, #232]	@ (8006ca0 <TIM_Base_SetConfig+0x11c>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d003      	beq.n	8006bc4 <TIM_Base_SetConfig+0x40>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a39      	ldr	r2, [pc, #228]	@ (8006ca4 <TIM_Base_SetConfig+0x120>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d108      	bne.n	8006bd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a2e      	ldr	r2, [pc, #184]	@ (8006c94 <TIM_Base_SetConfig+0x110>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d02b      	beq.n	8006c36 <TIM_Base_SetConfig+0xb2>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006be4:	d027      	beq.n	8006c36 <TIM_Base_SetConfig+0xb2>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a2b      	ldr	r2, [pc, #172]	@ (8006c98 <TIM_Base_SetConfig+0x114>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d023      	beq.n	8006c36 <TIM_Base_SetConfig+0xb2>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a2a      	ldr	r2, [pc, #168]	@ (8006c9c <TIM_Base_SetConfig+0x118>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d01f      	beq.n	8006c36 <TIM_Base_SetConfig+0xb2>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a29      	ldr	r2, [pc, #164]	@ (8006ca0 <TIM_Base_SetConfig+0x11c>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d01b      	beq.n	8006c36 <TIM_Base_SetConfig+0xb2>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a28      	ldr	r2, [pc, #160]	@ (8006ca4 <TIM_Base_SetConfig+0x120>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d017      	beq.n	8006c36 <TIM_Base_SetConfig+0xb2>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a27      	ldr	r2, [pc, #156]	@ (8006ca8 <TIM_Base_SetConfig+0x124>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d013      	beq.n	8006c36 <TIM_Base_SetConfig+0xb2>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a26      	ldr	r2, [pc, #152]	@ (8006cac <TIM_Base_SetConfig+0x128>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d00f      	beq.n	8006c36 <TIM_Base_SetConfig+0xb2>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a25      	ldr	r2, [pc, #148]	@ (8006cb0 <TIM_Base_SetConfig+0x12c>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d00b      	beq.n	8006c36 <TIM_Base_SetConfig+0xb2>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a24      	ldr	r2, [pc, #144]	@ (8006cb4 <TIM_Base_SetConfig+0x130>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d007      	beq.n	8006c36 <TIM_Base_SetConfig+0xb2>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a23      	ldr	r2, [pc, #140]	@ (8006cb8 <TIM_Base_SetConfig+0x134>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d003      	beq.n	8006c36 <TIM_Base_SetConfig+0xb2>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a22      	ldr	r2, [pc, #136]	@ (8006cbc <TIM_Base_SetConfig+0x138>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d108      	bne.n	8006c48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	68fa      	ldr	r2, [r7, #12]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	695b      	ldr	r3, [r3, #20]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	689a      	ldr	r2, [r3, #8]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a09      	ldr	r2, [pc, #36]	@ (8006c94 <TIM_Base_SetConfig+0x110>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d003      	beq.n	8006c7c <TIM_Base_SetConfig+0xf8>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a0b      	ldr	r2, [pc, #44]	@ (8006ca4 <TIM_Base_SetConfig+0x120>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d103      	bne.n	8006c84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	691a      	ldr	r2, [r3, #16]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	615a      	str	r2, [r3, #20]
}
 8006c8a:	bf00      	nop
 8006c8c:	3714      	adds	r7, #20
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bc80      	pop	{r7}
 8006c92:	4770      	bx	lr
 8006c94:	40010000 	.word	0x40010000
 8006c98:	40000400 	.word	0x40000400
 8006c9c:	40000800 	.word	0x40000800
 8006ca0:	40000c00 	.word	0x40000c00
 8006ca4:	40010400 	.word	0x40010400
 8006ca8:	40014000 	.word	0x40014000
 8006cac:	40014400 	.word	0x40014400
 8006cb0:	40014800 	.word	0x40014800
 8006cb4:	40001800 	.word	0x40001800
 8006cb8:	40001c00 	.word	0x40001c00
 8006cbc:	40002000 	.word	0x40002000

08006cc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b087      	sub	sp, #28
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a1b      	ldr	r3, [r3, #32]
 8006cce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6a1b      	ldr	r3, [r3, #32]
 8006cd4:	f023 0201 	bic.w	r2, r3, #1
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	699b      	ldr	r3, [r3, #24]
 8006ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f023 0303 	bic.w	r3, r3, #3
 8006cf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	f023 0302 	bic.w	r3, r3, #2
 8006d08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	697a      	ldr	r2, [r7, #20]
 8006d10:	4313      	orrs	r3, r2
 8006d12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4a20      	ldr	r2, [pc, #128]	@ (8006d98 <TIM_OC1_SetConfig+0xd8>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d003      	beq.n	8006d24 <TIM_OC1_SetConfig+0x64>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a1f      	ldr	r2, [pc, #124]	@ (8006d9c <TIM_OC1_SetConfig+0xdc>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d10c      	bne.n	8006d3e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	f023 0308 	bic.w	r3, r3, #8
 8006d2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	697a      	ldr	r2, [r7, #20]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	f023 0304 	bic.w	r3, r3, #4
 8006d3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a15      	ldr	r2, [pc, #84]	@ (8006d98 <TIM_OC1_SetConfig+0xd8>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d003      	beq.n	8006d4e <TIM_OC1_SetConfig+0x8e>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a14      	ldr	r2, [pc, #80]	@ (8006d9c <TIM_OC1_SetConfig+0xdc>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d111      	bne.n	8006d72 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	695b      	ldr	r3, [r3, #20]
 8006d62:	693a      	ldr	r2, [r7, #16]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	699b      	ldr	r3, [r3, #24]
 8006d6c:	693a      	ldr	r2, [r7, #16]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	693a      	ldr	r2, [r7, #16]
 8006d76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	685a      	ldr	r2, [r3, #4]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	697a      	ldr	r2, [r7, #20]
 8006d8a:	621a      	str	r2, [r3, #32]
}
 8006d8c:	bf00      	nop
 8006d8e:	371c      	adds	r7, #28
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bc80      	pop	{r7}
 8006d94:	4770      	bx	lr
 8006d96:	bf00      	nop
 8006d98:	40010000 	.word	0x40010000
 8006d9c:	40010400 	.word	0x40010400

08006da0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b087      	sub	sp, #28
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6a1b      	ldr	r3, [r3, #32]
 8006dae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6a1b      	ldr	r3, [r3, #32]
 8006db4:	f023 0210 	bic.w	r2, r3, #16
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	699b      	ldr	r3, [r3, #24]
 8006dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006dd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	021b      	lsls	r3, r3, #8
 8006dde:	68fa      	ldr	r2, [r7, #12]
 8006de0:	4313      	orrs	r3, r2
 8006de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	f023 0320 	bic.w	r3, r3, #32
 8006dea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	011b      	lsls	r3, r3, #4
 8006df2:	697a      	ldr	r2, [r7, #20]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	4a21      	ldr	r2, [pc, #132]	@ (8006e80 <TIM_OC2_SetConfig+0xe0>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d003      	beq.n	8006e08 <TIM_OC2_SetConfig+0x68>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4a20      	ldr	r2, [pc, #128]	@ (8006e84 <TIM_OC2_SetConfig+0xe4>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d10d      	bne.n	8006e24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	011b      	lsls	r3, r3, #4
 8006e16:	697a      	ldr	r2, [r7, #20]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4a16      	ldr	r2, [pc, #88]	@ (8006e80 <TIM_OC2_SetConfig+0xe0>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d003      	beq.n	8006e34 <TIM_OC2_SetConfig+0x94>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	4a15      	ldr	r2, [pc, #84]	@ (8006e84 <TIM_OC2_SetConfig+0xe4>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d113      	bne.n	8006e5c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006e3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006e42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	695b      	ldr	r3, [r3, #20]
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	693a      	ldr	r2, [r7, #16]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	699b      	ldr	r3, [r3, #24]
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	693a      	ldr	r2, [r7, #16]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	693a      	ldr	r2, [r7, #16]
 8006e60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	685a      	ldr	r2, [r3, #4]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	697a      	ldr	r2, [r7, #20]
 8006e74:	621a      	str	r2, [r3, #32]
}
 8006e76:	bf00      	nop
 8006e78:	371c      	adds	r7, #28
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bc80      	pop	{r7}
 8006e7e:	4770      	bx	lr
 8006e80:	40010000 	.word	0x40010000
 8006e84:	40010400 	.word	0x40010400

08006e88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b087      	sub	sp, #28
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a1b      	ldr	r3, [r3, #32]
 8006e96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a1b      	ldr	r3, [r3, #32]
 8006e9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	69db      	ldr	r3, [r3, #28]
 8006eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f023 0303 	bic.w	r3, r3, #3
 8006ebe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	68fa      	ldr	r2, [r7, #12]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006ed0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	021b      	lsls	r3, r3, #8
 8006ed8:	697a      	ldr	r2, [r7, #20]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4a21      	ldr	r2, [pc, #132]	@ (8006f68 <TIM_OC3_SetConfig+0xe0>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d003      	beq.n	8006eee <TIM_OC3_SetConfig+0x66>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a20      	ldr	r2, [pc, #128]	@ (8006f6c <TIM_OC3_SetConfig+0xe4>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d10d      	bne.n	8006f0a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006ef4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	021b      	lsls	r3, r3, #8
 8006efc:	697a      	ldr	r2, [r7, #20]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006f08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a16      	ldr	r2, [pc, #88]	@ (8006f68 <TIM_OC3_SetConfig+0xe0>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d003      	beq.n	8006f1a <TIM_OC3_SetConfig+0x92>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a15      	ldr	r2, [pc, #84]	@ (8006f6c <TIM_OC3_SetConfig+0xe4>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d113      	bne.n	8006f42 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006f28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	695b      	ldr	r3, [r3, #20]
 8006f2e:	011b      	lsls	r3, r3, #4
 8006f30:	693a      	ldr	r2, [r7, #16]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	699b      	ldr	r3, [r3, #24]
 8006f3a:	011b      	lsls	r3, r3, #4
 8006f3c:	693a      	ldr	r2, [r7, #16]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	693a      	ldr	r2, [r7, #16]
 8006f46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	68fa      	ldr	r2, [r7, #12]
 8006f4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	685a      	ldr	r2, [r3, #4]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	697a      	ldr	r2, [r7, #20]
 8006f5a:	621a      	str	r2, [r3, #32]
}
 8006f5c:	bf00      	nop
 8006f5e:	371c      	adds	r7, #28
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bc80      	pop	{r7}
 8006f64:	4770      	bx	lr
 8006f66:	bf00      	nop
 8006f68:	40010000 	.word	0x40010000
 8006f6c:	40010400 	.word	0x40010400

08006f70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b087      	sub	sp, #28
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a1b      	ldr	r3, [r3, #32]
 8006f7e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6a1b      	ldr	r3, [r3, #32]
 8006f84:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	69db      	ldr	r3, [r3, #28]
 8006f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	021b      	lsls	r3, r3, #8
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006fba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	031b      	lsls	r3, r3, #12
 8006fc2:	693a      	ldr	r2, [r7, #16]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a11      	ldr	r2, [pc, #68]	@ (8007010 <TIM_OC4_SetConfig+0xa0>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d003      	beq.n	8006fd8 <TIM_OC4_SetConfig+0x68>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a10      	ldr	r2, [pc, #64]	@ (8007014 <TIM_OC4_SetConfig+0xa4>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d109      	bne.n	8006fec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006fde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	695b      	ldr	r3, [r3, #20]
 8006fe4:	019b      	lsls	r3, r3, #6
 8006fe6:	697a      	ldr	r2, [r7, #20]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	68fa      	ldr	r2, [r7, #12]
 8006ff6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	685a      	ldr	r2, [r3, #4]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	693a      	ldr	r2, [r7, #16]
 8007004:	621a      	str	r2, [r3, #32]
}
 8007006:	bf00      	nop
 8007008:	371c      	adds	r7, #28
 800700a:	46bd      	mov	sp, r7
 800700c:	bc80      	pop	{r7}
 800700e:	4770      	bx	lr
 8007010:	40010000 	.word	0x40010000
 8007014:	40010400 	.word	0x40010400

08007018 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007018:	b480      	push	{r7}
 800701a:	b087      	sub	sp, #28
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	f003 031f 	and.w	r3, r3, #31
 800702a:	2201      	movs	r2, #1
 800702c:	fa02 f303 	lsl.w	r3, r2, r3
 8007030:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6a1a      	ldr	r2, [r3, #32]
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	43db      	mvns	r3, r3
 800703a:	401a      	ands	r2, r3
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6a1a      	ldr	r2, [r3, #32]
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	f003 031f 	and.w	r3, r3, #31
 800704a:	6879      	ldr	r1, [r7, #4]
 800704c:	fa01 f303 	lsl.w	r3, r1, r3
 8007050:	431a      	orrs	r2, r3
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	621a      	str	r2, [r3, #32]
}
 8007056:	bf00      	nop
 8007058:	371c      	adds	r7, #28
 800705a:	46bd      	mov	sp, r7
 800705c:	bc80      	pop	{r7}
 800705e:	4770      	bx	lr

08007060 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007060:	b480      	push	{r7}
 8007062:	b085      	sub	sp, #20
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007070:	2b01      	cmp	r3, #1
 8007072:	d101      	bne.n	8007078 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007074:	2302      	movs	r3, #2
 8007076:	e05a      	b.n	800712e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2202      	movs	r2, #2
 8007084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800709e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	68fa      	ldr	r2, [r7, #12]
 80070b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a20      	ldr	r2, [pc, #128]	@ (8007138 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d022      	beq.n	8007102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070c4:	d01d      	beq.n	8007102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a1c      	ldr	r2, [pc, #112]	@ (800713c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d018      	beq.n	8007102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a1a      	ldr	r2, [pc, #104]	@ (8007140 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d013      	beq.n	8007102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a19      	ldr	r2, [pc, #100]	@ (8007144 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d00e      	beq.n	8007102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a17      	ldr	r2, [pc, #92]	@ (8007148 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d009      	beq.n	8007102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a16      	ldr	r2, [pc, #88]	@ (800714c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d004      	beq.n	8007102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a14      	ldr	r2, [pc, #80]	@ (8007150 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d10c      	bne.n	800711c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007108:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	68ba      	ldr	r2, [r7, #8]
 8007110:	4313      	orrs	r3, r2
 8007112:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	68ba      	ldr	r2, [r7, #8]
 800711a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3714      	adds	r7, #20
 8007132:	46bd      	mov	sp, r7
 8007134:	bc80      	pop	{r7}
 8007136:	4770      	bx	lr
 8007138:	40010000 	.word	0x40010000
 800713c:	40000400 	.word	0x40000400
 8007140:	40000800 	.word	0x40000800
 8007144:	40000c00 	.word	0x40000c00
 8007148:	40010400 	.word	0x40010400
 800714c:	40014000 	.word	0x40014000
 8007150:	40001800 	.word	0x40001800

08007154 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007154:	b480      	push	{r7}
 8007156:	b085      	sub	sp, #20
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800715e:	2300      	movs	r3, #0
 8007160:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007168:	2b01      	cmp	r3, #1
 800716a:	d101      	bne.n	8007170 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800716c:	2302      	movs	r3, #2
 800716e:	e03d      	b.n	80071ec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	4313      	orrs	r3, r2
 8007184:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	4313      	orrs	r3, r2
 8007192:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	4313      	orrs	r3, r2
 80071a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4313      	orrs	r3, r2
 80071ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	695b      	ldr	r3, [r3, #20]
 80071c8:	4313      	orrs	r3, r2
 80071ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	69db      	ldr	r3, [r3, #28]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3714      	adds	r7, #20
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bc80      	pop	{r7}
 80071f4:	4770      	bx	lr

080071f6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80071f6:	b480      	push	{r7}
 80071f8:	b083      	sub	sp, #12
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071fe:	bf00      	nop
 8007200:	370c      	adds	r7, #12
 8007202:	46bd      	mov	sp, r7
 8007204:	bc80      	pop	{r7}
 8007206:	4770      	bx	lr

08007208 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007210:	bf00      	nop
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	bc80      	pop	{r7}
 8007218:	4770      	bx	lr
	...

0800721c <malloc>:
 800721c:	4b02      	ldr	r3, [pc, #8]	@ (8007228 <malloc+0xc>)
 800721e:	4601      	mov	r1, r0
 8007220:	6818      	ldr	r0, [r3, #0]
 8007222:	f000 b82d 	b.w	8007280 <_malloc_r>
 8007226:	bf00      	nop
 8007228:	20000024 	.word	0x20000024

0800722c <free>:
 800722c:	4b02      	ldr	r3, [pc, #8]	@ (8007238 <free+0xc>)
 800722e:	4601      	mov	r1, r0
 8007230:	6818      	ldr	r0, [r3, #0]
 8007232:	f000 b8f5 	b.w	8007420 <_free_r>
 8007236:	bf00      	nop
 8007238:	20000024 	.word	0x20000024

0800723c <sbrk_aligned>:
 800723c:	b570      	push	{r4, r5, r6, lr}
 800723e:	4e0f      	ldr	r6, [pc, #60]	@ (800727c <sbrk_aligned+0x40>)
 8007240:	460c      	mov	r4, r1
 8007242:	6831      	ldr	r1, [r6, #0]
 8007244:	4605      	mov	r5, r0
 8007246:	b911      	cbnz	r1, 800724e <sbrk_aligned+0x12>
 8007248:	f000 f8ae 	bl	80073a8 <_sbrk_r>
 800724c:	6030      	str	r0, [r6, #0]
 800724e:	4621      	mov	r1, r4
 8007250:	4628      	mov	r0, r5
 8007252:	f000 f8a9 	bl	80073a8 <_sbrk_r>
 8007256:	1c43      	adds	r3, r0, #1
 8007258:	d103      	bne.n	8007262 <sbrk_aligned+0x26>
 800725a:	f04f 34ff 	mov.w	r4, #4294967295
 800725e:	4620      	mov	r0, r4
 8007260:	bd70      	pop	{r4, r5, r6, pc}
 8007262:	1cc4      	adds	r4, r0, #3
 8007264:	f024 0403 	bic.w	r4, r4, #3
 8007268:	42a0      	cmp	r0, r4
 800726a:	d0f8      	beq.n	800725e <sbrk_aligned+0x22>
 800726c:	1a21      	subs	r1, r4, r0
 800726e:	4628      	mov	r0, r5
 8007270:	f000 f89a 	bl	80073a8 <_sbrk_r>
 8007274:	3001      	adds	r0, #1
 8007276:	d1f2      	bne.n	800725e <sbrk_aligned+0x22>
 8007278:	e7ef      	b.n	800725a <sbrk_aligned+0x1e>
 800727a:	bf00      	nop
 800727c:	2000149c 	.word	0x2000149c

08007280 <_malloc_r>:
 8007280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007284:	1ccd      	adds	r5, r1, #3
 8007286:	f025 0503 	bic.w	r5, r5, #3
 800728a:	3508      	adds	r5, #8
 800728c:	2d0c      	cmp	r5, #12
 800728e:	bf38      	it	cc
 8007290:	250c      	movcc	r5, #12
 8007292:	2d00      	cmp	r5, #0
 8007294:	4606      	mov	r6, r0
 8007296:	db01      	blt.n	800729c <_malloc_r+0x1c>
 8007298:	42a9      	cmp	r1, r5
 800729a:	d904      	bls.n	80072a6 <_malloc_r+0x26>
 800729c:	230c      	movs	r3, #12
 800729e:	6033      	str	r3, [r6, #0]
 80072a0:	2000      	movs	r0, #0
 80072a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800737c <_malloc_r+0xfc>
 80072aa:	f000 f869 	bl	8007380 <__malloc_lock>
 80072ae:	f8d8 3000 	ldr.w	r3, [r8]
 80072b2:	461c      	mov	r4, r3
 80072b4:	bb44      	cbnz	r4, 8007308 <_malloc_r+0x88>
 80072b6:	4629      	mov	r1, r5
 80072b8:	4630      	mov	r0, r6
 80072ba:	f7ff ffbf 	bl	800723c <sbrk_aligned>
 80072be:	1c43      	adds	r3, r0, #1
 80072c0:	4604      	mov	r4, r0
 80072c2:	d158      	bne.n	8007376 <_malloc_r+0xf6>
 80072c4:	f8d8 4000 	ldr.w	r4, [r8]
 80072c8:	4627      	mov	r7, r4
 80072ca:	2f00      	cmp	r7, #0
 80072cc:	d143      	bne.n	8007356 <_malloc_r+0xd6>
 80072ce:	2c00      	cmp	r4, #0
 80072d0:	d04b      	beq.n	800736a <_malloc_r+0xea>
 80072d2:	6823      	ldr	r3, [r4, #0]
 80072d4:	4639      	mov	r1, r7
 80072d6:	4630      	mov	r0, r6
 80072d8:	eb04 0903 	add.w	r9, r4, r3
 80072dc:	f000 f864 	bl	80073a8 <_sbrk_r>
 80072e0:	4581      	cmp	r9, r0
 80072e2:	d142      	bne.n	800736a <_malloc_r+0xea>
 80072e4:	6821      	ldr	r1, [r4, #0]
 80072e6:	4630      	mov	r0, r6
 80072e8:	1a6d      	subs	r5, r5, r1
 80072ea:	4629      	mov	r1, r5
 80072ec:	f7ff ffa6 	bl	800723c <sbrk_aligned>
 80072f0:	3001      	adds	r0, #1
 80072f2:	d03a      	beq.n	800736a <_malloc_r+0xea>
 80072f4:	6823      	ldr	r3, [r4, #0]
 80072f6:	442b      	add	r3, r5
 80072f8:	6023      	str	r3, [r4, #0]
 80072fa:	f8d8 3000 	ldr.w	r3, [r8]
 80072fe:	685a      	ldr	r2, [r3, #4]
 8007300:	bb62      	cbnz	r2, 800735c <_malloc_r+0xdc>
 8007302:	f8c8 7000 	str.w	r7, [r8]
 8007306:	e00f      	b.n	8007328 <_malloc_r+0xa8>
 8007308:	6822      	ldr	r2, [r4, #0]
 800730a:	1b52      	subs	r2, r2, r5
 800730c:	d420      	bmi.n	8007350 <_malloc_r+0xd0>
 800730e:	2a0b      	cmp	r2, #11
 8007310:	d917      	bls.n	8007342 <_malloc_r+0xc2>
 8007312:	1961      	adds	r1, r4, r5
 8007314:	42a3      	cmp	r3, r4
 8007316:	6025      	str	r5, [r4, #0]
 8007318:	bf18      	it	ne
 800731a:	6059      	strne	r1, [r3, #4]
 800731c:	6863      	ldr	r3, [r4, #4]
 800731e:	bf08      	it	eq
 8007320:	f8c8 1000 	streq.w	r1, [r8]
 8007324:	5162      	str	r2, [r4, r5]
 8007326:	604b      	str	r3, [r1, #4]
 8007328:	4630      	mov	r0, r6
 800732a:	f000 f82f 	bl	800738c <__malloc_unlock>
 800732e:	f104 000b 	add.w	r0, r4, #11
 8007332:	1d23      	adds	r3, r4, #4
 8007334:	f020 0007 	bic.w	r0, r0, #7
 8007338:	1ac2      	subs	r2, r0, r3
 800733a:	bf1c      	itt	ne
 800733c:	1a1b      	subne	r3, r3, r0
 800733e:	50a3      	strne	r3, [r4, r2]
 8007340:	e7af      	b.n	80072a2 <_malloc_r+0x22>
 8007342:	6862      	ldr	r2, [r4, #4]
 8007344:	42a3      	cmp	r3, r4
 8007346:	bf0c      	ite	eq
 8007348:	f8c8 2000 	streq.w	r2, [r8]
 800734c:	605a      	strne	r2, [r3, #4]
 800734e:	e7eb      	b.n	8007328 <_malloc_r+0xa8>
 8007350:	4623      	mov	r3, r4
 8007352:	6864      	ldr	r4, [r4, #4]
 8007354:	e7ae      	b.n	80072b4 <_malloc_r+0x34>
 8007356:	463c      	mov	r4, r7
 8007358:	687f      	ldr	r7, [r7, #4]
 800735a:	e7b6      	b.n	80072ca <_malloc_r+0x4a>
 800735c:	461a      	mov	r2, r3
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	42a3      	cmp	r3, r4
 8007362:	d1fb      	bne.n	800735c <_malloc_r+0xdc>
 8007364:	2300      	movs	r3, #0
 8007366:	6053      	str	r3, [r2, #4]
 8007368:	e7de      	b.n	8007328 <_malloc_r+0xa8>
 800736a:	230c      	movs	r3, #12
 800736c:	4630      	mov	r0, r6
 800736e:	6033      	str	r3, [r6, #0]
 8007370:	f000 f80c 	bl	800738c <__malloc_unlock>
 8007374:	e794      	b.n	80072a0 <_malloc_r+0x20>
 8007376:	6005      	str	r5, [r0, #0]
 8007378:	e7d6      	b.n	8007328 <_malloc_r+0xa8>
 800737a:	bf00      	nop
 800737c:	200014a0 	.word	0x200014a0

08007380 <__malloc_lock>:
 8007380:	4801      	ldr	r0, [pc, #4]	@ (8007388 <__malloc_lock+0x8>)
 8007382:	f000 b84b 	b.w	800741c <__retarget_lock_acquire_recursive>
 8007386:	bf00      	nop
 8007388:	200015e0 	.word	0x200015e0

0800738c <__malloc_unlock>:
 800738c:	4801      	ldr	r0, [pc, #4]	@ (8007394 <__malloc_unlock+0x8>)
 800738e:	f000 b846 	b.w	800741e <__retarget_lock_release_recursive>
 8007392:	bf00      	nop
 8007394:	200015e0 	.word	0x200015e0

08007398 <memset>:
 8007398:	4603      	mov	r3, r0
 800739a:	4402      	add	r2, r0
 800739c:	4293      	cmp	r3, r2
 800739e:	d100      	bne.n	80073a2 <memset+0xa>
 80073a0:	4770      	bx	lr
 80073a2:	f803 1b01 	strb.w	r1, [r3], #1
 80073a6:	e7f9      	b.n	800739c <memset+0x4>

080073a8 <_sbrk_r>:
 80073a8:	b538      	push	{r3, r4, r5, lr}
 80073aa:	2300      	movs	r3, #0
 80073ac:	4d05      	ldr	r5, [pc, #20]	@ (80073c4 <_sbrk_r+0x1c>)
 80073ae:	4604      	mov	r4, r0
 80073b0:	4608      	mov	r0, r1
 80073b2:	602b      	str	r3, [r5, #0]
 80073b4:	f7fc fd30 	bl	8003e18 <_sbrk>
 80073b8:	1c43      	adds	r3, r0, #1
 80073ba:	d102      	bne.n	80073c2 <_sbrk_r+0x1a>
 80073bc:	682b      	ldr	r3, [r5, #0]
 80073be:	b103      	cbz	r3, 80073c2 <_sbrk_r+0x1a>
 80073c0:	6023      	str	r3, [r4, #0]
 80073c2:	bd38      	pop	{r3, r4, r5, pc}
 80073c4:	200015dc 	.word	0x200015dc

080073c8 <__errno>:
 80073c8:	4b01      	ldr	r3, [pc, #4]	@ (80073d0 <__errno+0x8>)
 80073ca:	6818      	ldr	r0, [r3, #0]
 80073cc:	4770      	bx	lr
 80073ce:	bf00      	nop
 80073d0:	20000024 	.word	0x20000024

080073d4 <__libc_init_array>:
 80073d4:	b570      	push	{r4, r5, r6, lr}
 80073d6:	2600      	movs	r6, #0
 80073d8:	4d0c      	ldr	r5, [pc, #48]	@ (800740c <__libc_init_array+0x38>)
 80073da:	4c0d      	ldr	r4, [pc, #52]	@ (8007410 <__libc_init_array+0x3c>)
 80073dc:	1b64      	subs	r4, r4, r5
 80073de:	10a4      	asrs	r4, r4, #2
 80073e0:	42a6      	cmp	r6, r4
 80073e2:	d109      	bne.n	80073f8 <__libc_init_array+0x24>
 80073e4:	f000 f864 	bl	80074b0 <_init>
 80073e8:	2600      	movs	r6, #0
 80073ea:	4d0a      	ldr	r5, [pc, #40]	@ (8007414 <__libc_init_array+0x40>)
 80073ec:	4c0a      	ldr	r4, [pc, #40]	@ (8007418 <__libc_init_array+0x44>)
 80073ee:	1b64      	subs	r4, r4, r5
 80073f0:	10a4      	asrs	r4, r4, #2
 80073f2:	42a6      	cmp	r6, r4
 80073f4:	d105      	bne.n	8007402 <__libc_init_array+0x2e>
 80073f6:	bd70      	pop	{r4, r5, r6, pc}
 80073f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80073fc:	4798      	blx	r3
 80073fe:	3601      	adds	r6, #1
 8007400:	e7ee      	b.n	80073e0 <__libc_init_array+0xc>
 8007402:	f855 3b04 	ldr.w	r3, [r5], #4
 8007406:	4798      	blx	r3
 8007408:	3601      	adds	r6, #1
 800740a:	e7f2      	b.n	80073f2 <__libc_init_array+0x1e>
 800740c:	080074e8 	.word	0x080074e8
 8007410:	080074e8 	.word	0x080074e8
 8007414:	080074e8 	.word	0x080074e8
 8007418:	080074ec 	.word	0x080074ec

0800741c <__retarget_lock_acquire_recursive>:
 800741c:	4770      	bx	lr

0800741e <__retarget_lock_release_recursive>:
 800741e:	4770      	bx	lr

08007420 <_free_r>:
 8007420:	b538      	push	{r3, r4, r5, lr}
 8007422:	4605      	mov	r5, r0
 8007424:	2900      	cmp	r1, #0
 8007426:	d040      	beq.n	80074aa <_free_r+0x8a>
 8007428:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800742c:	1f0c      	subs	r4, r1, #4
 800742e:	2b00      	cmp	r3, #0
 8007430:	bfb8      	it	lt
 8007432:	18e4      	addlt	r4, r4, r3
 8007434:	f7ff ffa4 	bl	8007380 <__malloc_lock>
 8007438:	4a1c      	ldr	r2, [pc, #112]	@ (80074ac <_free_r+0x8c>)
 800743a:	6813      	ldr	r3, [r2, #0]
 800743c:	b933      	cbnz	r3, 800744c <_free_r+0x2c>
 800743e:	6063      	str	r3, [r4, #4]
 8007440:	6014      	str	r4, [r2, #0]
 8007442:	4628      	mov	r0, r5
 8007444:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007448:	f7ff bfa0 	b.w	800738c <__malloc_unlock>
 800744c:	42a3      	cmp	r3, r4
 800744e:	d908      	bls.n	8007462 <_free_r+0x42>
 8007450:	6820      	ldr	r0, [r4, #0]
 8007452:	1821      	adds	r1, r4, r0
 8007454:	428b      	cmp	r3, r1
 8007456:	bf01      	itttt	eq
 8007458:	6819      	ldreq	r1, [r3, #0]
 800745a:	685b      	ldreq	r3, [r3, #4]
 800745c:	1809      	addeq	r1, r1, r0
 800745e:	6021      	streq	r1, [r4, #0]
 8007460:	e7ed      	b.n	800743e <_free_r+0x1e>
 8007462:	461a      	mov	r2, r3
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	b10b      	cbz	r3, 800746c <_free_r+0x4c>
 8007468:	42a3      	cmp	r3, r4
 800746a:	d9fa      	bls.n	8007462 <_free_r+0x42>
 800746c:	6811      	ldr	r1, [r2, #0]
 800746e:	1850      	adds	r0, r2, r1
 8007470:	42a0      	cmp	r0, r4
 8007472:	d10b      	bne.n	800748c <_free_r+0x6c>
 8007474:	6820      	ldr	r0, [r4, #0]
 8007476:	4401      	add	r1, r0
 8007478:	1850      	adds	r0, r2, r1
 800747a:	4283      	cmp	r3, r0
 800747c:	6011      	str	r1, [r2, #0]
 800747e:	d1e0      	bne.n	8007442 <_free_r+0x22>
 8007480:	6818      	ldr	r0, [r3, #0]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	4408      	add	r0, r1
 8007486:	6010      	str	r0, [r2, #0]
 8007488:	6053      	str	r3, [r2, #4]
 800748a:	e7da      	b.n	8007442 <_free_r+0x22>
 800748c:	d902      	bls.n	8007494 <_free_r+0x74>
 800748e:	230c      	movs	r3, #12
 8007490:	602b      	str	r3, [r5, #0]
 8007492:	e7d6      	b.n	8007442 <_free_r+0x22>
 8007494:	6820      	ldr	r0, [r4, #0]
 8007496:	1821      	adds	r1, r4, r0
 8007498:	428b      	cmp	r3, r1
 800749a:	bf01      	itttt	eq
 800749c:	6819      	ldreq	r1, [r3, #0]
 800749e:	685b      	ldreq	r3, [r3, #4]
 80074a0:	1809      	addeq	r1, r1, r0
 80074a2:	6021      	streq	r1, [r4, #0]
 80074a4:	6063      	str	r3, [r4, #4]
 80074a6:	6054      	str	r4, [r2, #4]
 80074a8:	e7cb      	b.n	8007442 <_free_r+0x22>
 80074aa:	bd38      	pop	{r3, r4, r5, pc}
 80074ac:	200014a0 	.word	0x200014a0

080074b0 <_init>:
 80074b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074b2:	bf00      	nop
 80074b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074b6:	bc08      	pop	{r3}
 80074b8:	469e      	mov	lr, r3
 80074ba:	4770      	bx	lr

080074bc <_fini>:
 80074bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074be:	bf00      	nop
 80074c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074c2:	bc08      	pop	{r3}
 80074c4:	469e      	mov	lr, r3
 80074c6:	4770      	bx	lr
