
imposter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070f8  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08007280  08007280  00008280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072a0  080072a0  00009010  2**0
                  CONTENTS
  4 .ARM          00000008  080072a0  080072a0  000082a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072a8  080072a8  00009010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072a8  080072a8  000082a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080072ac  080072ac  000082ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080072b0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000408  20000010  080072c0  00009010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  080072c0  00009418  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc25  00000000  00000000  00009039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a57  00000000  00000000  00018c5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd8  00000000  00000000  0001b6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c48  00000000  00000000  0001c690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002cfe  00000000  00000000  0001d2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014d36  00000000  00000000  0001ffd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bd579  00000000  00000000  00034d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f2285  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044d8  00000000  00000000  000f22c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000f67a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007268 	.word	0x08007268

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08007268 	.word	0x08007268

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2f>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a7c:	bf24      	itt	cs
 8000a7e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a82:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a86:	d90d      	bls.n	8000aa4 <__aeabi_d2f+0x30>
 8000a88:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a8c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a90:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a94:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a98:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a9c:	bf08      	it	eq
 8000a9e:	f020 0001 	biceq.w	r0, r0, #1
 8000aa2:	4770      	bx	lr
 8000aa4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aa8:	d121      	bne.n	8000aee <__aeabi_d2f+0x7a>
 8000aaa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aae:	bfbc      	itt	lt
 8000ab0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ab4:	4770      	bxlt	lr
 8000ab6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000abe:	f1c2 0218 	rsb	r2, r2, #24
 8000ac2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ac6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aca:	fa20 f002 	lsr.w	r0, r0, r2
 8000ace:	bf18      	it	ne
 8000ad0:	f040 0001 	orrne.w	r0, r0, #1
 8000ad4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000adc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae0:	ea40 000c 	orr.w	r0, r0, ip
 8000ae4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aec:	e7cc      	b.n	8000a88 <__aeabi_d2f+0x14>
 8000aee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af2:	d107      	bne.n	8000b04 <__aeabi_d2f+0x90>
 8000af4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af8:	bf1e      	ittt	ne
 8000afa:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000afe:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b02:	4770      	bxne	lr
 8000b04:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_frsub>:
 8000b14:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b18:	e002      	b.n	8000b20 <__addsf3>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_fsub>:
 8000b1c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b20 <__addsf3>:
 8000b20:	0042      	lsls	r2, r0, #1
 8000b22:	bf1f      	itttt	ne
 8000b24:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b28:	ea92 0f03 	teqne	r2, r3
 8000b2c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b30:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b34:	d06a      	beq.n	8000c0c <__addsf3+0xec>
 8000b36:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b3e:	bfc1      	itttt	gt
 8000b40:	18d2      	addgt	r2, r2, r3
 8000b42:	4041      	eorgt	r1, r0
 8000b44:	4048      	eorgt	r0, r1
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	bfb8      	it	lt
 8000b4a:	425b      	neglt	r3, r3
 8000b4c:	2b19      	cmp	r3, #25
 8000b4e:	bf88      	it	hi
 8000b50:	4770      	bxhi	lr
 8000b52:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b56:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b5a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b5e:	bf18      	it	ne
 8000b60:	4240      	negne	r0, r0
 8000b62:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b66:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b6a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b6e:	bf18      	it	ne
 8000b70:	4249      	negne	r1, r1
 8000b72:	ea92 0f03 	teq	r2, r3
 8000b76:	d03f      	beq.n	8000bf8 <__addsf3+0xd8>
 8000b78:	f1a2 0201 	sub.w	r2, r2, #1
 8000b7c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b80:	eb10 000c 	adds.w	r0, r0, ip
 8000b84:	f1c3 0320 	rsb	r3, r3, #32
 8000b88:	fa01 f103 	lsl.w	r1, r1, r3
 8000b8c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b90:	d502      	bpl.n	8000b98 <__addsf3+0x78>
 8000b92:	4249      	negs	r1, r1
 8000b94:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b98:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b9c:	d313      	bcc.n	8000bc6 <__addsf3+0xa6>
 8000b9e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000ba2:	d306      	bcc.n	8000bb2 <__addsf3+0x92>
 8000ba4:	0840      	lsrs	r0, r0, #1
 8000ba6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000baa:	f102 0201 	add.w	r2, r2, #1
 8000bae:	2afe      	cmp	r2, #254	@ 0xfe
 8000bb0:	d251      	bcs.n	8000c56 <__addsf3+0x136>
 8000bb2:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bba:	bf08      	it	eq
 8000bbc:	f020 0001 	biceq.w	r0, r0, #1
 8000bc0:	ea40 0003 	orr.w	r0, r0, r3
 8000bc4:	4770      	bx	lr
 8000bc6:	0049      	lsls	r1, r1, #1
 8000bc8:	eb40 0000 	adc.w	r0, r0, r0
 8000bcc:	3a01      	subs	r2, #1
 8000bce:	bf28      	it	cs
 8000bd0:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bd4:	d2ed      	bcs.n	8000bb2 <__addsf3+0x92>
 8000bd6:	fab0 fc80 	clz	ip, r0
 8000bda:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bde:	ebb2 020c 	subs.w	r2, r2, ip
 8000be2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000be6:	bfaa      	itet	ge
 8000be8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bec:	4252      	neglt	r2, r2
 8000bee:	4318      	orrge	r0, r3
 8000bf0:	bfbc      	itt	lt
 8000bf2:	40d0      	lsrlt	r0, r2
 8000bf4:	4318      	orrlt	r0, r3
 8000bf6:	4770      	bx	lr
 8000bf8:	f092 0f00 	teq	r2, #0
 8000bfc:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c00:	bf06      	itte	eq
 8000c02:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c06:	3201      	addeq	r2, #1
 8000c08:	3b01      	subne	r3, #1
 8000c0a:	e7b5      	b.n	8000b78 <__addsf3+0x58>
 8000c0c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c14:	bf18      	it	ne
 8000c16:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1a:	d021      	beq.n	8000c60 <__addsf3+0x140>
 8000c1c:	ea92 0f03 	teq	r2, r3
 8000c20:	d004      	beq.n	8000c2c <__addsf3+0x10c>
 8000c22:	f092 0f00 	teq	r2, #0
 8000c26:	bf08      	it	eq
 8000c28:	4608      	moveq	r0, r1
 8000c2a:	4770      	bx	lr
 8000c2c:	ea90 0f01 	teq	r0, r1
 8000c30:	bf1c      	itt	ne
 8000c32:	2000      	movne	r0, #0
 8000c34:	4770      	bxne	lr
 8000c36:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c3a:	d104      	bne.n	8000c46 <__addsf3+0x126>
 8000c3c:	0040      	lsls	r0, r0, #1
 8000c3e:	bf28      	it	cs
 8000c40:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c44:	4770      	bx	lr
 8000c46:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c4a:	bf3c      	itt	cc
 8000c4c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c50:	4770      	bxcc	lr
 8000c52:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c56:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c5e:	4770      	bx	lr
 8000c60:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c64:	bf16      	itet	ne
 8000c66:	4608      	movne	r0, r1
 8000c68:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c6c:	4601      	movne	r1, r0
 8000c6e:	0242      	lsls	r2, r0, #9
 8000c70:	bf06      	itte	eq
 8000c72:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c76:	ea90 0f01 	teqeq	r0, r1
 8000c7a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c7e:	4770      	bx	lr

08000c80 <__aeabi_ui2f>:
 8000c80:	f04f 0300 	mov.w	r3, #0
 8000c84:	e004      	b.n	8000c90 <__aeabi_i2f+0x8>
 8000c86:	bf00      	nop

08000c88 <__aeabi_i2f>:
 8000c88:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c8c:	bf48      	it	mi
 8000c8e:	4240      	negmi	r0, r0
 8000c90:	ea5f 0c00 	movs.w	ip, r0
 8000c94:	bf08      	it	eq
 8000c96:	4770      	bxeq	lr
 8000c98:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c9c:	4601      	mov	r1, r0
 8000c9e:	f04f 0000 	mov.w	r0, #0
 8000ca2:	e01c      	b.n	8000cde <__aeabi_l2f+0x2a>

08000ca4 <__aeabi_ul2f>:
 8000ca4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f04f 0300 	mov.w	r3, #0
 8000cb0:	e00a      	b.n	8000cc8 <__aeabi_l2f+0x14>
 8000cb2:	bf00      	nop

08000cb4 <__aeabi_l2f>:
 8000cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cc0:	d502      	bpl.n	8000cc8 <__aeabi_l2f+0x14>
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	ea5f 0c01 	movs.w	ip, r1
 8000ccc:	bf02      	ittt	eq
 8000cce:	4684      	moveq	ip, r0
 8000cd0:	4601      	moveq	r1, r0
 8000cd2:	2000      	moveq	r0, #0
 8000cd4:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cd8:	bf08      	it	eq
 8000cda:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cde:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000ce2:	fabc f28c 	clz	r2, ip
 8000ce6:	3a08      	subs	r2, #8
 8000ce8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cec:	db10      	blt.n	8000d10 <__aeabi_l2f+0x5c>
 8000cee:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf2:	4463      	add	r3, ip
 8000cf4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cf8:	f1c2 0220 	rsb	r2, r2, #32
 8000cfc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d00:	fa20 f202 	lsr.w	r2, r0, r2
 8000d04:	eb43 0002 	adc.w	r0, r3, r2
 8000d08:	bf08      	it	eq
 8000d0a:	f020 0001 	biceq.w	r0, r0, #1
 8000d0e:	4770      	bx	lr
 8000d10:	f102 0220 	add.w	r2, r2, #32
 8000d14:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d18:	f1c2 0220 	rsb	r2, r2, #32
 8000d1c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d20:	fa21 f202 	lsr.w	r2, r1, r2
 8000d24:	eb43 0002 	adc.w	r0, r3, r2
 8000d28:	bf08      	it	eq
 8000d2a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d2e:	4770      	bx	lr

08000d30 <__aeabi_fmul>:
 8000d30:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d34:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d38:	bf1e      	ittt	ne
 8000d3a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d3e:	ea92 0f0c 	teqne	r2, ip
 8000d42:	ea93 0f0c 	teqne	r3, ip
 8000d46:	d06f      	beq.n	8000e28 <__aeabi_fmul+0xf8>
 8000d48:	441a      	add	r2, r3
 8000d4a:	ea80 0c01 	eor.w	ip, r0, r1
 8000d4e:	0240      	lsls	r0, r0, #9
 8000d50:	bf18      	it	ne
 8000d52:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d56:	d01e      	beq.n	8000d96 <__aeabi_fmul+0x66>
 8000d58:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d5c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d60:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d64:	fba0 3101 	umull	r3, r1, r0, r1
 8000d68:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d6c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d70:	bf3e      	ittt	cc
 8000d72:	0049      	lslcc	r1, r1, #1
 8000d74:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d78:	005b      	lslcc	r3, r3, #1
 8000d7a:	ea40 0001 	orr.w	r0, r0, r1
 8000d7e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d82:	2afd      	cmp	r2, #253	@ 0xfd
 8000d84:	d81d      	bhi.n	8000dc2 <__aeabi_fmul+0x92>
 8000d86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d8a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d8e:	bf08      	it	eq
 8000d90:	f020 0001 	biceq.w	r0, r0, #1
 8000d94:	4770      	bx	lr
 8000d96:	f090 0f00 	teq	r0, #0
 8000d9a:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d9e:	bf08      	it	eq
 8000da0:	0249      	lsleq	r1, r1, #9
 8000da2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000da6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000daa:	3a7f      	subs	r2, #127	@ 0x7f
 8000dac:	bfc2      	ittt	gt
 8000dae:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000db2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000db6:	4770      	bxgt	lr
 8000db8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dbc:	f04f 0300 	mov.w	r3, #0
 8000dc0:	3a01      	subs	r2, #1
 8000dc2:	dc5d      	bgt.n	8000e80 <__aeabi_fmul+0x150>
 8000dc4:	f112 0f19 	cmn.w	r2, #25
 8000dc8:	bfdc      	itt	le
 8000dca:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000dce:	4770      	bxle	lr
 8000dd0:	f1c2 0200 	rsb	r2, r2, #0
 8000dd4:	0041      	lsls	r1, r0, #1
 8000dd6:	fa21 f102 	lsr.w	r1, r1, r2
 8000dda:	f1c2 0220 	rsb	r2, r2, #32
 8000dde:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000de6:	f140 0000 	adc.w	r0, r0, #0
 8000dea:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dee:	bf08      	it	eq
 8000df0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df4:	4770      	bx	lr
 8000df6:	f092 0f00 	teq	r2, #0
 8000dfa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000dfe:	bf02      	ittt	eq
 8000e00:	0040      	lsleq	r0, r0, #1
 8000e02:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e06:	3a01      	subeq	r2, #1
 8000e08:	d0f9      	beq.n	8000dfe <__aeabi_fmul+0xce>
 8000e0a:	ea40 000c 	orr.w	r0, r0, ip
 8000e0e:	f093 0f00 	teq	r3, #0
 8000e12:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e16:	bf02      	ittt	eq
 8000e18:	0049      	lsleq	r1, r1, #1
 8000e1a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e1e:	3b01      	subeq	r3, #1
 8000e20:	d0f9      	beq.n	8000e16 <__aeabi_fmul+0xe6>
 8000e22:	ea41 010c 	orr.w	r1, r1, ip
 8000e26:	e78f      	b.n	8000d48 <__aeabi_fmul+0x18>
 8000e28:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e2c:	ea92 0f0c 	teq	r2, ip
 8000e30:	bf18      	it	ne
 8000e32:	ea93 0f0c 	teqne	r3, ip
 8000e36:	d00a      	beq.n	8000e4e <__aeabi_fmul+0x11e>
 8000e38:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e3c:	bf18      	it	ne
 8000e3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e42:	d1d8      	bne.n	8000df6 <__aeabi_fmul+0xc6>
 8000e44:	ea80 0001 	eor.w	r0, r0, r1
 8000e48:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e4c:	4770      	bx	lr
 8000e4e:	f090 0f00 	teq	r0, #0
 8000e52:	bf17      	itett	ne
 8000e54:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e58:	4608      	moveq	r0, r1
 8000e5a:	f091 0f00 	teqne	r1, #0
 8000e5e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e62:	d014      	beq.n	8000e8e <__aeabi_fmul+0x15e>
 8000e64:	ea92 0f0c 	teq	r2, ip
 8000e68:	d101      	bne.n	8000e6e <__aeabi_fmul+0x13e>
 8000e6a:	0242      	lsls	r2, r0, #9
 8000e6c:	d10f      	bne.n	8000e8e <__aeabi_fmul+0x15e>
 8000e6e:	ea93 0f0c 	teq	r3, ip
 8000e72:	d103      	bne.n	8000e7c <__aeabi_fmul+0x14c>
 8000e74:	024b      	lsls	r3, r1, #9
 8000e76:	bf18      	it	ne
 8000e78:	4608      	movne	r0, r1
 8000e7a:	d108      	bne.n	8000e8e <__aeabi_fmul+0x15e>
 8000e7c:	ea80 0001 	eor.w	r0, r0, r1
 8000e80:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e8c:	4770      	bx	lr
 8000e8e:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e92:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e96:	4770      	bx	lr

08000e98 <__aeabi_fdiv>:
 8000e98:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea0:	bf1e      	ittt	ne
 8000ea2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ea6:	ea92 0f0c 	teqne	r2, ip
 8000eaa:	ea93 0f0c 	teqne	r3, ip
 8000eae:	d069      	beq.n	8000f84 <__aeabi_fdiv+0xec>
 8000eb0:	eba2 0203 	sub.w	r2, r2, r3
 8000eb4:	ea80 0c01 	eor.w	ip, r0, r1
 8000eb8:	0249      	lsls	r1, r1, #9
 8000eba:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ebe:	d037      	beq.n	8000f30 <__aeabi_fdiv+0x98>
 8000ec0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ec4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ec8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ecc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ed0:	428b      	cmp	r3, r1
 8000ed2:	bf38      	it	cc
 8000ed4:	005b      	lslcc	r3, r3, #1
 8000ed6:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eda:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	bf24      	itt	cs
 8000ee2:	1a5b      	subcs	r3, r3, r1
 8000ee4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ee8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000eec:	bf24      	itt	cs
 8000eee:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ef6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efa:	bf24      	itt	cs
 8000efc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f00:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f04:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f08:	bf24      	itt	cs
 8000f0a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f0e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f12:	011b      	lsls	r3, r3, #4
 8000f14:	bf18      	it	ne
 8000f16:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1a:	d1e0      	bne.n	8000ede <__aeabi_fdiv+0x46>
 8000f1c:	2afd      	cmp	r2, #253	@ 0xfd
 8000f1e:	f63f af50 	bhi.w	8000dc2 <__aeabi_fmul+0x92>
 8000f22:	428b      	cmp	r3, r1
 8000f24:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f28:	bf08      	it	eq
 8000f2a:	f020 0001 	biceq.w	r0, r0, #1
 8000f2e:	4770      	bx	lr
 8000f30:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f34:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f38:	327f      	adds	r2, #127	@ 0x7f
 8000f3a:	bfc2      	ittt	gt
 8000f3c:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f40:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f44:	4770      	bxgt	lr
 8000f46:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f4a:	f04f 0300 	mov.w	r3, #0
 8000f4e:	3a01      	subs	r2, #1
 8000f50:	e737      	b.n	8000dc2 <__aeabi_fmul+0x92>
 8000f52:	f092 0f00 	teq	r2, #0
 8000f56:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f5a:	bf02      	ittt	eq
 8000f5c:	0040      	lsleq	r0, r0, #1
 8000f5e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f62:	3a01      	subeq	r2, #1
 8000f64:	d0f9      	beq.n	8000f5a <__aeabi_fdiv+0xc2>
 8000f66:	ea40 000c 	orr.w	r0, r0, ip
 8000f6a:	f093 0f00 	teq	r3, #0
 8000f6e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f72:	bf02      	ittt	eq
 8000f74:	0049      	lsleq	r1, r1, #1
 8000f76:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f7a:	3b01      	subeq	r3, #1
 8000f7c:	d0f9      	beq.n	8000f72 <__aeabi_fdiv+0xda>
 8000f7e:	ea41 010c 	orr.w	r1, r1, ip
 8000f82:	e795      	b.n	8000eb0 <__aeabi_fdiv+0x18>
 8000f84:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f88:	ea92 0f0c 	teq	r2, ip
 8000f8c:	d108      	bne.n	8000fa0 <__aeabi_fdiv+0x108>
 8000f8e:	0242      	lsls	r2, r0, #9
 8000f90:	f47f af7d 	bne.w	8000e8e <__aeabi_fmul+0x15e>
 8000f94:	ea93 0f0c 	teq	r3, ip
 8000f98:	f47f af70 	bne.w	8000e7c <__aeabi_fmul+0x14c>
 8000f9c:	4608      	mov	r0, r1
 8000f9e:	e776      	b.n	8000e8e <__aeabi_fmul+0x15e>
 8000fa0:	ea93 0f0c 	teq	r3, ip
 8000fa4:	d104      	bne.n	8000fb0 <__aeabi_fdiv+0x118>
 8000fa6:	024b      	lsls	r3, r1, #9
 8000fa8:	f43f af4c 	beq.w	8000e44 <__aeabi_fmul+0x114>
 8000fac:	4608      	mov	r0, r1
 8000fae:	e76e      	b.n	8000e8e <__aeabi_fmul+0x15e>
 8000fb0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fb4:	bf18      	it	ne
 8000fb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fba:	d1ca      	bne.n	8000f52 <__aeabi_fdiv+0xba>
 8000fbc:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fc0:	f47f af5c 	bne.w	8000e7c <__aeabi_fmul+0x14c>
 8000fc4:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fc8:	f47f af3c 	bne.w	8000e44 <__aeabi_fmul+0x114>
 8000fcc:	e75f      	b.n	8000e8e <__aeabi_fmul+0x15e>
 8000fce:	bf00      	nop

08000fd0 <__gesf2>:
 8000fd0:	f04f 3cff 	mov.w	ip, #4294967295
 8000fd4:	e006      	b.n	8000fe4 <__cmpsf2+0x4>
 8000fd6:	bf00      	nop

08000fd8 <__lesf2>:
 8000fd8:	f04f 0c01 	mov.w	ip, #1
 8000fdc:	e002      	b.n	8000fe4 <__cmpsf2+0x4>
 8000fde:	bf00      	nop

08000fe0 <__cmpsf2>:
 8000fe0:	f04f 0c01 	mov.w	ip, #1
 8000fe4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fe8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff4:	bf18      	it	ne
 8000ff6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ffa:	d011      	beq.n	8001020 <__cmpsf2+0x40>
 8000ffc:	b001      	add	sp, #4
 8000ffe:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001002:	bf18      	it	ne
 8001004:	ea90 0f01 	teqne	r0, r1
 8001008:	bf58      	it	pl
 800100a:	ebb2 0003 	subspl.w	r0, r2, r3
 800100e:	bf88      	it	hi
 8001010:	17c8      	asrhi	r0, r1, #31
 8001012:	bf38      	it	cc
 8001014:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001018:	bf18      	it	ne
 800101a:	f040 0001 	orrne.w	r0, r0, #1
 800101e:	4770      	bx	lr
 8001020:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001024:	d102      	bne.n	800102c <__cmpsf2+0x4c>
 8001026:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800102a:	d105      	bne.n	8001038 <__cmpsf2+0x58>
 800102c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001030:	d1e4      	bne.n	8000ffc <__cmpsf2+0x1c>
 8001032:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001036:	d0e1      	beq.n	8000ffc <__cmpsf2+0x1c>
 8001038:	f85d 0b04 	ldr.w	r0, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <__aeabi_cfrcmple>:
 8001040:	4684      	mov	ip, r0
 8001042:	4608      	mov	r0, r1
 8001044:	4661      	mov	r1, ip
 8001046:	e7ff      	b.n	8001048 <__aeabi_cfcmpeq>

08001048 <__aeabi_cfcmpeq>:
 8001048:	b50f      	push	{r0, r1, r2, r3, lr}
 800104a:	f7ff ffc9 	bl	8000fe0 <__cmpsf2>
 800104e:	2800      	cmp	r0, #0
 8001050:	bf48      	it	mi
 8001052:	f110 0f00 	cmnmi.w	r0, #0
 8001056:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001058 <__aeabi_fcmpeq>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff fff4 	bl	8001048 <__aeabi_cfcmpeq>
 8001060:	bf0c      	ite	eq
 8001062:	2001      	moveq	r0, #1
 8001064:	2000      	movne	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmplt>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff ffea 	bl	8001048 <__aeabi_cfcmpeq>
 8001074:	bf34      	ite	cc
 8001076:	2001      	movcc	r0, #1
 8001078:	2000      	movcs	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmple>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffe0 	bl	8001048 <__aeabi_cfcmpeq>
 8001088:	bf94      	ite	ls
 800108a:	2001      	movls	r0, #1
 800108c:	2000      	movhi	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmpge>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffd2 	bl	8001040 <__aeabi_cfrcmple>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpgt>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffc8 	bl	8001040 <__aeabi_cfrcmple>
 80010b0:	bf34      	ite	cc
 80010b2:	2001      	movcc	r0, #1
 80010b4:	2000      	movcs	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_f2uiz>:
 80010bc:	0042      	lsls	r2, r0, #1
 80010be:	d20e      	bcs.n	80010de <__aeabi_f2uiz+0x22>
 80010c0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010c4:	d30b      	bcc.n	80010de <__aeabi_f2uiz+0x22>
 80010c6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010ca:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010ce:	d409      	bmi.n	80010e4 <__aeabi_f2uiz+0x28>
 80010d0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010d8:	fa23 f002 	lsr.w	r0, r3, r2
 80010dc:	4770      	bx	lr
 80010de:	f04f 0000 	mov.w	r0, #0
 80010e2:	4770      	bx	lr
 80010e4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80010e8:	d101      	bne.n	80010ee <__aeabi_f2uiz+0x32>
 80010ea:	0242      	lsls	r2, r0, #9
 80010ec:	d102      	bne.n	80010f4 <__aeabi_f2uiz+0x38>
 80010ee:	f04f 30ff 	mov.w	r0, #4294967295
 80010f2:	4770      	bx	lr
 80010f4:	f04f 0000 	mov.w	r0, #0
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop

080010fc <__aeabi_uldivmod>:
 80010fc:	b953      	cbnz	r3, 8001114 <__aeabi_uldivmod+0x18>
 80010fe:	b94a      	cbnz	r2, 8001114 <__aeabi_uldivmod+0x18>
 8001100:	2900      	cmp	r1, #0
 8001102:	bf08      	it	eq
 8001104:	2800      	cmpeq	r0, #0
 8001106:	bf1c      	itt	ne
 8001108:	f04f 31ff 	movne.w	r1, #4294967295
 800110c:	f04f 30ff 	movne.w	r0, #4294967295
 8001110:	f000 b968 	b.w	80013e4 <__aeabi_idiv0>
 8001114:	f1ad 0c08 	sub.w	ip, sp, #8
 8001118:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800111c:	f000 f806 	bl	800112c <__udivmoddi4>
 8001120:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001124:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001128:	b004      	add	sp, #16
 800112a:	4770      	bx	lr

0800112c <__udivmoddi4>:
 800112c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001130:	9d08      	ldr	r5, [sp, #32]
 8001132:	460c      	mov	r4, r1
 8001134:	2b00      	cmp	r3, #0
 8001136:	d14e      	bne.n	80011d6 <__udivmoddi4+0xaa>
 8001138:	4694      	mov	ip, r2
 800113a:	458c      	cmp	ip, r1
 800113c:	4686      	mov	lr, r0
 800113e:	fab2 f282 	clz	r2, r2
 8001142:	d962      	bls.n	800120a <__udivmoddi4+0xde>
 8001144:	b14a      	cbz	r2, 800115a <__udivmoddi4+0x2e>
 8001146:	f1c2 0320 	rsb	r3, r2, #32
 800114a:	4091      	lsls	r1, r2
 800114c:	fa20 f303 	lsr.w	r3, r0, r3
 8001150:	fa0c fc02 	lsl.w	ip, ip, r2
 8001154:	4319      	orrs	r1, r3
 8001156:	fa00 fe02 	lsl.w	lr, r0, r2
 800115a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800115e:	fbb1 f4f7 	udiv	r4, r1, r7
 8001162:	fb07 1114 	mls	r1, r7, r4, r1
 8001166:	fa1f f68c 	uxth.w	r6, ip
 800116a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800116e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001172:	fb04 f106 	mul.w	r1, r4, r6
 8001176:	4299      	cmp	r1, r3
 8001178:	d90a      	bls.n	8001190 <__udivmoddi4+0x64>
 800117a:	eb1c 0303 	adds.w	r3, ip, r3
 800117e:	f104 30ff 	add.w	r0, r4, #4294967295
 8001182:	f080 8110 	bcs.w	80013a6 <__udivmoddi4+0x27a>
 8001186:	4299      	cmp	r1, r3
 8001188:	f240 810d 	bls.w	80013a6 <__udivmoddi4+0x27a>
 800118c:	3c02      	subs	r4, #2
 800118e:	4463      	add	r3, ip
 8001190:	1a59      	subs	r1, r3, r1
 8001192:	fbb1 f0f7 	udiv	r0, r1, r7
 8001196:	fb07 1110 	mls	r1, r7, r0, r1
 800119a:	fb00 f606 	mul.w	r6, r0, r6
 800119e:	fa1f f38e 	uxth.w	r3, lr
 80011a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011a6:	429e      	cmp	r6, r3
 80011a8:	d90a      	bls.n	80011c0 <__udivmoddi4+0x94>
 80011aa:	eb1c 0303 	adds.w	r3, ip, r3
 80011ae:	f100 31ff 	add.w	r1, r0, #4294967295
 80011b2:	f080 80fa 	bcs.w	80013aa <__udivmoddi4+0x27e>
 80011b6:	429e      	cmp	r6, r3
 80011b8:	f240 80f7 	bls.w	80013aa <__udivmoddi4+0x27e>
 80011bc:	4463      	add	r3, ip
 80011be:	3802      	subs	r0, #2
 80011c0:	2100      	movs	r1, #0
 80011c2:	1b9b      	subs	r3, r3, r6
 80011c4:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80011c8:	b11d      	cbz	r5, 80011d2 <__udivmoddi4+0xa6>
 80011ca:	40d3      	lsrs	r3, r2
 80011cc:	2200      	movs	r2, #0
 80011ce:	e9c5 3200 	strd	r3, r2, [r5]
 80011d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011d6:	428b      	cmp	r3, r1
 80011d8:	d905      	bls.n	80011e6 <__udivmoddi4+0xba>
 80011da:	b10d      	cbz	r5, 80011e0 <__udivmoddi4+0xb4>
 80011dc:	e9c5 0100 	strd	r0, r1, [r5]
 80011e0:	2100      	movs	r1, #0
 80011e2:	4608      	mov	r0, r1
 80011e4:	e7f5      	b.n	80011d2 <__udivmoddi4+0xa6>
 80011e6:	fab3 f183 	clz	r1, r3
 80011ea:	2900      	cmp	r1, #0
 80011ec:	d146      	bne.n	800127c <__udivmoddi4+0x150>
 80011ee:	42a3      	cmp	r3, r4
 80011f0:	d302      	bcc.n	80011f8 <__udivmoddi4+0xcc>
 80011f2:	4290      	cmp	r0, r2
 80011f4:	f0c0 80ee 	bcc.w	80013d4 <__udivmoddi4+0x2a8>
 80011f8:	1a86      	subs	r6, r0, r2
 80011fa:	eb64 0303 	sbc.w	r3, r4, r3
 80011fe:	2001      	movs	r0, #1
 8001200:	2d00      	cmp	r5, #0
 8001202:	d0e6      	beq.n	80011d2 <__udivmoddi4+0xa6>
 8001204:	e9c5 6300 	strd	r6, r3, [r5]
 8001208:	e7e3      	b.n	80011d2 <__udivmoddi4+0xa6>
 800120a:	2a00      	cmp	r2, #0
 800120c:	f040 808f 	bne.w	800132e <__udivmoddi4+0x202>
 8001210:	eba1 040c 	sub.w	r4, r1, ip
 8001214:	2101      	movs	r1, #1
 8001216:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800121a:	fa1f f78c 	uxth.w	r7, ip
 800121e:	fbb4 f6f8 	udiv	r6, r4, r8
 8001222:	fb08 4416 	mls	r4, r8, r6, r4
 8001226:	fb07 f006 	mul.w	r0, r7, r6
 800122a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800122e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001232:	4298      	cmp	r0, r3
 8001234:	d908      	bls.n	8001248 <__udivmoddi4+0x11c>
 8001236:	eb1c 0303 	adds.w	r3, ip, r3
 800123a:	f106 34ff 	add.w	r4, r6, #4294967295
 800123e:	d202      	bcs.n	8001246 <__udivmoddi4+0x11a>
 8001240:	4298      	cmp	r0, r3
 8001242:	f200 80cb 	bhi.w	80013dc <__udivmoddi4+0x2b0>
 8001246:	4626      	mov	r6, r4
 8001248:	1a1c      	subs	r4, r3, r0
 800124a:	fbb4 f0f8 	udiv	r0, r4, r8
 800124e:	fb08 4410 	mls	r4, r8, r0, r4
 8001252:	fb00 f707 	mul.w	r7, r0, r7
 8001256:	fa1f f38e 	uxth.w	r3, lr
 800125a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800125e:	429f      	cmp	r7, r3
 8001260:	d908      	bls.n	8001274 <__udivmoddi4+0x148>
 8001262:	eb1c 0303 	adds.w	r3, ip, r3
 8001266:	f100 34ff 	add.w	r4, r0, #4294967295
 800126a:	d202      	bcs.n	8001272 <__udivmoddi4+0x146>
 800126c:	429f      	cmp	r7, r3
 800126e:	f200 80ae 	bhi.w	80013ce <__udivmoddi4+0x2a2>
 8001272:	4620      	mov	r0, r4
 8001274:	1bdb      	subs	r3, r3, r7
 8001276:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800127a:	e7a5      	b.n	80011c8 <__udivmoddi4+0x9c>
 800127c:	f1c1 0720 	rsb	r7, r1, #32
 8001280:	408b      	lsls	r3, r1
 8001282:	fa22 fc07 	lsr.w	ip, r2, r7
 8001286:	ea4c 0c03 	orr.w	ip, ip, r3
 800128a:	fa24 f607 	lsr.w	r6, r4, r7
 800128e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001292:	fbb6 f8f9 	udiv	r8, r6, r9
 8001296:	fa1f fe8c 	uxth.w	lr, ip
 800129a:	fb09 6618 	mls	r6, r9, r8, r6
 800129e:	fa20 f307 	lsr.w	r3, r0, r7
 80012a2:	408c      	lsls	r4, r1
 80012a4:	fa00 fa01 	lsl.w	sl, r0, r1
 80012a8:	fb08 f00e 	mul.w	r0, r8, lr
 80012ac:	431c      	orrs	r4, r3
 80012ae:	0c23      	lsrs	r3, r4, #16
 80012b0:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80012b4:	4298      	cmp	r0, r3
 80012b6:	fa02 f201 	lsl.w	r2, r2, r1
 80012ba:	d90a      	bls.n	80012d2 <__udivmoddi4+0x1a6>
 80012bc:	eb1c 0303 	adds.w	r3, ip, r3
 80012c0:	f108 36ff 	add.w	r6, r8, #4294967295
 80012c4:	f080 8081 	bcs.w	80013ca <__udivmoddi4+0x29e>
 80012c8:	4298      	cmp	r0, r3
 80012ca:	d97e      	bls.n	80013ca <__udivmoddi4+0x29e>
 80012cc:	f1a8 0802 	sub.w	r8, r8, #2
 80012d0:	4463      	add	r3, ip
 80012d2:	1a1e      	subs	r6, r3, r0
 80012d4:	fbb6 f3f9 	udiv	r3, r6, r9
 80012d8:	fb09 6613 	mls	r6, r9, r3, r6
 80012dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80012e0:	b2a4      	uxth	r4, r4
 80012e2:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80012e6:	45a6      	cmp	lr, r4
 80012e8:	d908      	bls.n	80012fc <__udivmoddi4+0x1d0>
 80012ea:	eb1c 0404 	adds.w	r4, ip, r4
 80012ee:	f103 30ff 	add.w	r0, r3, #4294967295
 80012f2:	d266      	bcs.n	80013c2 <__udivmoddi4+0x296>
 80012f4:	45a6      	cmp	lr, r4
 80012f6:	d964      	bls.n	80013c2 <__udivmoddi4+0x296>
 80012f8:	3b02      	subs	r3, #2
 80012fa:	4464      	add	r4, ip
 80012fc:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001300:	fba0 8302 	umull	r8, r3, r0, r2
 8001304:	eba4 040e 	sub.w	r4, r4, lr
 8001308:	429c      	cmp	r4, r3
 800130a:	46c6      	mov	lr, r8
 800130c:	461e      	mov	r6, r3
 800130e:	d350      	bcc.n	80013b2 <__udivmoddi4+0x286>
 8001310:	d04d      	beq.n	80013ae <__udivmoddi4+0x282>
 8001312:	b155      	cbz	r5, 800132a <__udivmoddi4+0x1fe>
 8001314:	ebba 030e 	subs.w	r3, sl, lr
 8001318:	eb64 0406 	sbc.w	r4, r4, r6
 800131c:	fa04 f707 	lsl.w	r7, r4, r7
 8001320:	40cb      	lsrs	r3, r1
 8001322:	431f      	orrs	r7, r3
 8001324:	40cc      	lsrs	r4, r1
 8001326:	e9c5 7400 	strd	r7, r4, [r5]
 800132a:	2100      	movs	r1, #0
 800132c:	e751      	b.n	80011d2 <__udivmoddi4+0xa6>
 800132e:	fa0c fc02 	lsl.w	ip, ip, r2
 8001332:	f1c2 0320 	rsb	r3, r2, #32
 8001336:	40d9      	lsrs	r1, r3
 8001338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800133c:	fa20 f303 	lsr.w	r3, r0, r3
 8001340:	fa00 fe02 	lsl.w	lr, r0, r2
 8001344:	fbb1 f0f8 	udiv	r0, r1, r8
 8001348:	fb08 1110 	mls	r1, r8, r0, r1
 800134c:	4094      	lsls	r4, r2
 800134e:	431c      	orrs	r4, r3
 8001350:	fa1f f78c 	uxth.w	r7, ip
 8001354:	0c23      	lsrs	r3, r4, #16
 8001356:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800135a:	fb00 f107 	mul.w	r1, r0, r7
 800135e:	4299      	cmp	r1, r3
 8001360:	d908      	bls.n	8001374 <__udivmoddi4+0x248>
 8001362:	eb1c 0303 	adds.w	r3, ip, r3
 8001366:	f100 36ff 	add.w	r6, r0, #4294967295
 800136a:	d22c      	bcs.n	80013c6 <__udivmoddi4+0x29a>
 800136c:	4299      	cmp	r1, r3
 800136e:	d92a      	bls.n	80013c6 <__udivmoddi4+0x29a>
 8001370:	3802      	subs	r0, #2
 8001372:	4463      	add	r3, ip
 8001374:	1a5b      	subs	r3, r3, r1
 8001376:	fbb3 f1f8 	udiv	r1, r3, r8
 800137a:	fb08 3311 	mls	r3, r8, r1, r3
 800137e:	b2a4      	uxth	r4, r4
 8001380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001384:	fb01 f307 	mul.w	r3, r1, r7
 8001388:	42a3      	cmp	r3, r4
 800138a:	d908      	bls.n	800139e <__udivmoddi4+0x272>
 800138c:	eb1c 0404 	adds.w	r4, ip, r4
 8001390:	f101 36ff 	add.w	r6, r1, #4294967295
 8001394:	d213      	bcs.n	80013be <__udivmoddi4+0x292>
 8001396:	42a3      	cmp	r3, r4
 8001398:	d911      	bls.n	80013be <__udivmoddi4+0x292>
 800139a:	3902      	subs	r1, #2
 800139c:	4464      	add	r4, ip
 800139e:	1ae4      	subs	r4, r4, r3
 80013a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80013a4:	e73b      	b.n	800121e <__udivmoddi4+0xf2>
 80013a6:	4604      	mov	r4, r0
 80013a8:	e6f2      	b.n	8001190 <__udivmoddi4+0x64>
 80013aa:	4608      	mov	r0, r1
 80013ac:	e708      	b.n	80011c0 <__udivmoddi4+0x94>
 80013ae:	45c2      	cmp	sl, r8
 80013b0:	d2af      	bcs.n	8001312 <__udivmoddi4+0x1e6>
 80013b2:	ebb8 0e02 	subs.w	lr, r8, r2
 80013b6:	eb63 060c 	sbc.w	r6, r3, ip
 80013ba:	3801      	subs	r0, #1
 80013bc:	e7a9      	b.n	8001312 <__udivmoddi4+0x1e6>
 80013be:	4631      	mov	r1, r6
 80013c0:	e7ed      	b.n	800139e <__udivmoddi4+0x272>
 80013c2:	4603      	mov	r3, r0
 80013c4:	e79a      	b.n	80012fc <__udivmoddi4+0x1d0>
 80013c6:	4630      	mov	r0, r6
 80013c8:	e7d4      	b.n	8001374 <__udivmoddi4+0x248>
 80013ca:	46b0      	mov	r8, r6
 80013cc:	e781      	b.n	80012d2 <__udivmoddi4+0x1a6>
 80013ce:	4463      	add	r3, ip
 80013d0:	3802      	subs	r0, #2
 80013d2:	e74f      	b.n	8001274 <__udivmoddi4+0x148>
 80013d4:	4606      	mov	r6, r0
 80013d6:	4623      	mov	r3, r4
 80013d8:	4608      	mov	r0, r1
 80013da:	e711      	b.n	8001200 <__udivmoddi4+0xd4>
 80013dc:	3e02      	subs	r6, #2
 80013de:	4463      	add	r3, ip
 80013e0:	e732      	b.n	8001248 <__udivmoddi4+0x11c>
 80013e2:	bf00      	nop

080013e4 <__aeabi_idiv0>:
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop

080013e8 <Delay_Init>:

#include "main.h"
#include "delay.h"

void Delay_Init(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk))
 80013ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001420 <Delay_Init+0x38>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d10e      	bne.n	8001416 <Delay_Init+0x2e>
    {
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80013f8:	4b09      	ldr	r3, [pc, #36]	@ (8001420 <Delay_Init+0x38>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	4a08      	ldr	r2, [pc, #32]	@ (8001420 <Delay_Init+0x38>)
 80013fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001402:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 8001404:	4b07      	ldr	r3, [pc, #28]	@ (8001424 <Delay_Init+0x3c>)
 8001406:	2200      	movs	r2, #0
 8001408:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800140a:	4b06      	ldr	r3, [pc, #24]	@ (8001424 <Delay_Init+0x3c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a05      	ldr	r2, [pc, #20]	@ (8001424 <Delay_Init+0x3c>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	6013      	str	r3, [r2, #0]
    }
}
 8001416:	bf00      	nop
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	e000edf0 	.word	0xe000edf0
 8001424:	e0001000 	.word	0xe0001000

08001428 <delayMicroseconds>:

// Delays for us microseconds
void delayMicroseconds(uint32_t us)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
    volatile uint32_t startTick = DWT->CYCCNT,
 8001430:	4b09      	ldr	r3, [pc, #36]	@ (8001458 <delayMicroseconds+0x30>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	60fb      	str	r3, [r7, #12]
    delayTicks = us * 16; // Our MCU runs at 16 MHz, so each microsecond lasts 16 clock ticks
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	011b      	lsls	r3, r3, #4
 800143a:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 800143c:	bf00      	nop
 800143e:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <delayMicroseconds+0x30>)
 8001440:	685a      	ldr	r2, [r3, #4]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	1ad2      	subs	r2, r2, r3
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	429a      	cmp	r2, r3
 800144a:	d3f8      	bcc.n	800143e <delayMicroseconds+0x16>
}
 800144c:	bf00      	nop
 800144e:	bf00      	nop
 8001450:	3714      	adds	r7, #20
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr
 8001458:	e0001000 	.word	0xe0001000

0800145c <getRightEncoderCounts>:
 */

#include "main.h"
#include "encoders.h"

int16_t getRightEncoderCounts() {
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
	return (-1*(int16_t) TIM3->CNT);
 8001460:	4b04      	ldr	r3, [pc, #16]	@ (8001474 <getRightEncoderCounts+0x18>)
 8001462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001464:	b29b      	uxth	r3, r3
 8001466:	425b      	negs	r3, r3
 8001468:	b29b      	uxth	r3, r3
 800146a:	b21b      	sxth	r3, r3
}
 800146c:	4618      	mov	r0, r3
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr
 8001474:	40000400 	.word	0x40000400

08001478 <getLeftEncoderCounts>:

int16_t getLeftEncoderCounts() {
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
	return (-1*(int16_t) TIM8->CNT);
 800147c:	4b04      	ldr	r3, [pc, #16]	@ (8001490 <getLeftEncoderCounts+0x18>)
 800147e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001480:	b29b      	uxth	r3, r3
 8001482:	425b      	negs	r3, r3
 8001484:	b29b      	uxth	r3, r3
 8001486:	b21b      	sxth	r3, r3
}
 8001488:	4618      	mov	r0, r3
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr
 8001490:	40010400 	.word	0x40010400

08001494 <resetEncoders>:

void resetEncoders() {
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
	TIM3->CNT = (int16_t) 0;
 8001498:	4b04      	ldr	r3, [pc, #16]	@ (80014ac <resetEncoders+0x18>)
 800149a:	2200      	movs	r2, #0
 800149c:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM8->CNT = (int16_t) 0;
 800149e:	4b04      	ldr	r3, [pc, #16]	@ (80014b0 <resetEncoders+0x1c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr
 80014ac:	40000400 	.word	0x40000400
 80014b0:	40010400 	.word	0x40010400

080014b4 <gyroInit>:
int gyro_initialized = 0;
float Gx_offset = 0;
float Gy_offset = 0;
float Gz_offset = 0;

uint8_t gyroInit(void) {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b0ec      	sub	sp, #432	@ 0x1b0
 80014b8:	af04      	add	r7, sp, #16
    if (gyro_initialized) return 1;
 80014ba:	4b5b      	ldr	r3, [pc, #364]	@ (8001628 <gyroInit+0x174>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <gyroInit+0x12>
 80014c2:	2301      	movs	r3, #1
 80014c4:	e0ab      	b.n	800161e <gyroInit+0x16a>

    I2C_HandleTypeDef *hi2c1_ptr = Get_I2C1_Ptr();
 80014c6:	f000 fddb 	bl	8002080 <Get_I2C1_Ptr>
 80014ca:	f8c7 0194 	str.w	r0, [r7, #404]	@ 0x194

    HAL_StatusTypeDef ret;
    uint8_t temp;

    // establishing connection with the device
    ret = HAL_I2C_IsDeviceReady(hi2c1_ptr, (DEVICE_ADDRESS << 1) + 0, 1, 1000);
 80014ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014d2:	2201      	movs	r2, #1
 80014d4:	21d0      	movs	r1, #208	@ 0xd0
 80014d6:	f8d7 0194 	ldr.w	r0, [r7, #404]	@ 0x194
 80014da:	f003 fdf5 	bl	80050c8 <HAL_I2C_IsDeviceReady>
 80014de:	4603      	mov	r3, r0
 80014e0:	f887 3193 	strb.w	r3, [r7, #403]	@ 0x193
    if (ret != HAL_OK) return ret;
 80014e4:	f897 3193 	ldrb.w	r3, [r7, #403]	@ 0x193
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d002      	beq.n	80014f2 <gyroInit+0x3e>
 80014ec:	f897 3193 	ldrb.w	r3, [r7, #403]	@ 0x193
 80014f0:	e095      	b.n	800161e <gyroInit+0x16a>

    // configuring power management
    temp = 0b00001000;
 80014f2:	2308      	movs	r3, #8
 80014f4:	f887 3192 	strb.w	r3, [r7, #402]	@ 0x192
    ret = HAL_I2C_Mem_Write(hi2c1_ptr, (DEVICE_ADDRESS << 1) + 0, REG_USER_CTRL, 1, &temp, 1, 100);
 80014f8:	2364      	movs	r3, #100	@ 0x64
 80014fa:	9302      	str	r3, [sp, #8]
 80014fc:	2301      	movs	r3, #1
 80014fe:	9301      	str	r3, [sp, #4]
 8001500:	f507 73c9 	add.w	r3, r7, #402	@ 0x192
 8001504:	9300      	str	r3, [sp, #0]
 8001506:	2301      	movs	r3, #1
 8001508:	226b      	movs	r2, #107	@ 0x6b
 800150a:	21d0      	movs	r1, #208	@ 0xd0
 800150c:	f8d7 0194 	ldr.w	r0, [r7, #404]	@ 0x194
 8001510:	f003 faba 	bl	8004a88 <HAL_I2C_Mem_Write>
 8001514:	4603      	mov	r3, r0
 8001516:	f887 3193 	strb.w	r3, [r7, #403]	@ 0x193
    if (ret != HAL_OK) return ret;
 800151a:	f897 3193 	ldrb.w	r3, [r7, #403]	@ 0x193
 800151e:	2b00      	cmp	r3, #0
 8001520:	d002      	beq.n	8001528 <gyroInit+0x74>
 8001522:	f897 3193 	ldrb.w	r3, [r7, #403]	@ 0x193
 8001526:	e07a      	b.n	800161e <gyroInit+0x16a>

    // configuring gyroscope
    temp = FS_GYRO_250;
 8001528:	2300      	movs	r3, #0
 800152a:	f887 3192 	strb.w	r3, [r7, #402]	@ 0x192
    ret = HAL_I2C_Mem_Write(hi2c1_ptr, (DEVICE_ADDRESS << 1) + 0, REG_CONFIG_GYRO, 1, &temp, 1, 100);
 800152e:	2364      	movs	r3, #100	@ 0x64
 8001530:	9302      	str	r3, [sp, #8]
 8001532:	2301      	movs	r3, #1
 8001534:	9301      	str	r3, [sp, #4]
 8001536:	f507 73c9 	add.w	r3, r7, #402	@ 0x192
 800153a:	9300      	str	r3, [sp, #0]
 800153c:	2301      	movs	r3, #1
 800153e:	221b      	movs	r2, #27
 8001540:	21d0      	movs	r1, #208	@ 0xd0
 8001542:	f8d7 0194 	ldr.w	r0, [r7, #404]	@ 0x194
 8001546:	f003 fa9f 	bl	8004a88 <HAL_I2C_Mem_Write>
 800154a:	4603      	mov	r3, r0
 800154c:	f887 3193 	strb.w	r3, [r7, #403]	@ 0x193
    if (ret != HAL_OK) return ret;
 8001550:	f897 3193 	ldrb.w	r3, [r7, #403]	@ 0x193
 8001554:	2b00      	cmp	r3, #0
 8001556:	d002      	beq.n	800155e <gyroInit+0xaa>
 8001558:	f897 3193 	ldrb.w	r3, [r7, #403]	@ 0x193
 800155c:	e05f      	b.n	800161e <gyroInit+0x16a>

    // configuring accelerometer
    temp = FS_ACC_2G;
 800155e:	2300      	movs	r3, #0
 8001560:	f887 3192 	strb.w	r3, [r7, #402]	@ 0x192
    ret = HAL_I2C_Mem_Write(hi2c1_ptr, (DEVICE_ADDRESS << 1) + 0, REG_CONFIG_ACC, 1, &temp, 1, 100);
 8001564:	2364      	movs	r3, #100	@ 0x64
 8001566:	9302      	str	r3, [sp, #8]
 8001568:	2301      	movs	r3, #1
 800156a:	9301      	str	r3, [sp, #4]
 800156c:	f507 73c9 	add.w	r3, r7, #402	@ 0x192
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	2301      	movs	r3, #1
 8001574:	221c      	movs	r2, #28
 8001576:	21d0      	movs	r1, #208	@ 0xd0
 8001578:	f8d7 0194 	ldr.w	r0, [r7, #404]	@ 0x194
 800157c:	f003 fa84 	bl	8004a88 <HAL_I2C_Mem_Write>
 8001580:	4603      	mov	r3, r0
 8001582:	f887 3193 	strb.w	r3, [r7, #403]	@ 0x193
    if (ret != HAL_OK) return ret;
 8001586:	f897 3193 	ldrb.w	r3, [r7, #403]	@ 0x193
 800158a:	2b00      	cmp	r3, #0
 800158c:	d002      	beq.n	8001594 <gyroInit+0xe0>
 800158e:	f897 3193 	ldrb.w	r3, [r7, #403]	@ 0x193
 8001592:	e044      	b.n	800161e <gyroInit+0x16a>

    gyro_initialized = 1;
 8001594:	4b24      	ldr	r3, [pc, #144]	@ (8001628 <gyroInit+0x174>)
 8001596:	2201      	movs	r2, #1
 8001598:	601a      	str	r2, [r3, #0]

    // calculating offsets
//    float Gx_readings[10] = { 0.0 };
//    float Gy_readings[10] = { 0.0 };
    float Gz_readings[100] = { 0.0 };
 800159a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800159e:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80015a2:	4618      	mov	r0, r3
 80015a4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80015a8:	461a      	mov	r2, r3
 80015aa:	2100      	movs	r1, #0
 80015ac:	f005 fe2f 	bl	800720e <memset>
//    float Gx_sum = 0.0;
//    float Gy_sum = 0.0;
    float Gz_sum = 0.0;
 80015b0:	f04f 0300 	mov.w	r3, #0
 80015b4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c

    for (int i = 0; i < 100; ++i) {
 80015b8:	2300      	movs	r3, #0
 80015ba:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 80015be:	e020      	b.n	8001602 <gyroInit+0x14e>
        readGyro(&Gz_readings[i]);
 80015c0:	463a      	mov	r2, r7
 80015c2:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4413      	add	r3, r2
 80015ca:	4618      	mov	r0, r3
 80015cc:	f000 f834 	bl	8001638 <readGyro>
//        Gx_sum += Gx_readings[i];
//        Gy_sum += Gy_readings[i];
        Gz_sum += Gz_readings[i];
 80015d0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80015d4:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80015d8:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80015dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015e0:	4619      	mov	r1, r3
 80015e2:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 80015e6:	f7ff fa9b 	bl	8000b20 <__addsf3>
 80015ea:	4603      	mov	r3, r0
 80015ec:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
        delayMicroseconds(10000);
 80015f0:	f242 7010 	movw	r0, #10000	@ 0x2710
 80015f4:	f7ff ff18 	bl	8001428 <delayMicroseconds>
    for (int i = 0; i < 100; ++i) {
 80015f8:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 80015fc:	3301      	adds	r3, #1
 80015fe:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8001602:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8001606:	2b63      	cmp	r3, #99	@ 0x63
 8001608:	ddda      	ble.n	80015c0 <gyroInit+0x10c>
    }

//    Gx_offset = Gx_sum / 10.0;
//    Gy_offset = Gy_sum / 10.0;
    Gz_offset = Gz_sum / 100.0;
 800160a:	4908      	ldr	r1, [pc, #32]	@ (800162c <gyroInit+0x178>)
 800160c:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 8001610:	f7ff fc42 	bl	8000e98 <__aeabi_fdiv>
 8001614:	4603      	mov	r3, r0
 8001616:	461a      	mov	r2, r3
 8001618:	4b05      	ldr	r3, [pc, #20]	@ (8001630 <gyroInit+0x17c>)
 800161a:	601a      	str	r2, [r3, #0]

    return 1;
 800161c:	2301      	movs	r3, #1
}
 800161e:	4618      	mov	r0, r3
 8001620:	f507 77d0 	add.w	r7, r7, #416	@ 0x1a0
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	2000002c 	.word	0x2000002c
 800162c:	42c80000 	.word	0x42c80000
 8001630:	20000030 	.word	0x20000030
 8001634:	00000000 	.word	0x00000000

08001638 <readGyro>:

void readGyro(/*float* Gx , float* Gy, */float* Gz) {
 8001638:	b5b0      	push	{r4, r5, r7, lr}
 800163a:	b088      	sub	sp, #32
 800163c:	af04      	add	r7, sp, #16
 800163e:	6078      	str	r0, [r7, #4]
    if (!gyro_initialized) {
 8001640:	4b23      	ldr	r3, [pc, #140]	@ (80016d0 <readGyro+0x98>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d039      	beq.n	80016bc <readGyro+0x84>
        return;
    }

    I2C_HandleTypeDef *hi2c1_ptr = Get_I2C1_Ptr();
 8001648:	f000 fd1a 	bl	8002080 <Get_I2C1_Ptr>
 800164c:	60f8      	str	r0, [r7, #12]

//    uint8_t data[6];
    uint8_t data[2];
    HAL_I2C_Mem_Read(hi2c1_ptr, (DEVICE_ADDRESS << 1) + 0, REG_GYRO_DATA, 1, data, 2, 100);
 800164e:	2364      	movs	r3, #100	@ 0x64
 8001650:	9302      	str	r3, [sp, #8]
 8001652:	2302      	movs	r3, #2
 8001654:	9301      	str	r3, [sp, #4]
 8001656:	f107 0308 	add.w	r3, r7, #8
 800165a:	9300      	str	r3, [sp, #0]
 800165c:	2301      	movs	r3, #1
 800165e:	2247      	movs	r2, #71	@ 0x47
 8001660:	21d0      	movs	r1, #208	@ 0xd0
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f003 fb0a 	bl	8004c7c <HAL_I2C_Mem_Read>

//    int16_t Gyro_X_RAW = ((int16_t)(data[0] << 8)) | data [1];
//    int16_t Gyro_Y_RAW = ((int16_t)(data[2] << 8)) | data [3];
//    int16_t Gyro_Z_RAW = ((int16_t)(data[4] << 8)) | data [5];
    int16_t Gyro_Z_RAW = ((int16_t)(data[0] << 8)) | data [1];
 8001668:	7a3b      	ldrb	r3, [r7, #8]
 800166a:	021b      	lsls	r3, r3, #8
 800166c:	b21a      	sxth	r2, r3
 800166e:	7a7b      	ldrb	r3, [r7, #9]
 8001670:	b21b      	sxth	r3, r3
 8001672:	4313      	orrs	r3, r2
 8001674:	817b      	strh	r3, [r7, #10]
         I have configured FS_SEL = 0. So I am dividing by 131.0
         for more details check GYRO_CONFIG Register              ****/

//    *Gx = Gyro_X_RAW/131.0 - Gx_offset;
//    *Gy = Gyro_Y_RAW/131.0 - Gy_offset;
    *Gz = Gyro_Z_RAW/131.0 - Gz_offset;
 8001676:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800167a:	4618      	mov	r0, r3
 800167c:	f7fe fef6 	bl	800046c <__aeabi_i2d>
 8001680:	a311      	add	r3, pc, #68	@ (adr r3, 80016c8 <readGyro+0x90>)
 8001682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001686:	f7ff f885 	bl	8000794 <__aeabi_ddiv>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	4614      	mov	r4, r2
 8001690:	461d      	mov	r5, r3
 8001692:	4b10      	ldr	r3, [pc, #64]	@ (80016d4 <readGyro+0x9c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f7fe fefa 	bl	8000490 <__aeabi_f2d>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	4620      	mov	r0, r4
 80016a2:	4629      	mov	r1, r5
 80016a4:	f7fe fd94 	bl	80001d0 <__aeabi_dsub>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	4610      	mov	r0, r2
 80016ae:	4619      	mov	r1, r3
 80016b0:	f7ff f9e0 	bl	8000a74 <__aeabi_d2f>
 80016b4:	4602      	mov	r2, r0
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	601a      	str	r2, [r3, #0]

    return;
 80016ba:	e000      	b.n	80016be <readGyro+0x86>
        return;
 80016bc:	bf00      	nop
}
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bdb0      	pop	{r4, r5, r7, pc}
 80016c4:	f3af 8000 	nop.w
 80016c8:	00000000 	.word	0x00000000
 80016cc:	40606000 	.word	0x40606000
 80016d0:	2000002c 	.word	0x2000002c
 80016d4:	20000030 	.word	0x20000030

080016d8 <readIR>:
uint8_t complete = 0;

uint32_t usDelay = 100;

uint16_t readIR(IR ir)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	71fb      	strb	r3, [r7, #7]
	uint16_t readValue;

	switch(ir)
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	2b03      	cmp	r3, #3
 80016e6:	d869      	bhi.n	80017bc <readIR+0xe4>
 80016e8:	a201      	add	r2, pc, #4	@ (adr r2, 80016f0 <readIR+0x18>)
 80016ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ee:	bf00      	nop
 80016f0:	08001701 	.word	0x08001701
 80016f4:	0800172f 	.word	0x0800172f
 80016f8:	0800175d 	.word	0x0800175d
 80016fc:	0800178b 	.word	0x0800178b
	    {
	        case IR_FORWARD_LEFT:
	        	HAL_GPIO_WritePin(ForwardLeftEmitter_GPIO_Port, ForwardLeftEmitter_Pin, GPIO_PIN_SET);
 8001700:	2201      	movs	r2, #1
 8001702:	2180      	movs	r1, #128	@ 0x80
 8001704:	4830      	ldr	r0, [pc, #192]	@ (80017c8 <readIR+0xf0>)
 8001706:	f003 f862 	bl	80047ce <HAL_GPIO_WritePin>
	        	delayMicroseconds(usDelay);
 800170a:	4b30      	ldr	r3, [pc, #192]	@ (80017cc <readIR+0xf4>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff fe8a 	bl	8001428 <delayMicroseconds>
	        	readValue = analogRead(ir);
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	4618      	mov	r0, r3
 8001718:	f000 f85c 	bl	80017d4 <analogRead>
 800171c:	4603      	mov	r3, r0
 800171e:	81fb      	strh	r3, [r7, #14]
	        	HAL_GPIO_WritePin(ForwardLeftEmitter_GPIO_Port, ForwardLeftEmitter_Pin, GPIO_PIN_RESET);
 8001720:	2200      	movs	r2, #0
 8001722:	2180      	movs	r1, #128	@ 0x80
 8001724:	4828      	ldr	r0, [pc, #160]	@ (80017c8 <readIR+0xf0>)
 8001726:	f003 f852 	bl	80047ce <HAL_GPIO_WritePin>
	        	return readValue;
 800172a:	89fb      	ldrh	r3, [r7, #14]
 800172c:	e047      	b.n	80017be <readIR+0xe6>
	            break;
	        case IR_LEFT:
	        	HAL_GPIO_WritePin(LeftEmitter_GPIO_Port, LeftEmitter_Pin, GPIO_PIN_SET);
 800172e:	2201      	movs	r2, #1
 8001730:	2110      	movs	r1, #16
 8001732:	4825      	ldr	r0, [pc, #148]	@ (80017c8 <readIR+0xf0>)
 8001734:	f003 f84b 	bl	80047ce <HAL_GPIO_WritePin>
	        	delayMicroseconds(usDelay);
 8001738:	4b24      	ldr	r3, [pc, #144]	@ (80017cc <readIR+0xf4>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff fe73 	bl	8001428 <delayMicroseconds>
	        	readValue = analogRead(ir);
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	4618      	mov	r0, r3
 8001746:	f000 f845 	bl	80017d4 <analogRead>
 800174a:	4603      	mov	r3, r0
 800174c:	81fb      	strh	r3, [r7, #14]
	        	HAL_GPIO_WritePin(LeftEmitter_GPIO_Port, LeftEmitter_Pin, GPIO_PIN_RESET);
 800174e:	2200      	movs	r2, #0
 8001750:	2110      	movs	r1, #16
 8001752:	481d      	ldr	r0, [pc, #116]	@ (80017c8 <readIR+0xf0>)
 8001754:	f003 f83b 	bl	80047ce <HAL_GPIO_WritePin>
	        	return readValue;
 8001758:	89fb      	ldrh	r3, [r7, #14]
 800175a:	e030      	b.n	80017be <readIR+0xe6>
	            break;
	        case IR_RIGHT:
	        	HAL_GPIO_WritePin(RightEmitter_GPIO_Port, RightEmitter_Pin, GPIO_PIN_SET);
 800175c:	2201      	movs	r2, #1
 800175e:	2104      	movs	r1, #4
 8001760:	4819      	ldr	r0, [pc, #100]	@ (80017c8 <readIR+0xf0>)
 8001762:	f003 f834 	bl	80047ce <HAL_GPIO_WritePin>
	        	delayMicroseconds(usDelay);
 8001766:	4b19      	ldr	r3, [pc, #100]	@ (80017cc <readIR+0xf4>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff fe5c 	bl	8001428 <delayMicroseconds>
	        	readValue = analogRead(ir);
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	4618      	mov	r0, r3
 8001774:	f000 f82e 	bl	80017d4 <analogRead>
 8001778:	4603      	mov	r3, r0
 800177a:	81fb      	strh	r3, [r7, #14]
	        	HAL_GPIO_WritePin(RightEmitter_GPIO_Port, RightEmitter_Pin, GPIO_PIN_RESET);
 800177c:	2200      	movs	r2, #0
 800177e:	2104      	movs	r1, #4
 8001780:	4811      	ldr	r0, [pc, #68]	@ (80017c8 <readIR+0xf0>)
 8001782:	f003 f824 	bl	80047ce <HAL_GPIO_WritePin>
	        	return readValue;
 8001786:	89fb      	ldrh	r3, [r7, #14]
 8001788:	e019      	b.n	80017be <readIR+0xe6>
	            break;
	        case IR_FORWARD_RIGHT:
	        	HAL_GPIO_WritePin(ForwardRightEmitter_GPIO_Port, ForwardRightEmitter_Pin, GPIO_PIN_SET);
 800178a:	2201      	movs	r2, #1
 800178c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001790:	480f      	ldr	r0, [pc, #60]	@ (80017d0 <readIR+0xf8>)
 8001792:	f003 f81c 	bl	80047ce <HAL_GPIO_WritePin>
	        	delayMicroseconds(usDelay);
 8001796:	4b0d      	ldr	r3, [pc, #52]	@ (80017cc <readIR+0xf4>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff fe44 	bl	8001428 <delayMicroseconds>
	        	readValue = analogRead(ir);
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f000 f816 	bl	80017d4 <analogRead>
 80017a8:	4603      	mov	r3, r0
 80017aa:	81fb      	strh	r3, [r7, #14]
	        	HAL_GPIO_WritePin(ForwardRightEmitter_GPIO_Port, ForwardRightEmitter_Pin, GPIO_PIN_RESET);
 80017ac:	2200      	movs	r2, #0
 80017ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017b2:	4807      	ldr	r0, [pc, #28]	@ (80017d0 <readIR+0xf8>)
 80017b4:	f003 f80b 	bl	80047ce <HAL_GPIO_WritePin>
	        	return readValue;
 80017b8:	89fb      	ldrh	r3, [r7, #14]
 80017ba:	e000      	b.n	80017be <readIR+0xe6>
	            break;
	        default:
	            return 0;
 80017bc:	2300      	movs	r3, #0
	    }
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40020000 	.word	0x40020000
 80017cc:	20000000 	.word	0x20000000
 80017d0:	40020400 	.word	0x40020400

080017d4 <analogRead>:
{
	return readIR(IR_FORWARD_RIGHT);
}

uint16_t analogRead(IR ir)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08a      	sub	sp, #40	@ 0x28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	71fb      	strb	r3, [r7, #7]
    ADC_ChannelConfTypeDef sConfig = {0}; //this initializes the IR ADC [Analog to Digital Converter]
 80017de:	f107 030c 	add.w	r3, r7, #12
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	605a      	str	r2, [r3, #4]
 80017e8:	609a      	str	r2, [r3, #8]
 80017ea:	60da      	str	r2, [r3, #12]
    ADC_HandleTypeDef *hadc1_ptr = Get_HADC1_Ptr(); //this is a pointer to your hal_adc
 80017ec:	f000 fc3e 	bl	800206c <Get_HADC1_Ptr>
 80017f0:	61f8      	str	r0, [r7, #28]
    //this pointer will also be used to read the analog value, val = HAL_ADC_GetValue(hadc1_ptr);

    //this picks the IR direction to choose the right ADC.
    switch(ir)
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	2b03      	cmp	r3, #3
 80017f6:	d817      	bhi.n	8001828 <analogRead+0x54>
 80017f8:	a201      	add	r2, pc, #4	@ (adr r2, 8001800 <analogRead+0x2c>)
 80017fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017fe:	bf00      	nop
 8001800:	08001811 	.word	0x08001811
 8001804:	08001817 	.word	0x08001817
 8001808:	0800181d 	.word	0x0800181d
 800180c:	08001823 	.word	0x08001823
    {
        case IR_FORWARD_LEFT:
            sConfig.Channel = ADC_CHANNEL_6;
 8001810:	2306      	movs	r3, #6
 8001812:	60fb      	str	r3, [r7, #12]
            break;
 8001814:	e00a      	b.n	800182c <analogRead+0x58>
        case IR_LEFT:
            sConfig.Channel = ADC_CHANNEL_5;
 8001816:	2305      	movs	r3, #5
 8001818:	60fb      	str	r3, [r7, #12]
            break;
 800181a:	e007      	b.n	800182c <analogRead+0x58>
        case IR_RIGHT:
            sConfig.Channel = ADC_CHANNEL_11;
 800181c:	230b      	movs	r3, #11
 800181e:	60fb      	str	r3, [r7, #12]
            break;
 8001820:	e004      	b.n	800182c <analogRead+0x58>
        case IR_FORWARD_RIGHT:
            sConfig.Channel = ADC_CHANNEL_10;
 8001822:	230a      	movs	r3, #10
 8001824:	60fb      	str	r3, [r7, #12]
            break;
 8001826:	e001      	b.n	800182c <analogRead+0x58>
        default:
            return 0;
 8001828:	2300      	movs	r3, #0
 800182a:	e032      	b.n	8001892 <analogRead+0xbe>
    }

    sConfig.Rank = 1;
 800182c:	2301      	movs	r3, #1
 800182e:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]

    // make sure everything was set up correctly
    if (HAL_ADC_ConfigChannel(hadc1_ptr, &sConfig) != HAL_OK)
 8001834:	f107 030c 	add.w	r3, r7, #12
 8001838:	4619      	mov	r1, r3
 800183a:	69f8      	ldr	r0, [r7, #28]
 800183c:	f001 fe80 	bl	8003540 <HAL_ADC_ConfigChannel>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <analogRead+0x76>
    {
        return 0;
 8001846:	2300      	movs	r3, #0
 8001848:	e023      	b.n	8001892 <analogRead+0xbe>
    }

    complete = 0;
 800184a:	4b14      	ldr	r3, [pc, #80]	@ (800189c <analogRead+0xc8>)
 800184c:	2200      	movs	r2, #0
 800184e:	701a      	strb	r2, [r3, #0]

    // start filling up the ADC buffer
    HAL_ADC_Start_DMA(hadc1_ptr, (uint32_t*)adc_buf, NUM_SAMPLES);
 8001850:	2280      	movs	r2, #128	@ 0x80
 8001852:	4913      	ldr	r1, [pc, #76]	@ (80018a0 <analogRead+0xcc>)
 8001854:	69f8      	ldr	r0, [r7, #28]
 8001856:	f001 fd31 	bl	80032bc <HAL_ADC_Start_DMA>

    // wait for the buffer to become full
    while (complete == 0)
 800185a:	e000      	b.n	800185e <analogRead+0x8a>
    {
        continue;
 800185c:	bf00      	nop
    while (complete == 0)
 800185e:	4b0f      	ldr	r3, [pc, #60]	@ (800189c <analogRead+0xc8>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d0fa      	beq.n	800185c <analogRead+0x88>
    }

    uint32_t sum = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	627b      	str	r3, [r7, #36]	@ 0x24
    // calculate the sum of the measurements in order to calculate the average
    uint16_t measurement = 0;
 800186a:	2300      	movs	r3, #0
 800186c:	847b      	strh	r3, [r7, #34]	@ 0x22
    while(measurement < NUM_SAMPLES) //this takes multiple measurements
 800186e:	e00a      	b.n	8001886 <analogRead+0xb2>
    {
        sum += adc_buf[measurement];
 8001870:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001872:	4a0b      	ldr	r2, [pc, #44]	@ (80018a0 <analogRead+0xcc>)
 8001874:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001878:	461a      	mov	r2, r3
 800187a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800187c:	4413      	add	r3, r2
 800187e:	627b      	str	r3, [r7, #36]	@ 0x24
        ++measurement;
 8001880:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001882:	3301      	adds	r3, #1
 8001884:	847b      	strh	r3, [r7, #34]	@ 0x22
    while(measurement < NUM_SAMPLES) //this takes multiple measurements
 8001886:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001888:	2b7f      	cmp	r3, #127	@ 0x7f
 800188a:	d9f1      	bls.n	8001870 <analogRead+0x9c>
    }

    return sum/NUM_SAMPLES;
 800188c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800188e:	09db      	lsrs	r3, r3, #7
 8001890:	b29b      	uxth	r3, r3
}
 8001892:	4618      	mov	r0, r3
 8001894:	3728      	adds	r7, #40	@ 0x28
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000134 	.word	0x20000134
 80018a0:	20000034 	.word	0x20000034

080018a4 <HAL_ADC_ConvCpltCallback>:

/*
 This function is called when the ADC buffer is filled
 It stops the ADC and changes our "complete" variable to be "true"
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
    // stop the ADC
    HAL_ADC_Stop_DMA(hadc);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f001 fde3 	bl	8003478 <HAL_ADC_Stop_DMA>
    complete = 1;
 80018b2:	4b03      	ldr	r3, [pc, #12]	@ (80018c0 <HAL_ADC_ConvCpltCallback+0x1c>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	701a      	strb	r2, [r3, #0]
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20000134 	.word	0x20000134

080018c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018c8:	f001 fc46 	bl	8003158 <HAL_Init>

  /* USER CODE BEGIN Init */
  Delay_Init();
 80018cc:	f7ff fd8c 	bl	80013e8 <Delay_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018d0:	f000 f8da 	bl	8001a88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018d4:	f000 fb08 	bl	8001ee8 <MX_GPIO_Init>
  MX_DMA_Init();
 80018d8:	f000 fae6 	bl	8001ea8 <MX_DMA_Init>
  MX_ADC1_Init();
 80018dc:	f000 f910 	bl	8001b00 <MX_ADC1_Init>
  MX_TIM3_Init();
 80018e0:	f000 fa36 	bl	8001d50 <MX_TIM3_Init>
  MX_TIM8_Init();
 80018e4:	f000 fa88 	bl	8001df8 <MX_TIM8_Init>
  MX_TIM1_Init();
 80018e8:	f000 f98a 	bl	8001c00 <MX_TIM1_Init>
  MX_I2C1_Init();
 80018ec:	f000 f95a 	bl	8001ba4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80018f0:	213c      	movs	r1, #60	@ 0x3c
 80018f2:	4853      	ldr	r0, [pc, #332]	@ (8001a40 <main+0x17c>)
 80018f4:	f004 feba 	bl	800666c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 80018f8:	213c      	movs	r1, #60	@ 0x3c
 80018fa:	4852      	ldr	r0, [pc, #328]	@ (8001a44 <main+0x180>)
 80018fc:	f004 feb6 	bl	800666c <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001900:	2100      	movs	r1, #0
 8001902:	4851      	ldr	r0, [pc, #324]	@ (8001a48 <main+0x184>)
 8001904:	f004 fd44 	bl	8006390 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001908:	2104      	movs	r1, #4
 800190a:	484f      	ldr	r0, [pc, #316]	@ (8001a48 <main+0x184>)
 800190c:	f004 fd40 	bl	8006390 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001910:	2108      	movs	r1, #8
 8001912:	484d      	ldr	r0, [pc, #308]	@ (8001a48 <main+0x184>)
 8001914:	f004 fd3c 	bl	8006390 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001918:	210c      	movs	r1, #12
 800191a:	484b      	ldr	r0, [pc, #300]	@ (8001a48 <main+0x184>)
 800191c:	f004 fd38 	bl	8006390 <HAL_TIM_PWM_Start>

  HAL_GPIO_WritePin(ForwardLeftEmitter_GPIO_Port, ForwardLeftEmitter_Pin, GPIO_PIN_SET);
 8001920:	2201      	movs	r2, #1
 8001922:	2180      	movs	r1, #128	@ 0x80
 8001924:	4849      	ldr	r0, [pc, #292]	@ (8001a4c <main+0x188>)
 8001926:	f002 ff52 	bl	80047ce <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LeftEmitter_GPIO_Port, LeftEmitter_Pin, GPIO_PIN_SET);
 800192a:	2201      	movs	r2, #1
 800192c:	2110      	movs	r1, #16
 800192e:	4847      	ldr	r0, [pc, #284]	@ (8001a4c <main+0x188>)
 8001930:	f002 ff4d 	bl	80047ce <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RightEmitter_GPIO_Port, RightEmitter_Pin, GPIO_PIN_SET);
 8001934:	2201      	movs	r2, #1
 8001936:	2104      	movs	r1, #4
 8001938:	4844      	ldr	r0, [pc, #272]	@ (8001a4c <main+0x188>)
 800193a:	f002 ff48 	bl	80047ce <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ForwardRightEmitter_GPIO_Port, ForwardRightEmitter_Pin, GPIO_PIN_SET);
 800193e:	2201      	movs	r2, #1
 8001940:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001944:	4842      	ldr	r0, [pc, #264]	@ (8001a50 <main+0x18c>)
 8001946:	f002 ff42 	bl	80047ce <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  S1 = HAL_GPIO_ReadPin(Button1_GPIO_Port, Switch1_Pin);
 800194a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800194e:	4840      	ldr	r0, [pc, #256]	@ (8001a50 <main+0x18c>)
 8001950:	f002 ff26 	bl	80047a0 <HAL_GPIO_ReadPin>
 8001954:	4603      	mov	r3, r0
 8001956:	461a      	mov	r2, r3
 8001958:	4b3e      	ldr	r3, [pc, #248]	@ (8001a54 <main+0x190>)
 800195a:	701a      	strb	r2, [r3, #0]
	  S2 = HAL_GPIO_ReadPin(Switch2_GPIO_Port, Switch2_Pin);
 800195c:	2104      	movs	r1, #4
 800195e:	483e      	ldr	r0, [pc, #248]	@ (8001a58 <main+0x194>)
 8001960:	f002 ff1e 	bl	80047a0 <HAL_GPIO_ReadPin>
 8001964:	4603      	mov	r3, r0
 8001966:	461a      	mov	r2, r3
 8001968:	4b3c      	ldr	r3, [pc, #240]	@ (8001a5c <main+0x198>)
 800196a:	701a      	strb	r2, [r3, #0]
	  S3 = HAL_GPIO_ReadPin(Switch3_GPIO_Port, Switch3_Pin);
 800196c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001970:	4836      	ldr	r0, [pc, #216]	@ (8001a4c <main+0x188>)
 8001972:	f002 ff15 	bl	80047a0 <HAL_GPIO_ReadPin>
 8001976:	4603      	mov	r3, r0
 8001978:	461a      	mov	r2, r3
 800197a:	4b39      	ldr	r3, [pc, #228]	@ (8001a60 <main+0x19c>)
 800197c:	701a      	strb	r2, [r3, #0]
	  S4 = HAL_GPIO_ReadPin(Switch4_GPIO_Port, Switch4_Pin);
 800197e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001982:	4833      	ldr	r0, [pc, #204]	@ (8001a50 <main+0x18c>)
 8001984:	f002 ff0c 	bl	80047a0 <HAL_GPIO_ReadPin>
 8001988:	4603      	mov	r3, r0
 800198a:	461a      	mov	r2, r3
 800198c:	4b35      	ldr	r3, [pc, #212]	@ (8001a64 <main+0x1a0>)
 800198e:	701a      	strb	r2, [r3, #0]
	  B1 = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 8001990:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001994:	482e      	ldr	r0, [pc, #184]	@ (8001a50 <main+0x18c>)
 8001996:	f002 ff03 	bl	80047a0 <HAL_GPIO_ReadPin>
 800199a:	4603      	mov	r3, r0
 800199c:	461a      	mov	r2, r3
 800199e:	4b32      	ldr	r3, [pc, #200]	@ (8001a68 <main+0x1a4>)
 80019a0:	701a      	strb	r2, [r3, #0]
	  B2 = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 80019a2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80019a6:	482a      	ldr	r0, [pc, #168]	@ (8001a50 <main+0x18c>)
 80019a8:	f002 fefa 	bl	80047a0 <HAL_GPIO_ReadPin>
 80019ac:	4603      	mov	r3, r0
 80019ae:	461a      	mov	r2, r3
 80019b0:	4b2e      	ldr	r3, [pc, #184]	@ (8001a6c <main+0x1a8>)
 80019b2:	701a      	strb	r2, [r3, #0]
//
//	  HAL_GPIO_WritePin(R_LED_GPIO_Port, R_LED_Pin, GPIO_PIN_SET);
//	  HAL_GPIO_WritePin(Y_LED_GPIO_Port, Y_LED_Pin, GPIO_PIN_SET);
//	  HAL_GPIO_WritePin(G_LED_GPIO_Port, G_LED_Pin, GPIO_PIN_SET);

	  forwardLeftIRvalue = readIR(IR_FORWARD_LEFT);
 80019b4:	2000      	movs	r0, #0
 80019b6:	f7ff fe8f 	bl	80016d8 <readIR>
 80019ba:	4603      	mov	r3, r0
 80019bc:	b21a      	sxth	r2, r3
 80019be:	4b2c      	ldr	r3, [pc, #176]	@ (8001a70 <main+0x1ac>)
 80019c0:	801a      	strh	r2, [r3, #0]
	  leftIRvalue = readIR(IR_LEFT);
 80019c2:	2001      	movs	r0, #1
 80019c4:	f7ff fe88 	bl	80016d8 <readIR>
 80019c8:	4603      	mov	r3, r0
 80019ca:	b21a      	sxth	r2, r3
 80019cc:	4b29      	ldr	r3, [pc, #164]	@ (8001a74 <main+0x1b0>)
 80019ce:	801a      	strh	r2, [r3, #0]
	  rightIRvalue = readIR(IR_RIGHT);
 80019d0:	2002      	movs	r0, #2
 80019d2:	f7ff fe81 	bl	80016d8 <readIR>
 80019d6:	4603      	mov	r3, r0
 80019d8:	b21a      	sxth	r2, r3
 80019da:	4b27      	ldr	r3, [pc, #156]	@ (8001a78 <main+0x1b4>)
 80019dc:	801a      	strh	r2, [r3, #0]
	  forwardRightIRvalue = readIR(IR_FORWARD_RIGHT);
 80019de:	2003      	movs	r0, #3
 80019e0:	f7ff fe7a 	bl	80016d8 <readIR>
 80019e4:	4603      	mov	r3, r0
 80019e6:	b21a      	sxth	r2, r3
 80019e8:	4b24      	ldr	r3, [pc, #144]	@ (8001a7c <main+0x1b8>)
 80019ea:	801a      	strh	r2, [r3, #0]

	  if (B1 == GPIO_PIN_SET)
 80019ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001a68 <main+0x1a4>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d11d      	bne.n	8001a30 <main+0x16c>
	  {
		  setIRGoals(readIR(IR_FORWARD_LEFT), readIR(IR_FORWARD_RIGHT), readIR(IR_LEFT), readIR(IR_RIGHT));
 80019f4:	2000      	movs	r0, #0
 80019f6:	f7ff fe6f 	bl	80016d8 <readIR>
 80019fa:	4603      	mov	r3, r0
 80019fc:	b21c      	sxth	r4, r3
 80019fe:	2003      	movs	r0, #3
 8001a00:	f7ff fe6a 	bl	80016d8 <readIR>
 8001a04:	4603      	mov	r3, r0
 8001a06:	b21d      	sxth	r5, r3
 8001a08:	2001      	movs	r0, #1
 8001a0a:	f7ff fe65 	bl	80016d8 <readIR>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	b21e      	sxth	r6, r3
 8001a12:	2002      	movs	r0, #2
 8001a14:	f7ff fe60 	bl	80016d8 <readIR>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	b21b      	sxth	r3, r3
 8001a1c:	4632      	mov	r2, r6
 8001a1e:	4629      	mov	r1, r5
 8001a20:	4620      	mov	r0, r4
 8001a22:	f000 fbf5 	bl	8002210 <setIRGoals>
		  irOffset_Set = 1;
 8001a26:	4b16      	ldr	r3, [pc, #88]	@ (8001a80 <main+0x1bc>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	801a      	strh	r2, [r3, #0]
		  // loadMaze();
		  gyroInit();
 8001a2c:	f7ff fd42 	bl	80014b4 <gyroInit>
	  }

	  if (B2 == GPIO_PIN_RESET)
 8001a30:	4b0e      	ldr	r3, [pc, #56]	@ (8001a6c <main+0x1a8>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d188      	bne.n	800194a <main+0x86>
	  {
		  readGyro(&Gz);
 8001a38:	4812      	ldr	r0, [pc, #72]	@ (8001a84 <main+0x1c0>)
 8001a3a:	f7ff fdfd 	bl	8001638 <readGyro>
	  S1 = HAL_GPIO_ReadPin(Button1_GPIO_Port, Switch1_Pin);
 8001a3e:	e784      	b.n	800194a <main+0x86>
 8001a40:	2000027c 	.word	0x2000027c
 8001a44:	200002c4 	.word	0x200002c4
 8001a48:	20000234 	.word	0x20000234
 8001a4c:	40020000 	.word	0x40020000
 8001a50:	40020400 	.word	0x40020400
 8001a54:	2000030c 	.word	0x2000030c
 8001a58:	40020c00 	.word	0x40020c00
 8001a5c:	2000030d 	.word	0x2000030d
 8001a60:	2000030e 	.word	0x2000030e
 8001a64:	2000030f 	.word	0x2000030f
 8001a68:	20000310 	.word	0x20000310
 8001a6c:	20000311 	.word	0x20000311
 8001a70:	20000312 	.word	0x20000312
 8001a74:	20000314 	.word	0x20000314
 8001a78:	20000316 	.word	0x20000316
 8001a7c:	20000318 	.word	0x20000318
 8001a80:	2000031a 	.word	0x2000031a
 8001a84:	20000324 	.word	0x20000324

08001a88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b092      	sub	sp, #72	@ 0x48
 8001a8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a8e:	f107 0318 	add.w	r3, r7, #24
 8001a92:	2230      	movs	r2, #48	@ 0x30
 8001a94:	2100      	movs	r1, #0
 8001a96:	4618      	mov	r0, r3
 8001a98:	f005 fbb9 	bl	800720e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a9c:	1d3b      	adds	r3, r7, #4
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	605a      	str	r2, [r3, #4]
 8001aa4:	609a      	str	r2, [r3, #8]
 8001aa6:	60da      	str	r2, [r3, #12]
 8001aa8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ab2:	2310      	movs	r3, #16
 8001ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aba:	f107 0318 	add.w	r3, r7, #24
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f003 ffe4 	bl	8005a8c <HAL_RCC_OscConfig>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001aca:	f000 fae3 	bl	8002094 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ace:	230f      	movs	r3, #15
 8001ad0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ada:	2300      	movs	r3, #0
 8001adc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ae2:	1d3b      	adds	r3, r7, #4
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f004 fa24 	bl	8005f34 <HAL_RCC_ClockConfig>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001af2:	f000 facf 	bl	8002094 <Error_Handler>
  }
}
 8001af6:	bf00      	nop
 8001af8:	3748      	adds	r7, #72	@ 0x48
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
	...

08001b00 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b06:	463b      	mov	r3, r7
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001b12:	4b21      	ldr	r3, [pc, #132]	@ (8001b98 <MX_ADC1_Init+0x98>)
 8001b14:	4a21      	ldr	r2, [pc, #132]	@ (8001b9c <MX_ADC1_Init+0x9c>)
 8001b16:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001b18:	4b1f      	ldr	r3, [pc, #124]	@ (8001b98 <MX_ADC1_Init+0x98>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8001b98 <MX_ADC1_Init+0x98>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001b24:	4b1c      	ldr	r3, [pc, #112]	@ (8001b98 <MX_ADC1_Init+0x98>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b2a:	4b1b      	ldr	r3, [pc, #108]	@ (8001b98 <MX_ADC1_Init+0x98>)
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b30:	4b19      	ldr	r3, [pc, #100]	@ (8001b98 <MX_ADC1_Init+0x98>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b38:	4b17      	ldr	r3, [pc, #92]	@ (8001b98 <MX_ADC1_Init+0x98>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b3e:	4b16      	ldr	r3, [pc, #88]	@ (8001b98 <MX_ADC1_Init+0x98>)
 8001b40:	4a17      	ldr	r2, [pc, #92]	@ (8001ba0 <MX_ADC1_Init+0xa0>)
 8001b42:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b44:	4b14      	ldr	r3, [pc, #80]	@ (8001b98 <MX_ADC1_Init+0x98>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b4a:	4b13      	ldr	r3, [pc, #76]	@ (8001b98 <MX_ADC1_Init+0x98>)
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001b50:	4b11      	ldr	r3, [pc, #68]	@ (8001b98 <MX_ADC1_Init+0x98>)
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b58:	4b0f      	ldr	r3, [pc, #60]	@ (8001b98 <MX_ADC1_Init+0x98>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b5e:	480e      	ldr	r0, [pc, #56]	@ (8001b98 <MX_ADC1_Init+0x98>)
 8001b60:	f001 fb68 	bl	8003234 <HAL_ADC_Init>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001b6a:	f000 fa93 	bl	8002094 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001b6e:	2305      	movs	r3, #5
 8001b70:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b72:	2301      	movs	r3, #1
 8001b74:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b76:	2300      	movs	r3, #0
 8001b78:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b7a:	463b      	mov	r3, r7
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4806      	ldr	r0, [pc, #24]	@ (8001b98 <MX_ADC1_Init+0x98>)
 8001b80:	f001 fcde 	bl	8003540 <HAL_ADC_ConfigChannel>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001b8a:	f000 fa83 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b8e:	bf00      	nop
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20000138 	.word	0x20000138
 8001b9c:	40012000 	.word	0x40012000
 8001ba0:	0f000001 	.word	0x0f000001

08001ba4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ba8:	4b12      	ldr	r3, [pc, #72]	@ (8001bf4 <MX_I2C1_Init+0x50>)
 8001baa:	4a13      	ldr	r2, [pc, #76]	@ (8001bf8 <MX_I2C1_Init+0x54>)
 8001bac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001bae:	4b11      	ldr	r3, [pc, #68]	@ (8001bf4 <MX_I2C1_Init+0x50>)
 8001bb0:	4a12      	ldr	r2, [pc, #72]	@ (8001bfc <MX_I2C1_Init+0x58>)
 8001bb2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bb4:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf4 <MX_I2C1_Init+0x50>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001bba:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf4 <MX_I2C1_Init+0x50>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf4 <MX_I2C1_Init+0x50>)
 8001bc2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001bc6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf4 <MX_I2C1_Init+0x50>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001bce:	4b09      	ldr	r3, [pc, #36]	@ (8001bf4 <MX_I2C1_Init+0x50>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bd4:	4b07      	ldr	r3, [pc, #28]	@ (8001bf4 <MX_I2C1_Init+0x50>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bda:	4b06      	ldr	r3, [pc, #24]	@ (8001bf4 <MX_I2C1_Init+0x50>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001be0:	4804      	ldr	r0, [pc, #16]	@ (8001bf4 <MX_I2C1_Init+0x50>)
 8001be2:	f002 fe0d 	bl	8004800 <HAL_I2C_Init>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001bec:	f000 fa52 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bf0:	bf00      	nop
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	200001e0 	.word	0x200001e0
 8001bf8:	40005400 	.word	0x40005400
 8001bfc:	000186a0 	.word	0x000186a0

08001c00 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b092      	sub	sp, #72	@ 0x48
 8001c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c06:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	611a      	str	r2, [r3, #16]
 8001c20:	615a      	str	r2, [r3, #20]
 8001c22:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c24:	1d3b      	adds	r3, r7, #4
 8001c26:	2220      	movs	r2, #32
 8001c28:	2100      	movs	r1, #0
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f005 faef 	bl	800720e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c30:	4b45      	ldr	r3, [pc, #276]	@ (8001d48 <MX_TIM1_Init+0x148>)
 8001c32:	4a46      	ldr	r2, [pc, #280]	@ (8001d4c <MX_TIM1_Init+0x14c>)
 8001c34:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c36:	4b44      	ldr	r3, [pc, #272]	@ (8001d48 <MX_TIM1_Init+0x148>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c3c:	4b42      	ldr	r3, [pc, #264]	@ (8001d48 <MX_TIM1_Init+0x148>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3199;
 8001c42:	4b41      	ldr	r3, [pc, #260]	@ (8001d48 <MX_TIM1_Init+0x148>)
 8001c44:	f640 427f 	movw	r2, #3199	@ 0xc7f
 8001c48:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c4a:	4b3f      	ldr	r3, [pc, #252]	@ (8001d48 <MX_TIM1_Init+0x148>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c50:	4b3d      	ldr	r3, [pc, #244]	@ (8001d48 <MX_TIM1_Init+0x148>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c56:	4b3c      	ldr	r3, [pc, #240]	@ (8001d48 <MX_TIM1_Init+0x148>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c5c:	483a      	ldr	r0, [pc, #232]	@ (8001d48 <MX_TIM1_Init+0x148>)
 8001c5e:	f004 fb47 	bl	80062f0 <HAL_TIM_PWM_Init>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001c68:	f000 fa14 	bl	8002094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c70:	2300      	movs	r3, #0
 8001c72:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c74:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4833      	ldr	r0, [pc, #204]	@ (8001d48 <MX_TIM1_Init+0x148>)
 8001c7c:	f005 f9ea 	bl	8007054 <HAL_TIMEx_MasterConfigSynchronization>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001c86:	f000 fa05 	bl	8002094 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c8a:	2360      	movs	r3, #96	@ 0x60
 8001c8c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c92:	2300      	movs	r3, #0
 8001c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c96:	2300      	movs	r3, #0
 8001c98:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ca6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001caa:	2200      	movs	r2, #0
 8001cac:	4619      	mov	r1, r3
 8001cae:	4826      	ldr	r0, [pc, #152]	@ (8001d48 <MX_TIM1_Init+0x148>)
 8001cb0:	f004 fe72 	bl	8006998 <HAL_TIM_PWM_ConfigChannel>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001cba:	f000 f9eb 	bl	8002094 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cc2:	2204      	movs	r2, #4
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4820      	ldr	r0, [pc, #128]	@ (8001d48 <MX_TIM1_Init+0x148>)
 8001cc8:	f004 fe66 	bl	8006998 <HAL_TIM_PWM_ConfigChannel>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001cd2:	f000 f9df 	bl	8002094 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cda:	2208      	movs	r2, #8
 8001cdc:	4619      	mov	r1, r3
 8001cde:	481a      	ldr	r0, [pc, #104]	@ (8001d48 <MX_TIM1_Init+0x148>)
 8001ce0:	f004 fe5a 	bl	8006998 <HAL_TIM_PWM_ConfigChannel>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8001cea:	f000 f9d3 	bl	8002094 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001cee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cf2:	220c      	movs	r2, #12
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4814      	ldr	r0, [pc, #80]	@ (8001d48 <MX_TIM1_Init+0x148>)
 8001cf8:	f004 fe4e 	bl	8006998 <HAL_TIM_PWM_ConfigChannel>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8001d02:	f000 f9c7 	bl	8002094 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d06:	2300      	movs	r3, #0
 8001d08:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d16:	2300      	movs	r3, #0
 8001d18:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d1a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d1e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d20:	2300      	movs	r3, #0
 8001d22:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d24:	1d3b      	adds	r3, r7, #4
 8001d26:	4619      	mov	r1, r3
 8001d28:	4807      	ldr	r0, [pc, #28]	@ (8001d48 <MX_TIM1_Init+0x148>)
 8001d2a:	f005 fa0d 	bl	8007148 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001d34:	f000 f9ae 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d38:	4803      	ldr	r0, [pc, #12]	@ (8001d48 <MX_TIM1_Init+0x148>)
 8001d3a:	f001 f907 	bl	8002f4c <HAL_TIM_MspPostInit>

}
 8001d3e:	bf00      	nop
 8001d40:	3748      	adds	r7, #72	@ 0x48
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000234 	.word	0x20000234
 8001d4c:	40010000 	.word	0x40010000

08001d50 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08c      	sub	sp, #48	@ 0x30
 8001d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d56:	f107 030c 	add.w	r3, r7, #12
 8001d5a:	2224      	movs	r2, #36	@ 0x24
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f005 fa55 	bl	800720e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d64:	1d3b      	adds	r3, r7, #4
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d6c:	4b20      	ldr	r3, [pc, #128]	@ (8001df0 <MX_TIM3_Init+0xa0>)
 8001d6e:	4a21      	ldr	r2, [pc, #132]	@ (8001df4 <MX_TIM3_Init+0xa4>)
 8001d70:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d72:	4b1f      	ldr	r3, [pc, #124]	@ (8001df0 <MX_TIM3_Init+0xa0>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d78:	4b1d      	ldr	r3, [pc, #116]	@ (8001df0 <MX_TIM3_Init+0xa0>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001d7e:	4b1c      	ldr	r3, [pc, #112]	@ (8001df0 <MX_TIM3_Init+0xa0>)
 8001d80:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d84:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d86:	4b1a      	ldr	r3, [pc, #104]	@ (8001df0 <MX_TIM3_Init+0xa0>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d8c:	4b18      	ldr	r3, [pc, #96]	@ (8001df0 <MX_TIM3_Init+0xa0>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d92:	2303      	movs	r3, #3
 8001d94:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d96:	2300      	movs	r3, #0
 8001d98:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001da2:	2300      	movs	r3, #0
 8001da4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001da6:	2300      	movs	r3, #0
 8001da8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001daa:	2301      	movs	r3, #1
 8001dac:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001dae:	2300      	movs	r3, #0
 8001db0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001db2:	2300      	movs	r3, #0
 8001db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001db6:	f107 030c 	add.w	r3, r7, #12
 8001dba:	4619      	mov	r1, r3
 8001dbc:	480c      	ldr	r0, [pc, #48]	@ (8001df0 <MX_TIM3_Init+0xa0>)
 8001dbe:	f004 fbaf 	bl	8006520 <HAL_TIM_Encoder_Init>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001dc8:	f000 f964 	bl	8002094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001dd4:	1d3b      	adds	r3, r7, #4
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4805      	ldr	r0, [pc, #20]	@ (8001df0 <MX_TIM3_Init+0xa0>)
 8001dda:	f005 f93b 	bl	8007054 <HAL_TIMEx_MasterConfigSynchronization>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001de4:	f000 f956 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001de8:	bf00      	nop
 8001dea:	3730      	adds	r7, #48	@ 0x30
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	2000027c 	.word	0x2000027c
 8001df4:	40000400 	.word	0x40000400

08001df8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08c      	sub	sp, #48	@ 0x30
 8001dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001dfe:	f107 030c 	add.w	r3, r7, #12
 8001e02:	2224      	movs	r2, #36	@ 0x24
 8001e04:	2100      	movs	r1, #0
 8001e06:	4618      	mov	r0, r3
 8001e08:	f005 fa01 	bl	800720e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e0c:	1d3b      	adds	r3, r7, #4
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001e14:	4b22      	ldr	r3, [pc, #136]	@ (8001ea0 <MX_TIM8_Init+0xa8>)
 8001e16:	4a23      	ldr	r2, [pc, #140]	@ (8001ea4 <MX_TIM8_Init+0xac>)
 8001e18:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001e1a:	4b21      	ldr	r3, [pc, #132]	@ (8001ea0 <MX_TIM8_Init+0xa8>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e20:	4b1f      	ldr	r3, [pc, #124]	@ (8001ea0 <MX_TIM8_Init+0xa8>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001e26:	4b1e      	ldr	r3, [pc, #120]	@ (8001ea0 <MX_TIM8_Init+0xa8>)
 8001e28:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e2c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e2e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ea0 <MX_TIM8_Init+0xa8>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001e34:	4b1a      	ldr	r3, [pc, #104]	@ (8001ea0 <MX_TIM8_Init+0xa8>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e3a:	4b19      	ldr	r3, [pc, #100]	@ (8001ea0 <MX_TIM8_Init+0xa8>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e40:	2303      	movs	r3, #3
 8001e42:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e44:	2300      	movs	r3, #0
 8001e46:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e50:	2300      	movs	r3, #0
 8001e52:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e54:	2300      	movs	r3, #0
 8001e56:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001e60:	2300      	movs	r3, #0
 8001e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001e64:	f107 030c 	add.w	r3, r7, #12
 8001e68:	4619      	mov	r1, r3
 8001e6a:	480d      	ldr	r0, [pc, #52]	@ (8001ea0 <MX_TIM8_Init+0xa8>)
 8001e6c:	f004 fb58 	bl	8006520 <HAL_TIM_Encoder_Init>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001e76:	f000 f90d 	bl	8002094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001e82:	1d3b      	adds	r3, r7, #4
 8001e84:	4619      	mov	r1, r3
 8001e86:	4806      	ldr	r0, [pc, #24]	@ (8001ea0 <MX_TIM8_Init+0xa8>)
 8001e88:	f005 f8e4 	bl	8007054 <HAL_TIMEx_MasterConfigSynchronization>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8001e92:	f000 f8ff 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001e96:	bf00      	nop
 8001e98:	3730      	adds	r7, #48	@ 0x30
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	200002c4 	.word	0x200002c4
 8001ea4:	40010400 	.word	0x40010400

08001ea8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	607b      	str	r3, [r7, #4]
 8001eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee4 <MX_DMA_Init+0x3c>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb6:	4a0b      	ldr	r2, [pc, #44]	@ (8001ee4 <MX_DMA_Init+0x3c>)
 8001eb8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ebc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ebe:	4b09      	ldr	r3, [pc, #36]	@ (8001ee4 <MX_DMA_Init+0x3c>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ec6:	607b      	str	r3, [r7, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2100      	movs	r1, #0
 8001ece:	2038      	movs	r0, #56	@ 0x38
 8001ed0:	f001 feb5 	bl	8003c3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001ed4:	2038      	movs	r0, #56	@ 0x38
 8001ed6:	f001 fece 	bl	8003c76 <HAL_NVIC_EnableIRQ>

}
 8001eda:	bf00      	nop
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40023800 	.word	0x40023800

08001ee8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b08a      	sub	sp, #40	@ 0x28
 8001eec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eee:	f107 0314 	add.w	r3, r7, #20
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	605a      	str	r2, [r3, #4]
 8001ef8:	609a      	str	r2, [r3, #8]
 8001efa:	60da      	str	r2, [r3, #12]
 8001efc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	613b      	str	r3, [r7, #16]
 8001f02:	4b55      	ldr	r3, [pc, #340]	@ (8002058 <MX_GPIO_Init+0x170>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f06:	4a54      	ldr	r2, [pc, #336]	@ (8002058 <MX_GPIO_Init+0x170>)
 8001f08:	f043 0304 	orr.w	r3, r3, #4
 8001f0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f0e:	4b52      	ldr	r3, [pc, #328]	@ (8002058 <MX_GPIO_Init+0x170>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f12:	f003 0304 	and.w	r3, r3, #4
 8001f16:	613b      	str	r3, [r7, #16]
 8001f18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	4b4e      	ldr	r3, [pc, #312]	@ (8002058 <MX_GPIO_Init+0x170>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f22:	4a4d      	ldr	r2, [pc, #308]	@ (8002058 <MX_GPIO_Init+0x170>)
 8001f24:	f043 0301 	orr.w	r3, r3, #1
 8001f28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f2a:	4b4b      	ldr	r3, [pc, #300]	@ (8002058 <MX_GPIO_Init+0x170>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	60bb      	str	r3, [r7, #8]
 8001f3a:	4b47      	ldr	r3, [pc, #284]	@ (8002058 <MX_GPIO_Init+0x170>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3e:	4a46      	ldr	r2, [pc, #280]	@ (8002058 <MX_GPIO_Init+0x170>)
 8001f40:	f043 0302 	orr.w	r3, r3, #2
 8001f44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f46:	4b44      	ldr	r3, [pc, #272]	@ (8002058 <MX_GPIO_Init+0x170>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	60bb      	str	r3, [r7, #8]
 8001f50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	607b      	str	r3, [r7, #4]
 8001f56:	4b40      	ldr	r3, [pc, #256]	@ (8002058 <MX_GPIO_Init+0x170>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5a:	4a3f      	ldr	r2, [pc, #252]	@ (8002058 <MX_GPIO_Init+0x170>)
 8001f5c:	f043 0308 	orr.w	r3, r3, #8
 8001f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f62:	4b3d      	ldr	r3, [pc, #244]	@ (8002058 <MX_GPIO_Init+0x170>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f66:	f003 0308 	and.w	r3, r3, #8
 8001f6a:	607b      	str	r3, [r7, #4]
 8001f6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, G_LED_Pin|Y_LED_Pin|R_LED_Pin, GPIO_PIN_RESET);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001f74:	4839      	ldr	r0, [pc, #228]	@ (800205c <MX_GPIO_Init+0x174>)
 8001f76:	f002 fc2a 	bl	80047ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RightEmitter_Pin|LeftEmitter_Pin|ForwardLeftEmitter_Pin, GPIO_PIN_RESET);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	2194      	movs	r1, #148	@ 0x94
 8001f7e:	4838      	ldr	r0, [pc, #224]	@ (8002060 <MX_GPIO_Init+0x178>)
 8001f80:	f002 fc25 	bl	80047ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ForwardRightEmitter_GPIO_Port, ForwardRightEmitter_Pin, GPIO_PIN_RESET);
 8001f84:	2200      	movs	r2, #0
 8001f86:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f8a:	4836      	ldr	r0, [pc, #216]	@ (8002064 <MX_GPIO_Init+0x17c>)
 8001f8c:	f002 fc1f 	bl	80047ce <HAL_GPIO_WritePin>

  /*Configure GPIO pins : G_LED_Pin Y_LED_Pin R_LED_Pin */
  GPIO_InitStruct.Pin = G_LED_Pin|Y_LED_Pin|R_LED_Pin;
 8001f90:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001f94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f96:	2301      	movs	r3, #1
 8001f98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fa2:	f107 0314 	add.w	r3, r7, #20
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	482c      	ldr	r0, [pc, #176]	@ (800205c <MX_GPIO_Init+0x174>)
 8001faa:	f002 fa5b 	bl	8004464 <HAL_GPIO_Init>

  /*Configure GPIO pins : RightEmitter_Pin LeftEmitter_Pin ForwardLeftEmitter_Pin */
  GPIO_InitStruct.Pin = RightEmitter_Pin|LeftEmitter_Pin|ForwardLeftEmitter_Pin;
 8001fae:	2394      	movs	r3, #148	@ 0x94
 8001fb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fbe:	f107 0314 	add.w	r3, r7, #20
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4826      	ldr	r0, [pc, #152]	@ (8002060 <MX_GPIO_Init+0x178>)
 8001fc6:	f002 fa4d 	bl	8004464 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button2_Pin Button1_Pin Switch4_Pin */
  GPIO_InitStruct.Pin = Button2_Pin|Button1_Pin|Switch4_Pin;
 8001fca:	f44f 4341 	mov.w	r3, #49408	@ 0xc100
 8001fce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fd8:	f107 0314 	add.w	r3, r7, #20
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4821      	ldr	r0, [pc, #132]	@ (8002064 <MX_GPIO_Init+0x17c>)
 8001fe0:	f002 fa40 	bl	8004464 <HAL_GPIO_Init>

  /*Configure GPIO pin : Switch3_Pin */
  GPIO_InitStruct.Pin = Switch3_Pin;
 8001fe4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001fe8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fea:	2300      	movs	r3, #0
 8001fec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Switch3_GPIO_Port, &GPIO_InitStruct);
 8001ff2:	f107 0314 	add.w	r3, r7, #20
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4819      	ldr	r0, [pc, #100]	@ (8002060 <MX_GPIO_Init+0x178>)
 8001ffa:	f002 fa33 	bl	8004464 <HAL_GPIO_Init>

  /*Configure GPIO pin : Switch1_Pin */
  GPIO_InitStruct.Pin = Switch1_Pin;
 8001ffe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002002:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002004:	2300      	movs	r3, #0
 8002006:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	2300      	movs	r3, #0
 800200a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Switch1_GPIO_Port, &GPIO_InitStruct);
 800200c:	f107 0314 	add.w	r3, r7, #20
 8002010:	4619      	mov	r1, r3
 8002012:	4812      	ldr	r0, [pc, #72]	@ (800205c <MX_GPIO_Init+0x174>)
 8002014:	f002 fa26 	bl	8004464 <HAL_GPIO_Init>

  /*Configure GPIO pin : Switch2_Pin */
  GPIO_InitStruct.Pin = Switch2_Pin;
 8002018:	2304      	movs	r3, #4
 800201a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800201c:	2300      	movs	r3, #0
 800201e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Switch2_GPIO_Port, &GPIO_InitStruct);
 8002024:	f107 0314 	add.w	r3, r7, #20
 8002028:	4619      	mov	r1, r3
 800202a:	480f      	ldr	r0, [pc, #60]	@ (8002068 <MX_GPIO_Init+0x180>)
 800202c:	f002 fa1a 	bl	8004464 <HAL_GPIO_Init>

  /*Configure GPIO pin : ForwardRightEmitter_Pin */
  GPIO_InitStruct.Pin = ForwardRightEmitter_Pin;
 8002030:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002034:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002036:	2301      	movs	r3, #1
 8002038:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203e:	2300      	movs	r3, #0
 8002040:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ForwardRightEmitter_GPIO_Port, &GPIO_InitStruct);
 8002042:	f107 0314 	add.w	r3, r7, #20
 8002046:	4619      	mov	r1, r3
 8002048:	4806      	ldr	r0, [pc, #24]	@ (8002064 <MX_GPIO_Init+0x17c>)
 800204a:	f002 fa0b 	bl	8004464 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800204e:	bf00      	nop
 8002050:	3728      	adds	r7, #40	@ 0x28
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40023800 	.word	0x40023800
 800205c:	40020800 	.word	0x40020800
 8002060:	40020000 	.word	0x40020000
 8002064:	40020400 	.word	0x40020400
 8002068:	40020c00 	.word	0x40020c00

0800206c <Get_HADC1_Ptr>:

/* USER CODE BEGIN 4 */
ADC_HandleTypeDef* Get_HADC1_Ptr(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
	return &hadc1;
 8002070:	4b02      	ldr	r3, [pc, #8]	@ (800207c <Get_HADC1_Ptr+0x10>)
}
 8002072:	4618      	mov	r0, r3
 8002074:	46bd      	mov	sp, r7
 8002076:	bc80      	pop	{r7}
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	20000138 	.word	0x20000138

08002080 <Get_I2C1_Ptr>:

I2C_HandleTypeDef* Get_I2C1_Ptr(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
	return &hi2c1;
 8002084:	4b02      	ldr	r3, [pc, #8]	@ (8002090 <Get_I2C1_Ptr+0x10>)
}
 8002086:	4618      	mov	r0, r3
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	200001e0 	.word	0x200001e0

08002094 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002098:	b672      	cpsid	i
}
 800209a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800209c:	bf00      	nop
 800209e:	e7fd      	b.n	800209c <Error_Handler+0x8>

080020a0 <limitPWM>:
//#include "pid.h"
//
//extern float velocity_left;
//extern float velocity_right;

float limitPWM(float pwm) {
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
	if (pwm > PWM_MAX)
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f7fe f9f1 	bl	8000490 <__aeabi_f2d>
 80020ae:	a30e      	add	r3, pc, #56	@ (adr r3, 80020e8 <limitPWM+0x48>)
 80020b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b4:	f7fe fcd4 	bl	8000a60 <__aeabi_dcmpgt>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <limitPWM+0x22>
		return PWM_MAX;
 80020be:	4b0e      	ldr	r3, [pc, #56]	@ (80020f8 <limitPWM+0x58>)
 80020c0:	e00d      	b.n	80020de <limitPWM+0x3e>
	else if (pwm < -PWM_MAX)
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f7fe f9e4 	bl	8000490 <__aeabi_f2d>
 80020c8:	a309      	add	r3, pc, #36	@ (adr r3, 80020f0 <limitPWM+0x50>)
 80020ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ce:	f7fe fca9 	bl	8000a24 <__aeabi_dcmplt>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <limitPWM+0x3c>
		return -PWM_MAX;
 80020d8:	4b08      	ldr	r3, [pc, #32]	@ (80020fc <limitPWM+0x5c>)
 80020da:	e000      	b.n	80020de <limitPWM+0x3e>
	else
		return pwm;
 80020dc:	687b      	ldr	r3, [r7, #4]
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	66666666 	.word	0x66666666
 80020ec:	3fee6666 	.word	0x3fee6666
 80020f0:	66666666 	.word	0x66666666
 80020f4:	bfee6666 	.word	0xbfee6666
 80020f8:	3f733333 	.word	0x3f733333
 80020fc:	bf733333 	.word	0xbf733333

08002100 <setMotorLPWM>:

void setMotorLPWM(float pwm) {
 8002100:	b590      	push	{r4, r7, lr}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
	if (pwm >= 0)
 8002108:	f04f 0100 	mov.w	r1, #0
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f7fe ffc1 	bl	8001094 <__aeabi_fcmpge>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d012      	beq.n	800213e <setMotorLPWM+0x3e>
	{
		TIM1->CCR1 = 0;
 8002118:	4b15      	ldr	r3, [pc, #84]	@ (8002170 <setMotorLPWM+0x70>)
 800211a:	2200      	movs	r2, #0
 800211c:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM1->CCR2 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7ff ffbe 	bl	80020a0 <limitPWM>
 8002124:	4603      	mov	r3, r0
 8002126:	4913      	ldr	r1, [pc, #76]	@ (8002174 <setMotorLPWM+0x74>)
 8002128:	4618      	mov	r0, r3
 800212a:	f7fe fe01 	bl	8000d30 <__aeabi_fmul>
 800212e:	4603      	mov	r3, r0
 8002130:	4c0f      	ldr	r4, [pc, #60]	@ (8002170 <setMotorLPWM+0x70>)
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe ffc2 	bl	80010bc <__aeabi_f2uiz>
 8002138:	4603      	mov	r3, r0
 800213a:	63a3      	str	r3, [r4, #56]	@ 0x38
	{
		TIM1->CCR2 = 0;
		TIM1->CCR1 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
	}

}
 800213c:	e013      	b.n	8002166 <setMotorLPWM+0x66>
		TIM1->CCR2 = 0;
 800213e:	4b0c      	ldr	r3, [pc, #48]	@ (8002170 <setMotorLPWM+0x70>)
 8002140:	2200      	movs	r2, #0
 8002142:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM1->CCR1 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7ff ffab 	bl	80020a0 <limitPWM>
 800214a:	4603      	mov	r3, r0
 800214c:	4909      	ldr	r1, [pc, #36]	@ (8002174 <setMotorLPWM+0x74>)
 800214e:	4618      	mov	r0, r3
 8002150:	f7fe fdee 	bl	8000d30 <__aeabi_fmul>
 8002154:	4603      	mov	r3, r0
 8002156:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800215a:	4c05      	ldr	r4, [pc, #20]	@ (8002170 <setMotorLPWM+0x70>)
 800215c:	4618      	mov	r0, r3
 800215e:	f7fe ffad 	bl	80010bc <__aeabi_f2uiz>
 8002162:	4603      	mov	r3, r0
 8002164:	6363      	str	r3, [r4, #52]	@ 0x34
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	bd90      	pop	{r4, r7, pc}
 800216e:	bf00      	nop
 8002170:	40010000 	.word	0x40010000
 8002174:	4547f000 	.word	0x4547f000

08002178 <setMotorRPWM>:

void setMotorRPWM(float pwm) {
 8002178:	b590      	push	{r4, r7, lr}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
	if (pwm >= 0)
 8002180:	f04f 0100 	mov.w	r1, #0
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f7fe ff85 	bl	8001094 <__aeabi_fcmpge>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d012      	beq.n	80021b6 <setMotorRPWM+0x3e>
	{
		TIM1->CCR4 = 0;
 8002190:	4b15      	ldr	r3, [pc, #84]	@ (80021e8 <setMotorRPWM+0x70>)
 8002192:	2200      	movs	r2, #0
 8002194:	641a      	str	r2, [r3, #64]	@ 0x40
		TIM1->CCR3 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f7ff ff82 	bl	80020a0 <limitPWM>
 800219c:	4603      	mov	r3, r0
 800219e:	4913      	ldr	r1, [pc, #76]	@ (80021ec <setMotorRPWM+0x74>)
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7fe fdc5 	bl	8000d30 <__aeabi_fmul>
 80021a6:	4603      	mov	r3, r0
 80021a8:	4c0f      	ldr	r4, [pc, #60]	@ (80021e8 <setMotorRPWM+0x70>)
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7fe ff86 	bl	80010bc <__aeabi_f2uiz>
 80021b0:	4603      	mov	r3, r0
 80021b2:	63e3      	str	r3, [r4, #60]	@ 0x3c
	else
	{
		TIM1->CCR3 = 0;
		TIM1->CCR4 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
	}
}
 80021b4:	e013      	b.n	80021de <setMotorRPWM+0x66>
		TIM1->CCR3 = 0;
 80021b6:	4b0c      	ldr	r3, [pc, #48]	@ (80021e8 <setMotorRPWM+0x70>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM1->CCR4 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f7ff ff6f 	bl	80020a0 <limitPWM>
 80021c2:	4603      	mov	r3, r0
 80021c4:	4909      	ldr	r1, [pc, #36]	@ (80021ec <setMotorRPWM+0x74>)
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7fe fdb2 	bl	8000d30 <__aeabi_fmul>
 80021cc:	4603      	mov	r3, r0
 80021ce:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80021d2:	4c05      	ldr	r4, [pc, #20]	@ (80021e8 <setMotorRPWM+0x70>)
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7fe ff71 	bl	80010bc <__aeabi_f2uiz>
 80021da:	4603      	mov	r3, r0
 80021dc:	6423      	str	r3, [r4, #64]	@ 0x40
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd90      	pop	{r4, r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40010000 	.word	0x40010000
 80021ec:	4547f000 	.word	0x4547f000

080021f0 <setState>:
float right_PWM_value = 0;
int goal_reached_timer = 0;

void setPIDGoalD(int16_t distance) { goal_distance = distance; }
void setPIDGoalA(int16_t angle) { goal_angle = angle; }
void setState(STATE curr_state) { state = curr_state; }
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	71fb      	strb	r3, [r7, #7]
 80021fa:	4a04      	ldr	r2, [pc, #16]	@ (800220c <setState+0x1c>)
 80021fc:	79fb      	ldrb	r3, [r7, #7]
 80021fe:	7013      	strb	r3, [r2, #0]
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	bc80      	pop	{r7}
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	20000404 	.word	0x20000404

08002210 <setIRGoals>:

void setIRGoals(int16_t frontLeftGoal, int16_t frontRightGoal, int16_t leftGoal, int16_t rightGoal) {
 8002210:	b490      	push	{r4, r7}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	4604      	mov	r4, r0
 8002218:	4608      	mov	r0, r1
 800221a:	4611      	mov	r1, r2
 800221c:	461a      	mov	r2, r3
 800221e:	4623      	mov	r3, r4
 8002220:	80fb      	strh	r3, [r7, #6]
 8002222:	4603      	mov	r3, r0
 8002224:	80bb      	strh	r3, [r7, #4]
 8002226:	460b      	mov	r3, r1
 8002228:	807b      	strh	r3, [r7, #2]
 800222a:	4613      	mov	r3, r2
 800222c:	803b      	strh	r3, [r7, #0]

	IRAngleOffset = leftGoal - rightGoal;
 800222e:	887a      	ldrh	r2, [r7, #2]
 8002230:	883b      	ldrh	r3, [r7, #0]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	b29b      	uxth	r3, r3
 8002236:	b21a      	sxth	r2, r3
 8002238:	4b09      	ldr	r3, [pc, #36]	@ (8002260 <setIRGoals+0x50>)
 800223a:	801a      	strh	r2, [r3, #0]
	goal_forward_left = frontLeftGoal;
 800223c:	4a09      	ldr	r2, [pc, #36]	@ (8002264 <setIRGoals+0x54>)
 800223e:	88fb      	ldrh	r3, [r7, #6]
 8002240:	8013      	strh	r3, [r2, #0]
	goal_forward_right = frontRightGoal;
 8002242:	4a09      	ldr	r2, [pc, #36]	@ (8002268 <setIRGoals+0x58>)
 8002244:	88bb      	ldrh	r3, [r7, #4]
 8002246:	8013      	strh	r3, [r2, #0]
	goal_left = leftGoal;
 8002248:	4a08      	ldr	r2, [pc, #32]	@ (800226c <setIRGoals+0x5c>)
 800224a:	887b      	ldrh	r3, [r7, #2]
 800224c:	8013      	strh	r3, [r2, #0]
	goal_right = rightGoal;
 800224e:	4a08      	ldr	r2, [pc, #32]	@ (8002270 <setIRGoals+0x60>)
 8002250:	883b      	ldrh	r3, [r7, #0]
 8002252:	8013      	strh	r3, [r2, #0]

}
 8002254:	bf00      	nop
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bc90      	pop	{r4, r7}
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	20000330 	.word	0x20000330
 8002264:	2000031c 	.word	0x2000031c
 8002268:	2000031e 	.word	0x2000031e
 800226c:	20000320 	.word	0x20000320
 8002270:	20000322 	.word	0x20000322

08002274 <accelerateLeftPWM>:
	}
	else
		IRadjustment = 0;
}

float accelerateLeftPWM() {
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
//	if (derivative > velocity_left * 34.0)
//		return left_PWM_value - xacceleration;
//
//	return left_PWM_value;

}
 8002278:	bf00      	nop
 800227a:	4618      	mov	r0, r3
 800227c:	46bd      	mov	sp, r7
 800227e:	bc80      	pop	{r7}
 8002280:	4770      	bx	lr

08002282 <accelerateRightPWM>:

float accelerateRightPWM() {
 8002282:	b480      	push	{r7}
 8002284:	af00      	add	r7, sp, #0
//	if (derivative > velocity_right * 34.0)
//		return right_PWM_value - xacceleration;
//
//	return right_PWM_value;

}
 8002286:	bf00      	nop
 8002288:	4618      	mov	r0, r3
 800228a:	46bd      	mov	sp, r7
 800228c:	bc80      	pop	{r7}
 800228e:	4770      	bx	lr

08002290 <PDController>:

void PDController() {
 8002290:	b5b0      	push	{r4, r5, r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0

//////////////////////////	CALCULATE DISTANCE AND ANGLE CORRECTION /////////////////////////

	if (state == TURNING)
 8002296:	4ba4      	ldr	r3, [pc, #656]	@ (8002528 <PDController+0x298>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	2b02      	cmp	r3, #2
 800229c:	d103      	bne.n	80022a6 <PDController+0x16>
		IRadjustment = 0;
 800229e:	4ba3      	ldr	r3, [pc, #652]	@ (800252c <PDController+0x29c>)
 80022a0:	f04f 0200 	mov.w	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]

	float adjustedAngle = goal_angle + IRadjustment;
 80022a6:	4ba2      	ldr	r3, [pc, #648]	@ (8002530 <PDController+0x2a0>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4aa0      	ldr	r2, [pc, #640]	@ (800252c <PDController+0x29c>)
 80022ac:	6812      	ldr	r2, [r2, #0]
 80022ae:	4611      	mov	r1, r2
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7fe fc35 	bl	8000b20 <__addsf3>
 80022b6:	4603      	mov	r3, r0
 80022b8:	607b      	str	r3, [r7, #4]

	angleError = adjustedAngle - (getLeftEncoderCounts() - getRightEncoderCounts());
 80022ba:	f7ff f8dd 	bl	8001478 <getLeftEncoderCounts>
 80022be:	4603      	mov	r3, r0
 80022c0:	461c      	mov	r4, r3
 80022c2:	f7ff f8cb 	bl	800145c <getRightEncoderCounts>
 80022c6:	4603      	mov	r3, r0
 80022c8:	1ae3      	subs	r3, r4, r3
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7fe fcdc 	bl	8000c88 <__aeabi_i2f>
 80022d0:	4603      	mov	r3, r0
 80022d2:	4619      	mov	r1, r3
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f7fe fc21 	bl	8000b1c <__aeabi_fsub>
 80022da:	4603      	mov	r3, r0
 80022dc:	461a      	mov	r2, r3
 80022de:	4b95      	ldr	r3, [pc, #596]	@ (8002534 <PDController+0x2a4>)
 80022e0:	601a      	str	r2, [r3, #0]
	angleCorrection = kPw * angleError + kDw * (angleError - oldAngleError);
 80022e2:	4a95      	ldr	r2, [pc, #596]	@ (8002538 <PDController+0x2a8>)
 80022e4:	4b93      	ldr	r3, [pc, #588]	@ (8002534 <PDController+0x2a4>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4619      	mov	r1, r3
 80022ea:	4610      	mov	r0, r2
 80022ec:	f7fe fd20 	bl	8000d30 <__aeabi_fmul>
 80022f0:	4603      	mov	r3, r0
 80022f2:	461c      	mov	r4, r3
 80022f4:	4b8f      	ldr	r3, [pc, #572]	@ (8002534 <PDController+0x2a4>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a90      	ldr	r2, [pc, #576]	@ (800253c <PDController+0x2ac>)
 80022fa:	6812      	ldr	r2, [r2, #0]
 80022fc:	4611      	mov	r1, r2
 80022fe:	4618      	mov	r0, r3
 8002300:	f7fe fc0c 	bl	8000b1c <__aeabi_fsub>
 8002304:	4603      	mov	r3, r0
 8002306:	461a      	mov	r2, r3
 8002308:	4b8d      	ldr	r3, [pc, #564]	@ (8002540 <PDController+0x2b0>)
 800230a:	4619      	mov	r1, r3
 800230c:	4610      	mov	r0, r2
 800230e:	f7fe fd0f 	bl	8000d30 <__aeabi_fmul>
 8002312:	4603      	mov	r3, r0
 8002314:	4619      	mov	r1, r3
 8002316:	4620      	mov	r0, r4
 8002318:	f7fe fc02 	bl	8000b20 <__addsf3>
 800231c:	4603      	mov	r3, r0
 800231e:	461a      	mov	r2, r3
 8002320:	4b88      	ldr	r3, [pc, #544]	@ (8002544 <PDController+0x2b4>)
 8002322:	601a      	str	r2, [r3, #0]

	distanceError = goal_distance - ((getLeftEncoderCounts() + getRightEncoderCounts())/2);
 8002324:	4b88      	ldr	r3, [pc, #544]	@ (8002548 <PDController+0x2b8>)
 8002326:	681c      	ldr	r4, [r3, #0]
 8002328:	f7ff f8a6 	bl	8001478 <getLeftEncoderCounts>
 800232c:	4603      	mov	r3, r0
 800232e:	461d      	mov	r5, r3
 8002330:	f7ff f894 	bl	800145c <getRightEncoderCounts>
 8002334:	4603      	mov	r3, r0
 8002336:	442b      	add	r3, r5
 8002338:	0fda      	lsrs	r2, r3, #31
 800233a:	4413      	add	r3, r2
 800233c:	105b      	asrs	r3, r3, #1
 800233e:	4618      	mov	r0, r3
 8002340:	f7fe fca2 	bl	8000c88 <__aeabi_i2f>
 8002344:	4603      	mov	r3, r0
 8002346:	4619      	mov	r1, r3
 8002348:	4620      	mov	r0, r4
 800234a:	f7fe fbe7 	bl	8000b1c <__aeabi_fsub>
 800234e:	4603      	mov	r3, r0
 8002350:	461a      	mov	r2, r3
 8002352:	4b7e      	ldr	r3, [pc, #504]	@ (800254c <PDController+0x2bc>)
 8002354:	601a      	str	r2, [r3, #0]

	distanceCorrection = kPx * distanceError + kDx * (distanceError - oldDistanceError);
 8002356:	4a7e      	ldr	r2, [pc, #504]	@ (8002550 <PDController+0x2c0>)
 8002358:	4b7c      	ldr	r3, [pc, #496]	@ (800254c <PDController+0x2bc>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4619      	mov	r1, r3
 800235e:	4610      	mov	r0, r2
 8002360:	f7fe fce6 	bl	8000d30 <__aeabi_fmul>
 8002364:	4603      	mov	r3, r0
 8002366:	461c      	mov	r4, r3
 8002368:	4b78      	ldr	r3, [pc, #480]	@ (800254c <PDController+0x2bc>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a79      	ldr	r2, [pc, #484]	@ (8002554 <PDController+0x2c4>)
 800236e:	6812      	ldr	r2, [r2, #0]
 8002370:	4611      	mov	r1, r2
 8002372:	4618      	mov	r0, r3
 8002374:	f7fe fbd2 	bl	8000b1c <__aeabi_fsub>
 8002378:	4603      	mov	r3, r0
 800237a:	461a      	mov	r2, r3
 800237c:	f04f 0300 	mov.w	r3, #0
 8002380:	4619      	mov	r1, r3
 8002382:	4610      	mov	r0, r2
 8002384:	f7fe fcd4 	bl	8000d30 <__aeabi_fmul>
 8002388:	4603      	mov	r3, r0
 800238a:	4619      	mov	r1, r3
 800238c:	4620      	mov	r0, r4
 800238e:	f7fe fbc7 	bl	8000b20 <__addsf3>
 8002392:	4603      	mov	r3, r0
 8002394:	461a      	mov	r2, r3
 8002396:	4b70      	ldr	r3, [pc, #448]	@ (8002558 <PDController+0x2c8>)
 8002398:	601a      	str	r2, [r3, #0]

	left_distance = getLeftEncoderCounts();
 800239a:	f7ff f86d 	bl	8001478 <getLeftEncoderCounts>
 800239e:	4603      	mov	r3, r0
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7fe fc71 	bl	8000c88 <__aeabi_i2f>
 80023a6:	4603      	mov	r3, r0
 80023a8:	4a6c      	ldr	r2, [pc, #432]	@ (800255c <PDController+0x2cc>)
 80023aa:	6013      	str	r3, [r2, #0]
	right_distance = getRightEncoderCounts();
 80023ac:	f7ff f856 	bl	800145c <getRightEncoderCounts>
 80023b0:	4603      	mov	r3, r0
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fe fc68 	bl	8000c88 <__aeabi_i2f>
 80023b8:	4603      	mov	r3, r0
 80023ba:	4a69      	ldr	r2, [pc, #420]	@ (8002560 <PDController+0x2d0>)
 80023bc:	6013      	str	r3, [r2, #0]

	if (state == MOVING && fabs(distanceError) > 100)
 80023be:	4b5a      	ldr	r3, [pc, #360]	@ (8002528 <PDController+0x298>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d13f      	bne.n	8002446 <PDController+0x1b6>
 80023c6:	4b61      	ldr	r3, [pc, #388]	@ (800254c <PDController+0x2bc>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80023ce:	4965      	ldr	r1, [pc, #404]	@ (8002564 <PDController+0x2d4>)
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7fe fe69 	bl	80010a8 <__aeabi_fcmpgt>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d034      	beq.n	8002446 <PDController+0x1b6>
	{		// If we're going straight and not at the end, apply acceleration
		if (fabs(distanceCorrection - oldDistanceCorrection) > xacceleration)
 80023dc:	4b5e      	ldr	r3, [pc, #376]	@ (8002558 <PDController+0x2c8>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a61      	ldr	r2, [pc, #388]	@ (8002568 <PDController+0x2d8>)
 80023e2:	6812      	ldr	r2, [r2, #0]
 80023e4:	4611      	mov	r1, r2
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fe fb98 	bl	8000b1c <__aeabi_fsub>
 80023ec:	4603      	mov	r3, r0
 80023ee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80023f2:	4a57      	ldr	r2, [pc, #348]	@ (8002550 <PDController+0x2c0>)
 80023f4:	4611      	mov	r1, r2
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7fe fe56 	bl	80010a8 <__aeabi_fcmpgt>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d021      	beq.n	8002446 <PDController+0x1b6>
		{
			distanceCorrection = oldDistanceCorrection + (xacceleration * sign(distanceCorrection - oldDistanceCorrection));
 8002402:	4b55      	ldr	r3, [pc, #340]	@ (8002558 <PDController+0x2c8>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a58      	ldr	r2, [pc, #352]	@ (8002568 <PDController+0x2d8>)
 8002408:	6812      	ldr	r2, [r2, #0]
 800240a:	4611      	mov	r1, r2
 800240c:	4618      	mov	r0, r3
 800240e:	f7fe fb85 	bl	8000b1c <__aeabi_fsub>
 8002412:	4603      	mov	r3, r0
 8002414:	4618      	mov	r0, r3
 8002416:	f000 fe57 	bl	80030c8 <sign>
 800241a:	4603      	mov	r3, r0
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe fc33 	bl	8000c88 <__aeabi_i2f>
 8002422:	4603      	mov	r3, r0
 8002424:	4a4a      	ldr	r2, [pc, #296]	@ (8002550 <PDController+0x2c0>)
 8002426:	4611      	mov	r1, r2
 8002428:	4618      	mov	r0, r3
 800242a:	f7fe fc81 	bl	8000d30 <__aeabi_fmul>
 800242e:	4603      	mov	r3, r0
 8002430:	461a      	mov	r2, r3
 8002432:	4b4d      	ldr	r3, [pc, #308]	@ (8002568 <PDController+0x2d8>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4619      	mov	r1, r3
 8002438:	4610      	mov	r0, r2
 800243a:	f7fe fb71 	bl	8000b20 <__addsf3>
 800243e:	4603      	mov	r3, r0
 8002440:	461a      	mov	r2, r3
 8002442:	4b45      	ldr	r3, [pc, #276]	@ (8002558 <PDController+0x2c8>)
 8002444:	601a      	str	r2, [r3, #0]
		}
	}

////////////////////// ROUND DISTANCE OR ANGLE CORRECTION	//////////////////////////

	switch(state) {		// Apply lower limits of PWM for various states
 8002446:	4b38      	ldr	r3, [pc, #224]	@ (8002528 <PDController+0x298>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	3b01      	subs	r3, #1
 800244c:	2b04      	cmp	r3, #4
 800244e:	f200 80bf 	bhi.w	80025d0 <PDController+0x340>
 8002452:	a201      	add	r2, pc, #4	@ (adr r2, 8002458 <PDController+0x1c8>)
 8002454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002458:	08002495 	.word	0x08002495
 800245c:	080024f7 	.word	0x080024f7
 8002460:	0800246d 	.word	0x0800246d
 8002464:	080025d1 	.word	0x080025d1
 8002468:	080025b3 	.word	0x080025b3
		case EXPLORING:
			distanceCorrection = (accelerateLeftPWM() + accelerateRightPWM())/2;
 800246c:	f7ff ff02 	bl	8002274 <accelerateLeftPWM>
 8002470:	4604      	mov	r4, r0
 8002472:	f7ff ff06 	bl	8002282 <accelerateRightPWM>
 8002476:	4603      	mov	r3, r0
 8002478:	4619      	mov	r1, r3
 800247a:	4620      	mov	r0, r4
 800247c:	f7fe fb50 	bl	8000b20 <__addsf3>
 8002480:	4603      	mov	r3, r0
 8002482:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002486:	4618      	mov	r0, r3
 8002488:	f7fe fd06 	bl	8000e98 <__aeabi_fdiv>
 800248c:	4603      	mov	r3, r0
 800248e:	461a      	mov	r2, r3
 8002490:	4b31      	ldr	r3, [pc, #196]	@ (8002558 <PDController+0x2c8>)
 8002492:	601a      	str	r2, [r3, #0]
		case MOVING:
			if (fabs(distanceCorrection) > 0.03 && fabs(distanceCorrection) < PWMMinx)
 8002494:	4b30      	ldr	r3, [pc, #192]	@ (8002558 <PDController+0x2c8>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800249c:	4618      	mov	r0, r3
 800249e:	f7fd fff7 	bl	8000490 <__aeabi_f2d>
 80024a2:	a31d      	add	r3, pc, #116	@ (adr r3, 8002518 <PDController+0x288>)
 80024a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a8:	f7fe fada 	bl	8000a60 <__aeabi_dcmpgt>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d100      	bne.n	80024b4 <PDController+0x224>
				distanceCorrection = sign(distanceCorrection) * PWMMinx;
			break;
 80024b2:	e08e      	b.n	80025d2 <PDController+0x342>
			if (fabs(distanceCorrection) > 0.03 && fabs(distanceCorrection) < PWMMinx)
 80024b4:	4b28      	ldr	r3, [pc, #160]	@ (8002558 <PDController+0x2c8>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80024bc:	4a2b      	ldr	r2, [pc, #172]	@ (800256c <PDController+0x2dc>)
 80024be:	4611      	mov	r1, r2
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7fe fdd3 	bl	800106c <__aeabi_fcmplt>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d100      	bne.n	80024ce <PDController+0x23e>
			break;
 80024cc:	e081      	b.n	80025d2 <PDController+0x342>
				distanceCorrection = sign(distanceCorrection) * PWMMinx;
 80024ce:	4b22      	ldr	r3, [pc, #136]	@ (8002558 <PDController+0x2c8>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f000 fdf8 	bl	80030c8 <sign>
 80024d8:	4603      	mov	r3, r0
 80024da:	4618      	mov	r0, r3
 80024dc:	f7fe fbd4 	bl	8000c88 <__aeabi_i2f>
 80024e0:	4603      	mov	r3, r0
 80024e2:	4a22      	ldr	r2, [pc, #136]	@ (800256c <PDController+0x2dc>)
 80024e4:	4611      	mov	r1, r2
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7fe fc22 	bl	8000d30 <__aeabi_fmul>
 80024ec:	4603      	mov	r3, r0
 80024ee:	461a      	mov	r2, r3
 80024f0:	4b19      	ldr	r3, [pc, #100]	@ (8002558 <PDController+0x2c8>)
 80024f2:	601a      	str	r2, [r3, #0]
			break;
 80024f4:	e06d      	b.n	80025d2 <PDController+0x342>
		case TURNING:
			if (fabs(angleCorrection) > 0.01 && fabs(angleCorrection) < PWMMinw)
 80024f6:	4b13      	ldr	r3, [pc, #76]	@ (8002544 <PDController+0x2b4>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80024fe:	4618      	mov	r0, r3
 8002500:	f7fd ffc6 	bl	8000490 <__aeabi_f2d>
 8002504:	a306      	add	r3, pc, #24	@ (adr r3, 8002520 <PDController+0x290>)
 8002506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250a:	f7fe faa9 	bl	8000a60 <__aeabi_dcmpgt>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d12d      	bne.n	8002570 <PDController+0x2e0>
				angleCorrection = sign(angleCorrection) * PWMMinw;
			break;
 8002514:	e05d      	b.n	80025d2 <PDController+0x342>
 8002516:	bf00      	nop
 8002518:	eb851eb8 	.word	0xeb851eb8
 800251c:	3f9eb851 	.word	0x3f9eb851
 8002520:	47ae147b 	.word	0x47ae147b
 8002524:	3f847ae1 	.word	0x3f847ae1
 8002528:	20000404 	.word	0x20000404
 800252c:	20000400 	.word	0x20000400
 8002530:	2000032c 	.word	0x2000032c
 8002534:	20000334 	.word	0x20000334
 8002538:	3b23d70a 	.word	0x3b23d70a
 800253c:	20000338 	.word	0x20000338
 8002540:	3b656042 	.word	0x3b656042
 8002544:	20000364 	.word	0x20000364
 8002548:	20000328 	.word	0x20000328
 800254c:	20000368 	.word	0x20000368
 8002550:	3a83126f 	.word	0x3a83126f
 8002554:	2000036c 	.word	0x2000036c
 8002558:	20000398 	.word	0x20000398
 800255c:	200003a0 	.word	0x200003a0
 8002560:	200003d0 	.word	0x200003d0
 8002564:	42c80000 	.word	0x42c80000
 8002568:	2000039c 	.word	0x2000039c
 800256c:	3ea3d70a 	.word	0x3ea3d70a
			if (fabs(angleCorrection) > 0.01 && fabs(angleCorrection) < PWMMinw)
 8002570:	4b4e      	ldr	r3, [pc, #312]	@ (80026ac <PDController+0x41c>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002578:	4a4d      	ldr	r2, [pc, #308]	@ (80026b0 <PDController+0x420>)
 800257a:	4611      	mov	r1, r2
 800257c:	4618      	mov	r0, r3
 800257e:	f7fe fd75 	bl	800106c <__aeabi_fcmplt>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d100      	bne.n	800258a <PDController+0x2fa>
			break;
 8002588:	e023      	b.n	80025d2 <PDController+0x342>
				angleCorrection = sign(angleCorrection) * PWMMinw;
 800258a:	4b48      	ldr	r3, [pc, #288]	@ (80026ac <PDController+0x41c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f000 fd9a 	bl	80030c8 <sign>
 8002594:	4603      	mov	r3, r0
 8002596:	4618      	mov	r0, r3
 8002598:	f7fe fb76 	bl	8000c88 <__aeabi_i2f>
 800259c:	4603      	mov	r3, r0
 800259e:	4a44      	ldr	r2, [pc, #272]	@ (80026b0 <PDController+0x420>)
 80025a0:	4611      	mov	r1, r2
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7fe fbc4 	bl	8000d30 <__aeabi_fmul>
 80025a8:	4603      	mov	r3, r0
 80025aa:	461a      	mov	r2, r3
 80025ac:	4b3f      	ldr	r3, [pc, #252]	@ (80026ac <PDController+0x41c>)
 80025ae:	601a      	str	r2, [r3, #0]
			break;
 80025b0:	e00f      	b.n	80025d2 <PDController+0x342>
		case CURVING:
			if (fabs(distanceError) < 60)
 80025b2:	4b40      	ldr	r3, [pc, #256]	@ (80026b4 <PDController+0x424>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80025ba:	493f      	ldr	r1, [pc, #252]	@ (80026b8 <PDController+0x428>)
 80025bc:	4618      	mov	r0, r3
 80025be:	f7fe fd55 	bl	800106c <__aeabi_fcmplt>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d100      	bne.n	80025ca <PDController+0x33a>
				setState(REST);
		default:
			break;
 80025c8:	e002      	b.n	80025d0 <PDController+0x340>
				setState(REST);
 80025ca:	2000      	movs	r0, #0
 80025cc:	f7ff fe10 	bl	80021f0 <setState>
			break;
 80025d0:	bf00      	nop
	}

	if (fabs(distanceCorrection) > PWMMaxx)		// Upper Limit for PWM
 80025d2:	4b3a      	ldr	r3, [pc, #232]	@ (80026bc <PDController+0x42c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80025da:	4a39      	ldr	r2, [pc, #228]	@ (80026c0 <PDController+0x430>)
 80025dc:	4611      	mov	r1, r2
 80025de:	4618      	mov	r0, r3
 80025e0:	f7fe fd62 	bl	80010a8 <__aeabi_fcmpgt>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d012      	beq.n	8002610 <PDController+0x380>
		distanceCorrection = sign(distanceCorrection) * PWMMaxx;
 80025ea:	4b34      	ldr	r3, [pc, #208]	@ (80026bc <PDController+0x42c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 fd6a 	bl	80030c8 <sign>
 80025f4:	4603      	mov	r3, r0
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7fe fb46 	bl	8000c88 <__aeabi_i2f>
 80025fc:	4603      	mov	r3, r0
 80025fe:	4a30      	ldr	r2, [pc, #192]	@ (80026c0 <PDController+0x430>)
 8002600:	4611      	mov	r1, r2
 8002602:	4618      	mov	r0, r3
 8002604:	f7fe fb94 	bl	8000d30 <__aeabi_fmul>
 8002608:	4603      	mov	r3, r0
 800260a:	461a      	mov	r2, r3
 800260c:	4b2b      	ldr	r3, [pc, #172]	@ (80026bc <PDController+0x42c>)
 800260e:	601a      	str	r2, [r3, #0]

	if (fabs(angleCorrection) > PWMMaxw)
 8002610:	4b26      	ldr	r3, [pc, #152]	@ (80026ac <PDController+0x41c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002618:	4a25      	ldr	r2, [pc, #148]	@ (80026b0 <PDController+0x420>)
 800261a:	4611      	mov	r1, r2
 800261c:	4618      	mov	r0, r3
 800261e:	f7fe fd43 	bl	80010a8 <__aeabi_fcmpgt>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d012      	beq.n	800264e <PDController+0x3be>
		angleCorrection = sign(angleCorrection) * PWMMaxw;
 8002628:	4b20      	ldr	r3, [pc, #128]	@ (80026ac <PDController+0x41c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4618      	mov	r0, r3
 800262e:	f000 fd4b 	bl	80030c8 <sign>
 8002632:	4603      	mov	r3, r0
 8002634:	4618      	mov	r0, r3
 8002636:	f7fe fb27 	bl	8000c88 <__aeabi_i2f>
 800263a:	4603      	mov	r3, r0
 800263c:	4a1c      	ldr	r2, [pc, #112]	@ (80026b0 <PDController+0x420>)
 800263e:	4611      	mov	r1, r2
 8002640:	4618      	mov	r0, r3
 8002642:	f7fe fb75 	bl	8000d30 <__aeabi_fmul>
 8002646:	4603      	mov	r3, r0
 8002648:	461a      	mov	r2, r3
 800264a:	4b18      	ldr	r3, [pc, #96]	@ (80026ac <PDController+0x41c>)
 800264c:	601a      	str	r2, [r3, #0]

	if (state == ACCELERATING || state == CURVING)
 800264e:	4b1d      	ldr	r3, [pc, #116]	@ (80026c4 <PDController+0x434>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	2b04      	cmp	r3, #4
 8002654:	d003      	beq.n	800265e <PDController+0x3ce>
 8002656:	4b1b      	ldr	r3, [pc, #108]	@ (80026c4 <PDController+0x434>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b05      	cmp	r3, #5
 800265c:	d10a      	bne.n	8002674 <PDController+0x3e4>
	{
		left_PWM_value = accelerateLeftPWM();
 800265e:	f7ff fe09 	bl	8002274 <accelerateLeftPWM>
 8002662:	4603      	mov	r3, r0
 8002664:	4a18      	ldr	r2, [pc, #96]	@ (80026c8 <PDController+0x438>)
 8002666:	6013      	str	r3, [r2, #0]
		right_PWM_value = accelerateRightPWM();
 8002668:	f7ff fe0b 	bl	8002282 <accelerateRightPWM>
 800266c:	4603      	mov	r3, r0
 800266e:	4a17      	ldr	r2, [pc, #92]	@ (80026cc <PDController+0x43c>)
 8002670:	6013      	str	r3, [r2, #0]
		return;
 8002672:	e017      	b.n	80026a4 <PDController+0x414>
	}

	left_PWM_value = (distanceCorrection + angleCorrection);
 8002674:	4b11      	ldr	r3, [pc, #68]	@ (80026bc <PDController+0x42c>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a0c      	ldr	r2, [pc, #48]	@ (80026ac <PDController+0x41c>)
 800267a:	6812      	ldr	r2, [r2, #0]
 800267c:	4611      	mov	r1, r2
 800267e:	4618      	mov	r0, r3
 8002680:	f7fe fa4e 	bl	8000b20 <__addsf3>
 8002684:	4603      	mov	r3, r0
 8002686:	461a      	mov	r2, r3
 8002688:	4b0f      	ldr	r3, [pc, #60]	@ (80026c8 <PDController+0x438>)
 800268a:	601a      	str	r2, [r3, #0]
	right_PWM_value = (distanceCorrection - angleCorrection);
 800268c:	4b0b      	ldr	r3, [pc, #44]	@ (80026bc <PDController+0x42c>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a06      	ldr	r2, [pc, #24]	@ (80026ac <PDController+0x41c>)
 8002692:	6812      	ldr	r2, [r2, #0]
 8002694:	4611      	mov	r1, r2
 8002696:	4618      	mov	r0, r3
 8002698:	f7fe fa40 	bl	8000b1c <__aeabi_fsub>
 800269c:	4603      	mov	r3, r0
 800269e:	461a      	mov	r2, r3
 80026a0:	4b0a      	ldr	r3, [pc, #40]	@ (80026cc <PDController+0x43c>)
 80026a2:	601a      	str	r2, [r3, #0]

}
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bdb0      	pop	{r4, r5, r7, pc}
 80026aa:	bf00      	nop
 80026ac:	20000364 	.word	0x20000364
 80026b0:	3ea3d70a 	.word	0x3ea3d70a
 80026b4:	20000368 	.word	0x20000368
 80026b8:	42700000 	.word	0x42700000
 80026bc:	20000398 	.word	0x20000398
 80026c0:	3f266666 	.word	0x3f266666
 80026c4:	20000404 	.word	0x20000404
 80026c8:	20000408 	.word	0x20000408
 80026cc:	2000040c 	.word	0x2000040c

080026d0 <updatePID>:

void updatePID() {
 80026d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026d4:	b084      	sub	sp, #16
 80026d6:	af00      	add	r7, sp, #0

///// CALCULATE PREVIOUS ANGLE AND DISTANCE ERRORS //////////////////////////

	oldAngleError = oldAngleErrors[9];
 80026d8:	4b49      	ldr	r3, [pc, #292]	@ (8002800 <updatePID+0x130>)
 80026da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026dc:	4a49      	ldr	r2, [pc, #292]	@ (8002804 <updatePID+0x134>)
 80026de:	6013      	str	r3, [r2, #0]
	oldDistanceError = oldDistanceErrors[9];
 80026e0:	4b49      	ldr	r3, [pc, #292]	@ (8002808 <updatePID+0x138>)
 80026e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e4:	4a49      	ldr	r2, [pc, #292]	@ (800280c <updatePID+0x13c>)
 80026e6:	6013      	str	r3, [r2, #0]
	old_left_distance = old_left_distances[9];
 80026e8:	4b49      	ldr	r3, [pc, #292]	@ (8002810 <updatePID+0x140>)
 80026ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ec:	4a49      	ldr	r2, [pc, #292]	@ (8002814 <updatePID+0x144>)
 80026ee:	6013      	str	r3, [r2, #0]
	old_right_distance = old_right_distances[9];
 80026f0:	4b49      	ldr	r3, [pc, #292]	@ (8002818 <updatePID+0x148>)
 80026f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f4:	4a49      	ldr	r2, [pc, #292]	@ (800281c <updatePID+0x14c>)
 80026f6:	6013      	str	r3, [r2, #0]

//////////////////////	CALCULATE MOTOR PWM VALUES	/////////////////////

	PDController();
 80026f8:	f7ff fdca 	bl	8002290 <PDController>

////////////////////	NORMALIZE LEFT AND RIGHT PWM VALUES ////////////////

	// Apply lower PWM limits for small adjustments
	if (state == REST || state == ACCELERATING || fabs(distanceError) < 60 || fabs (angleError) < 60)
 80026fc:	4b48      	ldr	r3, [pc, #288]	@ (8002820 <updatePID+0x150>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d01a      	beq.n	800273a <updatePID+0x6a>
 8002704:	4b46      	ldr	r3, [pc, #280]	@ (8002820 <updatePID+0x150>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2b04      	cmp	r3, #4
 800270a:	d016      	beq.n	800273a <updatePID+0x6a>
 800270c:	4b45      	ldr	r3, [pc, #276]	@ (8002824 <updatePID+0x154>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002714:	4944      	ldr	r1, [pc, #272]	@ (8002828 <updatePID+0x158>)
 8002716:	4618      	mov	r0, r3
 8002718:	f7fe fca8 	bl	800106c <__aeabi_fcmplt>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10b      	bne.n	800273a <updatePID+0x6a>
 8002722:	4b42      	ldr	r3, [pc, #264]	@ (800282c <updatePID+0x15c>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800272a:	493f      	ldr	r1, [pc, #252]	@ (8002828 <updatePID+0x158>)
 800272c:	4618      	mov	r0, r3
 800272e:	f7fe fc9d 	bl	800106c <__aeabi_fcmplt>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	f000 8081 	beq.w	800283c <updatePID+0x16c>
	{
		if (fabs(left_PWM_value) > 0.01 && fabs(left_PWM_value) < PWMMin)
 800273a:	4b3d      	ldr	r3, [pc, #244]	@ (8002830 <updatePID+0x160>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002742:	4618      	mov	r0, r3
 8002744:	f7fd fea4 	bl	8000490 <__aeabi_f2d>
 8002748:	a32b      	add	r3, pc, #172	@ (adr r3, 80027f8 <updatePID+0x128>)
 800274a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274e:	f7fe f987 	bl	8000a60 <__aeabi_dcmpgt>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d01e      	beq.n	8002796 <updatePID+0xc6>
 8002758:	4b35      	ldr	r3, [pc, #212]	@ (8002830 <updatePID+0x160>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002760:	4a34      	ldr	r2, [pc, #208]	@ (8002834 <updatePID+0x164>)
 8002762:	4611      	mov	r1, r2
 8002764:	4618      	mov	r0, r3
 8002766:	f7fe fc81 	bl	800106c <__aeabi_fcmplt>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d012      	beq.n	8002796 <updatePID+0xc6>
		{
			left_PWM_value = sign(left_PWM_value) * PWMMin;
 8002770:	4b2f      	ldr	r3, [pc, #188]	@ (8002830 <updatePID+0x160>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4618      	mov	r0, r3
 8002776:	f000 fca7 	bl	80030c8 <sign>
 800277a:	4603      	mov	r3, r0
 800277c:	4618      	mov	r0, r3
 800277e:	f7fe fa83 	bl	8000c88 <__aeabi_i2f>
 8002782:	4603      	mov	r3, r0
 8002784:	4a2b      	ldr	r2, [pc, #172]	@ (8002834 <updatePID+0x164>)
 8002786:	4611      	mov	r1, r2
 8002788:	4618      	mov	r0, r3
 800278a:	f7fe fad1 	bl	8000d30 <__aeabi_fmul>
 800278e:	4603      	mov	r3, r0
 8002790:	461a      	mov	r2, r3
 8002792:	4b27      	ldr	r3, [pc, #156]	@ (8002830 <updatePID+0x160>)
 8002794:	601a      	str	r2, [r3, #0]
		}

		if (fabs(right_PWM_value) > 0.01 && fabs(right_PWM_value) < PWMMin)
 8002796:	4b28      	ldr	r3, [pc, #160]	@ (8002838 <updatePID+0x168>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fd fe76 	bl	8000490 <__aeabi_f2d>
 80027a4:	a314      	add	r3, pc, #80	@ (adr r3, 80027f8 <updatePID+0x128>)
 80027a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027aa:	f7fe f959 	bl	8000a60 <__aeabi_dcmpgt>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 8113 	beq.w	80029dc <updatePID+0x30c>
 80027b6:	4b20      	ldr	r3, [pc, #128]	@ (8002838 <updatePID+0x168>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80027be:	4a1d      	ldr	r2, [pc, #116]	@ (8002834 <updatePID+0x164>)
 80027c0:	4611      	mov	r1, r2
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7fe fc52 	bl	800106c <__aeabi_fcmplt>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d100      	bne.n	80027d0 <updatePID+0x100>
 80027ce:	e105      	b.n	80029dc <updatePID+0x30c>
		{
			right_PWM_value = sign(right_PWM_value) * PWMMin;
 80027d0:	4b19      	ldr	r3, [pc, #100]	@ (8002838 <updatePID+0x168>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f000 fc77 	bl	80030c8 <sign>
 80027da:	4603      	mov	r3, r0
 80027dc:	4618      	mov	r0, r3
 80027de:	f7fe fa53 	bl	8000c88 <__aeabi_i2f>
 80027e2:	4603      	mov	r3, r0
 80027e4:	4a13      	ldr	r2, [pc, #76]	@ (8002834 <updatePID+0x164>)
 80027e6:	4611      	mov	r1, r2
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fe faa1 	bl	8000d30 <__aeabi_fmul>
 80027ee:	4603      	mov	r3, r0
 80027f0:	461a      	mov	r2, r3
 80027f2:	4b11      	ldr	r3, [pc, #68]	@ (8002838 <updatePID+0x168>)
 80027f4:	601a      	str	r2, [r3, #0]
		if (fabs(right_PWM_value) > 0.01 && fabs(right_PWM_value) < PWMMin)
 80027f6:	e0f1      	b.n	80029dc <updatePID+0x30c>
 80027f8:	47ae147b 	.word	0x47ae147b
 80027fc:	3f847ae1 	.word	0x3f847ae1
 8002800:	2000033c 	.word	0x2000033c
 8002804:	20000338 	.word	0x20000338
 8002808:	20000370 	.word	0x20000370
 800280c:	2000036c 	.word	0x2000036c
 8002810:	200003a8 	.word	0x200003a8
 8002814:	200003a4 	.word	0x200003a4
 8002818:	200003d8 	.word	0x200003d8
 800281c:	200003d4 	.word	0x200003d4
 8002820:	20000404 	.word	0x20000404
 8002824:	20000368 	.word	0x20000368
 8002828:	42700000 	.word	0x42700000
 800282c:	20000334 	.word	0x20000334
 8002830:	20000408 	.word	0x20000408
 8002834:	3e99999a 	.word	0x3e99999a
 8002838:	2000040c 	.word	0x2000040c
		}
	}
	else	// If under PWM limits, normalize values
	{
		if (fabs(left_PWM_value) > 0.01 && fabs(left_PWM_value) < PWMMin)
 800283c:	4bb0      	ldr	r3, [pc, #704]	@ (8002b00 <updatePID+0x430>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002844:	4618      	mov	r0, r3
 8002846:	f7fd fe23 	bl	8000490 <__aeabi_f2d>
 800284a:	a3a9      	add	r3, pc, #676	@ (adr r3, 8002af0 <updatePID+0x420>)
 800284c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002850:	f7fe f906 	bl	8000a60 <__aeabi_dcmpgt>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d058      	beq.n	800290c <updatePID+0x23c>
 800285a:	4ba9      	ldr	r3, [pc, #676]	@ (8002b00 <updatePID+0x430>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002862:	4aa8      	ldr	r2, [pc, #672]	@ (8002b04 <updatePID+0x434>)
 8002864:	4611      	mov	r1, r2
 8002866:	4618      	mov	r0, r3
 8002868:	f7fe fc00 	bl	800106c <__aeabi_fcmplt>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d04c      	beq.n	800290c <updatePID+0x23c>
		{
			right_PWM_value = right_PWM_value - (sign(right_PWM_value) * (PWMMin - fabs(left_PWM_value)));
 8002872:	4ba5      	ldr	r3, [pc, #660]	@ (8002b08 <updatePID+0x438>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f7fd fe0a 	bl	8000490 <__aeabi_f2d>
 800287c:	4604      	mov	r4, r0
 800287e:	460d      	mov	r5, r1
 8002880:	4ba1      	ldr	r3, [pc, #644]	@ (8002b08 <updatePID+0x438>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4618      	mov	r0, r3
 8002886:	f000 fc1f 	bl	80030c8 <sign>
 800288a:	4603      	mov	r3, r0
 800288c:	4618      	mov	r0, r3
 800288e:	f7fd fded 	bl	800046c <__aeabi_i2d>
 8002892:	4680      	mov	r8, r0
 8002894:	4689      	mov	r9, r1
 8002896:	4b9b      	ldr	r3, [pc, #620]	@ (8002b04 <updatePID+0x434>)
 8002898:	4618      	mov	r0, r3
 800289a:	f7fd fdf9 	bl	8000490 <__aeabi_f2d>
 800289e:	4682      	mov	sl, r0
 80028a0:	468b      	mov	fp, r1
 80028a2:	4b97      	ldr	r3, [pc, #604]	@ (8002b00 <updatePID+0x430>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7fd fdf0 	bl	8000490 <__aeabi_f2d>
 80028b0:	4602      	mov	r2, r0
 80028b2:	460b      	mov	r3, r1
 80028b4:	4650      	mov	r0, sl
 80028b6:	4659      	mov	r1, fp
 80028b8:	f7fd fc8a 	bl	80001d0 <__aeabi_dsub>
 80028bc:	4602      	mov	r2, r0
 80028be:	460b      	mov	r3, r1
 80028c0:	4640      	mov	r0, r8
 80028c2:	4649      	mov	r1, r9
 80028c4:	f7fd fe3c 	bl	8000540 <__aeabi_dmul>
 80028c8:	4602      	mov	r2, r0
 80028ca:	460b      	mov	r3, r1
 80028cc:	4620      	mov	r0, r4
 80028ce:	4629      	mov	r1, r5
 80028d0:	f7fd fc7e 	bl	80001d0 <__aeabi_dsub>
 80028d4:	4602      	mov	r2, r0
 80028d6:	460b      	mov	r3, r1
 80028d8:	4610      	mov	r0, r2
 80028da:	4619      	mov	r1, r3
 80028dc:	f7fe f8ca 	bl	8000a74 <__aeabi_d2f>
 80028e0:	4603      	mov	r3, r0
 80028e2:	4a89      	ldr	r2, [pc, #548]	@ (8002b08 <updatePID+0x438>)
 80028e4:	6013      	str	r3, [r2, #0]
			left_PWM_value = sign(left_PWM_value) * PWMMin;
 80028e6:	4b86      	ldr	r3, [pc, #536]	@ (8002b00 <updatePID+0x430>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f000 fbec 	bl	80030c8 <sign>
 80028f0:	4603      	mov	r3, r0
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7fe f9c8 	bl	8000c88 <__aeabi_i2f>
 80028f8:	4603      	mov	r3, r0
 80028fa:	4a82      	ldr	r2, [pc, #520]	@ (8002b04 <updatePID+0x434>)
 80028fc:	4611      	mov	r1, r2
 80028fe:	4618      	mov	r0, r3
 8002900:	f7fe fa16 	bl	8000d30 <__aeabi_fmul>
 8002904:	4603      	mov	r3, r0
 8002906:	461a      	mov	r2, r3
 8002908:	4b7d      	ldr	r3, [pc, #500]	@ (8002b00 <updatePID+0x430>)
 800290a:	601a      	str	r2, [r3, #0]
		}

		if (fabs(right_PWM_value) > 0.01 && fabs(right_PWM_value) < PWMMin)
 800290c:	4b7e      	ldr	r3, [pc, #504]	@ (8002b08 <updatePID+0x438>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002914:	4618      	mov	r0, r3
 8002916:	f7fd fdbb 	bl	8000490 <__aeabi_f2d>
 800291a:	a375      	add	r3, pc, #468	@ (adr r3, 8002af0 <updatePID+0x420>)
 800291c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002920:	f7fe f89e 	bl	8000a60 <__aeabi_dcmpgt>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d058      	beq.n	80029dc <updatePID+0x30c>
 800292a:	4b77      	ldr	r3, [pc, #476]	@ (8002b08 <updatePID+0x438>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002932:	4a74      	ldr	r2, [pc, #464]	@ (8002b04 <updatePID+0x434>)
 8002934:	4611      	mov	r1, r2
 8002936:	4618      	mov	r0, r3
 8002938:	f7fe fb98 	bl	800106c <__aeabi_fcmplt>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d04c      	beq.n	80029dc <updatePID+0x30c>
		{
			left_PWM_value = left_PWM_value - (sign(left_PWM_value) * (PWMMin - fabs(right_PWM_value)));
 8002942:	4b6f      	ldr	r3, [pc, #444]	@ (8002b00 <updatePID+0x430>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f7fd fda2 	bl	8000490 <__aeabi_f2d>
 800294c:	4604      	mov	r4, r0
 800294e:	460d      	mov	r5, r1
 8002950:	4b6b      	ldr	r3, [pc, #428]	@ (8002b00 <updatePID+0x430>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4618      	mov	r0, r3
 8002956:	f000 fbb7 	bl	80030c8 <sign>
 800295a:	4603      	mov	r3, r0
 800295c:	4618      	mov	r0, r3
 800295e:	f7fd fd85 	bl	800046c <__aeabi_i2d>
 8002962:	4680      	mov	r8, r0
 8002964:	4689      	mov	r9, r1
 8002966:	4b67      	ldr	r3, [pc, #412]	@ (8002b04 <updatePID+0x434>)
 8002968:	4618      	mov	r0, r3
 800296a:	f7fd fd91 	bl	8000490 <__aeabi_f2d>
 800296e:	4682      	mov	sl, r0
 8002970:	468b      	mov	fp, r1
 8002972:	4b65      	ldr	r3, [pc, #404]	@ (8002b08 <updatePID+0x438>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800297a:	4618      	mov	r0, r3
 800297c:	f7fd fd88 	bl	8000490 <__aeabi_f2d>
 8002980:	4602      	mov	r2, r0
 8002982:	460b      	mov	r3, r1
 8002984:	4650      	mov	r0, sl
 8002986:	4659      	mov	r1, fp
 8002988:	f7fd fc22 	bl	80001d0 <__aeabi_dsub>
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	4640      	mov	r0, r8
 8002992:	4649      	mov	r1, r9
 8002994:	f7fd fdd4 	bl	8000540 <__aeabi_dmul>
 8002998:	4602      	mov	r2, r0
 800299a:	460b      	mov	r3, r1
 800299c:	4620      	mov	r0, r4
 800299e:	4629      	mov	r1, r5
 80029a0:	f7fd fc16 	bl	80001d0 <__aeabi_dsub>
 80029a4:	4602      	mov	r2, r0
 80029a6:	460b      	mov	r3, r1
 80029a8:	4610      	mov	r0, r2
 80029aa:	4619      	mov	r1, r3
 80029ac:	f7fe f862 	bl	8000a74 <__aeabi_d2f>
 80029b0:	4603      	mov	r3, r0
 80029b2:	4a53      	ldr	r2, [pc, #332]	@ (8002b00 <updatePID+0x430>)
 80029b4:	6013      	str	r3, [r2, #0]
			right_PWM_value = sign(right_PWM_value) * PWMMin;
 80029b6:	4b54      	ldr	r3, [pc, #336]	@ (8002b08 <updatePID+0x438>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f000 fb84 	bl	80030c8 <sign>
 80029c0:	4603      	mov	r3, r0
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7fe f960 	bl	8000c88 <__aeabi_i2f>
 80029c8:	4603      	mov	r3, r0
 80029ca:	4a4e      	ldr	r2, [pc, #312]	@ (8002b04 <updatePID+0x434>)
 80029cc:	4611      	mov	r1, r2
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7fe f9ae 	bl	8000d30 <__aeabi_fmul>
 80029d4:	4603      	mov	r3, r0
 80029d6:	461a      	mov	r2, r3
 80029d8:	4b4b      	ldr	r3, [pc, #300]	@ (8002b08 <updatePID+0x438>)
 80029da:	601a      	str	r2, [r3, #0]
		}
	}

	if (fabs(left_PWM_value) > PWM_MAX)
 80029dc:	4b48      	ldr	r3, [pc, #288]	@ (8002b00 <updatePID+0x430>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7fd fd53 	bl	8000490 <__aeabi_f2d>
 80029ea:	a343      	add	r3, pc, #268	@ (adr r3, 8002af8 <updatePID+0x428>)
 80029ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f0:	f7fe f836 	bl	8000a60 <__aeabi_dcmpgt>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d016      	beq.n	8002a28 <updatePID+0x358>
	{
		left_PWM_value = sign(left_PWM_value) * PWM_MAX;
 80029fa:	4b41      	ldr	r3, [pc, #260]	@ (8002b00 <updatePID+0x430>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f000 fb62 	bl	80030c8 <sign>
 8002a04:	4603      	mov	r3, r0
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7fd fd30 	bl	800046c <__aeabi_i2d>
 8002a0c:	a33a      	add	r3, pc, #232	@ (adr r3, 8002af8 <updatePID+0x428>)
 8002a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a12:	f7fd fd95 	bl	8000540 <__aeabi_dmul>
 8002a16:	4602      	mov	r2, r0
 8002a18:	460b      	mov	r3, r1
 8002a1a:	4610      	mov	r0, r2
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	f7fe f829 	bl	8000a74 <__aeabi_d2f>
 8002a22:	4603      	mov	r3, r0
 8002a24:	4a36      	ldr	r2, [pc, #216]	@ (8002b00 <updatePID+0x430>)
 8002a26:	6013      	str	r3, [r2, #0]
	}

	if (fabs(right_PWM_value) > PWM_MAX)
 8002a28:	4b37      	ldr	r3, [pc, #220]	@ (8002b08 <updatePID+0x438>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7fd fd2d 	bl	8000490 <__aeabi_f2d>
 8002a36:	a330      	add	r3, pc, #192	@ (adr r3, 8002af8 <updatePID+0x428>)
 8002a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3c:	f7fe f810 	bl	8000a60 <__aeabi_dcmpgt>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d016      	beq.n	8002a74 <updatePID+0x3a4>
	{
		right_PWM_value = sign(right_PWM_value) * PWM_MAX;
 8002a46:	4b30      	ldr	r3, [pc, #192]	@ (8002b08 <updatePID+0x438>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 fb3c 	bl	80030c8 <sign>
 8002a50:	4603      	mov	r3, r0
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7fd fd0a 	bl	800046c <__aeabi_i2d>
 8002a58:	a327      	add	r3, pc, #156	@ (adr r3, 8002af8 <updatePID+0x428>)
 8002a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a5e:	f7fd fd6f 	bl	8000540 <__aeabi_dmul>
 8002a62:	4602      	mov	r2, r0
 8002a64:	460b      	mov	r3, r1
 8002a66:	4610      	mov	r0, r2
 8002a68:	4619      	mov	r1, r3
 8002a6a:	f7fe f803 	bl	8000a74 <__aeabi_d2f>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	4a25      	ldr	r2, [pc, #148]	@ (8002b08 <updatePID+0x438>)
 8002a72:	6013      	str	r3, [r2, #0]



//////////////////	SET PWM VALUES AND CHECK FOR GOAL REACHED ////////////////////////

	setMotorLPWM(left_PWM_value);
 8002a74:	4b22      	ldr	r3, [pc, #136]	@ (8002b00 <updatePID+0x430>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff fb41 	bl	8002100 <setMotorLPWM>
	setMotorRPWM(right_PWM_value);
 8002a7e:	4b22      	ldr	r3, [pc, #136]	@ (8002b08 <updatePID+0x438>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff fb78 	bl	8002178 <setMotorRPWM>

	if(angleError < 30 && angleError > -30 && distanceError < 30 && distanceError > -30)
 8002a88:	4b20      	ldr	r3, [pc, #128]	@ (8002b0c <updatePID+0x43c>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4920      	ldr	r1, [pc, #128]	@ (8002b10 <updatePID+0x440>)
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7fe faec 	bl	800106c <__aeabi_fcmplt>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d020      	beq.n	8002adc <updatePID+0x40c>
 8002a9a:	4b1c      	ldr	r3, [pc, #112]	@ (8002b0c <updatePID+0x43c>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	491d      	ldr	r1, [pc, #116]	@ (8002b14 <updatePID+0x444>)
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7fe fb01 	bl	80010a8 <__aeabi_fcmpgt>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d017      	beq.n	8002adc <updatePID+0x40c>
 8002aac:	4b1a      	ldr	r3, [pc, #104]	@ (8002b18 <updatePID+0x448>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4917      	ldr	r1, [pc, #92]	@ (8002b10 <updatePID+0x440>)
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7fe fada 	bl	800106c <__aeabi_fcmplt>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00e      	beq.n	8002adc <updatePID+0x40c>
 8002abe:	4b16      	ldr	r3, [pc, #88]	@ (8002b18 <updatePID+0x448>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4914      	ldr	r1, [pc, #80]	@ (8002b14 <updatePID+0x444>)
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7fe faef 	bl	80010a8 <__aeabi_fcmpgt>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d005      	beq.n	8002adc <updatePID+0x40c>
		goal_reached_timer++;					// Increments goal reached timer when errors are within a certain threshold
 8002ad0:	4b12      	ldr	r3, [pc, #72]	@ (8002b1c <updatePID+0x44c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	4a11      	ldr	r2, [pc, #68]	@ (8002b1c <updatePID+0x44c>)
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	e002      	b.n	8002ae2 <updatePID+0x412>

	else
		goal_reached_timer = 0;
 8002adc:	4b0f      	ldr	r3, [pc, #60]	@ (8002b1c <updatePID+0x44c>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]

///////////////////// UPDATE PREVIOUS ANGLE AND DISTANCE ERRORS //////////////////////////

	oldDistanceCorrection = distanceCorrection;
 8002ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8002b20 <updatePID+0x450>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a0f      	ldr	r2, [pc, #60]	@ (8002b24 <updatePID+0x454>)
 8002ae8:	6013      	str	r3, [r2, #0]

	for(int i = 9; i > 0; i--)
 8002aea:	2309      	movs	r3, #9
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	e027      	b.n	8002b40 <updatePID+0x470>
 8002af0:	47ae147b 	.word	0x47ae147b
 8002af4:	3f847ae1 	.word	0x3f847ae1
 8002af8:	66666666 	.word	0x66666666
 8002afc:	3fee6666 	.word	0x3fee6666
 8002b00:	20000408 	.word	0x20000408
 8002b04:	3e99999a 	.word	0x3e99999a
 8002b08:	2000040c 	.word	0x2000040c
 8002b0c:	20000334 	.word	0x20000334
 8002b10:	41f00000 	.word	0x41f00000
 8002b14:	c1f00000 	.word	0xc1f00000
 8002b18:	20000368 	.word	0x20000368
 8002b1c:	20000410 	.word	0x20000410
 8002b20:	20000398 	.word	0x20000398
 8002b24:	2000039c 	.word	0x2000039c
		oldAngleErrors[i] = oldAngleErrors[i-1];	// Adds the newest angleError to array and shifts everything to the right
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	4a2b      	ldr	r2, [pc, #172]	@ (8002bdc <updatePID+0x50c>)
 8002b2e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002b32:	492a      	ldr	r1, [pc, #168]	@ (8002bdc <updatePID+0x50c>)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 9; i > 0; i--)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	dcf0      	bgt.n	8002b28 <updatePID+0x458>
	oldAngleErrors[0] = angleError;
 8002b46:	4b26      	ldr	r3, [pc, #152]	@ (8002be0 <updatePID+0x510>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a24      	ldr	r2, [pc, #144]	@ (8002bdc <updatePID+0x50c>)
 8002b4c:	6013      	str	r3, [r2, #0]

	for(int i = 9; i > 0; i--)
 8002b4e:	2309      	movs	r3, #9
 8002b50:	60bb      	str	r3, [r7, #8]
 8002b52:	e00b      	b.n	8002b6c <updatePID+0x49c>
		oldDistanceErrors[i] = oldDistanceErrors[i-1];	// Adds the newest distanceError to array and shifts everything right
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	3b01      	subs	r3, #1
 8002b58:	4a22      	ldr	r2, [pc, #136]	@ (8002be4 <updatePID+0x514>)
 8002b5a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002b5e:	4921      	ldr	r1, [pc, #132]	@ (8002be4 <updatePID+0x514>)
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 9; i > 0; i--)
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	60bb      	str	r3, [r7, #8]
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	dcf0      	bgt.n	8002b54 <updatePID+0x484>
	oldDistanceErrors[0] = distanceError;
 8002b72:	4b1d      	ldr	r3, [pc, #116]	@ (8002be8 <updatePID+0x518>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a1b      	ldr	r2, [pc, #108]	@ (8002be4 <updatePID+0x514>)
 8002b78:	6013      	str	r3, [r2, #0]

	for(int i = 9; i > 0; i--)
 8002b7a:	2309      	movs	r3, #9
 8002b7c:	607b      	str	r3, [r7, #4]
 8002b7e:	e00b      	b.n	8002b98 <updatePID+0x4c8>
		old_left_distances[i] = old_left_distances[i-1];
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	3b01      	subs	r3, #1
 8002b84:	4a19      	ldr	r2, [pc, #100]	@ (8002bec <updatePID+0x51c>)
 8002b86:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002b8a:	4918      	ldr	r1, [pc, #96]	@ (8002bec <updatePID+0x51c>)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 9; i > 0; i--)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	3b01      	subs	r3, #1
 8002b96:	607b      	str	r3, [r7, #4]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	dcf0      	bgt.n	8002b80 <updatePID+0x4b0>
	old_left_distances[0] = left_distance;
 8002b9e:	4b14      	ldr	r3, [pc, #80]	@ (8002bf0 <updatePID+0x520>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a12      	ldr	r2, [pc, #72]	@ (8002bec <updatePID+0x51c>)
 8002ba4:	6013      	str	r3, [r2, #0]

	for(int i = 9; i > 0; i--)
 8002ba6:	2309      	movs	r3, #9
 8002ba8:	603b      	str	r3, [r7, #0]
 8002baa:	e00b      	b.n	8002bc4 <updatePID+0x4f4>
		old_right_distances[i] = old_right_distances[i-1];
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	4a10      	ldr	r2, [pc, #64]	@ (8002bf4 <updatePID+0x524>)
 8002bb2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002bb6:	490f      	ldr	r1, [pc, #60]	@ (8002bf4 <updatePID+0x524>)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 9; i > 0; i--)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	603b      	str	r3, [r7, #0]
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	dcf0      	bgt.n	8002bac <updatePID+0x4dc>
	old_right_distances[0] = right_distance;
 8002bca:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf8 <updatePID+0x528>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a09      	ldr	r2, [pc, #36]	@ (8002bf4 <updatePID+0x524>)
 8002bd0:	6013      	str	r3, [r2, #0]

}
 8002bd2:	bf00      	nop
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bdc:	2000033c 	.word	0x2000033c
 8002be0:	20000334 	.word	0x20000334
 8002be4:	20000370 	.word	0x20000370
 8002be8:	20000368 	.word	0x20000368
 8002bec:	200003a8 	.word	0x200003a8
 8002bf0:	200003a0 	.word	0x200003a0
 8002bf4:	200003d8 	.word	0x200003d8
 8002bf8:	200003d0 	.word	0x200003d0

08002bfc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c02:	2300      	movs	r3, #0
 8002c04:	607b      	str	r3, [r7, #4]
 8002c06:	4b0f      	ldr	r3, [pc, #60]	@ (8002c44 <HAL_MspInit+0x48>)
 8002c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c0a:	4a0e      	ldr	r2, [pc, #56]	@ (8002c44 <HAL_MspInit+0x48>)
 8002c0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c10:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c12:	4b0c      	ldr	r3, [pc, #48]	@ (8002c44 <HAL_MspInit+0x48>)
 8002c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c1a:	607b      	str	r3, [r7, #4]
 8002c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c1e:	2300      	movs	r3, #0
 8002c20:	603b      	str	r3, [r7, #0]
 8002c22:	4b08      	ldr	r3, [pc, #32]	@ (8002c44 <HAL_MspInit+0x48>)
 8002c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c26:	4a07      	ldr	r2, [pc, #28]	@ (8002c44 <HAL_MspInit+0x48>)
 8002c28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c2e:	4b05      	ldr	r3, [pc, #20]	@ (8002c44 <HAL_MspInit+0x48>)
 8002c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c36:	603b      	str	r3, [r7, #0]
 8002c38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr
 8002c44:	40023800 	.word	0x40023800

08002c48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b08a      	sub	sp, #40	@ 0x28
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c50:	f107 0314 	add.w	r3, r7, #20
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	605a      	str	r2, [r3, #4]
 8002c5a:	609a      	str	r2, [r3, #8]
 8002c5c:	60da      	str	r2, [r3, #12]
 8002c5e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a3c      	ldr	r2, [pc, #240]	@ (8002d58 <HAL_ADC_MspInit+0x110>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d171      	bne.n	8002d4e <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	613b      	str	r3, [r7, #16]
 8002c6e:	4b3b      	ldr	r3, [pc, #236]	@ (8002d5c <HAL_ADC_MspInit+0x114>)
 8002c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c72:	4a3a      	ldr	r2, [pc, #232]	@ (8002d5c <HAL_ADC_MspInit+0x114>)
 8002c74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c78:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c7a:	4b38      	ldr	r3, [pc, #224]	@ (8002d5c <HAL_ADC_MspInit+0x114>)
 8002c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c82:	613b      	str	r3, [r7, #16]
 8002c84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	4b34      	ldr	r3, [pc, #208]	@ (8002d5c <HAL_ADC_MspInit+0x114>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8e:	4a33      	ldr	r2, [pc, #204]	@ (8002d5c <HAL_ADC_MspInit+0x114>)
 8002c90:	f043 0304 	orr.w	r3, r3, #4
 8002c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c96:	4b31      	ldr	r3, [pc, #196]	@ (8002d5c <HAL_ADC_MspInit+0x114>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9a:	f003 0304 	and.w	r3, r3, #4
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60bb      	str	r3, [r7, #8]
 8002ca6:	4b2d      	ldr	r3, [pc, #180]	@ (8002d5c <HAL_ADC_MspInit+0x114>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002caa:	4a2c      	ldr	r2, [pc, #176]	@ (8002d5c <HAL_ADC_MspInit+0x114>)
 8002cac:	f043 0301 	orr.w	r3, r3, #1
 8002cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cb2:	4b2a      	ldr	r3, [pc, #168]	@ (8002d5c <HAL_ADC_MspInit+0x114>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	60bb      	str	r3, [r7, #8]
 8002cbc:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ForwardRightReceiver_Pin|RightReceiver_Pin;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cca:	f107 0314 	add.w	r3, r7, #20
 8002cce:	4619      	mov	r1, r3
 8002cd0:	4823      	ldr	r0, [pc, #140]	@ (8002d60 <HAL_ADC_MspInit+0x118>)
 8002cd2:	f001 fbc7 	bl	8004464 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LeftReceiver_Pin|ForwardLeftReceiver_Pin;
 8002cd6:	2360      	movs	r3, #96	@ 0x60
 8002cd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ce2:	f107 0314 	add.w	r3, r7, #20
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	481e      	ldr	r0, [pc, #120]	@ (8002d64 <HAL_ADC_MspInit+0x11c>)
 8002cea:	f001 fbbb 	bl	8004464 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002cee:	4b1e      	ldr	r3, [pc, #120]	@ (8002d68 <HAL_ADC_MspInit+0x120>)
 8002cf0:	4a1e      	ldr	r2, [pc, #120]	@ (8002d6c <HAL_ADC_MspInit+0x124>)
 8002cf2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002cf4:	4b1c      	ldr	r3, [pc, #112]	@ (8002d68 <HAL_ADC_MspInit+0x120>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cfa:	4b1b      	ldr	r3, [pc, #108]	@ (8002d68 <HAL_ADC_MspInit+0x120>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d00:	4b19      	ldr	r3, [pc, #100]	@ (8002d68 <HAL_ADC_MspInit+0x120>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002d06:	4b18      	ldr	r3, [pc, #96]	@ (8002d68 <HAL_ADC_MspInit+0x120>)
 8002d08:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d0c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d0e:	4b16      	ldr	r3, [pc, #88]	@ (8002d68 <HAL_ADC_MspInit+0x120>)
 8002d10:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002d14:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d16:	4b14      	ldr	r3, [pc, #80]	@ (8002d68 <HAL_ADC_MspInit+0x120>)
 8002d18:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d1c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002d1e:	4b12      	ldr	r3, [pc, #72]	@ (8002d68 <HAL_ADC_MspInit+0x120>)
 8002d20:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d24:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002d26:	4b10      	ldr	r3, [pc, #64]	@ (8002d68 <HAL_ADC_MspInit+0x120>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d2c:	4b0e      	ldr	r3, [pc, #56]	@ (8002d68 <HAL_ADC_MspInit+0x120>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002d32:	480d      	ldr	r0, [pc, #52]	@ (8002d68 <HAL_ADC_MspInit+0x120>)
 8002d34:	f000 ffba 	bl	8003cac <HAL_DMA_Init>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8002d3e:	f7ff f9a9 	bl	8002094 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a08      	ldr	r2, [pc, #32]	@ (8002d68 <HAL_ADC_MspInit+0x120>)
 8002d46:	639a      	str	r2, [r3, #56]	@ 0x38
 8002d48:	4a07      	ldr	r2, [pc, #28]	@ (8002d68 <HAL_ADC_MspInit+0x120>)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002d4e:	bf00      	nop
 8002d50:	3728      	adds	r7, #40	@ 0x28
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	40012000 	.word	0x40012000
 8002d5c:	40023800 	.word	0x40023800
 8002d60:	40020800 	.word	0x40020800
 8002d64:	40020000 	.word	0x40020000
 8002d68:	20000180 	.word	0x20000180
 8002d6c:	40026410 	.word	0x40026410

08002d70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b08a      	sub	sp, #40	@ 0x28
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d78:	f107 0314 	add.w	r3, r7, #20
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	605a      	str	r2, [r3, #4]
 8002d82:	609a      	str	r2, [r3, #8]
 8002d84:	60da      	str	r2, [r3, #12]
 8002d86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a19      	ldr	r2, [pc, #100]	@ (8002df4 <HAL_I2C_MspInit+0x84>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d12b      	bne.n	8002dea <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d92:	2300      	movs	r3, #0
 8002d94:	613b      	str	r3, [r7, #16]
 8002d96:	4b18      	ldr	r3, [pc, #96]	@ (8002df8 <HAL_I2C_MspInit+0x88>)
 8002d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d9a:	4a17      	ldr	r2, [pc, #92]	@ (8002df8 <HAL_I2C_MspInit+0x88>)
 8002d9c:	f043 0302 	orr.w	r3, r3, #2
 8002da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002da2:	4b15      	ldr	r3, [pc, #84]	@ (8002df8 <HAL_I2C_MspInit+0x88>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	613b      	str	r3, [r7, #16]
 8002dac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002dae:	23c0      	movs	r3, #192	@ 0xc0
 8002db0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002db2:	2312      	movs	r3, #18
 8002db4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db6:	2300      	movs	r3, #0
 8002db8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002dbe:	2304      	movs	r3, #4
 8002dc0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dc2:	f107 0314 	add.w	r3, r7, #20
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	480c      	ldr	r0, [pc, #48]	@ (8002dfc <HAL_I2C_MspInit+0x8c>)
 8002dca:	f001 fb4b 	bl	8004464 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	4b09      	ldr	r3, [pc, #36]	@ (8002df8 <HAL_I2C_MspInit+0x88>)
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd6:	4a08      	ldr	r2, [pc, #32]	@ (8002df8 <HAL_I2C_MspInit+0x88>)
 8002dd8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002ddc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dde:	4b06      	ldr	r3, [pc, #24]	@ (8002df8 <HAL_I2C_MspInit+0x88>)
 8002de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002dea:	bf00      	nop
 8002dec:	3728      	adds	r7, #40	@ 0x28
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40005400 	.word	0x40005400
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	40020400 	.word	0x40020400

08002e00 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a0e      	ldr	r2, [pc, #56]	@ (8002e48 <HAL_TIM_PWM_MspInit+0x48>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d115      	bne.n	8002e3e <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e12:	2300      	movs	r3, #0
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	4b0d      	ldr	r3, [pc, #52]	@ (8002e4c <HAL_TIM_PWM_MspInit+0x4c>)
 8002e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e1a:	4a0c      	ldr	r2, [pc, #48]	@ (8002e4c <HAL_TIM_PWM_MspInit+0x4c>)
 8002e1c:	f043 0301 	orr.w	r3, r3, #1
 8002e20:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e22:	4b0a      	ldr	r3, [pc, #40]	@ (8002e4c <HAL_TIM_PWM_MspInit+0x4c>)
 8002e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002e2e:	2200      	movs	r2, #0
 8002e30:	2100      	movs	r1, #0
 8002e32:	2019      	movs	r0, #25
 8002e34:	f000 ff03 	bl	8003c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002e38:	2019      	movs	r0, #25
 8002e3a:	f000 ff1c 	bl	8003c76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002e3e:	bf00      	nop
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	40010000 	.word	0x40010000
 8002e4c:	40023800 	.word	0x40023800

08002e50 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b08c      	sub	sp, #48	@ 0x30
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e58:	f107 031c 	add.w	r3, r7, #28
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	605a      	str	r2, [r3, #4]
 8002e62:	609a      	str	r2, [r3, #8]
 8002e64:	60da      	str	r2, [r3, #12]
 8002e66:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a32      	ldr	r2, [pc, #200]	@ (8002f38 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d12c      	bne.n	8002ecc <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e72:	2300      	movs	r3, #0
 8002e74:	61bb      	str	r3, [r7, #24]
 8002e76:	4b31      	ldr	r3, [pc, #196]	@ (8002f3c <HAL_TIM_Encoder_MspInit+0xec>)
 8002e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7a:	4a30      	ldr	r2, [pc, #192]	@ (8002f3c <HAL_TIM_Encoder_MspInit+0xec>)
 8002e7c:	f043 0302 	orr.w	r3, r3, #2
 8002e80:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e82:	4b2e      	ldr	r3, [pc, #184]	@ (8002f3c <HAL_TIM_Encoder_MspInit+0xec>)
 8002e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	61bb      	str	r3, [r7, #24]
 8002e8c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e8e:	2300      	movs	r3, #0
 8002e90:	617b      	str	r3, [r7, #20]
 8002e92:	4b2a      	ldr	r3, [pc, #168]	@ (8002f3c <HAL_TIM_Encoder_MspInit+0xec>)
 8002e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e96:	4a29      	ldr	r2, [pc, #164]	@ (8002f3c <HAL_TIM_Encoder_MspInit+0xec>)
 8002e98:	f043 0302 	orr.w	r3, r3, #2
 8002e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e9e:	4b27      	ldr	r3, [pc, #156]	@ (8002f3c <HAL_TIM_Encoder_MspInit+0xec>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	617b      	str	r3, [r7, #20]
 8002ea8:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = RightEncoderCh1_Pin|RightEncoderCh2_Pin;
 8002eaa:	2330      	movs	r3, #48	@ 0x30
 8002eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eae:	2302      	movs	r3, #2
 8002eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002eba:	2302      	movs	r3, #2
 8002ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ebe:	f107 031c 	add.w	r3, r7, #28
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	481e      	ldr	r0, [pc, #120]	@ (8002f40 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002ec6:	f001 facd 	bl	8004464 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002eca:	e030      	b.n	8002f2e <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a1c      	ldr	r2, [pc, #112]	@ (8002f44 <HAL_TIM_Encoder_MspInit+0xf4>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d12b      	bne.n	8002f2e <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	613b      	str	r3, [r7, #16]
 8002eda:	4b18      	ldr	r3, [pc, #96]	@ (8002f3c <HAL_TIM_Encoder_MspInit+0xec>)
 8002edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ede:	4a17      	ldr	r2, [pc, #92]	@ (8002f3c <HAL_TIM_Encoder_MspInit+0xec>)
 8002ee0:	f043 0302 	orr.w	r3, r3, #2
 8002ee4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ee6:	4b15      	ldr	r3, [pc, #84]	@ (8002f3c <HAL_TIM_Encoder_MspInit+0xec>)
 8002ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	613b      	str	r3, [r7, #16]
 8002ef0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60fb      	str	r3, [r7, #12]
 8002ef6:	4b11      	ldr	r3, [pc, #68]	@ (8002f3c <HAL_TIM_Encoder_MspInit+0xec>)
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efa:	4a10      	ldr	r2, [pc, #64]	@ (8002f3c <HAL_TIM_Encoder_MspInit+0xec>)
 8002efc:	f043 0304 	orr.w	r3, r3, #4
 8002f00:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f02:	4b0e      	ldr	r3, [pc, #56]	@ (8002f3c <HAL_TIM_Encoder_MspInit+0xec>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f06:	f003 0304 	and.w	r3, r3, #4
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LeftEncoderCh1_Pin|LeftEncoderCh2_Pin;
 8002f0e:	23c0      	movs	r3, #192	@ 0xc0
 8002f10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f12:	2302      	movs	r3, #2
 8002f14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f16:	2300      	movs	r3, #0
 8002f18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f22:	f107 031c 	add.w	r3, r7, #28
 8002f26:	4619      	mov	r1, r3
 8002f28:	4807      	ldr	r0, [pc, #28]	@ (8002f48 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002f2a:	f001 fa9b 	bl	8004464 <HAL_GPIO_Init>
}
 8002f2e:	bf00      	nop
 8002f30:	3730      	adds	r7, #48	@ 0x30
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	40000400 	.word	0x40000400
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	40020400 	.word	0x40020400
 8002f44:	40010400 	.word	0x40010400
 8002f48:	40020800 	.word	0x40020800

08002f4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b088      	sub	sp, #32
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f54:	f107 030c 	add.w	r3, r7, #12
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	605a      	str	r2, [r3, #4]
 8002f5e:	609a      	str	r2, [r3, #8]
 8002f60:	60da      	str	r2, [r3, #12]
 8002f62:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a12      	ldr	r2, [pc, #72]	@ (8002fb4 <HAL_TIM_MspPostInit+0x68>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d11e      	bne.n	8002fac <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60bb      	str	r3, [r7, #8]
 8002f72:	4b11      	ldr	r3, [pc, #68]	@ (8002fb8 <HAL_TIM_MspPostInit+0x6c>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f76:	4a10      	ldr	r2, [pc, #64]	@ (8002fb8 <HAL_TIM_MspPostInit+0x6c>)
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8002fb8 <HAL_TIM_MspPostInit+0x6c>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	60bb      	str	r3, [r7, #8]
 8002f88:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LeftMotorCh1_Pin|LeftMotorCh2_Pin|RightMotorCh1_Pin|RightMotorCh2_Pin;
 8002f8a:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002f8e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f90:	2302      	movs	r3, #2
 8002f92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f94:	2300      	movs	r3, #0
 8002f96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fa0:	f107 030c 	add.w	r3, r7, #12
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	4805      	ldr	r0, [pc, #20]	@ (8002fbc <HAL_TIM_MspPostInit+0x70>)
 8002fa8:	f001 fa5c 	bl	8004464 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002fac:	bf00      	nop
 8002fae:	3720      	adds	r7, #32
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40010000 	.word	0x40010000
 8002fb8:	40023800 	.word	0x40023800
 8002fbc:	40020000 	.word	0x40020000

08002fc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002fc4:	bf00      	nop
 8002fc6:	e7fd      	b.n	8002fc4 <NMI_Handler+0x4>

08002fc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fcc:	bf00      	nop
 8002fce:	e7fd      	b.n	8002fcc <HardFault_Handler+0x4>

08002fd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fd4:	bf00      	nop
 8002fd6:	e7fd      	b.n	8002fd4 <MemManage_Handler+0x4>

08002fd8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fdc:	bf00      	nop
 8002fde:	e7fd      	b.n	8002fdc <BusFault_Handler+0x4>

08002fe0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fe4:	bf00      	nop
 8002fe6:	e7fd      	b.n	8002fe4 <UsageFault_Handler+0x4>

08002fe8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fec:	bf00      	nop
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bc80      	pop	{r7}
 8002ff2:	4770      	bx	lr

08002ff4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ff8:	bf00      	nop
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bc80      	pop	{r7}
 8002ffe:	4770      	bx	lr

08003000 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003004:	bf00      	nop
 8003006:	46bd      	mov	sp, r7
 8003008:	bc80      	pop	{r7}
 800300a:	4770      	bx	lr

0800300c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003010:	f000 f8f4 	bl	80031fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SysTickFunction();
 8003014:	f000 f81c 	bl	8003050 <SysTickFunction>
  /* USER CODE END SysTick_IRQn 1 */
}
 8003018:	bf00      	nop
 800301a:	bd80      	pop	{r7, pc}

0800301c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003020:	4802      	ldr	r0, [pc, #8]	@ (800302c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003022:	f003 fbb1 	bl	8006788 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003026:	bf00      	nop
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	20000234 	.word	0x20000234

08003030 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003034:	4802      	ldr	r0, [pc, #8]	@ (8003040 <DMA2_Stream0_IRQHandler+0x10>)
 8003036:	f000 ffaf 	bl	8003f98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800303a:	bf00      	nop
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	20000180 	.word	0x20000180

08003044 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003048:	bf00      	nop
 800304a:	46bd      	mov	sp, r7
 800304c:	bc80      	pop	{r7}
 800304e:	4770      	bx	lr

08003050 <SysTickFunction>:

#include "main.h"
#include "pid.h"
#include "encoders.h"

void SysTickFunction(void) {
 8003050:	b590      	push	{r4, r7, lr}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
	/*
	 * Anything in this function body will be executed every millisecond.
	 * Call you PID update function here.
	 */

	updatePID();
 8003056:	f7ff fb3b 	bl	80026d0 <updatePID>
	 * It also maintains the magnitude of the difference between the left and right encoders so that PID will work seamlessly.
	 *
	 * You may have to adjust it in the event you try to traverse more than 31000 encoder counts at once (~9 meters) without
	 * turning. But that'll be approximately never in Micromouse :)
	 */
	if (getRightEncoderCounts() > 31000 || getLeftEncoderCounts() > 31000
 800305a:	f7fe f9ff 	bl	800145c <getRightEncoderCounts>
 800305e:	4603      	mov	r3, r0
 8003060:	461a      	mov	r2, r3
 8003062:	f647 1318 	movw	r3, #31000	@ 0x7918
 8003066:	429a      	cmp	r2, r3
 8003068:	dc15      	bgt.n	8003096 <SysTickFunction+0x46>
 800306a:	f7fe fa05 	bl	8001478 <getLeftEncoderCounts>
 800306e:	4603      	mov	r3, r0
 8003070:	461a      	mov	r2, r3
 8003072:	f647 1318 	movw	r3, #31000	@ 0x7918
 8003076:	429a      	cmp	r2, r3
 8003078:	dc0d      	bgt.n	8003096 <SysTickFunction+0x46>
			|| getRightEncoderCounts() < -31000 || getLeftEncoderCounts() < -31000) {
 800307a:	f7fe f9ef 	bl	800145c <getRightEncoderCounts>
 800307e:	4603      	mov	r3, r0
 8003080:	461a      	mov	r2, r3
 8003082:	4b10      	ldr	r3, [pc, #64]	@ (80030c4 <SysTickFunction+0x74>)
 8003084:	429a      	cmp	r2, r3
 8003086:	db06      	blt.n	8003096 <SysTickFunction+0x46>
 8003088:	f7fe f9f6 	bl	8001478 <getLeftEncoderCounts>
 800308c:	4603      	mov	r3, r0
 800308e:	461a      	mov	r2, r3
 8003090:	4b0c      	ldr	r3, [pc, #48]	@ (80030c4 <SysTickFunction+0x74>)
 8003092:	429a      	cmp	r2, r3
 8003094:	da11      	bge.n	80030ba <SysTickFunction+0x6a>
		int16_t difference = getRightEncoderCounts() - getLeftEncoderCounts();
 8003096:	f7fe f9e1 	bl	800145c <getRightEncoderCounts>
 800309a:	4603      	mov	r3, r0
 800309c:	b29c      	uxth	r4, r3
 800309e:	f7fe f9eb 	bl	8001478 <getLeftEncoderCounts>
 80030a2:	4603      	mov	r3, r0
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	1ae3      	subs	r3, r4, r3
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	80fb      	strh	r3, [r7, #6]
		resetEncoders();
 80030ac:	f7fe f9f2 	bl	8001494 <resetEncoders>
		TIM2->CNT = (int16_t) difference;
 80030b0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80030b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030b8:	6253      	str	r3, [r2, #36]	@ 0x24
	}
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd90      	pop	{r4, r7, pc}
 80030c2:	bf00      	nop
 80030c4:	ffff86e8 	.word	0xffff86e8

080030c8 <sign>:
		front_wall = 0;
	}
	return front_wall;
}

int16_t sign(float x) {
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
	if (x > 0)
 80030d0:	f04f 0100 	mov.w	r1, #0
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f7fd ffe7 	bl	80010a8 <__aeabi_fcmpgt>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <sign+0x1c>
	{
		return 1;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e00b      	b.n	80030fc <sign+0x34>
	}
	else if (x < 0)
 80030e4:	f04f 0100 	mov.w	r1, #0
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f7fd ffbf 	bl	800106c <__aeabi_fcmplt>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d002      	beq.n	80030fa <sign+0x32>
	{
		return -1;
 80030f4:	f04f 33ff 	mov.w	r3, #4294967295
 80030f8:	e000      	b.n	80030fc <sign+0x34>
	}
	else
	{
		return 0;
 80030fa:	2300      	movs	r3, #0
	}
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3708      	adds	r7, #8
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003104:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800313c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 8003108:	f7ff ff9c 	bl	8003044 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800310c:	480c      	ldr	r0, [pc, #48]	@ (8003140 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800310e:	490d      	ldr	r1, [pc, #52]	@ (8003144 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003110:	4a0d      	ldr	r2, [pc, #52]	@ (8003148 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003112:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003114:	e002      	b.n	800311c <LoopCopyDataInit>

08003116 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003116:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003118:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800311a:	3304      	adds	r3, #4

0800311c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800311c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800311e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003120:	d3f9      	bcc.n	8003116 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003122:	4a0a      	ldr	r2, [pc, #40]	@ (800314c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003124:	4c0a      	ldr	r4, [pc, #40]	@ (8003150 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003126:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003128:	e001      	b.n	800312e <LoopFillZerobss>

0800312a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800312a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800312c:	3204      	adds	r2, #4

0800312e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800312e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003130:	d3fb      	bcc.n	800312a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003132:	f004 f875 	bl	8007220 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003136:	f7fe fbc5 	bl	80018c4 <main>
  bx  lr    
 800313a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800313c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003140:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003144:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8003148:	080072b0 	.word	0x080072b0
  ldr r2, =_sbss
 800314c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8003150:	20000418 	.word	0x20000418

08003154 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003154:	e7fe      	b.n	8003154 <ADC_IRQHandler>
	...

08003158 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800315c:	4b0e      	ldr	r3, [pc, #56]	@ (8003198 <HAL_Init+0x40>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a0d      	ldr	r2, [pc, #52]	@ (8003198 <HAL_Init+0x40>)
 8003162:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003166:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8003168:	4b0b      	ldr	r3, [pc, #44]	@ (8003198 <HAL_Init+0x40>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a0a      	ldr	r2, [pc, #40]	@ (8003198 <HAL_Init+0x40>)
 800316e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003172:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003174:	4b08      	ldr	r3, [pc, #32]	@ (8003198 <HAL_Init+0x40>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a07      	ldr	r2, [pc, #28]	@ (8003198 <HAL_Init+0x40>)
 800317a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800317e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003180:	2003      	movs	r0, #3
 8003182:	f000 fd51 	bl	8003c28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003186:	200f      	movs	r0, #15
 8003188:	f000 f808 	bl	800319c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800318c:	f7ff fd36 	bl	8002bfc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	40023c00 	.word	0x40023c00

0800319c <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031a4:	4b12      	ldr	r3, [pc, #72]	@ (80031f0 <HAL_InitTick+0x54>)
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	4b12      	ldr	r3, [pc, #72]	@ (80031f4 <HAL_InitTick+0x58>)
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	4619      	mov	r1, r3
 80031ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80031b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80031b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 fd69 	bl	8003c92 <HAL_SYSTICK_Config>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e00e      	b.n	80031e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2b0f      	cmp	r3, #15
 80031ce:	d80a      	bhi.n	80031e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031d0:	2200      	movs	r2, #0
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	f04f 30ff 	mov.w	r0, #4294967295
 80031d8:	f000 fd31 	bl	8003c3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031dc:	4a06      	ldr	r2, [pc, #24]	@ (80031f8 <HAL_InitTick+0x5c>)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
 80031e4:	e000      	b.n	80031e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3708      	adds	r7, #8
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	20000004 	.word	0x20000004
 80031f4:	2000000c 	.word	0x2000000c
 80031f8:	20000008 	.word	0x20000008

080031fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003200:	4b05      	ldr	r3, [pc, #20]	@ (8003218 <HAL_IncTick+0x1c>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	461a      	mov	r2, r3
 8003206:	4b05      	ldr	r3, [pc, #20]	@ (800321c <HAL_IncTick+0x20>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4413      	add	r3, r2
 800320c:	4a03      	ldr	r2, [pc, #12]	@ (800321c <HAL_IncTick+0x20>)
 800320e:	6013      	str	r3, [r2, #0]
}
 8003210:	bf00      	nop
 8003212:	46bd      	mov	sp, r7
 8003214:	bc80      	pop	{r7}
 8003216:	4770      	bx	lr
 8003218:	2000000c 	.word	0x2000000c
 800321c:	20000414 	.word	0x20000414

08003220 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0
  return uwTick;
 8003224:	4b02      	ldr	r3, [pc, #8]	@ (8003230 <HAL_GetTick+0x10>)
 8003226:	681b      	ldr	r3, [r3, #0]
}
 8003228:	4618      	mov	r0, r3
 800322a:	46bd      	mov	sp, r7
 800322c:	bc80      	pop	{r7}
 800322e:	4770      	bx	lr
 8003230:	20000414 	.word	0x20000414

08003234 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800323c:	2300      	movs	r3, #0
 800323e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e033      	b.n	80032b2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324e:	2b00      	cmp	r3, #0
 8003250:	d109      	bne.n	8003266 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7ff fcf8 	bl	8002c48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326a:	f003 0310 	and.w	r3, r3, #16
 800326e:	2b00      	cmp	r3, #0
 8003270:	d118      	bne.n	80032a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003276:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800327a:	f023 0302 	bic.w	r3, r3, #2
 800327e:	f043 0202 	orr.w	r2, r3, #2
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 fa7a 	bl	8003780 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003296:	f023 0303 	bic.w	r3, r3, #3
 800329a:	f043 0201 	orr.w	r2, r3, #1
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	641a      	str	r2, [r3, #64]	@ 0x40
 80032a2:	e001      	b.n	80032a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80032b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
	...

080032bc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80032c8:	2300      	movs	r3, #0
 80032ca:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d101      	bne.n	80032da <HAL_ADC_Start_DMA+0x1e>
 80032d6:	2302      	movs	r3, #2
 80032d8:	e0bc      	b.n	8003454 <HAL_ADC_Start_DMA+0x198>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d018      	beq.n	8003322 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689a      	ldr	r2, [r3, #8]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f042 0201 	orr.w	r2, r2, #1
 80032fe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003300:	4b56      	ldr	r3, [pc, #344]	@ (800345c <HAL_ADC_Start_DMA+0x1a0>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a56      	ldr	r2, [pc, #344]	@ (8003460 <HAL_ADC_Start_DMA+0x1a4>)
 8003306:	fba2 2303 	umull	r2, r3, r2, r3
 800330a:	0c9a      	lsrs	r2, r3, #18
 800330c:	4613      	mov	r3, r2
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	4413      	add	r3, r2
 8003312:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8003314:	e002      	b.n	800331c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	3b01      	subs	r3, #1
 800331a:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1f9      	bne.n	8003316 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b01      	cmp	r3, #1
 800332e:	f040 8084 	bne.w	800343a <HAL_ADC_Start_DMA+0x17e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003336:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800333a:	f023 0301 	bic.w	r3, r3, #1
 800333e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003350:	2b00      	cmp	r3, #0
 8003352:	d007      	beq.n	8003364 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003358:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800335c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003368:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800336c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003370:	d106      	bne.n	8003380 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003376:	f023 0206 	bic.w	r2, r3, #6
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	645a      	str	r2, [r3, #68]	@ 0x44
 800337e:	e002      	b.n	8003386 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003392:	4a34      	ldr	r2, [pc, #208]	@ (8003464 <HAL_ADC_Start_DMA+0x1a8>)
 8003394:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800339a:	4a33      	ldr	r2, [pc, #204]	@ (8003468 <HAL_ADC_Start_DMA+0x1ac>)
 800339c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033a2:	4a32      	ldr	r2, [pc, #200]	@ (800346c <HAL_ADC_Start_DMA+0x1b0>)
 80033a4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80033ae:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80033be:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689a      	ldr	r2, [r3, #8]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033ce:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	334c      	adds	r3, #76	@ 0x4c
 80033da:	4619      	mov	r1, r3
 80033dc:	68ba      	ldr	r2, [r7, #8]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f000 fd12 	bl	8003e08 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80033e4:	4b22      	ldr	r3, [pc, #136]	@ (8003470 <HAL_ADC_Start_DMA+0x1b4>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f003 031f 	and.w	r3, r3, #31
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10f      	bne.n	8003410 <HAL_ADC_Start_DMA+0x154>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d129      	bne.n	8003452 <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689a      	ldr	r2, [r3, #8]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800340c:	609a      	str	r2, [r3, #8]
 800340e:	e020      	b.n	8003452 <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a17      	ldr	r2, [pc, #92]	@ (8003474 <HAL_ADC_Start_DMA+0x1b8>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d11b      	bne.n	8003452 <HAL_ADC_Start_DMA+0x196>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d114      	bne.n	8003452 <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689a      	ldr	r2, [r3, #8]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003436:	609a      	str	r2, [r3, #8]
 8003438:	e00b      	b.n	8003452 <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343e:	f043 0210 	orr.w	r2, r3, #16
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800344a:	f043 0201 	orr.w	r2, r3, #1
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3718      	adds	r7, #24
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	20000004 	.word	0x20000004
 8003460:	431bde83 	.word	0x431bde83
 8003464:	0800398d 	.word	0x0800398d
 8003468:	08003a47 	.word	0x08003a47
 800346c:	08003a63 	.word	0x08003a63
 8003470:	40012300 	.word	0x40012300
 8003474:	40012000 	.word	0x40012000

08003478 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003480:	2300      	movs	r3, #0
 8003482:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800348a:	2b01      	cmp	r3, #1
 800348c:	d101      	bne.n	8003492 <HAL_ADC_Stop_DMA+0x1a>
 800348e:	2302      	movs	r3, #2
 8003490:	e03f      	b.n	8003512 <HAL_ADC_Stop_DMA+0x9a>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 0201 	bic.w	r2, r2, #1
 80034a8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d127      	bne.n	8003508 <HAL_ADC_Stop_DMA+0x90>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689a      	ldr	r2, [r3, #8]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80034c6:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d118      	bne.n	8003508 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 fcec 	bl	8003eb8 <HAL_DMA_Abort>
 80034e0:	4603      	mov	r3, r0
 80034e2:	73fb      	strb	r3, [r7, #15]
      
      /* Disable ADC overrun interrupt */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 80034f2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80034fc:	f023 0301 	bic.w	r3, r3, #1
 8003500:	f043 0201 	orr.w	r2, r3, #1
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003510:	7bfb      	ldrb	r3, [r7, #15]
}
 8003512:	4618      	mov	r0, r3
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800351a:	b480      	push	{r7}
 800351c:	b083      	sub	sp, #12
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003522:	bf00      	nop
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	bc80      	pop	{r7}
 800352a:	4770      	bx	lr

0800352c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	bc80      	pop	{r7}
 800353c:	4770      	bx	lr
	...

08003540 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800354a:	2300      	movs	r3, #0
 800354c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003554:	2b01      	cmp	r3, #1
 8003556:	d101      	bne.n	800355c <HAL_ADC_ConfigChannel+0x1c>
 8003558:	2302      	movs	r3, #2
 800355a:	e103      	b.n	8003764 <HAL_ADC_ConfigChannel+0x224>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2b09      	cmp	r3, #9
 800356a:	d925      	bls.n	80035b8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68d9      	ldr	r1, [r3, #12]
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	b29b      	uxth	r3, r3
 8003578:	461a      	mov	r2, r3
 800357a:	4613      	mov	r3, r2
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	4413      	add	r3, r2
 8003580:	3b1e      	subs	r3, #30
 8003582:	2207      	movs	r2, #7
 8003584:	fa02 f303 	lsl.w	r3, r2, r3
 8003588:	43da      	mvns	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	400a      	ands	r2, r1
 8003590:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68d9      	ldr	r1, [r3, #12]
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	689a      	ldr	r2, [r3, #8]
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	4618      	mov	r0, r3
 80035a4:	4603      	mov	r3, r0
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	4403      	add	r3, r0
 80035aa:	3b1e      	subs	r3, #30
 80035ac:	409a      	lsls	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	60da      	str	r2, [r3, #12]
 80035b6:	e022      	b.n	80035fe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6919      	ldr	r1, [r3, #16]
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	461a      	mov	r2, r3
 80035c6:	4613      	mov	r3, r2
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	4413      	add	r3, r2
 80035cc:	2207      	movs	r2, #7
 80035ce:	fa02 f303 	lsl.w	r3, r2, r3
 80035d2:	43da      	mvns	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	400a      	ands	r2, r1
 80035da:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6919      	ldr	r1, [r3, #16]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	689a      	ldr	r2, [r3, #8]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	4618      	mov	r0, r3
 80035ee:	4603      	mov	r3, r0
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	4403      	add	r3, r0
 80035f4:	409a      	lsls	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	430a      	orrs	r2, r1
 80035fc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	2b06      	cmp	r3, #6
 8003604:	d824      	bhi.n	8003650 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	4613      	mov	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4413      	add	r3, r2
 8003616:	3b05      	subs	r3, #5
 8003618:	221f      	movs	r2, #31
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	43da      	mvns	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	400a      	ands	r2, r1
 8003626:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	b29b      	uxth	r3, r3
 8003634:	4618      	mov	r0, r3
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	4613      	mov	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	4413      	add	r3, r2
 8003640:	3b05      	subs	r3, #5
 8003642:	fa00 f203 	lsl.w	r2, r0, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	430a      	orrs	r2, r1
 800364c:	635a      	str	r2, [r3, #52]	@ 0x34
 800364e:	e04c      	b.n	80036ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	2b0c      	cmp	r3, #12
 8003656:	d824      	bhi.n	80036a2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	4613      	mov	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	4413      	add	r3, r2
 8003668:	3b23      	subs	r3, #35	@ 0x23
 800366a:	221f      	movs	r2, #31
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	43da      	mvns	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	400a      	ands	r2, r1
 8003678:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	b29b      	uxth	r3, r3
 8003686:	4618      	mov	r0, r3
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	4613      	mov	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	4413      	add	r3, r2
 8003692:	3b23      	subs	r3, #35	@ 0x23
 8003694:	fa00 f203 	lsl.w	r2, r0, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	631a      	str	r2, [r3, #48]	@ 0x30
 80036a0:	e023      	b.n	80036ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	4613      	mov	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4413      	add	r3, r2
 80036b2:	3b41      	subs	r3, #65	@ 0x41
 80036b4:	221f      	movs	r2, #31
 80036b6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ba:	43da      	mvns	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	400a      	ands	r2, r1
 80036c2:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	4618      	mov	r0, r3
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	685a      	ldr	r2, [r3, #4]
 80036d6:	4613      	mov	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	4413      	add	r3, r2
 80036dc:	3b41      	subs	r3, #65	@ 0x41
 80036de:	fa00 f203 	lsl.w	r2, r0, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a20      	ldr	r2, [pc, #128]	@ (8003770 <HAL_ADC_ConfigChannel+0x230>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d109      	bne.n	8003708 <HAL_ADC_ConfigChannel+0x1c8>
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2b12      	cmp	r3, #18
 80036fa:	d105      	bne.n	8003708 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80036fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003774 <HAL_ADC_ConfigChannel+0x234>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	4a1c      	ldr	r2, [pc, #112]	@ (8003774 <HAL_ADC_ConfigChannel+0x234>)
 8003702:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003706:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a18      	ldr	r2, [pc, #96]	@ (8003770 <HAL_ADC_ConfigChannel+0x230>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d123      	bne.n	800375a <HAL_ADC_ConfigChannel+0x21a>
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2b10      	cmp	r3, #16
 8003718:	d003      	beq.n	8003722 <HAL_ADC_ConfigChannel+0x1e2>
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2b11      	cmp	r3, #17
 8003720:	d11b      	bne.n	800375a <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003722:	4b14      	ldr	r3, [pc, #80]	@ (8003774 <HAL_ADC_ConfigChannel+0x234>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	4a13      	ldr	r2, [pc, #76]	@ (8003774 <HAL_ADC_ConfigChannel+0x234>)
 8003728:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800372c:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2b10      	cmp	r3, #16
 8003734:	d111      	bne.n	800375a <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003736:	4b10      	ldr	r3, [pc, #64]	@ (8003778 <HAL_ADC_ConfigChannel+0x238>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a10      	ldr	r2, [pc, #64]	@ (800377c <HAL_ADC_ConfigChannel+0x23c>)
 800373c:	fba2 2303 	umull	r2, r3, r2, r3
 8003740:	0c9a      	lsrs	r2, r3, #18
 8003742:	4613      	mov	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	4413      	add	r3, r2
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 800374c:	e002      	b.n	8003754 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	3b01      	subs	r3, #1
 8003752:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1f9      	bne.n	800374e <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	bc80      	pop	{r7}
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	40012000 	.word	0x40012000
 8003774:	40012300 	.word	0x40012300
 8003778:	20000004 	.word	0x20000004
 800377c:	431bde83 	.word	0x431bde83

08003780 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003788:	4b7e      	ldr	r3, [pc, #504]	@ (8003984 <ADC_Init+0x204>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	4a7d      	ldr	r2, [pc, #500]	@ (8003984 <ADC_Init+0x204>)
 800378e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8003792:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003794:	4b7b      	ldr	r3, [pc, #492]	@ (8003984 <ADC_Init+0x204>)
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	4979      	ldr	r1, [pc, #484]	@ (8003984 <ADC_Init+0x204>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80037b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6859      	ldr	r1, [r3, #4]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	021a      	lsls	r2, r3, #8
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	430a      	orrs	r2, r1
 80037c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80037d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6859      	ldr	r1, [r3, #4]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	430a      	orrs	r2, r1
 80037e6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689a      	ldr	r2, [r3, #8]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6899      	ldr	r1, [r3, #8]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68da      	ldr	r2, [r3, #12]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	430a      	orrs	r2, r1
 8003808:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800380e:	4a5e      	ldr	r2, [pc, #376]	@ (8003988 <ADC_Init+0x208>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d022      	beq.n	800385a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689a      	ldr	r2, [r3, #8]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003822:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6899      	ldr	r1, [r3, #8]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	430a      	orrs	r2, r1
 8003834:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003844:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	6899      	ldr	r1, [r3, #8]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	430a      	orrs	r2, r1
 8003856:	609a      	str	r2, [r3, #8]
 8003858:	e00f      	b.n	800387a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003868:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003878:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 0202 	bic.w	r2, r2, #2
 8003888:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	6899      	ldr	r1, [r3, #8]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	7e1b      	ldrb	r3, [r3, #24]
 8003894:	005a      	lsls	r2, r3, #1
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	430a      	orrs	r2, r1
 800389c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d027      	beq.n	80038f8 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038b6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685a      	ldr	r2, [r3, #4]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80038c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038cc:	3b01      	subs	r3, #1
 80038ce:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 80038d2:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	fa92 f2a2 	rbit	r2, r2
 80038da:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80038dc:	68ba      	ldr	r2, [r7, #8]
 80038de:	fab2 f282 	clz	r2, r2
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	fa03 f102 	lsl.w	r1, r3, r2
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	685a      	ldr	r2, [r3, #4]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	430a      	orrs	r2, r1
 80038f4:	605a      	str	r2, [r3, #4]
 80038f6:	e007      	b.n	8003908 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	685a      	ldr	r2, [r3, #4]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003906:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003916:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	69db      	ldr	r3, [r3, #28]
 8003922:	3b01      	subs	r3, #1
 8003924:	051a      	lsls	r2, r3, #20
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	689a      	ldr	r2, [r3, #8]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800393c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6899      	ldr	r1, [r3, #8]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800394a:	025a      	lsls	r2, r3, #9
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	430a      	orrs	r2, r1
 8003952:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	689a      	ldr	r2, [r3, #8]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003962:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6899      	ldr	r1, [r3, #8]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	029a      	lsls	r2, r3, #10
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	430a      	orrs	r2, r1
 8003976:	609a      	str	r2, [r3, #8]
}
 8003978:	bf00      	nop
 800397a:	3714      	adds	r7, #20
 800397c:	46bd      	mov	sp, r7
 800397e:	bc80      	pop	{r7}
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	40012300 	.word	0x40012300
 8003988:	0f000001 	.word	0x0f000001

0800398c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003998:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d13c      	bne.n	8003a20 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039aa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d12b      	bne.n	8003a18 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d127      	bne.n	8003a18 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ce:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d006      	beq.n	80039e4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d119      	bne.n	8003a18 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f022 0220 	bic.w	r2, r2, #32
 80039f2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d105      	bne.n	8003a18 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a10:	f043 0201 	orr.w	r2, r3, #1
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f7fd ff43 	bl	80018a4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003a1e:	e00e      	b.n	8003a3e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a24:	f003 0310 	and.w	r3, r3, #16
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d003      	beq.n	8003a34 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f7ff fd7d 	bl	800352c <HAL_ADC_ErrorCallback>
}
 8003a32:	e004      	b.n	8003a3e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	4798      	blx	r3
}
 8003a3e:	bf00      	nop
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b084      	sub	sp, #16
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a52:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f7ff fd60 	bl	800351a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a5a:	bf00      	nop
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b084      	sub	sp, #16
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a6e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2240      	movs	r2, #64	@ 0x40
 8003a74:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a7a:	f043 0204 	orr.w	r2, r3, #4
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	645a      	str	r2, [r3, #68]	@ 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f7ff fd52 	bl	800352c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a88:	bf00      	nop
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f003 0307 	and.w	r3, r3, #7
 8003a9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003aa6:	68ba      	ldr	r2, [r7, #8]
 8003aa8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003aac:	4013      	ands	r3, r2
 8003aae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ab8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003abc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ac2:	4a04      	ldr	r2, [pc, #16]	@ (8003ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	60d3      	str	r3, [r2, #12]
}
 8003ac8:	bf00      	nop
 8003aca:	3714      	adds	r7, #20
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bc80      	pop	{r7}
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	e000ed00 	.word	0xe000ed00

08003ad8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003adc:	4b04      	ldr	r3, [pc, #16]	@ (8003af0 <__NVIC_GetPriorityGrouping+0x18>)
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	0a1b      	lsrs	r3, r3, #8
 8003ae2:	f003 0307 	and.w	r3, r3, #7
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bc80      	pop	{r7}
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	e000ed00 	.word	0xe000ed00

08003af4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	4603      	mov	r3, r0
 8003afc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	db0b      	blt.n	8003b1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b06:	79fb      	ldrb	r3, [r7, #7]
 8003b08:	f003 021f 	and.w	r2, r3, #31
 8003b0c:	4906      	ldr	r1, [pc, #24]	@ (8003b28 <__NVIC_EnableIRQ+0x34>)
 8003b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b12:	095b      	lsrs	r3, r3, #5
 8003b14:	2001      	movs	r0, #1
 8003b16:	fa00 f202 	lsl.w	r2, r0, r2
 8003b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b1e:	bf00      	nop
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bc80      	pop	{r7}
 8003b26:	4770      	bx	lr
 8003b28:	e000e100 	.word	0xe000e100

08003b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	4603      	mov	r3, r0
 8003b34:	6039      	str	r1, [r7, #0]
 8003b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	db0a      	blt.n	8003b56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	b2da      	uxtb	r2, r3
 8003b44:	490c      	ldr	r1, [pc, #48]	@ (8003b78 <__NVIC_SetPriority+0x4c>)
 8003b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b4a:	0112      	lsls	r2, r2, #4
 8003b4c:	b2d2      	uxtb	r2, r2
 8003b4e:	440b      	add	r3, r1
 8003b50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b54:	e00a      	b.n	8003b6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	b2da      	uxtb	r2, r3
 8003b5a:	4908      	ldr	r1, [pc, #32]	@ (8003b7c <__NVIC_SetPriority+0x50>)
 8003b5c:	79fb      	ldrb	r3, [r7, #7]
 8003b5e:	f003 030f 	and.w	r3, r3, #15
 8003b62:	3b04      	subs	r3, #4
 8003b64:	0112      	lsls	r2, r2, #4
 8003b66:	b2d2      	uxtb	r2, r2
 8003b68:	440b      	add	r3, r1
 8003b6a:	761a      	strb	r2, [r3, #24]
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bc80      	pop	{r7}
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	e000e100 	.word	0xe000e100
 8003b7c:	e000ed00 	.word	0xe000ed00

08003b80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b089      	sub	sp, #36	@ 0x24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f003 0307 	and.w	r3, r3, #7
 8003b92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	f1c3 0307 	rsb	r3, r3, #7
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	bf28      	it	cs
 8003b9e:	2304      	movcs	r3, #4
 8003ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	3304      	adds	r3, #4
 8003ba6:	2b06      	cmp	r3, #6
 8003ba8:	d902      	bls.n	8003bb0 <NVIC_EncodePriority+0x30>
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	3b03      	subs	r3, #3
 8003bae:	e000      	b.n	8003bb2 <NVIC_EncodePriority+0x32>
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbe:	43da      	mvns	r2, r3
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	401a      	ands	r2, r3
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd2:	43d9      	mvns	r1, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bd8:	4313      	orrs	r3, r2
         );
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3724      	adds	r7, #36	@ 0x24
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bc80      	pop	{r7}
 8003be2:	4770      	bx	lr

08003be4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003bf4:	d301      	bcc.n	8003bfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e00f      	b.n	8003c1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8003c24 <SysTick_Config+0x40>)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c02:	210f      	movs	r1, #15
 8003c04:	f04f 30ff 	mov.w	r0, #4294967295
 8003c08:	f7ff ff90 	bl	8003b2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c0c:	4b05      	ldr	r3, [pc, #20]	@ (8003c24 <SysTick_Config+0x40>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c12:	4b04      	ldr	r3, [pc, #16]	@ (8003c24 <SysTick_Config+0x40>)
 8003c14:	2207      	movs	r2, #7
 8003c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	e000e010 	.word	0xe000e010

08003c28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f7ff ff2d 	bl	8003a90 <__NVIC_SetPriorityGrouping>
}
 8003c36:	bf00      	nop
 8003c38:	3708      	adds	r7, #8
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b086      	sub	sp, #24
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	4603      	mov	r3, r0
 8003c46:	60b9      	str	r1, [r7, #8]
 8003c48:	607a      	str	r2, [r7, #4]
 8003c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c50:	f7ff ff42 	bl	8003ad8 <__NVIC_GetPriorityGrouping>
 8003c54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	68b9      	ldr	r1, [r7, #8]
 8003c5a:	6978      	ldr	r0, [r7, #20]
 8003c5c:	f7ff ff90 	bl	8003b80 <NVIC_EncodePriority>
 8003c60:	4602      	mov	r2, r0
 8003c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c66:	4611      	mov	r1, r2
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7ff ff5f 	bl	8003b2c <__NVIC_SetPriority>
}
 8003c6e:	bf00      	nop
 8003c70:	3718      	adds	r7, #24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b082      	sub	sp, #8
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7ff ff35 	bl	8003af4 <__NVIC_EnableIRQ>
}
 8003c8a:	bf00      	nop
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b082      	sub	sp, #8
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7ff ffa2 	bl	8003be4 <SysTick_Config>
 8003ca0:	4603      	mov	r3, r0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
	...

08003cac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003cb8:	f7ff fab2 	bl	8003220 <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d101      	bne.n	8003cc8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e099      	b.n	8003dfc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2202      	movs	r2, #2
 8003ccc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f022 0201 	bic.w	r2, r2, #1
 8003ce6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ce8:	e00f      	b.n	8003d0a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003cea:	f7ff fa99 	bl	8003220 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	2b05      	cmp	r3, #5
 8003cf6:	d908      	bls.n	8003d0a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2203      	movs	r2, #3
 8003d02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e078      	b.n	8003dfc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0301 	and.w	r3, r3, #1
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1e8      	bne.n	8003cea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	4b38      	ldr	r3, [pc, #224]	@ (8003e04 <HAL_DMA_Init+0x158>)
 8003d24:	4013      	ands	r3, r2
 8003d26:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685a      	ldr	r2, [r3, #4]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d36:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d56:	697a      	ldr	r2, [r7, #20]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d60:	2b04      	cmp	r3, #4
 8003d62:	d107      	bne.n	8003d74 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	f023 0307 	bic.w	r3, r3, #7
 8003d8a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d9a:	2b04      	cmp	r3, #4
 8003d9c:	d117      	bne.n	8003dce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00e      	beq.n	8003dce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 fadd 	bl	8004370 <DMA_CheckFifoParam>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d008      	beq.n	8003dce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2240      	movs	r2, #64	@ 0x40
 8003dc0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e016      	b.n	8003dfc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 fa96 	bl	8004308 <DMA_CalcBaseAndBitshift>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003de4:	223f      	movs	r2, #63	@ 0x3f
 8003de6:	409a      	lsls	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2201      	movs	r2, #1
 8003df6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3718      	adds	r7, #24
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	f010803f 	.word	0xf010803f

08003e08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
 8003e14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e16:	2300      	movs	r3, #0
 8003e18:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e1e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d101      	bne.n	8003e2e <HAL_DMA_Start_IT+0x26>
 8003e2a:	2302      	movs	r3, #2
 8003e2c:	e040      	b.n	8003eb0 <HAL_DMA_Start_IT+0xa8>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d12f      	bne.n	8003ea2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2202      	movs	r2, #2
 8003e46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	68b9      	ldr	r1, [r7, #8]
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f000 fa28 	bl	80042ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e60:	223f      	movs	r2, #63	@ 0x3f
 8003e62:	409a      	lsls	r2, r3
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f042 0216 	orr.w	r2, r2, #22
 8003e76:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d007      	beq.n	8003e90 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f042 0208 	orr.w	r2, r2, #8
 8003e8e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f042 0201 	orr.w	r2, r2, #1
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	e005      	b.n	8003eae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003eaa:	2302      	movs	r3, #2
 8003eac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3718      	adds	r7, #24
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ec4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003ec6:	f7ff f9ab 	bl	8003220 <HAL_GetTick>
 8003eca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d008      	beq.n	8003eea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2280      	movs	r2, #128	@ 0x80
 8003edc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e052      	b.n	8003f90 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 0216 	bic.w	r2, r2, #22
 8003ef8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	695a      	ldr	r2, [r3, #20]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f08:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d103      	bne.n	8003f1a <HAL_DMA_Abort+0x62>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d007      	beq.n	8003f2a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f022 0208 	bic.w	r2, r2, #8
 8003f28:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 0201 	bic.w	r2, r2, #1
 8003f38:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f3a:	e013      	b.n	8003f64 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f3c:	f7ff f970 	bl	8003220 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b05      	cmp	r3, #5
 8003f48:	d90c      	bls.n	8003f64 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2220      	movs	r2, #32
 8003f4e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2203      	movs	r2, #3
 8003f54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e015      	b.n	8003f90 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1e4      	bne.n	8003f3c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f76:	223f      	movs	r2, #63	@ 0x3f
 8003f78:	409a      	lsls	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b086      	sub	sp, #24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003fa4:	4b8e      	ldr	r3, [pc, #568]	@ (80041e0 <HAL_DMA_IRQHandler+0x248>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a8e      	ldr	r2, [pc, #568]	@ (80041e4 <HAL_DMA_IRQHandler+0x24c>)
 8003faa:	fba2 2303 	umull	r2, r3, r2, r3
 8003fae:	0a9b      	lsrs	r3, r3, #10
 8003fb0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fb6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fc2:	2208      	movs	r2, #8
 8003fc4:	409a      	lsls	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d01a      	beq.n	8004004 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d013      	beq.n	8004004 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f022 0204 	bic.w	r2, r2, #4
 8003fea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ff0:	2208      	movs	r2, #8
 8003ff2:	409a      	lsls	r2, r3
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ffc:	f043 0201 	orr.w	r2, r3, #1
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004008:	2201      	movs	r2, #1
 800400a:	409a      	lsls	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	4013      	ands	r3, r2
 8004010:	2b00      	cmp	r3, #0
 8004012:	d012      	beq.n	800403a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00b      	beq.n	800403a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004026:	2201      	movs	r2, #1
 8004028:	409a      	lsls	r2, r3
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004032:	f043 0202 	orr.w	r2, r3, #2
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800403e:	2204      	movs	r2, #4
 8004040:	409a      	lsls	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	4013      	ands	r3, r2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d012      	beq.n	8004070 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00b      	beq.n	8004070 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800405c:	2204      	movs	r2, #4
 800405e:	409a      	lsls	r2, r3
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004068:	f043 0204 	orr.w	r2, r3, #4
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004074:	2210      	movs	r2, #16
 8004076:	409a      	lsls	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	4013      	ands	r3, r2
 800407c:	2b00      	cmp	r3, #0
 800407e:	d043      	beq.n	8004108 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0308 	and.w	r3, r3, #8
 800408a:	2b00      	cmp	r3, #0
 800408c:	d03c      	beq.n	8004108 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004092:	2210      	movs	r2, #16
 8004094:	409a      	lsls	r2, r3
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d018      	beq.n	80040da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d108      	bne.n	80040c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d024      	beq.n	8004108 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	4798      	blx	r3
 80040c6:	e01f      	b.n	8004108 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d01b      	beq.n	8004108 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	4798      	blx	r3
 80040d8:	e016      	b.n	8004108 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d107      	bne.n	80040f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f022 0208 	bic.w	r2, r2, #8
 80040f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d003      	beq.n	8004108 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800410c:	2220      	movs	r2, #32
 800410e:	409a      	lsls	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	4013      	ands	r3, r2
 8004114:	2b00      	cmp	r3, #0
 8004116:	f000 808f 	beq.w	8004238 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0310 	and.w	r3, r3, #16
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 8087 	beq.w	8004238 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800412e:	2220      	movs	r2, #32
 8004130:	409a      	lsls	r2, r3
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b05      	cmp	r3, #5
 8004140:	d136      	bne.n	80041b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f022 0216 	bic.w	r2, r2, #22
 8004150:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	695a      	ldr	r2, [r3, #20]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004160:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004166:	2b00      	cmp	r3, #0
 8004168:	d103      	bne.n	8004172 <HAL_DMA_IRQHandler+0x1da>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800416e:	2b00      	cmp	r3, #0
 8004170:	d007      	beq.n	8004182 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 0208 	bic.w	r2, r2, #8
 8004180:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004186:	223f      	movs	r2, #63	@ 0x3f
 8004188:	409a      	lsls	r2, r3
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2201      	movs	r2, #1
 8004192:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d07e      	beq.n	80042a4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	4798      	blx	r3
        }
        return;
 80041ae:	e079      	b.n	80042a4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d01d      	beq.n	80041fa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d10d      	bne.n	80041e8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d031      	beq.n	8004238 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	4798      	blx	r3
 80041dc:	e02c      	b.n	8004238 <HAL_DMA_IRQHandler+0x2a0>
 80041de:	bf00      	nop
 80041e0:	20000004 	.word	0x20000004
 80041e4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d023      	beq.n	8004238 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	4798      	blx	r3
 80041f8:	e01e      	b.n	8004238 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004204:	2b00      	cmp	r3, #0
 8004206:	d10f      	bne.n	8004228 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 0210 	bic.w	r2, r2, #16
 8004216:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800422c:	2b00      	cmp	r3, #0
 800422e:	d003      	beq.n	8004238 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800423c:	2b00      	cmp	r3, #0
 800423e:	d032      	beq.n	80042a6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	2b00      	cmp	r3, #0
 800424a:	d022      	beq.n	8004292 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2205      	movs	r2, #5
 8004250:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f022 0201 	bic.w	r2, r2, #1
 8004262:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	3301      	adds	r3, #1
 8004268:	60bb      	str	r3, [r7, #8]
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	429a      	cmp	r2, r3
 800426e:	d307      	bcc.n	8004280 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1f2      	bne.n	8004264 <HAL_DMA_IRQHandler+0x2cc>
 800427e:	e000      	b.n	8004282 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004280:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004296:	2b00      	cmp	r3, #0
 8004298:	d005      	beq.n	80042a6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	4798      	blx	r3
 80042a2:	e000      	b.n	80042a6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80042a4:	bf00      	nop
    }
  }
}
 80042a6:	3718      	adds	r7, #24
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
 80042b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80042c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	683a      	ldr	r2, [r7, #0]
 80042d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	2b40      	cmp	r3, #64	@ 0x40
 80042d8:	d108      	bne.n	80042ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80042ea:	e007      	b.n	80042fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	60da      	str	r2, [r3, #12]
}
 80042fc:	bf00      	nop
 80042fe:	3714      	adds	r7, #20
 8004300:	46bd      	mov	sp, r7
 8004302:	bc80      	pop	{r7}
 8004304:	4770      	bx	lr
	...

08004308 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	b2db      	uxtb	r3, r3
 8004316:	3b10      	subs	r3, #16
 8004318:	4a13      	ldr	r2, [pc, #76]	@ (8004368 <DMA_CalcBaseAndBitshift+0x60>)
 800431a:	fba2 2303 	umull	r2, r3, r2, r3
 800431e:	091b      	lsrs	r3, r3, #4
 8004320:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004322:	4a12      	ldr	r2, [pc, #72]	@ (800436c <DMA_CalcBaseAndBitshift+0x64>)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	4413      	add	r3, r2
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	461a      	mov	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2b03      	cmp	r3, #3
 8004334:	d909      	bls.n	800434a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800433e:	f023 0303 	bic.w	r3, r3, #3
 8004342:	1d1a      	adds	r2, r3, #4
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	659a      	str	r2, [r3, #88]	@ 0x58
 8004348:	e007      	b.n	800435a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004352:	f023 0303 	bic.w	r3, r3, #3
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800435e:	4618      	mov	r0, r3
 8004360:	3714      	adds	r7, #20
 8004362:	46bd      	mov	sp, r7
 8004364:	bc80      	pop	{r7}
 8004366:	4770      	bx	lr
 8004368:	aaaaaaab 	.word	0xaaaaaaab
 800436c:	08007298 	.word	0x08007298

08004370 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004378:	2300      	movs	r3, #0
 800437a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004380:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d11f      	bne.n	80043ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	2b03      	cmp	r3, #3
 800438e:	d856      	bhi.n	800443e <DMA_CheckFifoParam+0xce>
 8004390:	a201      	add	r2, pc, #4	@ (adr r2, 8004398 <DMA_CheckFifoParam+0x28>)
 8004392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004396:	bf00      	nop
 8004398:	080043a9 	.word	0x080043a9
 800439c:	080043bb 	.word	0x080043bb
 80043a0:	080043a9 	.word	0x080043a9
 80043a4:	0800443f 	.word	0x0800443f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d046      	beq.n	8004442 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043b8:	e043      	b.n	8004442 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043be:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80043c2:	d140      	bne.n	8004446 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043c8:	e03d      	b.n	8004446 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043d2:	d121      	bne.n	8004418 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	2b03      	cmp	r3, #3
 80043d8:	d837      	bhi.n	800444a <DMA_CheckFifoParam+0xda>
 80043da:	a201      	add	r2, pc, #4	@ (adr r2, 80043e0 <DMA_CheckFifoParam+0x70>)
 80043dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e0:	080043f1 	.word	0x080043f1
 80043e4:	080043f7 	.word	0x080043f7
 80043e8:	080043f1 	.word	0x080043f1
 80043ec:	08004409 	.word	0x08004409
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	73fb      	strb	r3, [r7, #15]
      break;
 80043f4:	e030      	b.n	8004458 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d025      	beq.n	800444e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004406:	e022      	b.n	800444e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800440c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004410:	d11f      	bne.n	8004452 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004416:	e01c      	b.n	8004452 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	2b02      	cmp	r3, #2
 800441c:	d903      	bls.n	8004426 <DMA_CheckFifoParam+0xb6>
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	2b03      	cmp	r3, #3
 8004422:	d003      	beq.n	800442c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004424:	e018      	b.n	8004458 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	73fb      	strb	r3, [r7, #15]
      break;
 800442a:	e015      	b.n	8004458 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004430:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00e      	beq.n	8004456 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	73fb      	strb	r3, [r7, #15]
      break;
 800443c:	e00b      	b.n	8004456 <DMA_CheckFifoParam+0xe6>
      break;
 800443e:	bf00      	nop
 8004440:	e00a      	b.n	8004458 <DMA_CheckFifoParam+0xe8>
      break;
 8004442:	bf00      	nop
 8004444:	e008      	b.n	8004458 <DMA_CheckFifoParam+0xe8>
      break;
 8004446:	bf00      	nop
 8004448:	e006      	b.n	8004458 <DMA_CheckFifoParam+0xe8>
      break;
 800444a:	bf00      	nop
 800444c:	e004      	b.n	8004458 <DMA_CheckFifoParam+0xe8>
      break;
 800444e:	bf00      	nop
 8004450:	e002      	b.n	8004458 <DMA_CheckFifoParam+0xe8>
      break;   
 8004452:	bf00      	nop
 8004454:	e000      	b.n	8004458 <DMA_CheckFifoParam+0xe8>
      break;
 8004456:	bf00      	nop
    }
  } 
  
  return status; 
 8004458:	7bfb      	ldrb	r3, [r7, #15]
}
 800445a:	4618      	mov	r0, r3
 800445c:	3714      	adds	r7, #20
 800445e:	46bd      	mov	sp, r7
 8004460:	bc80      	pop	{r7}
 8004462:	4770      	bx	lr

08004464 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004464:	b480      	push	{r7}
 8004466:	b087      	sub	sp, #28
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800446e:	2300      	movs	r3, #0
 8004470:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004472:	e16f      	b.n	8004754 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	2101      	movs	r1, #1
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	fa01 f303 	lsl.w	r3, r1, r3
 8004480:	4013      	ands	r3, r2
 8004482:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2b00      	cmp	r3, #0
 8004488:	f000 8161 	beq.w	800474e <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f003 0303 	and.w	r3, r3, #3
 8004494:	2b01      	cmp	r3, #1
 8004496:	d005      	beq.n	80044a4 <HAL_GPIO_Init+0x40>
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f003 0303 	and.w	r3, r3, #3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d130      	bne.n	8004506 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	2203      	movs	r2, #3
 80044b0:	fa02 f303 	lsl.w	r3, r2, r3
 80044b4:	43db      	mvns	r3, r3
 80044b6:	693a      	ldr	r2, [r7, #16]
 80044b8:	4013      	ands	r3, r2
 80044ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	68da      	ldr	r2, [r3, #12]
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	fa02 f303 	lsl.w	r3, r2, r3
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044da:	2201      	movs	r2, #1
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	fa02 f303 	lsl.w	r3, r2, r3
 80044e2:	43db      	mvns	r3, r3
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	4013      	ands	r3, r2
 80044e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	091b      	lsrs	r3, r3, #4
 80044f0:	f003 0201 	and.w	r2, r3, #1
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	fa02 f303 	lsl.w	r3, r2, r3
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f003 0303 	and.w	r3, r3, #3
 800450e:	2b03      	cmp	r3, #3
 8004510:	d017      	beq.n	8004542 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	005b      	lsls	r3, r3, #1
 800451c:	2203      	movs	r2, #3
 800451e:	fa02 f303 	lsl.w	r3, r2, r3
 8004522:	43db      	mvns	r3, r3
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	4013      	ands	r3, r2
 8004528:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	689a      	ldr	r2, [r3, #8]
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	fa02 f303 	lsl.w	r3, r2, r3
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	4313      	orrs	r3, r2
 800453a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f003 0303 	and.w	r3, r3, #3
 800454a:	2b02      	cmp	r3, #2
 800454c:	d123      	bne.n	8004596 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	08da      	lsrs	r2, r3, #3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	3208      	adds	r2, #8
 8004556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800455a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	f003 0307 	and.w	r3, r3, #7
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	220f      	movs	r2, #15
 8004566:	fa02 f303 	lsl.w	r3, r2, r3
 800456a:	43db      	mvns	r3, r3
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	4013      	ands	r3, r2
 8004570:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	691a      	ldr	r2, [r3, #16]
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	f003 0307 	and.w	r3, r3, #7
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	fa02 f303 	lsl.w	r3, r2, r3
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	4313      	orrs	r3, r2
 8004586:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	08da      	lsrs	r2, r3, #3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	3208      	adds	r2, #8
 8004590:	6939      	ldr	r1, [r7, #16]
 8004592:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	005b      	lsls	r3, r3, #1
 80045a0:	2203      	movs	r2, #3
 80045a2:	fa02 f303 	lsl.w	r3, r2, r3
 80045a6:	43db      	mvns	r3, r3
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	4013      	ands	r3, r2
 80045ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f003 0203 	and.w	r2, r3, #3
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	005b      	lsls	r3, r3, #1
 80045ba:	fa02 f303 	lsl.w	r3, r2, r3
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f000 80bb 	beq.w	800474e <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045d8:	2300      	movs	r3, #0
 80045da:	60bb      	str	r3, [r7, #8]
 80045dc:	4b64      	ldr	r3, [pc, #400]	@ (8004770 <HAL_GPIO_Init+0x30c>)
 80045de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045e0:	4a63      	ldr	r2, [pc, #396]	@ (8004770 <HAL_GPIO_Init+0x30c>)
 80045e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80045e6:	6453      	str	r3, [r2, #68]	@ 0x44
 80045e8:	4b61      	ldr	r3, [pc, #388]	@ (8004770 <HAL_GPIO_Init+0x30c>)
 80045ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045f0:	60bb      	str	r3, [r7, #8]
 80045f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80045f4:	4a5f      	ldr	r2, [pc, #380]	@ (8004774 <HAL_GPIO_Init+0x310>)
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	089b      	lsrs	r3, r3, #2
 80045fa:	3302      	adds	r3, #2
 80045fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004600:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f003 0303 	and.w	r3, r3, #3
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	220f      	movs	r2, #15
 800460c:	fa02 f303 	lsl.w	r3, r2, r3
 8004610:	43db      	mvns	r3, r3
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	4013      	ands	r3, r2
 8004616:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a57      	ldr	r2, [pc, #348]	@ (8004778 <HAL_GPIO_Init+0x314>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d031      	beq.n	8004684 <HAL_GPIO_Init+0x220>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a56      	ldr	r2, [pc, #344]	@ (800477c <HAL_GPIO_Init+0x318>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d02b      	beq.n	8004680 <HAL_GPIO_Init+0x21c>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a55      	ldr	r2, [pc, #340]	@ (8004780 <HAL_GPIO_Init+0x31c>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d025      	beq.n	800467c <HAL_GPIO_Init+0x218>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a54      	ldr	r2, [pc, #336]	@ (8004784 <HAL_GPIO_Init+0x320>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d01f      	beq.n	8004678 <HAL_GPIO_Init+0x214>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a53      	ldr	r2, [pc, #332]	@ (8004788 <HAL_GPIO_Init+0x324>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d019      	beq.n	8004674 <HAL_GPIO_Init+0x210>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a52      	ldr	r2, [pc, #328]	@ (800478c <HAL_GPIO_Init+0x328>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d013      	beq.n	8004670 <HAL_GPIO_Init+0x20c>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a51      	ldr	r2, [pc, #324]	@ (8004790 <HAL_GPIO_Init+0x32c>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d00d      	beq.n	800466c <HAL_GPIO_Init+0x208>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a50      	ldr	r2, [pc, #320]	@ (8004794 <HAL_GPIO_Init+0x330>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d007      	beq.n	8004668 <HAL_GPIO_Init+0x204>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a4f      	ldr	r2, [pc, #316]	@ (8004798 <HAL_GPIO_Init+0x334>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d101      	bne.n	8004664 <HAL_GPIO_Init+0x200>
 8004660:	2308      	movs	r3, #8
 8004662:	e010      	b.n	8004686 <HAL_GPIO_Init+0x222>
 8004664:	2309      	movs	r3, #9
 8004666:	e00e      	b.n	8004686 <HAL_GPIO_Init+0x222>
 8004668:	2307      	movs	r3, #7
 800466a:	e00c      	b.n	8004686 <HAL_GPIO_Init+0x222>
 800466c:	2306      	movs	r3, #6
 800466e:	e00a      	b.n	8004686 <HAL_GPIO_Init+0x222>
 8004670:	2305      	movs	r3, #5
 8004672:	e008      	b.n	8004686 <HAL_GPIO_Init+0x222>
 8004674:	2304      	movs	r3, #4
 8004676:	e006      	b.n	8004686 <HAL_GPIO_Init+0x222>
 8004678:	2303      	movs	r3, #3
 800467a:	e004      	b.n	8004686 <HAL_GPIO_Init+0x222>
 800467c:	2302      	movs	r3, #2
 800467e:	e002      	b.n	8004686 <HAL_GPIO_Init+0x222>
 8004680:	2301      	movs	r3, #1
 8004682:	e000      	b.n	8004686 <HAL_GPIO_Init+0x222>
 8004684:	2300      	movs	r3, #0
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	f002 0203 	and.w	r2, r2, #3
 800468c:	0092      	lsls	r2, r2, #2
 800468e:	4093      	lsls	r3, r2
 8004690:	461a      	mov	r2, r3
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	4313      	orrs	r3, r2
 8004696:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004698:	4936      	ldr	r1, [pc, #216]	@ (8004774 <HAL_GPIO_Init+0x310>)
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	089b      	lsrs	r3, r3, #2
 800469e:	3302      	adds	r3, #2
 80046a0:	693a      	ldr	r2, [r7, #16]
 80046a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046a6:	4b3d      	ldr	r3, [pc, #244]	@ (800479c <HAL_GPIO_Init+0x338>)
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	43db      	mvns	r3, r3
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	4013      	ands	r3, r2
 80046b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d003      	beq.n	80046ca <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80046ca:	4a34      	ldr	r2, [pc, #208]	@ (800479c <HAL_GPIO_Init+0x338>)
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046d0:	4b32      	ldr	r3, [pc, #200]	@ (800479c <HAL_GPIO_Init+0x338>)
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	43db      	mvns	r3, r3
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	4013      	ands	r3, r2
 80046de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d003      	beq.n	80046f4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80046f4:	4a29      	ldr	r2, [pc, #164]	@ (800479c <HAL_GPIO_Init+0x338>)
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80046fa:	4b28      	ldr	r3, [pc, #160]	@ (800479c <HAL_GPIO_Init+0x338>)
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	43db      	mvns	r3, r3
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	4013      	ands	r3, r2
 8004708:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d003      	beq.n	800471e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	4313      	orrs	r3, r2
 800471c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800471e:	4a1f      	ldr	r2, [pc, #124]	@ (800479c <HAL_GPIO_Init+0x338>)
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004724:	4b1d      	ldr	r3, [pc, #116]	@ (800479c <HAL_GPIO_Init+0x338>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	43db      	mvns	r3, r3
 800472e:	693a      	ldr	r2, [r7, #16]
 8004730:	4013      	ands	r3, r2
 8004732:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d003      	beq.n	8004748 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	4313      	orrs	r3, r2
 8004746:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004748:	4a14      	ldr	r2, [pc, #80]	@ (800479c <HAL_GPIO_Init+0x338>)
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	3301      	adds	r3, #1
 8004752:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	fa22 f303 	lsr.w	r3, r2, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	f47f ae88 	bne.w	8004474 <HAL_GPIO_Init+0x10>
  }
}
 8004764:	bf00      	nop
 8004766:	bf00      	nop
 8004768:	371c      	adds	r7, #28
 800476a:	46bd      	mov	sp, r7
 800476c:	bc80      	pop	{r7}
 800476e:	4770      	bx	lr
 8004770:	40023800 	.word	0x40023800
 8004774:	40013800 	.word	0x40013800
 8004778:	40020000 	.word	0x40020000
 800477c:	40020400 	.word	0x40020400
 8004780:	40020800 	.word	0x40020800
 8004784:	40020c00 	.word	0x40020c00
 8004788:	40021000 	.word	0x40021000
 800478c:	40021400 	.word	0x40021400
 8004790:	40021800 	.word	0x40021800
 8004794:	40021c00 	.word	0x40021c00
 8004798:	40022000 	.word	0x40022000
 800479c:	40013c00 	.word	0x40013c00

080047a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	460b      	mov	r3, r1
 80047aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	691a      	ldr	r2, [r3, #16]
 80047b0:	887b      	ldrh	r3, [r7, #2]
 80047b2:	4013      	ands	r3, r2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d002      	beq.n	80047be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80047b8:	2301      	movs	r3, #1
 80047ba:	73fb      	strb	r3, [r7, #15]
 80047bc:	e001      	b.n	80047c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80047be:	2300      	movs	r3, #0
 80047c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80047c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3714      	adds	r7, #20
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bc80      	pop	{r7}
 80047cc:	4770      	bx	lr

080047ce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047ce:	b480      	push	{r7}
 80047d0:	b083      	sub	sp, #12
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
 80047d6:	460b      	mov	r3, r1
 80047d8:	807b      	strh	r3, [r7, #2]
 80047da:	4613      	mov	r3, r2
 80047dc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047de:	787b      	ldrb	r3, [r7, #1]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d003      	beq.n	80047ec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047e4:	887a      	ldrh	r2, [r7, #2]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80047ea:	e003      	b.n	80047f4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80047ec:	887b      	ldrh	r3, [r7, #2]
 80047ee:	041a      	lsls	r2, r3, #16
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	619a      	str	r2, [r3, #24]
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bc80      	pop	{r7}
 80047fc:	4770      	bx	lr
	...

08004800 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e12b      	b.n	8004a6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d106      	bne.n	800482c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f7fe faa2 	bl	8002d70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2224      	movs	r2, #36	@ 0x24
 8004830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f022 0201 	bic.w	r2, r2, #1
 8004842:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004852:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004862:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004864:	f001 fd22 	bl	80062ac <HAL_RCC_GetPCLK1Freq>
 8004868:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	4a81      	ldr	r2, [pc, #516]	@ (8004a74 <HAL_I2C_Init+0x274>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d807      	bhi.n	8004884 <HAL_I2C_Init+0x84>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	4a80      	ldr	r2, [pc, #512]	@ (8004a78 <HAL_I2C_Init+0x278>)
 8004878:	4293      	cmp	r3, r2
 800487a:	bf94      	ite	ls
 800487c:	2301      	movls	r3, #1
 800487e:	2300      	movhi	r3, #0
 8004880:	b2db      	uxtb	r3, r3
 8004882:	e006      	b.n	8004892 <HAL_I2C_Init+0x92>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	4a7d      	ldr	r2, [pc, #500]	@ (8004a7c <HAL_I2C_Init+0x27c>)
 8004888:	4293      	cmp	r3, r2
 800488a:	bf94      	ite	ls
 800488c:	2301      	movls	r3, #1
 800488e:	2300      	movhi	r3, #0
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d001      	beq.n	800489a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e0e7      	b.n	8004a6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	4a78      	ldr	r2, [pc, #480]	@ (8004a80 <HAL_I2C_Init+0x280>)
 800489e:	fba2 2303 	umull	r2, r3, r2, r3
 80048a2:	0c9b      	lsrs	r3, r3, #18
 80048a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68ba      	ldr	r2, [r7, #8]
 80048b6:	430a      	orrs	r2, r1
 80048b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	6a1b      	ldr	r3, [r3, #32]
 80048c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	4a6a      	ldr	r2, [pc, #424]	@ (8004a74 <HAL_I2C_Init+0x274>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d802      	bhi.n	80048d4 <HAL_I2C_Init+0xd4>
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	3301      	adds	r3, #1
 80048d2:	e009      	b.n	80048e8 <HAL_I2C_Init+0xe8>
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80048da:	fb02 f303 	mul.w	r3, r2, r3
 80048de:	4a69      	ldr	r2, [pc, #420]	@ (8004a84 <HAL_I2C_Init+0x284>)
 80048e0:	fba2 2303 	umull	r2, r3, r2, r3
 80048e4:	099b      	lsrs	r3, r3, #6
 80048e6:	3301      	adds	r3, #1
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	6812      	ldr	r2, [r2, #0]
 80048ec:	430b      	orrs	r3, r1
 80048ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	69db      	ldr	r3, [r3, #28]
 80048f6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80048fa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	495c      	ldr	r1, [pc, #368]	@ (8004a74 <HAL_I2C_Init+0x274>)
 8004904:	428b      	cmp	r3, r1
 8004906:	d819      	bhi.n	800493c <HAL_I2C_Init+0x13c>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	1e59      	subs	r1, r3, #1
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	005b      	lsls	r3, r3, #1
 8004912:	fbb1 f3f3 	udiv	r3, r1, r3
 8004916:	1c59      	adds	r1, r3, #1
 8004918:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800491c:	400b      	ands	r3, r1
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00a      	beq.n	8004938 <HAL_I2C_Init+0x138>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	1e59      	subs	r1, r3, #1
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	005b      	lsls	r3, r3, #1
 800492c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004930:	3301      	adds	r3, #1
 8004932:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004936:	e051      	b.n	80049dc <HAL_I2C_Init+0x1dc>
 8004938:	2304      	movs	r3, #4
 800493a:	e04f      	b.n	80049dc <HAL_I2C_Init+0x1dc>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d111      	bne.n	8004968 <HAL_I2C_Init+0x168>
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	1e58      	subs	r0, r3, #1
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6859      	ldr	r1, [r3, #4]
 800494c:	460b      	mov	r3, r1
 800494e:	005b      	lsls	r3, r3, #1
 8004950:	440b      	add	r3, r1
 8004952:	fbb0 f3f3 	udiv	r3, r0, r3
 8004956:	3301      	adds	r3, #1
 8004958:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800495c:	2b00      	cmp	r3, #0
 800495e:	bf0c      	ite	eq
 8004960:	2301      	moveq	r3, #1
 8004962:	2300      	movne	r3, #0
 8004964:	b2db      	uxtb	r3, r3
 8004966:	e012      	b.n	800498e <HAL_I2C_Init+0x18e>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	1e58      	subs	r0, r3, #1
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6859      	ldr	r1, [r3, #4]
 8004970:	460b      	mov	r3, r1
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	440b      	add	r3, r1
 8004976:	0099      	lsls	r1, r3, #2
 8004978:	440b      	add	r3, r1
 800497a:	fbb0 f3f3 	udiv	r3, r0, r3
 800497e:	3301      	adds	r3, #1
 8004980:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004984:	2b00      	cmp	r3, #0
 8004986:	bf0c      	ite	eq
 8004988:	2301      	moveq	r3, #1
 800498a:	2300      	movne	r3, #0
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d001      	beq.n	8004996 <HAL_I2C_Init+0x196>
 8004992:	2301      	movs	r3, #1
 8004994:	e022      	b.n	80049dc <HAL_I2C_Init+0x1dc>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10e      	bne.n	80049bc <HAL_I2C_Init+0x1bc>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	1e58      	subs	r0, r3, #1
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6859      	ldr	r1, [r3, #4]
 80049a6:	460b      	mov	r3, r1
 80049a8:	005b      	lsls	r3, r3, #1
 80049aa:	440b      	add	r3, r1
 80049ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80049b0:	3301      	adds	r3, #1
 80049b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049ba:	e00f      	b.n	80049dc <HAL_I2C_Init+0x1dc>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	1e58      	subs	r0, r3, #1
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6859      	ldr	r1, [r3, #4]
 80049c4:	460b      	mov	r3, r1
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	440b      	add	r3, r1
 80049ca:	0099      	lsls	r1, r3, #2
 80049cc:	440b      	add	r3, r1
 80049ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80049d2:	3301      	adds	r3, #1
 80049d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80049dc:	6879      	ldr	r1, [r7, #4]
 80049de:	6809      	ldr	r1, [r1, #0]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	69da      	ldr	r2, [r3, #28]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	431a      	orrs	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	430a      	orrs	r2, r1
 80049fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004a0a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	6911      	ldr	r1, [r2, #16]
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	68d2      	ldr	r2, [r2, #12]
 8004a16:	4311      	orrs	r1, r2
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	6812      	ldr	r2, [r2, #0]
 8004a1c:	430b      	orrs	r3, r1
 8004a1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	695a      	ldr	r2, [r3, #20]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	431a      	orrs	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f042 0201 	orr.w	r2, r2, #1
 8004a4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2220      	movs	r2, #32
 8004a56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	000186a0 	.word	0x000186a0
 8004a78:	001e847f 	.word	0x001e847f
 8004a7c:	003d08ff 	.word	0x003d08ff
 8004a80:	431bde83 	.word	0x431bde83
 8004a84:	10624dd3 	.word	0x10624dd3

08004a88 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b088      	sub	sp, #32
 8004a8c:	af02      	add	r7, sp, #8
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	4608      	mov	r0, r1
 8004a92:	4611      	mov	r1, r2
 8004a94:	461a      	mov	r2, r3
 8004a96:	4603      	mov	r3, r0
 8004a98:	817b      	strh	r3, [r7, #10]
 8004a9a:	460b      	mov	r3, r1
 8004a9c:	813b      	strh	r3, [r7, #8]
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004aa2:	f7fe fbbd 	bl	8003220 <HAL_GetTick>
 8004aa6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b20      	cmp	r3, #32
 8004ab2:	f040 80d9 	bne.w	8004c68 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	2319      	movs	r3, #25
 8004abc:	2201      	movs	r2, #1
 8004abe:	496d      	ldr	r1, [pc, #436]	@ (8004c74 <HAL_I2C_Mem_Write+0x1ec>)
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f000 fdad 	bl	8005620 <I2C_WaitOnFlagUntilTimeout>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d001      	beq.n	8004ad0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004acc:	2302      	movs	r3, #2
 8004ace:	e0cc      	b.n	8004c6a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d101      	bne.n	8004ade <HAL_I2C_Mem_Write+0x56>
 8004ada:	2302      	movs	r3, #2
 8004adc:	e0c5      	b.n	8004c6a <HAL_I2C_Mem_Write+0x1e2>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0301 	and.w	r3, r3, #1
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d007      	beq.n	8004b04 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f042 0201 	orr.w	r2, r2, #1
 8004b02:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b12:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2221      	movs	r2, #33	@ 0x21
 8004b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2240      	movs	r2, #64	@ 0x40
 8004b20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6a3a      	ldr	r2, [r7, #32]
 8004b2e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004b34:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	4a4d      	ldr	r2, [pc, #308]	@ (8004c78 <HAL_I2C_Mem_Write+0x1f0>)
 8004b44:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b46:	88f8      	ldrh	r0, [r7, #6]
 8004b48:	893a      	ldrh	r2, [r7, #8]
 8004b4a:	8979      	ldrh	r1, [r7, #10]
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	9301      	str	r3, [sp, #4]
 8004b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b52:	9300      	str	r3, [sp, #0]
 8004b54:	4603      	mov	r3, r0
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	f000 fbe4 	bl	8005324 <I2C_RequestMemoryWrite>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d052      	beq.n	8004c08 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e081      	b.n	8004c6a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	f000 fe72 	bl	8005854 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00d      	beq.n	8004b92 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b7a:	2b04      	cmp	r3, #4
 8004b7c:	d107      	bne.n	8004b8e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e06b      	b.n	8004c6a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b96:	781a      	ldrb	r2, [r3, #0]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba2:	1c5a      	adds	r2, r3, #1
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bac:	3b01      	subs	r3, #1
 8004bae:	b29a      	uxth	r2, r3
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	695b      	ldr	r3, [r3, #20]
 8004bc8:	f003 0304 	and.w	r3, r3, #4
 8004bcc:	2b04      	cmp	r3, #4
 8004bce:	d11b      	bne.n	8004c08 <HAL_I2C_Mem_Write+0x180>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d017      	beq.n	8004c08 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bdc:	781a      	ldrb	r2, [r3, #0]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004be8:	1c5a      	adds	r2, r3, #1
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	b29a      	uxth	r2, r3
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	3b01      	subs	r3, #1
 8004c02:	b29a      	uxth	r2, r3
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1aa      	bne.n	8004b66 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f000 fe65 	bl	80058e4 <I2C_WaitOnBTFFlagUntilTimeout>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00d      	beq.n	8004c3c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c24:	2b04      	cmp	r3, #4
 8004c26:	d107      	bne.n	8004c38 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c36:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e016      	b.n	8004c6a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2220      	movs	r2, #32
 8004c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004c64:	2300      	movs	r3, #0
 8004c66:	e000      	b.n	8004c6a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004c68:	2302      	movs	r3, #2
  }
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3718      	adds	r7, #24
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	00100002 	.word	0x00100002
 8004c78:	ffff0000 	.word	0xffff0000

08004c7c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b08c      	sub	sp, #48	@ 0x30
 8004c80:	af02      	add	r7, sp, #8
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	4608      	mov	r0, r1
 8004c86:	4611      	mov	r1, r2
 8004c88:	461a      	mov	r2, r3
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	817b      	strh	r3, [r7, #10]
 8004c8e:	460b      	mov	r3, r1
 8004c90:	813b      	strh	r3, [r7, #8]
 8004c92:	4613      	mov	r3, r2
 8004c94:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c96:	f7fe fac3 	bl	8003220 <HAL_GetTick>
 8004c9a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	2b20      	cmp	r3, #32
 8004ca6:	f040 8208 	bne.w	80050ba <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cac:	9300      	str	r3, [sp, #0]
 8004cae:	2319      	movs	r3, #25
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	497b      	ldr	r1, [pc, #492]	@ (8004ea0 <HAL_I2C_Mem_Read+0x224>)
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f000 fcb3 	bl	8005620 <I2C_WaitOnFlagUntilTimeout>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d001      	beq.n	8004cc4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	e1fb      	b.n	80050bc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d101      	bne.n	8004cd2 <HAL_I2C_Mem_Read+0x56>
 8004cce:	2302      	movs	r3, #2
 8004cd0:	e1f4      	b.n	80050bc <HAL_I2C_Mem_Read+0x440>
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d007      	beq.n	8004cf8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f042 0201 	orr.w	r2, r2, #1
 8004cf6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2222      	movs	r2, #34	@ 0x22
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2240      	movs	r2, #64	@ 0x40
 8004d14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d22:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004d28:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	4a5b      	ldr	r2, [pc, #364]	@ (8004ea4 <HAL_I2C_Mem_Read+0x228>)
 8004d38:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d3a:	88f8      	ldrh	r0, [r7, #6]
 8004d3c:	893a      	ldrh	r2, [r7, #8]
 8004d3e:	8979      	ldrh	r1, [r7, #10]
 8004d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d42:	9301      	str	r3, [sp, #4]
 8004d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d46:	9300      	str	r3, [sp, #0]
 8004d48:	4603      	mov	r3, r0
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f000 fb80 	bl	8005450 <I2C_RequestMemoryRead>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d001      	beq.n	8004d5a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e1b0      	b.n	80050bc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d113      	bne.n	8004d8a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d62:	2300      	movs	r3, #0
 8004d64:	623b      	str	r3, [r7, #32]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	695b      	ldr	r3, [r3, #20]
 8004d6c:	623b      	str	r3, [r7, #32]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	623b      	str	r3, [r7, #32]
 8004d76:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d86:	601a      	str	r2, [r3, #0]
 8004d88:	e184      	b.n	8005094 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d11b      	bne.n	8004dca <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004da0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004da2:	2300      	movs	r3, #0
 8004da4:	61fb      	str	r3, [r7, #28]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	695b      	ldr	r3, [r3, #20]
 8004dac:	61fb      	str	r3, [r7, #28]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	61fb      	str	r3, [r7, #28]
 8004db6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dc6:	601a      	str	r2, [r3, #0]
 8004dc8:	e164      	b.n	8005094 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d11b      	bne.n	8004e0a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004de0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004df0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004df2:	2300      	movs	r3, #0
 8004df4:	61bb      	str	r3, [r7, #24]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	61bb      	str	r3, [r7, #24]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	61bb      	str	r3, [r7, #24]
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	e144      	b.n	8005094 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	617b      	str	r3, [r7, #20]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	695b      	ldr	r3, [r3, #20]
 8004e14:	617b      	str	r3, [r7, #20]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	617b      	str	r3, [r7, #20]
 8004e1e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004e20:	e138      	b.n	8005094 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e26:	2b03      	cmp	r3, #3
 8004e28:	f200 80f1 	bhi.w	800500e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d123      	bne.n	8004e7c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e36:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f000 fd9b 	bl	8005974 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d001      	beq.n	8004e48 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e139      	b.n	80050bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	691a      	ldr	r2, [r3, #16]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e52:	b2d2      	uxtb	r2, r2
 8004e54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e5a:	1c5a      	adds	r2, r3, #1
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e64:	3b01      	subs	r3, #1
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	3b01      	subs	r3, #1
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004e7a:	e10b      	b.n	8005094 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d14e      	bne.n	8004f22 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e86:	9300      	str	r3, [sp, #0]
 8004e88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	4906      	ldr	r1, [pc, #24]	@ (8004ea8 <HAL_I2C_Mem_Read+0x22c>)
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	f000 fbc6 	bl	8005620 <I2C_WaitOnFlagUntilTimeout>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d008      	beq.n	8004eac <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e10e      	b.n	80050bc <HAL_I2C_Mem_Read+0x440>
 8004e9e:	bf00      	nop
 8004ea0:	00100002 	.word	0x00100002
 8004ea4:	ffff0000 	.word	0xffff0000
 8004ea8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004eba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	691a      	ldr	r2, [r3, #16]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec6:	b2d2      	uxtb	r2, r2
 8004ec8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ece:	1c5a      	adds	r2, r3, #1
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	b29a      	uxth	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	b29a      	uxth	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	691a      	ldr	r2, [r3, #16]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef8:	b2d2      	uxtb	r2, r2
 8004efa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f00:	1c5a      	adds	r2, r3, #1
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	b29a      	uxth	r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004f20:	e0b8      	b.n	8005094 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f24:	9300      	str	r3, [sp, #0]
 8004f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f28:	2200      	movs	r2, #0
 8004f2a:	4966      	ldr	r1, [pc, #408]	@ (80050c4 <HAL_I2C_Mem_Read+0x448>)
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f000 fb77 	bl	8005620 <I2C_WaitOnFlagUntilTimeout>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d001      	beq.n	8004f3c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e0bf      	b.n	80050bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	691a      	ldr	r2, [r3, #16]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f56:	b2d2      	uxtb	r2, r2
 8004f58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f5e:	1c5a      	adds	r2, r3, #1
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	3b01      	subs	r3, #1
 8004f78:	b29a      	uxth	r2, r3
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f80:	9300      	str	r3, [sp, #0]
 8004f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f84:	2200      	movs	r2, #0
 8004f86:	494f      	ldr	r1, [pc, #316]	@ (80050c4 <HAL_I2C_Mem_Read+0x448>)
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f000 fb49 	bl	8005620 <I2C_WaitOnFlagUntilTimeout>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d001      	beq.n	8004f98 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e091      	b.n	80050bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fa6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	691a      	ldr	r2, [r3, #16]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb2:	b2d2      	uxtb	r2, r2
 8004fb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fba:	1c5a      	adds	r2, r3, #1
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	691a      	ldr	r2, [r3, #16]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe4:	b2d2      	uxtb	r2, r2
 8004fe6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fec:	1c5a      	adds	r2, r3, #1
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	b29a      	uxth	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005002:	b29b      	uxth	r3, r3
 8005004:	3b01      	subs	r3, #1
 8005006:	b29a      	uxth	r2, r3
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800500c:	e042      	b.n	8005094 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800500e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005010:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f000 fcae 	bl	8005974 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d001      	beq.n	8005022 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e04c      	b.n	80050bc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	691a      	ldr	r2, [r3, #16]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800502c:	b2d2      	uxtb	r2, r2
 800502e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005034:	1c5a      	adds	r2, r3, #1
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800503e:	3b01      	subs	r3, #1
 8005040:	b29a      	uxth	r2, r3
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800504a:	b29b      	uxth	r3, r3
 800504c:	3b01      	subs	r3, #1
 800504e:	b29a      	uxth	r2, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	f003 0304 	and.w	r3, r3, #4
 800505e:	2b04      	cmp	r3, #4
 8005060:	d118      	bne.n	8005094 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	691a      	ldr	r2, [r3, #16]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800506c:	b2d2      	uxtb	r2, r2
 800506e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005074:	1c5a      	adds	r2, r3, #1
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800507e:	3b01      	subs	r3, #1
 8005080:	b29a      	uxth	r2, r3
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800508a:	b29b      	uxth	r3, r3
 800508c:	3b01      	subs	r3, #1
 800508e:	b29a      	uxth	r2, r3
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005098:	2b00      	cmp	r3, #0
 800509a:	f47f aec2 	bne.w	8004e22 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2220      	movs	r2, #32
 80050a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80050b6:	2300      	movs	r3, #0
 80050b8:	e000      	b.n	80050bc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80050ba:	2302      	movs	r3, #2
  }
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3728      	adds	r7, #40	@ 0x28
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	00010004 	.word	0x00010004

080050c8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b08a      	sub	sp, #40	@ 0x28
 80050cc:	af02      	add	r7, sp, #8
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	607a      	str	r2, [r7, #4]
 80050d2:	603b      	str	r3, [r7, #0]
 80050d4:	460b      	mov	r3, r1
 80050d6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80050d8:	f7fe f8a2 	bl	8003220 <HAL_GetTick>
 80050dc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80050de:	2300      	movs	r3, #0
 80050e0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b20      	cmp	r3, #32
 80050ec:	f040 8111 	bne.w	8005312 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	9300      	str	r3, [sp, #0]
 80050f4:	2319      	movs	r3, #25
 80050f6:	2201      	movs	r2, #1
 80050f8:	4988      	ldr	r1, [pc, #544]	@ (800531c <HAL_I2C_IsDeviceReady+0x254>)
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	f000 fa90 	bl	8005620 <I2C_WaitOnFlagUntilTimeout>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d001      	beq.n	800510a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005106:	2302      	movs	r3, #2
 8005108:	e104      	b.n	8005314 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005110:	2b01      	cmp	r3, #1
 8005112:	d101      	bne.n	8005118 <HAL_I2C_IsDeviceReady+0x50>
 8005114:	2302      	movs	r3, #2
 8005116:	e0fd      	b.n	8005314 <HAL_I2C_IsDeviceReady+0x24c>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	2b01      	cmp	r3, #1
 800512c:	d007      	beq.n	800513e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f042 0201 	orr.w	r2, r2, #1
 800513c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800514c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2224      	movs	r2, #36	@ 0x24
 8005152:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	4a70      	ldr	r2, [pc, #448]	@ (8005320 <HAL_I2C_IsDeviceReady+0x258>)
 8005160:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005170:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2200      	movs	r2, #0
 800517a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f000 fa4e 	bl	8005620 <I2C_WaitOnFlagUntilTimeout>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00d      	beq.n	80051a6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005194:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005198:	d103      	bne.n	80051a2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80051a0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e0b6      	b.n	8005314 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80051a6:	897b      	ldrh	r3, [r7, #10]
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	461a      	mov	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80051b4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80051b6:	f7fe f833 	bl	8003220 <HAL_GetTick>
 80051ba:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	f003 0302 	and.w	r3, r3, #2
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	bf0c      	ite	eq
 80051ca:	2301      	moveq	r3, #1
 80051cc:	2300      	movne	r3, #0
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	695b      	ldr	r3, [r3, #20]
 80051d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051e0:	bf0c      	ite	eq
 80051e2:	2301      	moveq	r3, #1
 80051e4:	2300      	movne	r3, #0
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80051ea:	e025      	b.n	8005238 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80051ec:	f7fe f818 	bl	8003220 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	683a      	ldr	r2, [r7, #0]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d302      	bcc.n	8005202 <HAL_I2C_IsDeviceReady+0x13a>
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d103      	bne.n	800520a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	22a0      	movs	r2, #160	@ 0xa0
 8005206:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	f003 0302 	and.w	r3, r3, #2
 8005214:	2b02      	cmp	r3, #2
 8005216:	bf0c      	ite	eq
 8005218:	2301      	moveq	r3, #1
 800521a:	2300      	movne	r3, #0
 800521c:	b2db      	uxtb	r3, r3
 800521e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800522a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800522e:	bf0c      	ite	eq
 8005230:	2301      	moveq	r3, #1
 8005232:	2300      	movne	r3, #0
 8005234:	b2db      	uxtb	r3, r3
 8005236:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800523e:	b2db      	uxtb	r3, r3
 8005240:	2ba0      	cmp	r3, #160	@ 0xa0
 8005242:	d005      	beq.n	8005250 <HAL_I2C_IsDeviceReady+0x188>
 8005244:	7dfb      	ldrb	r3, [r7, #23]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d102      	bne.n	8005250 <HAL_I2C_IsDeviceReady+0x188>
 800524a:	7dbb      	ldrb	r3, [r7, #22]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d0cd      	beq.n	80051ec <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2220      	movs	r2, #32
 8005254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	695b      	ldr	r3, [r3, #20]
 800525e:	f003 0302 	and.w	r3, r3, #2
 8005262:	2b02      	cmp	r3, #2
 8005264:	d129      	bne.n	80052ba <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005274:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005276:	2300      	movs	r3, #0
 8005278:	613b      	str	r3, [r7, #16]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	695b      	ldr	r3, [r3, #20]
 8005280:	613b      	str	r3, [r7, #16]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	613b      	str	r3, [r7, #16]
 800528a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	9300      	str	r3, [sp, #0]
 8005290:	2319      	movs	r3, #25
 8005292:	2201      	movs	r2, #1
 8005294:	4921      	ldr	r1, [pc, #132]	@ (800531c <HAL_I2C_IsDeviceReady+0x254>)
 8005296:	68f8      	ldr	r0, [r7, #12]
 8005298:	f000 f9c2 	bl	8005620 <I2C_WaitOnFlagUntilTimeout>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d001      	beq.n	80052a6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e036      	b.n	8005314 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2220      	movs	r2, #32
 80052aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80052b6:	2300      	movs	r3, #0
 80052b8:	e02c      	b.n	8005314 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052c8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80052d2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	9300      	str	r3, [sp, #0]
 80052d8:	2319      	movs	r3, #25
 80052da:	2201      	movs	r2, #1
 80052dc:	490f      	ldr	r1, [pc, #60]	@ (800531c <HAL_I2C_IsDeviceReady+0x254>)
 80052de:	68f8      	ldr	r0, [r7, #12]
 80052e0:	f000 f99e 	bl	8005620 <I2C_WaitOnFlagUntilTimeout>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d001      	beq.n	80052ee <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e012      	b.n	8005314 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	3301      	adds	r3, #1
 80052f2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80052f4:	69ba      	ldr	r2, [r7, #24]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	f4ff af32 	bcc.w	8005162 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2220      	movs	r2, #32
 8005302:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e000      	b.n	8005314 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005312:	2302      	movs	r3, #2
  }
}
 8005314:	4618      	mov	r0, r3
 8005316:	3720      	adds	r7, #32
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	00100002 	.word	0x00100002
 8005320:	ffff0000 	.word	0xffff0000

08005324 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b088      	sub	sp, #32
 8005328:	af02      	add	r7, sp, #8
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	4608      	mov	r0, r1
 800532e:	4611      	mov	r1, r2
 8005330:	461a      	mov	r2, r3
 8005332:	4603      	mov	r3, r0
 8005334:	817b      	strh	r3, [r7, #10]
 8005336:	460b      	mov	r3, r1
 8005338:	813b      	strh	r3, [r7, #8]
 800533a:	4613      	mov	r3, r2
 800533c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800534c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800534e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005350:	9300      	str	r3, [sp, #0]
 8005352:	6a3b      	ldr	r3, [r7, #32]
 8005354:	2200      	movs	r2, #0
 8005356:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	f000 f960 	bl	8005620 <I2C_WaitOnFlagUntilTimeout>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00d      	beq.n	8005382 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005370:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005374:	d103      	bne.n	800537e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800537c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e05f      	b.n	8005442 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005382:	897b      	ldrh	r3, [r7, #10]
 8005384:	b2db      	uxtb	r3, r3
 8005386:	461a      	mov	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005390:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005394:	6a3a      	ldr	r2, [r7, #32]
 8005396:	492d      	ldr	r1, [pc, #180]	@ (800544c <I2C_RequestMemoryWrite+0x128>)
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f000 f9bb 	bl	8005714 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d001      	beq.n	80053a8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e04c      	b.n	8005442 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053a8:	2300      	movs	r3, #0
 80053aa:	617b      	str	r3, [r7, #20]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	617b      	str	r3, [r7, #20]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	617b      	str	r3, [r7, #20]
 80053bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053c0:	6a39      	ldr	r1, [r7, #32]
 80053c2:	68f8      	ldr	r0, [r7, #12]
 80053c4:	f000 fa46 	bl	8005854 <I2C_WaitOnTXEFlagUntilTimeout>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00d      	beq.n	80053ea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d2:	2b04      	cmp	r3, #4
 80053d4:	d107      	bne.n	80053e6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e02b      	b.n	8005442 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053ea:	88fb      	ldrh	r3, [r7, #6]
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d105      	bne.n	80053fc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053f0:	893b      	ldrh	r3, [r7, #8]
 80053f2:	b2da      	uxtb	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	611a      	str	r2, [r3, #16]
 80053fa:	e021      	b.n	8005440 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80053fc:	893b      	ldrh	r3, [r7, #8]
 80053fe:	0a1b      	lsrs	r3, r3, #8
 8005400:	b29b      	uxth	r3, r3
 8005402:	b2da      	uxtb	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800540a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800540c:	6a39      	ldr	r1, [r7, #32]
 800540e:	68f8      	ldr	r0, [r7, #12]
 8005410:	f000 fa20 	bl	8005854 <I2C_WaitOnTXEFlagUntilTimeout>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00d      	beq.n	8005436 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800541e:	2b04      	cmp	r3, #4
 8005420:	d107      	bne.n	8005432 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005430:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e005      	b.n	8005442 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005436:	893b      	ldrh	r3, [r7, #8]
 8005438:	b2da      	uxtb	r2, r3
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3718      	adds	r7, #24
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	00010002 	.word	0x00010002

08005450 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b088      	sub	sp, #32
 8005454:	af02      	add	r7, sp, #8
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	4608      	mov	r0, r1
 800545a:	4611      	mov	r1, r2
 800545c:	461a      	mov	r2, r3
 800545e:	4603      	mov	r3, r0
 8005460:	817b      	strh	r3, [r7, #10]
 8005462:	460b      	mov	r3, r1
 8005464:	813b      	strh	r3, [r7, #8]
 8005466:	4613      	mov	r3, r2
 8005468:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005478:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005488:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800548a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548c:	9300      	str	r3, [sp, #0]
 800548e:	6a3b      	ldr	r3, [r7, #32]
 8005490:	2200      	movs	r2, #0
 8005492:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f000 f8c2 	bl	8005620 <I2C_WaitOnFlagUntilTimeout>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00d      	beq.n	80054be <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054b0:	d103      	bne.n	80054ba <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054b8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	e0aa      	b.n	8005614 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80054be:	897b      	ldrh	r3, [r7, #10]
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	461a      	mov	r2, r3
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80054cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d0:	6a3a      	ldr	r2, [r7, #32]
 80054d2:	4952      	ldr	r1, [pc, #328]	@ (800561c <I2C_RequestMemoryRead+0x1cc>)
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	f000 f91d 	bl	8005714 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d001      	beq.n	80054e4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e097      	b.n	8005614 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054e4:	2300      	movs	r3, #0
 80054e6:	617b      	str	r3, [r7, #20]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	617b      	str	r3, [r7, #20]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	617b      	str	r3, [r7, #20]
 80054f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054fc:	6a39      	ldr	r1, [r7, #32]
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f000 f9a8 	bl	8005854 <I2C_WaitOnTXEFlagUntilTimeout>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00d      	beq.n	8005526 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800550e:	2b04      	cmp	r3, #4
 8005510:	d107      	bne.n	8005522 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005520:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e076      	b.n	8005614 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005526:	88fb      	ldrh	r3, [r7, #6]
 8005528:	2b01      	cmp	r3, #1
 800552a:	d105      	bne.n	8005538 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800552c:	893b      	ldrh	r3, [r7, #8]
 800552e:	b2da      	uxtb	r2, r3
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	611a      	str	r2, [r3, #16]
 8005536:	e021      	b.n	800557c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005538:	893b      	ldrh	r3, [r7, #8]
 800553a:	0a1b      	lsrs	r3, r3, #8
 800553c:	b29b      	uxth	r3, r3
 800553e:	b2da      	uxtb	r2, r3
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005546:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005548:	6a39      	ldr	r1, [r7, #32]
 800554a:	68f8      	ldr	r0, [r7, #12]
 800554c:	f000 f982 	bl	8005854 <I2C_WaitOnTXEFlagUntilTimeout>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00d      	beq.n	8005572 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800555a:	2b04      	cmp	r3, #4
 800555c:	d107      	bne.n	800556e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800556c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e050      	b.n	8005614 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005572:	893b      	ldrh	r3, [r7, #8]
 8005574:	b2da      	uxtb	r2, r3
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800557c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800557e:	6a39      	ldr	r1, [r7, #32]
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	f000 f967 	bl	8005854 <I2C_WaitOnTXEFlagUntilTimeout>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00d      	beq.n	80055a8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005590:	2b04      	cmp	r3, #4
 8005592:	d107      	bne.n	80055a4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055a2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e035      	b.n	8005614 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055b6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ba:	9300      	str	r3, [sp, #0]
 80055bc:	6a3b      	ldr	r3, [r7, #32]
 80055be:	2200      	movs	r2, #0
 80055c0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f000 f82b 	bl	8005620 <I2C_WaitOnFlagUntilTimeout>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00d      	beq.n	80055ec <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055de:	d103      	bne.n	80055e8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055e6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e013      	b.n	8005614 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80055ec:	897b      	ldrh	r3, [r7, #10]
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	f043 0301 	orr.w	r3, r3, #1
 80055f4:	b2da      	uxtb	r2, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fe:	6a3a      	ldr	r2, [r7, #32]
 8005600:	4906      	ldr	r1, [pc, #24]	@ (800561c <I2C_RequestMemoryRead+0x1cc>)
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f000 f886 	bl	8005714 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d001      	beq.n	8005612 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e000      	b.n	8005614 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3718      	adds	r7, #24
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	00010002 	.word	0x00010002

08005620 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	603b      	str	r3, [r7, #0]
 800562c:	4613      	mov	r3, r2
 800562e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005630:	e048      	b.n	80056c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005638:	d044      	beq.n	80056c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800563a:	f7fd fdf1 	bl	8003220 <HAL_GetTick>
 800563e:	4602      	mov	r2, r0
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	683a      	ldr	r2, [r7, #0]
 8005646:	429a      	cmp	r2, r3
 8005648:	d302      	bcc.n	8005650 <I2C_WaitOnFlagUntilTimeout+0x30>
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d139      	bne.n	80056c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	0c1b      	lsrs	r3, r3, #16
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b01      	cmp	r3, #1
 8005658:	d10d      	bne.n	8005676 <I2C_WaitOnFlagUntilTimeout+0x56>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	695b      	ldr	r3, [r3, #20]
 8005660:	43da      	mvns	r2, r3
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	4013      	ands	r3, r2
 8005666:	b29b      	uxth	r3, r3
 8005668:	2b00      	cmp	r3, #0
 800566a:	bf0c      	ite	eq
 800566c:	2301      	moveq	r3, #1
 800566e:	2300      	movne	r3, #0
 8005670:	b2db      	uxtb	r3, r3
 8005672:	461a      	mov	r2, r3
 8005674:	e00c      	b.n	8005690 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	43da      	mvns	r2, r3
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	4013      	ands	r3, r2
 8005682:	b29b      	uxth	r3, r3
 8005684:	2b00      	cmp	r3, #0
 8005686:	bf0c      	ite	eq
 8005688:	2301      	moveq	r3, #1
 800568a:	2300      	movne	r3, #0
 800568c:	b2db      	uxtb	r3, r3
 800568e:	461a      	mov	r2, r3
 8005690:	79fb      	ldrb	r3, [r7, #7]
 8005692:	429a      	cmp	r2, r3
 8005694:	d116      	bne.n	80056c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2220      	movs	r2, #32
 80056a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056b0:	f043 0220 	orr.w	r2, r3, #32
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e023      	b.n	800570c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	0c1b      	lsrs	r3, r3, #16
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d10d      	bne.n	80056ea <I2C_WaitOnFlagUntilTimeout+0xca>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	695b      	ldr	r3, [r3, #20]
 80056d4:	43da      	mvns	r2, r3
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	4013      	ands	r3, r2
 80056da:	b29b      	uxth	r3, r3
 80056dc:	2b00      	cmp	r3, #0
 80056de:	bf0c      	ite	eq
 80056e0:	2301      	moveq	r3, #1
 80056e2:	2300      	movne	r3, #0
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	461a      	mov	r2, r3
 80056e8:	e00c      	b.n	8005704 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	43da      	mvns	r2, r3
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	4013      	ands	r3, r2
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	bf0c      	ite	eq
 80056fc:	2301      	moveq	r3, #1
 80056fe:	2300      	movne	r3, #0
 8005700:	b2db      	uxtb	r3, r3
 8005702:	461a      	mov	r2, r3
 8005704:	79fb      	ldrb	r3, [r7, #7]
 8005706:	429a      	cmp	r2, r3
 8005708:	d093      	beq.n	8005632 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
 8005720:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005722:	e071      	b.n	8005808 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800572e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005732:	d123      	bne.n	800577c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005742:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800574c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2220      	movs	r2, #32
 8005758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2200      	movs	r2, #0
 8005760:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005768:	f043 0204 	orr.w	r2, r3, #4
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e067      	b.n	800584c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005782:	d041      	beq.n	8005808 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005784:	f7fd fd4c 	bl	8003220 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	429a      	cmp	r2, r3
 8005792:	d302      	bcc.n	800579a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d136      	bne.n	8005808 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	0c1b      	lsrs	r3, r3, #16
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d10c      	bne.n	80057be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	695b      	ldr	r3, [r3, #20]
 80057aa:	43da      	mvns	r2, r3
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	4013      	ands	r3, r2
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	bf14      	ite	ne
 80057b6:	2301      	movne	r3, #1
 80057b8:	2300      	moveq	r3, #0
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	e00b      	b.n	80057d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	699b      	ldr	r3, [r3, #24]
 80057c4:	43da      	mvns	r2, r3
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	4013      	ands	r3, r2
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	bf14      	ite	ne
 80057d0:	2301      	movne	r3, #1
 80057d2:	2300      	moveq	r3, #0
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d016      	beq.n	8005808 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2220      	movs	r2, #32
 80057e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057f4:	f043 0220 	orr.w	r2, r3, #32
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e021      	b.n	800584c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	0c1b      	lsrs	r3, r3, #16
 800580c:	b2db      	uxtb	r3, r3
 800580e:	2b01      	cmp	r3, #1
 8005810:	d10c      	bne.n	800582c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	695b      	ldr	r3, [r3, #20]
 8005818:	43da      	mvns	r2, r3
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	4013      	ands	r3, r2
 800581e:	b29b      	uxth	r3, r3
 8005820:	2b00      	cmp	r3, #0
 8005822:	bf14      	ite	ne
 8005824:	2301      	movne	r3, #1
 8005826:	2300      	moveq	r3, #0
 8005828:	b2db      	uxtb	r3, r3
 800582a:	e00b      	b.n	8005844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	43da      	mvns	r2, r3
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	4013      	ands	r3, r2
 8005838:	b29b      	uxth	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	bf14      	ite	ne
 800583e:	2301      	movne	r3, #1
 8005840:	2300      	moveq	r3, #0
 8005842:	b2db      	uxtb	r3, r3
 8005844:	2b00      	cmp	r3, #0
 8005846:	f47f af6d 	bne.w	8005724 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3710      	adds	r7, #16
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005860:	e034      	b.n	80058cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005862:	68f8      	ldr	r0, [r7, #12]
 8005864:	f000 f8e3 	bl	8005a2e <I2C_IsAcknowledgeFailed>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d001      	beq.n	8005872 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e034      	b.n	80058dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005878:	d028      	beq.n	80058cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800587a:	f7fd fcd1 	bl	8003220 <HAL_GetTick>
 800587e:	4602      	mov	r2, r0
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	68ba      	ldr	r2, [r7, #8]
 8005886:	429a      	cmp	r2, r3
 8005888:	d302      	bcc.n	8005890 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d11d      	bne.n	80058cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800589a:	2b80      	cmp	r3, #128	@ 0x80
 800589c:	d016      	beq.n	80058cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2200      	movs	r2, #0
 80058a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2220      	movs	r2, #32
 80058a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058b8:	f043 0220 	orr.w	r2, r3, #32
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e007      	b.n	80058dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058d6:	2b80      	cmp	r3, #128	@ 0x80
 80058d8:	d1c3      	bne.n	8005862 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80058f0:	e034      	b.n	800595c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058f2:	68f8      	ldr	r0, [r7, #12]
 80058f4:	f000 f89b 	bl	8005a2e <I2C_IsAcknowledgeFailed>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d001      	beq.n	8005902 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e034      	b.n	800596c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005908:	d028      	beq.n	800595c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800590a:	f7fd fc89 	bl	8003220 <HAL_GetTick>
 800590e:	4602      	mov	r2, r0
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	68ba      	ldr	r2, [r7, #8]
 8005916:	429a      	cmp	r2, r3
 8005918:	d302      	bcc.n	8005920 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d11d      	bne.n	800595c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	f003 0304 	and.w	r3, r3, #4
 800592a:	2b04      	cmp	r3, #4
 800592c:	d016      	beq.n	800595c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2220      	movs	r2, #32
 8005938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005948:	f043 0220 	orr.w	r2, r3, #32
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e007      	b.n	800596c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	f003 0304 	and.w	r3, r3, #4
 8005966:	2b04      	cmp	r3, #4
 8005968:	d1c3      	bne.n	80058f2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005980:	e049      	b.n	8005a16 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	695b      	ldr	r3, [r3, #20]
 8005988:	f003 0310 	and.w	r3, r3, #16
 800598c:	2b10      	cmp	r3, #16
 800598e:	d119      	bne.n	80059c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f06f 0210 	mvn.w	r2, #16
 8005998:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2200      	movs	r2, #0
 800599e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2220      	movs	r2, #32
 80059a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e030      	b.n	8005a26 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059c4:	f7fd fc2c 	bl	8003220 <HAL_GetTick>
 80059c8:	4602      	mov	r2, r0
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	68ba      	ldr	r2, [r7, #8]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d302      	bcc.n	80059da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d11d      	bne.n	8005a16 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	695b      	ldr	r3, [r3, #20]
 80059e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059e4:	2b40      	cmp	r3, #64	@ 0x40
 80059e6:	d016      	beq.n	8005a16 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2220      	movs	r2, #32
 80059f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a02:	f043 0220 	orr.w	r2, r3, #32
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e007      	b.n	8005a26 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	695b      	ldr	r3, [r3, #20]
 8005a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a20:	2b40      	cmp	r3, #64	@ 0x40
 8005a22:	d1ae      	bne.n	8005982 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3710      	adds	r7, #16
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a2e:	b480      	push	{r7}
 8005a30:	b083      	sub	sp, #12
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	695b      	ldr	r3, [r3, #20]
 8005a3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a44:	d11b      	bne.n	8005a7e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005a4e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2220      	movs	r2, #32
 8005a5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a6a:	f043 0204 	orr.w	r2, r3, #4
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e000      	b.n	8005a80 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bc80      	pop	{r7}
 8005a88:	4770      	bx	lr
	...

08005a8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b08a      	sub	sp, #40	@ 0x28
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d101      	bne.n	8005a9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e23b      	b.n	8005f16 <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d050      	beq.n	8005b4c <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005aaa:	4b9e      	ldr	r3, [pc, #632]	@ (8005d24 <HAL_RCC_OscConfig+0x298>)
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	f003 030c 	and.w	r3, r3, #12
 8005ab2:	2b04      	cmp	r3, #4
 8005ab4:	d00c      	beq.n	8005ad0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ab6:	4b9b      	ldr	r3, [pc, #620]	@ (8005d24 <HAL_RCC_OscConfig+0x298>)
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005abe:	2b08      	cmp	r3, #8
 8005ac0:	d112      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ac2:	4b98      	ldr	r3, [pc, #608]	@ (8005d24 <HAL_RCC_OscConfig+0x298>)
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005aca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ace:	d10b      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ad0:	4b94      	ldr	r3, [pc, #592]	@ (8005d24 <HAL_RCC_OscConfig+0x298>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d036      	beq.n	8005b4a <HAL_RCC_OscConfig+0xbe>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d132      	bne.n	8005b4a <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e216      	b.n	8005f16 <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	685a      	ldr	r2, [r3, #4]
 8005aec:	4b8e      	ldr	r3, [pc, #568]	@ (8005d28 <HAL_RCC_OscConfig+0x29c>)
 8005aee:	b2d2      	uxtb	r2, r2
 8005af0:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d013      	beq.n	8005b22 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005afa:	f7fd fb91 	bl	8003220 <HAL_GetTick>
 8005afe:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b00:	e008      	b.n	8005b14 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b02:	f7fd fb8d 	bl	8003220 <HAL_GetTick>
 8005b06:	4602      	mov	r2, r0
 8005b08:	6a3b      	ldr	r3, [r7, #32]
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	2b64      	cmp	r3, #100	@ 0x64
 8005b0e:	d901      	bls.n	8005b14 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e200      	b.n	8005f16 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b14:	4b83      	ldr	r3, [pc, #524]	@ (8005d24 <HAL_RCC_OscConfig+0x298>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d0f0      	beq.n	8005b02 <HAL_RCC_OscConfig+0x76>
 8005b20:	e014      	b.n	8005b4c <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b22:	f7fd fb7d 	bl	8003220 <HAL_GetTick>
 8005b26:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b28:	e008      	b.n	8005b3c <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b2a:	f7fd fb79 	bl	8003220 <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	6a3b      	ldr	r3, [r7, #32]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	2b64      	cmp	r3, #100	@ 0x64
 8005b36:	d901      	bls.n	8005b3c <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e1ec      	b.n	8005f16 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b3c:	4b79      	ldr	r3, [pc, #484]	@ (8005d24 <HAL_RCC_OscConfig+0x298>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1f0      	bne.n	8005b2a <HAL_RCC_OscConfig+0x9e>
 8005b48:	e000      	b.n	8005b4c <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b4a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0302 	and.w	r3, r3, #2
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d077      	beq.n	8005c48 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b58:	4b72      	ldr	r3, [pc, #456]	@ (8005d24 <HAL_RCC_OscConfig+0x298>)
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f003 030c 	and.w	r3, r3, #12
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00b      	beq.n	8005b7c <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b64:	4b6f      	ldr	r3, [pc, #444]	@ (8005d24 <HAL_RCC_OscConfig+0x298>)
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b6c:	2b08      	cmp	r3, #8
 8005b6e:	d126      	bne.n	8005bbe <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b70:	4b6c      	ldr	r3, [pc, #432]	@ (8005d24 <HAL_RCC_OscConfig+0x298>)
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d120      	bne.n	8005bbe <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b7c:	4b69      	ldr	r3, [pc, #420]	@ (8005d24 <HAL_RCC_OscConfig+0x298>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0302 	and.w	r3, r3, #2
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d005      	beq.n	8005b94 <HAL_RCC_OscConfig+0x108>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d001      	beq.n	8005b94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e1c0      	b.n	8005f16 <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b94:	4b63      	ldr	r3, [pc, #396]	@ (8005d24 <HAL_RCC_OscConfig+0x298>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	21f8      	movs	r1, #248	@ 0xf8
 8005ba2:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ba4:	69b9      	ldr	r1, [r7, #24]
 8005ba6:	fa91 f1a1 	rbit	r1, r1
 8005baa:	6179      	str	r1, [r7, #20]
  return result;
 8005bac:	6979      	ldr	r1, [r7, #20]
 8005bae:	fab1 f181 	clz	r1, r1
 8005bb2:	b2c9      	uxtb	r1, r1
 8005bb4:	408b      	lsls	r3, r1
 8005bb6:	495b      	ldr	r1, [pc, #364]	@ (8005d24 <HAL_RCC_OscConfig+0x298>)
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bbc:	e044      	b.n	8005c48 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d02a      	beq.n	8005c1c <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005bc6:	4b59      	ldr	r3, [pc, #356]	@ (8005d2c <HAL_RCC_OscConfig+0x2a0>)
 8005bc8:	2201      	movs	r2, #1
 8005bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bcc:	f7fd fb28 	bl	8003220 <HAL_GetTick>
 8005bd0:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bd2:	e008      	b.n	8005be6 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bd4:	f7fd fb24 	bl	8003220 <HAL_GetTick>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	6a3b      	ldr	r3, [r7, #32]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d901      	bls.n	8005be6 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e197      	b.n	8005f16 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005be6:	4b4f      	ldr	r3, [pc, #316]	@ (8005d24 <HAL_RCC_OscConfig+0x298>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 0302 	and.w	r3, r3, #2
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d0f0      	beq.n	8005bd4 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bf2:	4b4c      	ldr	r3, [pc, #304]	@ (8005d24 <HAL_RCC_OscConfig+0x298>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	21f8      	movs	r1, #248	@ 0xf8
 8005c00:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c02:	6939      	ldr	r1, [r7, #16]
 8005c04:	fa91 f1a1 	rbit	r1, r1
 8005c08:	60f9      	str	r1, [r7, #12]
  return result;
 8005c0a:	68f9      	ldr	r1, [r7, #12]
 8005c0c:	fab1 f181 	clz	r1, r1
 8005c10:	b2c9      	uxtb	r1, r1
 8005c12:	408b      	lsls	r3, r1
 8005c14:	4943      	ldr	r1, [pc, #268]	@ (8005d24 <HAL_RCC_OscConfig+0x298>)
 8005c16:	4313      	orrs	r3, r2
 8005c18:	600b      	str	r3, [r1, #0]
 8005c1a:	e015      	b.n	8005c48 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c1c:	4b43      	ldr	r3, [pc, #268]	@ (8005d2c <HAL_RCC_OscConfig+0x2a0>)
 8005c1e:	2200      	movs	r2, #0
 8005c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c22:	f7fd fafd 	bl	8003220 <HAL_GetTick>
 8005c26:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c28:	e008      	b.n	8005c3c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c2a:	f7fd faf9 	bl	8003220 <HAL_GetTick>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	6a3b      	ldr	r3, [r7, #32]
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	d901      	bls.n	8005c3c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e16c      	b.n	8005f16 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c3c:	4b39      	ldr	r3, [pc, #228]	@ (8005d24 <HAL_RCC_OscConfig+0x298>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0302 	and.w	r3, r3, #2
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1f0      	bne.n	8005c2a <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0308 	and.w	r3, r3, #8
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d030      	beq.n	8005cb6 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	695b      	ldr	r3, [r3, #20]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d016      	beq.n	8005c8a <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c5c:	4b34      	ldr	r3, [pc, #208]	@ (8005d30 <HAL_RCC_OscConfig+0x2a4>)
 8005c5e:	2201      	movs	r2, #1
 8005c60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c62:	f7fd fadd 	bl	8003220 <HAL_GetTick>
 8005c66:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c68:	e008      	b.n	8005c7c <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c6a:	f7fd fad9 	bl	8003220 <HAL_GetTick>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	6a3b      	ldr	r3, [r7, #32]
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d901      	bls.n	8005c7c <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8005c78:	2303      	movs	r3, #3
 8005c7a:	e14c      	b.n	8005f16 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c7c:	4b29      	ldr	r3, [pc, #164]	@ (8005d24 <HAL_RCC_OscConfig+0x298>)
 8005c7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c80:	f003 0302 	and.w	r3, r3, #2
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d0f0      	beq.n	8005c6a <HAL_RCC_OscConfig+0x1de>
 8005c88:	e015      	b.n	8005cb6 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c8a:	4b29      	ldr	r3, [pc, #164]	@ (8005d30 <HAL_RCC_OscConfig+0x2a4>)
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c90:	f7fd fac6 	bl	8003220 <HAL_GetTick>
 8005c94:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c96:	e008      	b.n	8005caa <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c98:	f7fd fac2 	bl	8003220 <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	6a3b      	ldr	r3, [r7, #32]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d901      	bls.n	8005caa <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e135      	b.n	8005f16 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005caa:	4b1e      	ldr	r3, [pc, #120]	@ (8005d24 <HAL_RCC_OscConfig+0x298>)
 8005cac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cae:	f003 0302 	and.w	r3, r3, #2
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d1f0      	bne.n	8005c98 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0304 	and.w	r3, r3, #4
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	f000 8087 	beq.w	8005dd2 <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cca:	4b16      	ldr	r3, [pc, #88]	@ (8005d24 <HAL_RCC_OscConfig+0x298>)
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d110      	bne.n	8005cf8 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	60bb      	str	r3, [r7, #8]
 8005cda:	4b12      	ldr	r3, [pc, #72]	@ (8005d24 <HAL_RCC_OscConfig+0x298>)
 8005cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cde:	4a11      	ldr	r2, [pc, #68]	@ (8005d24 <HAL_RCC_OscConfig+0x298>)
 8005ce0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ce4:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8005d24 <HAL_RCC_OscConfig+0x298>)
 8005ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cee:	60bb      	str	r3, [r7, #8]
 8005cf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005cf8:	4b0e      	ldr	r3, [pc, #56]	@ (8005d34 <HAL_RCC_OscConfig+0x2a8>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a0d      	ldr	r2, [pc, #52]	@ (8005d34 <HAL_RCC_OscConfig+0x2a8>)
 8005cfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d02:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d04:	4b0b      	ldr	r3, [pc, #44]	@ (8005d34 <HAL_RCC_OscConfig+0x2a8>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d122      	bne.n	8005d56 <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d10:	4b08      	ldr	r3, [pc, #32]	@ (8005d34 <HAL_RCC_OscConfig+0x2a8>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a07      	ldr	r2, [pc, #28]	@ (8005d34 <HAL_RCC_OscConfig+0x2a8>)
 8005d16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d1c:	f7fd fa80 	bl	8003220 <HAL_GetTick>
 8005d20:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d22:	e012      	b.n	8005d4a <HAL_RCC_OscConfig+0x2be>
 8005d24:	40023800 	.word	0x40023800
 8005d28:	40023802 	.word	0x40023802
 8005d2c:	42470000 	.word	0x42470000
 8005d30:	42470e80 	.word	0x42470e80
 8005d34:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d38:	f7fd fa72 	bl	8003220 <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	6a3b      	ldr	r3, [r7, #32]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d901      	bls.n	8005d4a <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e0e5      	b.n	8005f16 <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d4a:	4b75      	ldr	r3, [pc, #468]	@ (8005f20 <HAL_RCC_OscConfig+0x494>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d0f0      	beq.n	8005d38 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	689a      	ldr	r2, [r3, #8]
 8005d5a:	4b72      	ldr	r3, [pc, #456]	@ (8005f24 <HAL_RCC_OscConfig+0x498>)
 8005d5c:	b2d2      	uxtb	r2, r2
 8005d5e:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d015      	beq.n	8005d94 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d68:	f7fd fa5a 	bl	8003220 <HAL_GetTick>
 8005d6c:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d6e:	e00a      	b.n	8005d86 <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d70:	f7fd fa56 	bl	8003220 <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	6a3b      	ldr	r3, [r7, #32]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d901      	bls.n	8005d86 <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e0c7      	b.n	8005f16 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d86:	4b68      	ldr	r3, [pc, #416]	@ (8005f28 <HAL_RCC_OscConfig+0x49c>)
 8005d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d8a:	f003 0302 	and.w	r3, r3, #2
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d0ee      	beq.n	8005d70 <HAL_RCC_OscConfig+0x2e4>
 8005d92:	e014      	b.n	8005dbe <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d94:	f7fd fa44 	bl	8003220 <HAL_GetTick>
 8005d98:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d9a:	e00a      	b.n	8005db2 <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d9c:	f7fd fa40 	bl	8003220 <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	6a3b      	ldr	r3, [r7, #32]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d901      	bls.n	8005db2 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e0b1      	b.n	8005f16 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005db2:	4b5d      	ldr	r3, [pc, #372]	@ (8005f28 <HAL_RCC_OscConfig+0x49c>)
 8005db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005db6:	f003 0302 	and.w	r3, r3, #2
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1ee      	bne.n	8005d9c <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005dbe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d105      	bne.n	8005dd2 <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dc6:	4b58      	ldr	r3, [pc, #352]	@ (8005f28 <HAL_RCC_OscConfig+0x49c>)
 8005dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dca:	4a57      	ldr	r2, [pc, #348]	@ (8005f28 <HAL_RCC_OscConfig+0x49c>)
 8005dcc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005dd0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	699b      	ldr	r3, [r3, #24]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	f000 809c 	beq.w	8005f14 <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ddc:	4b52      	ldr	r3, [pc, #328]	@ (8005f28 <HAL_RCC_OscConfig+0x49c>)
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	f003 030c 	and.w	r3, r3, #12
 8005de4:	2b08      	cmp	r3, #8
 8005de6:	d061      	beq.n	8005eac <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	699b      	ldr	r3, [r3, #24]
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d146      	bne.n	8005e7e <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005df0:	4b4e      	ldr	r3, [pc, #312]	@ (8005f2c <HAL_RCC_OscConfig+0x4a0>)
 8005df2:	2200      	movs	r2, #0
 8005df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005df6:	f7fd fa13 	bl	8003220 <HAL_GetTick>
 8005dfa:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dfc:	e008      	b.n	8005e10 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dfe:	f7fd fa0f 	bl	8003220 <HAL_GetTick>
 8005e02:	4602      	mov	r2, r0
 8005e04:	6a3b      	ldr	r3, [r7, #32]
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	2b64      	cmp	r3, #100	@ 0x64
 8005e0a:	d901      	bls.n	8005e10 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	e082      	b.n	8005f16 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e10:	4b45      	ldr	r3, [pc, #276]	@ (8005f28 <HAL_RCC_OscConfig+0x49c>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1f0      	bne.n	8005dfe <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e1c:	4b42      	ldr	r3, [pc, #264]	@ (8005f28 <HAL_RCC_OscConfig+0x49c>)
 8005e1e:	685a      	ldr	r2, [r3, #4]
 8005e20:	4b43      	ldr	r3, [pc, #268]	@ (8005f30 <HAL_RCC_OscConfig+0x4a4>)
 8005e22:	4013      	ands	r3, r2
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	69d1      	ldr	r1, [r2, #28]
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	6a12      	ldr	r2, [r2, #32]
 8005e2c:	4311      	orrs	r1, r2
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005e32:	0192      	lsls	r2, r2, #6
 8005e34:	4311      	orrs	r1, r2
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005e3a:	0612      	lsls	r2, r2, #24
 8005e3c:	4311      	orrs	r1, r2
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005e42:	0852      	lsrs	r2, r2, #1
 8005e44:	3a01      	subs	r2, #1
 8005e46:	0412      	lsls	r2, r2, #16
 8005e48:	430a      	orrs	r2, r1
 8005e4a:	4937      	ldr	r1, [pc, #220]	@ (8005f28 <HAL_RCC_OscConfig+0x49c>)
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e50:	4b36      	ldr	r3, [pc, #216]	@ (8005f2c <HAL_RCC_OscConfig+0x4a0>)
 8005e52:	2201      	movs	r2, #1
 8005e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e56:	f7fd f9e3 	bl	8003220 <HAL_GetTick>
 8005e5a:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e5c:	e008      	b.n	8005e70 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e5e:	f7fd f9df 	bl	8003220 <HAL_GetTick>
 8005e62:	4602      	mov	r2, r0
 8005e64:	6a3b      	ldr	r3, [r7, #32]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	2b64      	cmp	r3, #100	@ 0x64
 8005e6a:	d901      	bls.n	8005e70 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e052      	b.n	8005f16 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e70:	4b2d      	ldr	r3, [pc, #180]	@ (8005f28 <HAL_RCC_OscConfig+0x49c>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d0f0      	beq.n	8005e5e <HAL_RCC_OscConfig+0x3d2>
 8005e7c:	e04a      	b.n	8005f14 <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e7e:	4b2b      	ldr	r3, [pc, #172]	@ (8005f2c <HAL_RCC_OscConfig+0x4a0>)
 8005e80:	2200      	movs	r2, #0
 8005e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e84:	f7fd f9cc 	bl	8003220 <HAL_GetTick>
 8005e88:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e8a:	e008      	b.n	8005e9e <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e8c:	f7fd f9c8 	bl	8003220 <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	6a3b      	ldr	r3, [r7, #32]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	2b64      	cmp	r3, #100	@ 0x64
 8005e98:	d901      	bls.n	8005e9e <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e03b      	b.n	8005f16 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e9e:	4b22      	ldr	r3, [pc, #136]	@ (8005f28 <HAL_RCC_OscConfig+0x49c>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d1f0      	bne.n	8005e8c <HAL_RCC_OscConfig+0x400>
 8005eaa:	e033      	b.n	8005f14 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	699b      	ldr	r3, [r3, #24]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d101      	bne.n	8005eb8 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e02e      	b.n	8005f16 <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8005eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8005f28 <HAL_RCC_OscConfig+0x49c>)
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	69db      	ldr	r3, [r3, #28]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d121      	bne.n	8005f10 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d11a      	bne.n	8005f10 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005eda:	69fa      	ldr	r2, [r7, #28]
 8005edc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005ee6:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d111      	bne.n	8005f10 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ef6:	085b      	lsrs	r3, r3, #1
 8005ef8:	3b01      	subs	r3, #1
 8005efa:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d107      	bne.n	8005f10 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f0a:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d001      	beq.n	8005f14 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e000      	b.n	8005f16 <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3728      	adds	r7, #40	@ 0x28
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	40007000 	.word	0x40007000
 8005f24:	40023870 	.word	0x40023870
 8005f28:	40023800 	.word	0x40023800
 8005f2c:	42470060 	.word	0x42470060
 8005f30:	f0bc8000 	.word	0xf0bc8000

08005f34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b086      	sub	sp, #24
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d101      	bne.n	8005f48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e0d2      	b.n	80060ee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f48:	4b6b      	ldr	r3, [pc, #428]	@ (80060f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 030f 	and.w	r3, r3, #15
 8005f50:	683a      	ldr	r2, [r7, #0]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d90c      	bls.n	8005f70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f56:	4b68      	ldr	r3, [pc, #416]	@ (80060f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005f58:	683a      	ldr	r2, [r7, #0]
 8005f5a:	b2d2      	uxtb	r2, r2
 8005f5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f5e:	4b66      	ldr	r3, [pc, #408]	@ (80060f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 030f 	and.w	r3, r3, #15
 8005f66:	683a      	ldr	r2, [r7, #0]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d001      	beq.n	8005f70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e0be      	b.n	80060ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0302 	and.w	r3, r3, #2
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d020      	beq.n	8005fbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0304 	and.w	r3, r3, #4
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d005      	beq.n	8005f94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f88:	4b5c      	ldr	r3, [pc, #368]	@ (80060fc <HAL_RCC_ClockConfig+0x1c8>)
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	4a5b      	ldr	r2, [pc, #364]	@ (80060fc <HAL_RCC_ClockConfig+0x1c8>)
 8005f8e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005f92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0308 	and.w	r3, r3, #8
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d005      	beq.n	8005fac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8005fa0:	4b56      	ldr	r3, [pc, #344]	@ (80060fc <HAL_RCC_ClockConfig+0x1c8>)
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	4a55      	ldr	r2, [pc, #340]	@ (80060fc <HAL_RCC_ClockConfig+0x1c8>)
 8005fa6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005faa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fac:	4b53      	ldr	r3, [pc, #332]	@ (80060fc <HAL_RCC_ClockConfig+0x1c8>)
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	4950      	ldr	r1, [pc, #320]	@ (80060fc <HAL_RCC_ClockConfig+0x1c8>)
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0301 	and.w	r3, r3, #1
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d040      	beq.n	800604c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d107      	bne.n	8005fe2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fd2:	4b4a      	ldr	r3, [pc, #296]	@ (80060fc <HAL_RCC_ClockConfig+0x1c8>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d115      	bne.n	800600a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e085      	b.n	80060ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	d107      	bne.n	8005ffa <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fea:	4b44      	ldr	r3, [pc, #272]	@ (80060fc <HAL_RCC_ClockConfig+0x1c8>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d109      	bne.n	800600a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e079      	b.n	80060ee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ffa:	4b40      	ldr	r3, [pc, #256]	@ (80060fc <HAL_RCC_ClockConfig+0x1c8>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0302 	and.w	r3, r3, #2
 8006002:	2b00      	cmp	r3, #0
 8006004:	d101      	bne.n	800600a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e071      	b.n	80060ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800600a:	4b3c      	ldr	r3, [pc, #240]	@ (80060fc <HAL_RCC_ClockConfig+0x1c8>)
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	f023 0203 	bic.w	r2, r3, #3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	4939      	ldr	r1, [pc, #228]	@ (80060fc <HAL_RCC_ClockConfig+0x1c8>)
 8006018:	4313      	orrs	r3, r2
 800601a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800601c:	f7fd f900 	bl	8003220 <HAL_GetTick>
 8006020:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006022:	e00a      	b.n	800603a <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006024:	f7fd f8fc 	bl	8003220 <HAL_GetTick>
 8006028:	4602      	mov	r2, r0
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006032:	4293      	cmp	r3, r2
 8006034:	d901      	bls.n	800603a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e059      	b.n	80060ee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800603a:	4b30      	ldr	r3, [pc, #192]	@ (80060fc <HAL_RCC_ClockConfig+0x1c8>)
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f003 020c 	and.w	r2, r3, #12
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	429a      	cmp	r2, r3
 800604a:	d1eb      	bne.n	8006024 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800604c:	4b2a      	ldr	r3, [pc, #168]	@ (80060f8 <HAL_RCC_ClockConfig+0x1c4>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 030f 	and.w	r3, r3, #15
 8006054:	683a      	ldr	r2, [r7, #0]
 8006056:	429a      	cmp	r2, r3
 8006058:	d20c      	bcs.n	8006074 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800605a:	4b27      	ldr	r3, [pc, #156]	@ (80060f8 <HAL_RCC_ClockConfig+0x1c4>)
 800605c:	683a      	ldr	r2, [r7, #0]
 800605e:	b2d2      	uxtb	r2, r2
 8006060:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006062:	4b25      	ldr	r3, [pc, #148]	@ (80060f8 <HAL_RCC_ClockConfig+0x1c4>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 030f 	and.w	r3, r3, #15
 800606a:	683a      	ldr	r2, [r7, #0]
 800606c:	429a      	cmp	r2, r3
 800606e:	d001      	beq.n	8006074 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e03c      	b.n	80060ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0304 	and.w	r3, r3, #4
 800607c:	2b00      	cmp	r3, #0
 800607e:	d008      	beq.n	8006092 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006080:	4b1e      	ldr	r3, [pc, #120]	@ (80060fc <HAL_RCC_ClockConfig+0x1c8>)
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	491b      	ldr	r1, [pc, #108]	@ (80060fc <HAL_RCC_ClockConfig+0x1c8>)
 800608e:	4313      	orrs	r3, r2
 8006090:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 0308 	and.w	r3, r3, #8
 800609a:	2b00      	cmp	r3, #0
 800609c:	d009      	beq.n	80060b2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800609e:	4b17      	ldr	r3, [pc, #92]	@ (80060fc <HAL_RCC_ClockConfig+0x1c8>)
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	00db      	lsls	r3, r3, #3
 80060ac:	4913      	ldr	r1, [pc, #76]	@ (80060fc <HAL_RCC_ClockConfig+0x1c8>)
 80060ae:	4313      	orrs	r3, r2
 80060b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80060b2:	f000 f82b 	bl	800610c <HAL_RCC_GetSysClockFreq>
 80060b6:	4601      	mov	r1, r0
 80060b8:	4b10      	ldr	r3, [pc, #64]	@ (80060fc <HAL_RCC_ClockConfig+0x1c8>)
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80060c0:	22f0      	movs	r2, #240	@ 0xf0
 80060c2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060c4:	693a      	ldr	r2, [r7, #16]
 80060c6:	fa92 f2a2 	rbit	r2, r2
 80060ca:	60fa      	str	r2, [r7, #12]
  return result;
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	fab2 f282 	clz	r2, r2
 80060d2:	b2d2      	uxtb	r2, r2
 80060d4:	40d3      	lsrs	r3, r2
 80060d6:	4a0a      	ldr	r2, [pc, #40]	@ (8006100 <HAL_RCC_ClockConfig+0x1cc>)
 80060d8:	5cd3      	ldrb	r3, [r2, r3]
 80060da:	fa21 f303 	lsr.w	r3, r1, r3
 80060de:	4a09      	ldr	r2, [pc, #36]	@ (8006104 <HAL_RCC_ClockConfig+0x1d0>)
 80060e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80060e2:	4b09      	ldr	r3, [pc, #36]	@ (8006108 <HAL_RCC_ClockConfig+0x1d4>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4618      	mov	r0, r3
 80060e8:	f7fd f858 	bl	800319c <HAL_InitTick>

  return HAL_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3718      	adds	r7, #24
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	40023c00 	.word	0x40023c00
 80060fc:	40023800 	.word	0x40023800
 8006100:	08007280 	.word	0x08007280
 8006104:	20000004 	.word	0x20000004
 8006108:	20000008 	.word	0x20000008

0800610c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800610c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006110:	b090      	sub	sp, #64	@ 0x40
 8006112:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006114:	2300      	movs	r3, #0
 8006116:	637b      	str	r3, [r7, #52]	@ 0x34
 8006118:	2300      	movs	r3, #0
 800611a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800611c:	2300      	movs	r3, #0
 800611e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006120:	2300      	movs	r3, #0
 8006122:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006124:	4b59      	ldr	r3, [pc, #356]	@ (800628c <HAL_RCC_GetSysClockFreq+0x180>)
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	f003 030c 	and.w	r3, r3, #12
 800612c:	2b08      	cmp	r3, #8
 800612e:	d00d      	beq.n	800614c <HAL_RCC_GetSysClockFreq+0x40>
 8006130:	2b08      	cmp	r3, #8
 8006132:	f200 80a2 	bhi.w	800627a <HAL_RCC_GetSysClockFreq+0x16e>
 8006136:	2b00      	cmp	r3, #0
 8006138:	d002      	beq.n	8006140 <HAL_RCC_GetSysClockFreq+0x34>
 800613a:	2b04      	cmp	r3, #4
 800613c:	d003      	beq.n	8006146 <HAL_RCC_GetSysClockFreq+0x3a>
 800613e:	e09c      	b.n	800627a <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006140:	4b53      	ldr	r3, [pc, #332]	@ (8006290 <HAL_RCC_GetSysClockFreq+0x184>)
 8006142:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8006144:	e09c      	b.n	8006280 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006146:	4b53      	ldr	r3, [pc, #332]	@ (8006294 <HAL_RCC_GetSysClockFreq+0x188>)
 8006148:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800614a:	e099      	b.n	8006280 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800614c:	4b4f      	ldr	r3, [pc, #316]	@ (800628c <HAL_RCC_GetSysClockFreq+0x180>)
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006154:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006156:	4b4d      	ldr	r3, [pc, #308]	@ (800628c <HAL_RCC_GetSysClockFreq+0x180>)
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d027      	beq.n	80061b2 <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006162:	4b4a      	ldr	r3, [pc, #296]	@ (800628c <HAL_RCC_GetSysClockFreq+0x180>)
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	099b      	lsrs	r3, r3, #6
 8006168:	2200      	movs	r2, #0
 800616a:	623b      	str	r3, [r7, #32]
 800616c:	627a      	str	r2, [r7, #36]	@ 0x24
 800616e:	6a3b      	ldr	r3, [r7, #32]
 8006170:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006174:	2100      	movs	r1, #0
 8006176:	4b47      	ldr	r3, [pc, #284]	@ (8006294 <HAL_RCC_GetSysClockFreq+0x188>)
 8006178:	fb03 f201 	mul.w	r2, r3, r1
 800617c:	2300      	movs	r3, #0
 800617e:	fb00 f303 	mul.w	r3, r0, r3
 8006182:	4413      	add	r3, r2
 8006184:	4a43      	ldr	r2, [pc, #268]	@ (8006294 <HAL_RCC_GetSysClockFreq+0x188>)
 8006186:	fba0 2102 	umull	r2, r1, r0, r2
 800618a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800618c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800618e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006190:	4413      	add	r3, r2
 8006192:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006196:	2200      	movs	r2, #0
 8006198:	61bb      	str	r3, [r7, #24]
 800619a:	61fa      	str	r2, [r7, #28]
 800619c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061a0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80061a4:	f7fa ffaa 	bl	80010fc <__aeabi_uldivmod>
 80061a8:	4602      	mov	r2, r0
 80061aa:	460b      	mov	r3, r1
 80061ac:	4613      	mov	r3, r2
 80061ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80061b0:	e055      	b.n	800625e <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061b2:	4b36      	ldr	r3, [pc, #216]	@ (800628c <HAL_RCC_GetSysClockFreq+0x180>)
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	099b      	lsrs	r3, r3, #6
 80061b8:	2200      	movs	r2, #0
 80061ba:	613b      	str	r3, [r7, #16]
 80061bc:	617a      	str	r2, [r7, #20]
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80061c4:	f04f 0b00 	mov.w	fp, #0
 80061c8:	4652      	mov	r2, sl
 80061ca:	465b      	mov	r3, fp
 80061cc:	f04f 0000 	mov.w	r0, #0
 80061d0:	f04f 0100 	mov.w	r1, #0
 80061d4:	0159      	lsls	r1, r3, #5
 80061d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80061da:	0150      	lsls	r0, r2, #5
 80061dc:	4602      	mov	r2, r0
 80061de:	460b      	mov	r3, r1
 80061e0:	ebb2 080a 	subs.w	r8, r2, sl
 80061e4:	eb63 090b 	sbc.w	r9, r3, fp
 80061e8:	f04f 0200 	mov.w	r2, #0
 80061ec:	f04f 0300 	mov.w	r3, #0
 80061f0:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80061f4:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80061f8:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80061fc:	ebb2 0408 	subs.w	r4, r2, r8
 8006200:	eb63 0509 	sbc.w	r5, r3, r9
 8006204:	f04f 0200 	mov.w	r2, #0
 8006208:	f04f 0300 	mov.w	r3, #0
 800620c:	00eb      	lsls	r3, r5, #3
 800620e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006212:	00e2      	lsls	r2, r4, #3
 8006214:	4614      	mov	r4, r2
 8006216:	461d      	mov	r5, r3
 8006218:	eb14 030a 	adds.w	r3, r4, sl
 800621c:	603b      	str	r3, [r7, #0]
 800621e:	eb45 030b 	adc.w	r3, r5, fp
 8006222:	607b      	str	r3, [r7, #4]
 8006224:	f04f 0200 	mov.w	r2, #0
 8006228:	f04f 0300 	mov.w	r3, #0
 800622c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006230:	4629      	mov	r1, r5
 8006232:	028b      	lsls	r3, r1, #10
 8006234:	4620      	mov	r0, r4
 8006236:	4629      	mov	r1, r5
 8006238:	4604      	mov	r4, r0
 800623a:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800623e:	4601      	mov	r1, r0
 8006240:	028a      	lsls	r2, r1, #10
 8006242:	4610      	mov	r0, r2
 8006244:	4619      	mov	r1, r3
 8006246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006248:	2200      	movs	r2, #0
 800624a:	60bb      	str	r3, [r7, #8]
 800624c:	60fa      	str	r2, [r7, #12]
 800624e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006252:	f7fa ff53 	bl	80010fc <__aeabi_uldivmod>
 8006256:	4602      	mov	r2, r0
 8006258:	460b      	mov	r3, r1
 800625a:	4613      	mov	r3, r2
 800625c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800625e:	4b0b      	ldr	r3, [pc, #44]	@ (800628c <HAL_RCC_GetSysClockFreq+0x180>)
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	0c1b      	lsrs	r3, r3, #16
 8006264:	f003 0303 	and.w	r3, r3, #3
 8006268:	3301      	adds	r3, #1
 800626a:	005b      	lsls	r3, r3, #1
 800626c:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800626e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006272:	fbb2 f3f3 	udiv	r3, r2, r3
 8006276:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006278:	e002      	b.n	8006280 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800627a:	4b05      	ldr	r3, [pc, #20]	@ (8006290 <HAL_RCC_GetSysClockFreq+0x184>)
 800627c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800627e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006282:	4618      	mov	r0, r3
 8006284:	3740      	adds	r7, #64	@ 0x40
 8006286:	46bd      	mov	sp, r7
 8006288:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800628c:	40023800 	.word	0x40023800
 8006290:	00f42400 	.word	0x00f42400
 8006294:	017d7840 	.word	0x017d7840

08006298 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006298:	b480      	push	{r7}
 800629a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800629c:	4b02      	ldr	r3, [pc, #8]	@ (80062a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800629e:	681b      	ldr	r3, [r3, #0]
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bc80      	pop	{r7}
 80062a6:	4770      	bx	lr
 80062a8:	20000004 	.word	0x20000004

080062ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b082      	sub	sp, #8
 80062b0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80062b2:	f7ff fff1 	bl	8006298 <HAL_RCC_GetHCLKFreq>
 80062b6:	4601      	mov	r1, r0
 80062b8:	4b0b      	ldr	r3, [pc, #44]	@ (80062e8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80062c0:	f44f 52e0 	mov.w	r2, #7168	@ 0x1c00
 80062c4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	fa92 f2a2 	rbit	r2, r2
 80062cc:	603a      	str	r2, [r7, #0]
  return result;
 80062ce:	683a      	ldr	r2, [r7, #0]
 80062d0:	fab2 f282 	clz	r2, r2
 80062d4:	b2d2      	uxtb	r2, r2
 80062d6:	40d3      	lsrs	r3, r2
 80062d8:	4a04      	ldr	r2, [pc, #16]	@ (80062ec <HAL_RCC_GetPCLK1Freq+0x40>)
 80062da:	5cd3      	ldrb	r3, [r2, r3]
 80062dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3708      	adds	r7, #8
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	40023800 	.word	0x40023800
 80062ec:	08007290 	.word	0x08007290

080062f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b082      	sub	sp, #8
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d101      	bne.n	8006302 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e041      	b.n	8006386 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006308:	b2db      	uxtb	r3, r3
 800630a:	2b00      	cmp	r3, #0
 800630c:	d106      	bne.n	800631c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f7fc fd72 	bl	8002e00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2202      	movs	r2, #2
 8006320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	3304      	adds	r3, #4
 800632c:	4619      	mov	r1, r3
 800632e:	4610      	mov	r0, r2
 8006330:	f000 fc22 	bl	8006b78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	3708      	adds	r7, #8
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
	...

08006390 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d109      	bne.n	80063b4 <HAL_TIM_PWM_Start+0x24>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	bf14      	ite	ne
 80063ac:	2301      	movne	r3, #1
 80063ae:	2300      	moveq	r3, #0
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	e022      	b.n	80063fa <HAL_TIM_PWM_Start+0x6a>
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	2b04      	cmp	r3, #4
 80063b8:	d109      	bne.n	80063ce <HAL_TIM_PWM_Start+0x3e>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	bf14      	ite	ne
 80063c6:	2301      	movne	r3, #1
 80063c8:	2300      	moveq	r3, #0
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	e015      	b.n	80063fa <HAL_TIM_PWM_Start+0x6a>
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	2b08      	cmp	r3, #8
 80063d2:	d109      	bne.n	80063e8 <HAL_TIM_PWM_Start+0x58>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	2b01      	cmp	r3, #1
 80063de:	bf14      	ite	ne
 80063e0:	2301      	movne	r3, #1
 80063e2:	2300      	moveq	r3, #0
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	e008      	b.n	80063fa <HAL_TIM_PWM_Start+0x6a>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	bf14      	ite	ne
 80063f4:	2301      	movne	r3, #1
 80063f6:	2300      	moveq	r3, #0
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d001      	beq.n	8006402 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e07c      	b.n	80064fc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d104      	bne.n	8006412 <HAL_TIM_PWM_Start+0x82>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2202      	movs	r2, #2
 800640c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006410:	e013      	b.n	800643a <HAL_TIM_PWM_Start+0xaa>
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	2b04      	cmp	r3, #4
 8006416:	d104      	bne.n	8006422 <HAL_TIM_PWM_Start+0x92>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2202      	movs	r2, #2
 800641c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006420:	e00b      	b.n	800643a <HAL_TIM_PWM_Start+0xaa>
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	2b08      	cmp	r3, #8
 8006426:	d104      	bne.n	8006432 <HAL_TIM_PWM_Start+0xa2>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2202      	movs	r2, #2
 800642c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006430:	e003      	b.n	800643a <HAL_TIM_PWM_Start+0xaa>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2202      	movs	r2, #2
 8006436:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2201      	movs	r2, #1
 8006440:	6839      	ldr	r1, [r7, #0]
 8006442:	4618      	mov	r0, r3
 8006444:	f000 fde2 	bl	800700c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a2d      	ldr	r2, [pc, #180]	@ (8006504 <HAL_TIM_PWM_Start+0x174>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d004      	beq.n	800645c <HAL_TIM_PWM_Start+0xcc>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a2c      	ldr	r2, [pc, #176]	@ (8006508 <HAL_TIM_PWM_Start+0x178>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d101      	bne.n	8006460 <HAL_TIM_PWM_Start+0xd0>
 800645c:	2301      	movs	r3, #1
 800645e:	e000      	b.n	8006462 <HAL_TIM_PWM_Start+0xd2>
 8006460:	2300      	movs	r3, #0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d007      	beq.n	8006476 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006474:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a22      	ldr	r2, [pc, #136]	@ (8006504 <HAL_TIM_PWM_Start+0x174>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d022      	beq.n	80064c6 <HAL_TIM_PWM_Start+0x136>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006488:	d01d      	beq.n	80064c6 <HAL_TIM_PWM_Start+0x136>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a1f      	ldr	r2, [pc, #124]	@ (800650c <HAL_TIM_PWM_Start+0x17c>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d018      	beq.n	80064c6 <HAL_TIM_PWM_Start+0x136>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a1d      	ldr	r2, [pc, #116]	@ (8006510 <HAL_TIM_PWM_Start+0x180>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d013      	beq.n	80064c6 <HAL_TIM_PWM_Start+0x136>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a1c      	ldr	r2, [pc, #112]	@ (8006514 <HAL_TIM_PWM_Start+0x184>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d00e      	beq.n	80064c6 <HAL_TIM_PWM_Start+0x136>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a16      	ldr	r2, [pc, #88]	@ (8006508 <HAL_TIM_PWM_Start+0x178>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d009      	beq.n	80064c6 <HAL_TIM_PWM_Start+0x136>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a18      	ldr	r2, [pc, #96]	@ (8006518 <HAL_TIM_PWM_Start+0x188>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d004      	beq.n	80064c6 <HAL_TIM_PWM_Start+0x136>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a16      	ldr	r2, [pc, #88]	@ (800651c <HAL_TIM_PWM_Start+0x18c>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d111      	bne.n	80064ea <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	f003 0307 	and.w	r3, r3, #7
 80064d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2b06      	cmp	r3, #6
 80064d6:	d010      	beq.n	80064fa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f042 0201 	orr.w	r2, r2, #1
 80064e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064e8:	e007      	b.n	80064fa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f042 0201 	orr.w	r2, r2, #1
 80064f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3710      	adds	r7, #16
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	40010000 	.word	0x40010000
 8006508:	40010400 	.word	0x40010400
 800650c:	40000400 	.word	0x40000400
 8006510:	40000800 	.word	0x40000800
 8006514:	40000c00 	.word	0x40000c00
 8006518:	40014000 	.word	0x40014000
 800651c:	40001800 	.word	0x40001800

08006520 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b086      	sub	sp, #24
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d101      	bne.n	8006534 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e097      	b.n	8006664 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800653a:	b2db      	uxtb	r3, r3
 800653c:	2b00      	cmp	r3, #0
 800653e:	d106      	bne.n	800654e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f7fc fc81 	bl	8002e50 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2202      	movs	r2, #2
 8006552:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	6812      	ldr	r2, [r2, #0]
 8006560:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006564:	f023 0307 	bic.w	r3, r3, #7
 8006568:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	3304      	adds	r3, #4
 8006572:	4619      	mov	r1, r3
 8006574:	4610      	mov	r0, r2
 8006576:	f000 faff 	bl	8006b78 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	699b      	ldr	r3, [r3, #24]
 8006588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	6a1b      	ldr	r3, [r3, #32]
 8006590:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	697a      	ldr	r2, [r7, #20]
 8006598:	4313      	orrs	r3, r2
 800659a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065a2:	f023 0303 	bic.w	r3, r3, #3
 80065a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	689a      	ldr	r2, [r3, #8]
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	699b      	ldr	r3, [r3, #24]
 80065b0:	021b      	lsls	r3, r3, #8
 80065b2:	4313      	orrs	r3, r2
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80065c0:	f023 030c 	bic.w	r3, r3, #12
 80065c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80065cc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80065d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	68da      	ldr	r2, [r3, #12]
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	69db      	ldr	r3, [r3, #28]
 80065da:	021b      	lsls	r3, r3, #8
 80065dc:	4313      	orrs	r3, r2
 80065de:	693a      	ldr	r2, [r7, #16]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	011a      	lsls	r2, r3, #4
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	6a1b      	ldr	r3, [r3, #32]
 80065ee:	031b      	lsls	r3, r3, #12
 80065f0:	4313      	orrs	r3, r2
 80065f2:	693a      	ldr	r2, [r7, #16]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80065fe:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006606:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	685a      	ldr	r2, [r3, #4]
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	695b      	ldr	r3, [r3, #20]
 8006610:	011b      	lsls	r3, r3, #4
 8006612:	4313      	orrs	r3, r2
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	4313      	orrs	r3, r2
 8006618:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	697a      	ldr	r2, [r7, #20]
 8006620:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	693a      	ldr	r2, [r7, #16]
 8006628:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2201      	movs	r2, #1
 8006636:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2201      	movs	r2, #1
 800663e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2201      	movs	r2, #1
 8006646:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2201      	movs	r2, #1
 800664e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2201      	movs	r2, #1
 8006656:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2201      	movs	r2, #1
 800665e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006662:	2300      	movs	r3, #0
}
 8006664:	4618      	mov	r0, r3
 8006666:	3718      	adds	r7, #24
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800667c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006684:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800668c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006694:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d110      	bne.n	80066be <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800669c:	7bfb      	ldrb	r3, [r7, #15]
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d102      	bne.n	80066a8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80066a2:	7b7b      	ldrb	r3, [r7, #13]
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d001      	beq.n	80066ac <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e069      	b.n	8006780 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2202      	movs	r2, #2
 80066b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2202      	movs	r2, #2
 80066b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80066bc:	e031      	b.n	8006722 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	2b04      	cmp	r3, #4
 80066c2:	d110      	bne.n	80066e6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80066c4:	7bbb      	ldrb	r3, [r7, #14]
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d102      	bne.n	80066d0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80066ca:	7b3b      	ldrb	r3, [r7, #12]
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d001      	beq.n	80066d4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	e055      	b.n	8006780 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2202      	movs	r2, #2
 80066d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2202      	movs	r2, #2
 80066e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80066e4:	e01d      	b.n	8006722 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80066e6:	7bfb      	ldrb	r3, [r7, #15]
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d108      	bne.n	80066fe <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80066ec:	7bbb      	ldrb	r3, [r7, #14]
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d105      	bne.n	80066fe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80066f2:	7b7b      	ldrb	r3, [r7, #13]
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d102      	bne.n	80066fe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80066f8:	7b3b      	ldrb	r3, [r7, #12]
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d001      	beq.n	8006702 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e03e      	b.n	8006780 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2202      	movs	r2, #2
 8006706:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2202      	movs	r2, #2
 800670e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2202      	movs	r2, #2
 8006716:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2202      	movs	r2, #2
 800671e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d003      	beq.n	8006730 <HAL_TIM_Encoder_Start+0xc4>
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	2b04      	cmp	r3, #4
 800672c:	d008      	beq.n	8006740 <HAL_TIM_Encoder_Start+0xd4>
 800672e:	e00f      	b.n	8006750 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2201      	movs	r2, #1
 8006736:	2100      	movs	r1, #0
 8006738:	4618      	mov	r0, r3
 800673a:	f000 fc67 	bl	800700c <TIM_CCxChannelCmd>
      break;
 800673e:	e016      	b.n	800676e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2201      	movs	r2, #1
 8006746:	2104      	movs	r1, #4
 8006748:	4618      	mov	r0, r3
 800674a:	f000 fc5f 	bl	800700c <TIM_CCxChannelCmd>
      break;
 800674e:	e00e      	b.n	800676e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2201      	movs	r2, #1
 8006756:	2100      	movs	r1, #0
 8006758:	4618      	mov	r0, r3
 800675a:	f000 fc57 	bl	800700c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2201      	movs	r2, #1
 8006764:	2104      	movs	r1, #4
 8006766:	4618      	mov	r0, r3
 8006768:	f000 fc50 	bl	800700c <TIM_CCxChannelCmd>
      break;
 800676c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f042 0201 	orr.w	r2, r2, #1
 800677c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3710      	adds	r7, #16
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	f003 0302 	and.w	r3, r3, #2
 800679a:	2b02      	cmp	r3, #2
 800679c:	d122      	bne.n	80067e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	f003 0302 	and.w	r3, r3, #2
 80067a8:	2b02      	cmp	r3, #2
 80067aa:	d11b      	bne.n	80067e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f06f 0202 	mvn.w	r2, #2
 80067b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2201      	movs	r2, #1
 80067ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	699b      	ldr	r3, [r3, #24]
 80067c2:	f003 0303 	and.w	r3, r3, #3
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d003      	beq.n	80067d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f9b8 	bl	8006b40 <HAL_TIM_IC_CaptureCallback>
 80067d0:	e005      	b.n	80067de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 f9ab 	bl	8006b2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 f9ba 	bl	8006b52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	f003 0304 	and.w	r3, r3, #4
 80067ee:	2b04      	cmp	r3, #4
 80067f0:	d122      	bne.n	8006838 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	f003 0304 	and.w	r3, r3, #4
 80067fc:	2b04      	cmp	r3, #4
 80067fe:	d11b      	bne.n	8006838 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f06f 0204 	mvn.w	r2, #4
 8006808:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2202      	movs	r2, #2
 800680e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800681a:	2b00      	cmp	r3, #0
 800681c:	d003      	beq.n	8006826 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 f98e 	bl	8006b40 <HAL_TIM_IC_CaptureCallback>
 8006824:	e005      	b.n	8006832 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f981 	bl	8006b2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 f990 	bl	8006b52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	f003 0308 	and.w	r3, r3, #8
 8006842:	2b08      	cmp	r3, #8
 8006844:	d122      	bne.n	800688c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	f003 0308 	and.w	r3, r3, #8
 8006850:	2b08      	cmp	r3, #8
 8006852:	d11b      	bne.n	800688c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f06f 0208 	mvn.w	r2, #8
 800685c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2204      	movs	r2, #4
 8006862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	69db      	ldr	r3, [r3, #28]
 800686a:	f003 0303 	and.w	r3, r3, #3
 800686e:	2b00      	cmp	r3, #0
 8006870:	d003      	beq.n	800687a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 f964 	bl	8006b40 <HAL_TIM_IC_CaptureCallback>
 8006878:	e005      	b.n	8006886 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 f957 	bl	8006b2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 f966 	bl	8006b52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	f003 0310 	and.w	r3, r3, #16
 8006896:	2b10      	cmp	r3, #16
 8006898:	d122      	bne.n	80068e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	f003 0310 	and.w	r3, r3, #16
 80068a4:	2b10      	cmp	r3, #16
 80068a6:	d11b      	bne.n	80068e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f06f 0210 	mvn.w	r2, #16
 80068b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2208      	movs	r2, #8
 80068b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	69db      	ldr	r3, [r3, #28]
 80068be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d003      	beq.n	80068ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 f93a 	bl	8006b40 <HAL_TIM_IC_CaptureCallback>
 80068cc:	e005      	b.n	80068da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 f92d 	bl	8006b2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 f93c 	bl	8006b52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	f003 0301 	and.w	r3, r3, #1
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d10e      	bne.n	800690c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	f003 0301 	and.w	r3, r3, #1
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d107      	bne.n	800690c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f06f 0201 	mvn.w	r2, #1
 8006904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 f908 	bl	8006b1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006916:	2b80      	cmp	r3, #128	@ 0x80
 8006918:	d10e      	bne.n	8006938 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006924:	2b80      	cmp	r3, #128	@ 0x80
 8006926:	d107      	bne.n	8006938 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 fc62 	bl	80071fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006942:	2b40      	cmp	r3, #64	@ 0x40
 8006944:	d10e      	bne.n	8006964 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006950:	2b40      	cmp	r3, #64	@ 0x40
 8006952:	d107      	bne.n	8006964 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800695c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 f900 	bl	8006b64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	f003 0320 	and.w	r3, r3, #32
 800696e:	2b20      	cmp	r3, #32
 8006970:	d10e      	bne.n	8006990 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	f003 0320 	and.w	r3, r3, #32
 800697c:	2b20      	cmp	r3, #32
 800697e:	d107      	bne.n	8006990 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f06f 0220 	mvn.w	r2, #32
 8006988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 fc2d 	bl	80071ea <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006990:	bf00      	nop
 8006992:	3708      	adds	r7, #8
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b086      	sub	sp, #24
 800699c:	af00      	add	r7, sp, #0
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069a4:	2300      	movs	r3, #0
 80069a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d101      	bne.n	80069b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80069b2:	2302      	movs	r3, #2
 80069b4:	e0ae      	b.n	8006b14 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2201      	movs	r2, #1
 80069ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2b0c      	cmp	r3, #12
 80069c2:	f200 809f 	bhi.w	8006b04 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80069c6:	a201      	add	r2, pc, #4	@ (adr r2, 80069cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80069c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069cc:	08006a01 	.word	0x08006a01
 80069d0:	08006b05 	.word	0x08006b05
 80069d4:	08006b05 	.word	0x08006b05
 80069d8:	08006b05 	.word	0x08006b05
 80069dc:	08006a41 	.word	0x08006a41
 80069e0:	08006b05 	.word	0x08006b05
 80069e4:	08006b05 	.word	0x08006b05
 80069e8:	08006b05 	.word	0x08006b05
 80069ec:	08006a83 	.word	0x08006a83
 80069f0:	08006b05 	.word	0x08006b05
 80069f4:	08006b05 	.word	0x08006b05
 80069f8:	08006b05 	.word	0x08006b05
 80069fc:	08006ac3 	.word	0x08006ac3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68b9      	ldr	r1, [r7, #8]
 8006a06:	4618      	mov	r0, r3
 8006a08:	f000 f954 	bl	8006cb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	699a      	ldr	r2, [r3, #24]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f042 0208 	orr.w	r2, r2, #8
 8006a1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	699a      	ldr	r2, [r3, #24]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f022 0204 	bic.w	r2, r2, #4
 8006a2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	6999      	ldr	r1, [r3, #24]
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	691a      	ldr	r2, [r3, #16]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	430a      	orrs	r2, r1
 8006a3c:	619a      	str	r2, [r3, #24]
      break;
 8006a3e:	e064      	b.n	8006b0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	68b9      	ldr	r1, [r7, #8]
 8006a46:	4618      	mov	r0, r3
 8006a48:	f000 f9a4 	bl	8006d94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	699a      	ldr	r2, [r3, #24]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	699a      	ldr	r2, [r3, #24]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	6999      	ldr	r1, [r3, #24]
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	691b      	ldr	r3, [r3, #16]
 8006a76:	021a      	lsls	r2, r3, #8
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	430a      	orrs	r2, r1
 8006a7e:	619a      	str	r2, [r3, #24]
      break;
 8006a80:	e043      	b.n	8006b0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	68b9      	ldr	r1, [r7, #8]
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f000 f9f7 	bl	8006e7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	69da      	ldr	r2, [r3, #28]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f042 0208 	orr.w	r2, r2, #8
 8006a9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	69da      	ldr	r2, [r3, #28]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f022 0204 	bic.w	r2, r2, #4
 8006aac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	69d9      	ldr	r1, [r3, #28]
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	691a      	ldr	r2, [r3, #16]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	430a      	orrs	r2, r1
 8006abe:	61da      	str	r2, [r3, #28]
      break;
 8006ac0:	e023      	b.n	8006b0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68b9      	ldr	r1, [r7, #8]
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f000 fa4b 	bl	8006f64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	69da      	ldr	r2, [r3, #28]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006adc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	69da      	ldr	r2, [r3, #28]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006aec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	69d9      	ldr	r1, [r3, #28]
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	021a      	lsls	r2, r3, #8
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	430a      	orrs	r2, r1
 8006b00:	61da      	str	r2, [r3, #28]
      break;
 8006b02:	e002      	b.n	8006b0a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	75fb      	strb	r3, [r7, #23]
      break;
 8006b08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3718      	adds	r7, #24
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006b24:	bf00      	nop
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bc80      	pop	{r7}
 8006b2c:	4770      	bx	lr

08006b2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b2e:	b480      	push	{r7}
 8006b30:	b083      	sub	sp, #12
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b36:	bf00      	nop
 8006b38:	370c      	adds	r7, #12
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bc80      	pop	{r7}
 8006b3e:	4770      	bx	lr

08006b40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b48:	bf00      	nop
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bc80      	pop	{r7}
 8006b50:	4770      	bx	lr

08006b52 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b52:	b480      	push	{r7}
 8006b54:	b083      	sub	sp, #12
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b5a:	bf00      	nop
 8006b5c:	370c      	adds	r7, #12
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bc80      	pop	{r7}
 8006b62:	4770      	bx	lr

08006b64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b6c:	bf00      	nop
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bc80      	pop	{r7}
 8006b74:	4770      	bx	lr
	...

08006b78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b085      	sub	sp, #20
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a3f      	ldr	r2, [pc, #252]	@ (8006c88 <TIM_Base_SetConfig+0x110>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d013      	beq.n	8006bb8 <TIM_Base_SetConfig+0x40>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b96:	d00f      	beq.n	8006bb8 <TIM_Base_SetConfig+0x40>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a3c      	ldr	r2, [pc, #240]	@ (8006c8c <TIM_Base_SetConfig+0x114>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d00b      	beq.n	8006bb8 <TIM_Base_SetConfig+0x40>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a3b      	ldr	r2, [pc, #236]	@ (8006c90 <TIM_Base_SetConfig+0x118>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d007      	beq.n	8006bb8 <TIM_Base_SetConfig+0x40>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4a3a      	ldr	r2, [pc, #232]	@ (8006c94 <TIM_Base_SetConfig+0x11c>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d003      	beq.n	8006bb8 <TIM_Base_SetConfig+0x40>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a39      	ldr	r2, [pc, #228]	@ (8006c98 <TIM_Base_SetConfig+0x120>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d108      	bne.n	8006bca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a2e      	ldr	r2, [pc, #184]	@ (8006c88 <TIM_Base_SetConfig+0x110>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d02b      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bd8:	d027      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a2b      	ldr	r2, [pc, #172]	@ (8006c8c <TIM_Base_SetConfig+0x114>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d023      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a2a      	ldr	r2, [pc, #168]	@ (8006c90 <TIM_Base_SetConfig+0x118>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d01f      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a29      	ldr	r2, [pc, #164]	@ (8006c94 <TIM_Base_SetConfig+0x11c>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d01b      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a28      	ldr	r2, [pc, #160]	@ (8006c98 <TIM_Base_SetConfig+0x120>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d017      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a27      	ldr	r2, [pc, #156]	@ (8006c9c <TIM_Base_SetConfig+0x124>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d013      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a26      	ldr	r2, [pc, #152]	@ (8006ca0 <TIM_Base_SetConfig+0x128>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d00f      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a25      	ldr	r2, [pc, #148]	@ (8006ca4 <TIM_Base_SetConfig+0x12c>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d00b      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a24      	ldr	r2, [pc, #144]	@ (8006ca8 <TIM_Base_SetConfig+0x130>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d007      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a23      	ldr	r2, [pc, #140]	@ (8006cac <TIM_Base_SetConfig+0x134>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d003      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a22      	ldr	r2, [pc, #136]	@ (8006cb0 <TIM_Base_SetConfig+0x138>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d108      	bne.n	8006c3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	695b      	ldr	r3, [r3, #20]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	689a      	ldr	r2, [r3, #8]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a09      	ldr	r2, [pc, #36]	@ (8006c88 <TIM_Base_SetConfig+0x110>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d003      	beq.n	8006c70 <TIM_Base_SetConfig+0xf8>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a0b      	ldr	r2, [pc, #44]	@ (8006c98 <TIM_Base_SetConfig+0x120>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d103      	bne.n	8006c78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	691a      	ldr	r2, [r3, #16]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	615a      	str	r2, [r3, #20]
}
 8006c7e:	bf00      	nop
 8006c80:	3714      	adds	r7, #20
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bc80      	pop	{r7}
 8006c86:	4770      	bx	lr
 8006c88:	40010000 	.word	0x40010000
 8006c8c:	40000400 	.word	0x40000400
 8006c90:	40000800 	.word	0x40000800
 8006c94:	40000c00 	.word	0x40000c00
 8006c98:	40010400 	.word	0x40010400
 8006c9c:	40014000 	.word	0x40014000
 8006ca0:	40014400 	.word	0x40014400
 8006ca4:	40014800 	.word	0x40014800
 8006ca8:	40001800 	.word	0x40001800
 8006cac:	40001c00 	.word	0x40001c00
 8006cb0:	40002000 	.word	0x40002000

08006cb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b087      	sub	sp, #28
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
 8006cc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6a1b      	ldr	r3, [r3, #32]
 8006cc8:	f023 0201 	bic.w	r2, r3, #1
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	699b      	ldr	r3, [r3, #24]
 8006cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f023 0303 	bic.w	r3, r3, #3
 8006cea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	f023 0302 	bic.w	r3, r3, #2
 8006cfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	697a      	ldr	r2, [r7, #20]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4a20      	ldr	r2, [pc, #128]	@ (8006d8c <TIM_OC1_SetConfig+0xd8>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d003      	beq.n	8006d18 <TIM_OC1_SetConfig+0x64>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a1f      	ldr	r2, [pc, #124]	@ (8006d90 <TIM_OC1_SetConfig+0xdc>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d10c      	bne.n	8006d32 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	f023 0308 	bic.w	r3, r3, #8
 8006d1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	697a      	ldr	r2, [r7, #20]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	f023 0304 	bic.w	r3, r3, #4
 8006d30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a15      	ldr	r2, [pc, #84]	@ (8006d8c <TIM_OC1_SetConfig+0xd8>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d003      	beq.n	8006d42 <TIM_OC1_SetConfig+0x8e>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4a14      	ldr	r2, [pc, #80]	@ (8006d90 <TIM_OC1_SetConfig+0xdc>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d111      	bne.n	8006d66 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006d50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	695b      	ldr	r3, [r3, #20]
 8006d56:	693a      	ldr	r2, [r7, #16]
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	699b      	ldr	r3, [r3, #24]
 8006d60:	693a      	ldr	r2, [r7, #16]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	693a      	ldr	r2, [r7, #16]
 8006d6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	68fa      	ldr	r2, [r7, #12]
 8006d70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	685a      	ldr	r2, [r3, #4]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	697a      	ldr	r2, [r7, #20]
 8006d7e:	621a      	str	r2, [r3, #32]
}
 8006d80:	bf00      	nop
 8006d82:	371c      	adds	r7, #28
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bc80      	pop	{r7}
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	40010000 	.word	0x40010000
 8006d90:	40010400 	.word	0x40010400

08006d94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b087      	sub	sp, #28
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a1b      	ldr	r3, [r3, #32]
 8006da2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6a1b      	ldr	r3, [r3, #32]
 8006da8:	f023 0210 	bic.w	r2, r3, #16
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	699b      	ldr	r3, [r3, #24]
 8006dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006dca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	021b      	lsls	r3, r3, #8
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	f023 0320 	bic.w	r3, r3, #32
 8006dde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	011b      	lsls	r3, r3, #4
 8006de6:	697a      	ldr	r2, [r7, #20]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a21      	ldr	r2, [pc, #132]	@ (8006e74 <TIM_OC2_SetConfig+0xe0>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d003      	beq.n	8006dfc <TIM_OC2_SetConfig+0x68>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a20      	ldr	r2, [pc, #128]	@ (8006e78 <TIM_OC2_SetConfig+0xe4>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d10d      	bne.n	8006e18 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	011b      	lsls	r3, r3, #4
 8006e0a:	697a      	ldr	r2, [r7, #20]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4a16      	ldr	r2, [pc, #88]	@ (8006e74 <TIM_OC2_SetConfig+0xe0>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d003      	beq.n	8006e28 <TIM_OC2_SetConfig+0x94>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a15      	ldr	r2, [pc, #84]	@ (8006e78 <TIM_OC2_SetConfig+0xe4>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d113      	bne.n	8006e50 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006e2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006e36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	695b      	ldr	r3, [r3, #20]
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	693a      	ldr	r2, [r7, #16]
 8006e40:	4313      	orrs	r3, r2
 8006e42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	699b      	ldr	r3, [r3, #24]
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	693a      	ldr	r2, [r7, #16]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	693a      	ldr	r2, [r7, #16]
 8006e54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	68fa      	ldr	r2, [r7, #12]
 8006e5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	685a      	ldr	r2, [r3, #4]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	697a      	ldr	r2, [r7, #20]
 8006e68:	621a      	str	r2, [r3, #32]
}
 8006e6a:	bf00      	nop
 8006e6c:	371c      	adds	r7, #28
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bc80      	pop	{r7}
 8006e72:	4770      	bx	lr
 8006e74:	40010000 	.word	0x40010000
 8006e78:	40010400 	.word	0x40010400

08006e7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b087      	sub	sp, #28
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a1b      	ldr	r3, [r3, #32]
 8006e8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6a1b      	ldr	r3, [r3, #32]
 8006e90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	69db      	ldr	r3, [r3, #28]
 8006ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f023 0303 	bic.w	r3, r3, #3
 8006eb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	68fa      	ldr	r2, [r7, #12]
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006ec4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	021b      	lsls	r3, r3, #8
 8006ecc:	697a      	ldr	r2, [r7, #20]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4a21      	ldr	r2, [pc, #132]	@ (8006f5c <TIM_OC3_SetConfig+0xe0>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d003      	beq.n	8006ee2 <TIM_OC3_SetConfig+0x66>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a20      	ldr	r2, [pc, #128]	@ (8006f60 <TIM_OC3_SetConfig+0xe4>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d10d      	bne.n	8006efe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006ee8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	021b      	lsls	r3, r3, #8
 8006ef0:	697a      	ldr	r2, [r7, #20]
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006efc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4a16      	ldr	r2, [pc, #88]	@ (8006f5c <TIM_OC3_SetConfig+0xe0>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d003      	beq.n	8006f0e <TIM_OC3_SetConfig+0x92>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4a15      	ldr	r2, [pc, #84]	@ (8006f60 <TIM_OC3_SetConfig+0xe4>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d113      	bne.n	8006f36 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006f1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	695b      	ldr	r3, [r3, #20]
 8006f22:	011b      	lsls	r3, r3, #4
 8006f24:	693a      	ldr	r2, [r7, #16]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	699b      	ldr	r3, [r3, #24]
 8006f2e:	011b      	lsls	r3, r3, #4
 8006f30:	693a      	ldr	r2, [r7, #16]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	693a      	ldr	r2, [r7, #16]
 8006f3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	685a      	ldr	r2, [r3, #4]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	697a      	ldr	r2, [r7, #20]
 8006f4e:	621a      	str	r2, [r3, #32]
}
 8006f50:	bf00      	nop
 8006f52:	371c      	adds	r7, #28
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bc80      	pop	{r7}
 8006f58:	4770      	bx	lr
 8006f5a:	bf00      	nop
 8006f5c:	40010000 	.word	0x40010000
 8006f60:	40010400 	.word	0x40010400

08006f64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b087      	sub	sp, #28
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a1b      	ldr	r3, [r3, #32]
 8006f72:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6a1b      	ldr	r3, [r3, #32]
 8006f78:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	69db      	ldr	r3, [r3, #28]
 8006f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	021b      	lsls	r3, r3, #8
 8006fa2:	68fa      	ldr	r2, [r7, #12]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006fae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	031b      	lsls	r3, r3, #12
 8006fb6:	693a      	ldr	r2, [r7, #16]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4a11      	ldr	r2, [pc, #68]	@ (8007004 <TIM_OC4_SetConfig+0xa0>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d003      	beq.n	8006fcc <TIM_OC4_SetConfig+0x68>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a10      	ldr	r2, [pc, #64]	@ (8007008 <TIM_OC4_SetConfig+0xa4>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d109      	bne.n	8006fe0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006fd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	695b      	ldr	r3, [r3, #20]
 8006fd8:	019b      	lsls	r3, r3, #6
 8006fda:	697a      	ldr	r2, [r7, #20]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	697a      	ldr	r2, [r7, #20]
 8006fe4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	685a      	ldr	r2, [r3, #4]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	693a      	ldr	r2, [r7, #16]
 8006ff8:	621a      	str	r2, [r3, #32]
}
 8006ffa:	bf00      	nop
 8006ffc:	371c      	adds	r7, #28
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bc80      	pop	{r7}
 8007002:	4770      	bx	lr
 8007004:	40010000 	.word	0x40010000
 8007008:	40010400 	.word	0x40010400

0800700c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800700c:	b480      	push	{r7}
 800700e:	b087      	sub	sp, #28
 8007010:	af00      	add	r7, sp, #0
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	60b9      	str	r1, [r7, #8]
 8007016:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	f003 031f 	and.w	r3, r3, #31
 800701e:	2201      	movs	r2, #1
 8007020:	fa02 f303 	lsl.w	r3, r2, r3
 8007024:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6a1a      	ldr	r2, [r3, #32]
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	43db      	mvns	r3, r3
 800702e:	401a      	ands	r2, r3
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6a1a      	ldr	r2, [r3, #32]
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	f003 031f 	and.w	r3, r3, #31
 800703e:	6879      	ldr	r1, [r7, #4]
 8007040:	fa01 f303 	lsl.w	r3, r1, r3
 8007044:	431a      	orrs	r2, r3
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	621a      	str	r2, [r3, #32]
}
 800704a:	bf00      	nop
 800704c:	371c      	adds	r7, #28
 800704e:	46bd      	mov	sp, r7
 8007050:	bc80      	pop	{r7}
 8007052:	4770      	bx	lr

08007054 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007064:	2b01      	cmp	r3, #1
 8007066:	d101      	bne.n	800706c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007068:	2302      	movs	r3, #2
 800706a:	e05a      	b.n	8007122 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2202      	movs	r2, #2
 8007078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007092:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	4313      	orrs	r3, r2
 800709c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a20      	ldr	r2, [pc, #128]	@ (800712c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d022      	beq.n	80070f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070b8:	d01d      	beq.n	80070f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a1c      	ldr	r2, [pc, #112]	@ (8007130 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d018      	beq.n	80070f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a1a      	ldr	r2, [pc, #104]	@ (8007134 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d013      	beq.n	80070f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a19      	ldr	r2, [pc, #100]	@ (8007138 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d00e      	beq.n	80070f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a17      	ldr	r2, [pc, #92]	@ (800713c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d009      	beq.n	80070f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a16      	ldr	r2, [pc, #88]	@ (8007140 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d004      	beq.n	80070f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a14      	ldr	r2, [pc, #80]	@ (8007144 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d10c      	bne.n	8007110 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80070fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	68ba      	ldr	r2, [r7, #8]
 8007104:	4313      	orrs	r3, r2
 8007106:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	68ba      	ldr	r2, [r7, #8]
 800710e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007120:	2300      	movs	r3, #0
}
 8007122:	4618      	mov	r0, r3
 8007124:	3714      	adds	r7, #20
 8007126:	46bd      	mov	sp, r7
 8007128:	bc80      	pop	{r7}
 800712a:	4770      	bx	lr
 800712c:	40010000 	.word	0x40010000
 8007130:	40000400 	.word	0x40000400
 8007134:	40000800 	.word	0x40000800
 8007138:	40000c00 	.word	0x40000c00
 800713c:	40010400 	.word	0x40010400
 8007140:	40014000 	.word	0x40014000
 8007144:	40001800 	.word	0x40001800

08007148 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007148:	b480      	push	{r7}
 800714a:	b085      	sub	sp, #20
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007152:	2300      	movs	r3, #0
 8007154:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800715c:	2b01      	cmp	r3, #1
 800715e:	d101      	bne.n	8007164 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007160:	2302      	movs	r3, #2
 8007162:	e03d      	b.n	80071e0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	4313      	orrs	r3, r2
 8007178:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	4313      	orrs	r3, r2
 8007186:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	4313      	orrs	r3, r2
 8007194:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4313      	orrs	r3, r2
 80071a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	695b      	ldr	r3, [r3, #20]
 80071bc:	4313      	orrs	r3, r2
 80071be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	69db      	ldr	r3, [r3, #28]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68fa      	ldr	r2, [r7, #12]
 80071d4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3714      	adds	r7, #20
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bc80      	pop	{r7}
 80071e8:	4770      	bx	lr

080071ea <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80071ea:	b480      	push	{r7}
 80071ec:	b083      	sub	sp, #12
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071f2:	bf00      	nop
 80071f4:	370c      	adds	r7, #12
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bc80      	pop	{r7}
 80071fa:	4770      	bx	lr

080071fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007204:	bf00      	nop
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	bc80      	pop	{r7}
 800720c:	4770      	bx	lr

0800720e <memset>:
 800720e:	4603      	mov	r3, r0
 8007210:	4402      	add	r2, r0
 8007212:	4293      	cmp	r3, r2
 8007214:	d100      	bne.n	8007218 <memset+0xa>
 8007216:	4770      	bx	lr
 8007218:	f803 1b01 	strb.w	r1, [r3], #1
 800721c:	e7f9      	b.n	8007212 <memset+0x4>
	...

08007220 <__libc_init_array>:
 8007220:	b570      	push	{r4, r5, r6, lr}
 8007222:	2600      	movs	r6, #0
 8007224:	4d0c      	ldr	r5, [pc, #48]	@ (8007258 <__libc_init_array+0x38>)
 8007226:	4c0d      	ldr	r4, [pc, #52]	@ (800725c <__libc_init_array+0x3c>)
 8007228:	1b64      	subs	r4, r4, r5
 800722a:	10a4      	asrs	r4, r4, #2
 800722c:	42a6      	cmp	r6, r4
 800722e:	d109      	bne.n	8007244 <__libc_init_array+0x24>
 8007230:	f000 f81a 	bl	8007268 <_init>
 8007234:	2600      	movs	r6, #0
 8007236:	4d0a      	ldr	r5, [pc, #40]	@ (8007260 <__libc_init_array+0x40>)
 8007238:	4c0a      	ldr	r4, [pc, #40]	@ (8007264 <__libc_init_array+0x44>)
 800723a:	1b64      	subs	r4, r4, r5
 800723c:	10a4      	asrs	r4, r4, #2
 800723e:	42a6      	cmp	r6, r4
 8007240:	d105      	bne.n	800724e <__libc_init_array+0x2e>
 8007242:	bd70      	pop	{r4, r5, r6, pc}
 8007244:	f855 3b04 	ldr.w	r3, [r5], #4
 8007248:	4798      	blx	r3
 800724a:	3601      	adds	r6, #1
 800724c:	e7ee      	b.n	800722c <__libc_init_array+0xc>
 800724e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007252:	4798      	blx	r3
 8007254:	3601      	adds	r6, #1
 8007256:	e7f2      	b.n	800723e <__libc_init_array+0x1e>
 8007258:	080072a8 	.word	0x080072a8
 800725c:	080072a8 	.word	0x080072a8
 8007260:	080072a8 	.word	0x080072a8
 8007264:	080072ac 	.word	0x080072ac

08007268 <_init>:
 8007268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800726a:	bf00      	nop
 800726c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800726e:	bc08      	pop	{r3}
 8007270:	469e      	mov	lr, r3
 8007272:	4770      	bx	lr

08007274 <_fini>:
 8007274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007276:	bf00      	nop
 8007278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800727a:	bc08      	pop	{r3}
 800727c:	469e      	mov	lr, r3
 800727e:	4770      	bx	lr
