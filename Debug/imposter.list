
imposter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046e8  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004870  08004870  00005870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004888  08004888  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004888  08004888  00005888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004890  08004890  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004890  08004890  00005890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004894  08004894  00005894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004898  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  2000000c  080048a4  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  080048a4  000062c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba16  00000000  00000000  00006035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002061  00000000  00000000  00011a4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  00013ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000090d  00000000  00000000  00014678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dca7  00000000  00000000  00014f85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e0c9  00000000  00000000  00032c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b6e96  00000000  00000000  00040cf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f7b8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032f0  00000000  00000000  000f7bd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000faec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004858 	.word	0x08004858

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004858 	.word	0x08004858

080001c8 <__aeabi_fmul>:
 80001c8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001cc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80001d0:	bf1e      	ittt	ne
 80001d2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80001d6:	ea92 0f0c 	teqne	r2, ip
 80001da:	ea93 0f0c 	teqne	r3, ip
 80001de:	d06f      	beq.n	80002c0 <__aeabi_fmul+0xf8>
 80001e0:	441a      	add	r2, r3
 80001e2:	ea80 0c01 	eor.w	ip, r0, r1
 80001e6:	0240      	lsls	r0, r0, #9
 80001e8:	bf18      	it	ne
 80001ea:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80001ee:	d01e      	beq.n	800022e <__aeabi_fmul+0x66>
 80001f0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80001f4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001f8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001fc:	fba0 3101 	umull	r3, r1, r0, r1
 8000200:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000204:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000208:	bf3e      	ittt	cc
 800020a:	0049      	lslcc	r1, r1, #1
 800020c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000210:	005b      	lslcc	r3, r3, #1
 8000212:	ea40 0001 	orr.w	r0, r0, r1
 8000216:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 800021a:	2afd      	cmp	r2, #253	@ 0xfd
 800021c:	d81d      	bhi.n	800025a <__aeabi_fmul+0x92>
 800021e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000222:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000226:	bf08      	it	eq
 8000228:	f020 0001 	biceq.w	r0, r0, #1
 800022c:	4770      	bx	lr
 800022e:	f090 0f00 	teq	r0, #0
 8000232:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000236:	bf08      	it	eq
 8000238:	0249      	lsleq	r1, r1, #9
 800023a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800023e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000242:	3a7f      	subs	r2, #127	@ 0x7f
 8000244:	bfc2      	ittt	gt
 8000246:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800024a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800024e:	4770      	bxgt	lr
 8000250:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000254:	f04f 0300 	mov.w	r3, #0
 8000258:	3a01      	subs	r2, #1
 800025a:	dc5d      	bgt.n	8000318 <__aeabi_fmul+0x150>
 800025c:	f112 0f19 	cmn.w	r2, #25
 8000260:	bfdc      	itt	le
 8000262:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000266:	4770      	bxle	lr
 8000268:	f1c2 0200 	rsb	r2, r2, #0
 800026c:	0041      	lsls	r1, r0, #1
 800026e:	fa21 f102 	lsr.w	r1, r1, r2
 8000272:	f1c2 0220 	rsb	r2, r2, #32
 8000276:	fa00 fc02 	lsl.w	ip, r0, r2
 800027a:	ea5f 0031 	movs.w	r0, r1, rrx
 800027e:	f140 0000 	adc.w	r0, r0, #0
 8000282:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000286:	bf08      	it	eq
 8000288:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800028c:	4770      	bx	lr
 800028e:	f092 0f00 	teq	r2, #0
 8000292:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000296:	bf02      	ittt	eq
 8000298:	0040      	lsleq	r0, r0, #1
 800029a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800029e:	3a01      	subeq	r2, #1
 80002a0:	d0f9      	beq.n	8000296 <__aeabi_fmul+0xce>
 80002a2:	ea40 000c 	orr.w	r0, r0, ip
 80002a6:	f093 0f00 	teq	r3, #0
 80002aa:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80002ae:	bf02      	ittt	eq
 80002b0:	0049      	lsleq	r1, r1, #1
 80002b2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80002b6:	3b01      	subeq	r3, #1
 80002b8:	d0f9      	beq.n	80002ae <__aeabi_fmul+0xe6>
 80002ba:	ea41 010c 	orr.w	r1, r1, ip
 80002be:	e78f      	b.n	80001e0 <__aeabi_fmul+0x18>
 80002c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80002c4:	ea92 0f0c 	teq	r2, ip
 80002c8:	bf18      	it	ne
 80002ca:	ea93 0f0c 	teqne	r3, ip
 80002ce:	d00a      	beq.n	80002e6 <__aeabi_fmul+0x11e>
 80002d0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80002d4:	bf18      	it	ne
 80002d6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80002da:	d1d8      	bne.n	800028e <__aeabi_fmul+0xc6>
 80002dc:	ea80 0001 	eor.w	r0, r0, r1
 80002e0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002e4:	4770      	bx	lr
 80002e6:	f090 0f00 	teq	r0, #0
 80002ea:	bf17      	itett	ne
 80002ec:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80002f0:	4608      	moveq	r0, r1
 80002f2:	f091 0f00 	teqne	r1, #0
 80002f6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80002fa:	d014      	beq.n	8000326 <__aeabi_fmul+0x15e>
 80002fc:	ea92 0f0c 	teq	r2, ip
 8000300:	d101      	bne.n	8000306 <__aeabi_fmul+0x13e>
 8000302:	0242      	lsls	r2, r0, #9
 8000304:	d10f      	bne.n	8000326 <__aeabi_fmul+0x15e>
 8000306:	ea93 0f0c 	teq	r3, ip
 800030a:	d103      	bne.n	8000314 <__aeabi_fmul+0x14c>
 800030c:	024b      	lsls	r3, r1, #9
 800030e:	bf18      	it	ne
 8000310:	4608      	movne	r0, r1
 8000312:	d108      	bne.n	8000326 <__aeabi_fmul+0x15e>
 8000314:	ea80 0001 	eor.w	r0, r0, r1
 8000318:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800031c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000320:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000324:	4770      	bx	lr
 8000326:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800032a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 800032e:	4770      	bx	lr

08000330 <__aeabi_drsub>:
 8000330:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000334:	e002      	b.n	800033c <__adddf3>
 8000336:	bf00      	nop

08000338 <__aeabi_dsub>:
 8000338:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800033c <__adddf3>:
 800033c:	b530      	push	{r4, r5, lr}
 800033e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000342:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000346:	ea94 0f05 	teq	r4, r5
 800034a:	bf08      	it	eq
 800034c:	ea90 0f02 	teqeq	r0, r2
 8000350:	bf1f      	itttt	ne
 8000352:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000356:	ea55 0c02 	orrsne.w	ip, r5, r2
 800035a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800035e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000362:	f000 80e2 	beq.w	800052a <__adddf3+0x1ee>
 8000366:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800036a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800036e:	bfb8      	it	lt
 8000370:	426d      	neglt	r5, r5
 8000372:	dd0c      	ble.n	800038e <__adddf3+0x52>
 8000374:	442c      	add	r4, r5
 8000376:	ea80 0202 	eor.w	r2, r0, r2
 800037a:	ea81 0303 	eor.w	r3, r1, r3
 800037e:	ea82 0000 	eor.w	r0, r2, r0
 8000382:	ea83 0101 	eor.w	r1, r3, r1
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	2d36      	cmp	r5, #54	@ 0x36
 8000390:	bf88      	it	hi
 8000392:	bd30      	pophi	{r4, r5, pc}
 8000394:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000398:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800039c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003a4:	d002      	beq.n	80003ac <__adddf3+0x70>
 80003a6:	4240      	negs	r0, r0
 80003a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80003b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003b8:	d002      	beq.n	80003c0 <__adddf3+0x84>
 80003ba:	4252      	negs	r2, r2
 80003bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003c0:	ea94 0f05 	teq	r4, r5
 80003c4:	f000 80a7 	beq.w	8000516 <__adddf3+0x1da>
 80003c8:	f1a4 0401 	sub.w	r4, r4, #1
 80003cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003d0:	db0d      	blt.n	80003ee <__adddf3+0xb2>
 80003d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003d6:	fa22 f205 	lsr.w	r2, r2, r5
 80003da:	1880      	adds	r0, r0, r2
 80003dc:	f141 0100 	adc.w	r1, r1, #0
 80003e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003e4:	1880      	adds	r0, r0, r2
 80003e6:	fa43 f305 	asr.w	r3, r3, r5
 80003ea:	4159      	adcs	r1, r3
 80003ec:	e00e      	b.n	800040c <__adddf3+0xd0>
 80003ee:	f1a5 0520 	sub.w	r5, r5, #32
 80003f2:	f10e 0e20 	add.w	lr, lr, #32
 80003f6:	2a01      	cmp	r2, #1
 80003f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003fc:	bf28      	it	cs
 80003fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000402:	fa43 f305 	asr.w	r3, r3, r5
 8000406:	18c0      	adds	r0, r0, r3
 8000408:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800040c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000410:	d507      	bpl.n	8000422 <__adddf3+0xe6>
 8000412:	f04f 0e00 	mov.w	lr, #0
 8000416:	f1dc 0c00 	rsbs	ip, ip, #0
 800041a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800041e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000422:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000426:	d31b      	bcc.n	8000460 <__adddf3+0x124>
 8000428:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800042c:	d30c      	bcc.n	8000448 <__adddf3+0x10c>
 800042e:	0849      	lsrs	r1, r1, #1
 8000430:	ea5f 0030 	movs.w	r0, r0, rrx
 8000434:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000438:	f104 0401 	add.w	r4, r4, #1
 800043c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000440:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000444:	f080 809a 	bcs.w	800057c <__adddf3+0x240>
 8000448:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800044c:	bf08      	it	eq
 800044e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000452:	f150 0000 	adcs.w	r0, r0, #0
 8000456:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800045a:	ea41 0105 	orr.w	r1, r1, r5
 800045e:	bd30      	pop	{r4, r5, pc}
 8000460:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000464:	4140      	adcs	r0, r0
 8000466:	eb41 0101 	adc.w	r1, r1, r1
 800046a:	3c01      	subs	r4, #1
 800046c:	bf28      	it	cs
 800046e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000472:	d2e9      	bcs.n	8000448 <__adddf3+0x10c>
 8000474:	f091 0f00 	teq	r1, #0
 8000478:	bf04      	itt	eq
 800047a:	4601      	moveq	r1, r0
 800047c:	2000      	moveq	r0, #0
 800047e:	fab1 f381 	clz	r3, r1
 8000482:	bf08      	it	eq
 8000484:	3320      	addeq	r3, #32
 8000486:	f1a3 030b 	sub.w	r3, r3, #11
 800048a:	f1b3 0220 	subs.w	r2, r3, #32
 800048e:	da0c      	bge.n	80004aa <__adddf3+0x16e>
 8000490:	320c      	adds	r2, #12
 8000492:	dd08      	ble.n	80004a6 <__adddf3+0x16a>
 8000494:	f102 0c14 	add.w	ip, r2, #20
 8000498:	f1c2 020c 	rsb	r2, r2, #12
 800049c:	fa01 f00c 	lsl.w	r0, r1, ip
 80004a0:	fa21 f102 	lsr.w	r1, r1, r2
 80004a4:	e00c      	b.n	80004c0 <__adddf3+0x184>
 80004a6:	f102 0214 	add.w	r2, r2, #20
 80004aa:	bfd8      	it	le
 80004ac:	f1c2 0c20 	rsble	ip, r2, #32
 80004b0:	fa01 f102 	lsl.w	r1, r1, r2
 80004b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004b8:	bfdc      	itt	le
 80004ba:	ea41 010c 	orrle.w	r1, r1, ip
 80004be:	4090      	lslle	r0, r2
 80004c0:	1ae4      	subs	r4, r4, r3
 80004c2:	bfa2      	ittt	ge
 80004c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004c8:	4329      	orrge	r1, r5
 80004ca:	bd30      	popge	{r4, r5, pc}
 80004cc:	ea6f 0404 	mvn.w	r4, r4
 80004d0:	3c1f      	subs	r4, #31
 80004d2:	da1c      	bge.n	800050e <__adddf3+0x1d2>
 80004d4:	340c      	adds	r4, #12
 80004d6:	dc0e      	bgt.n	80004f6 <__adddf3+0x1ba>
 80004d8:	f104 0414 	add.w	r4, r4, #20
 80004dc:	f1c4 0220 	rsb	r2, r4, #32
 80004e0:	fa20 f004 	lsr.w	r0, r0, r4
 80004e4:	fa01 f302 	lsl.w	r3, r1, r2
 80004e8:	ea40 0003 	orr.w	r0, r0, r3
 80004ec:	fa21 f304 	lsr.w	r3, r1, r4
 80004f0:	ea45 0103 	orr.w	r1, r5, r3
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f1c4 040c 	rsb	r4, r4, #12
 80004fa:	f1c4 0220 	rsb	r2, r4, #32
 80004fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000502:	fa01 f304 	lsl.w	r3, r1, r4
 8000506:	ea40 0003 	orr.w	r0, r0, r3
 800050a:	4629      	mov	r1, r5
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	fa21 f004 	lsr.w	r0, r1, r4
 8000512:	4629      	mov	r1, r5
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	f094 0f00 	teq	r4, #0
 800051a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800051e:	bf06      	itte	eq
 8000520:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000524:	3401      	addeq	r4, #1
 8000526:	3d01      	subne	r5, #1
 8000528:	e74e      	b.n	80003c8 <__adddf3+0x8c>
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf18      	it	ne
 8000530:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000534:	d029      	beq.n	800058a <__adddf3+0x24e>
 8000536:	ea94 0f05 	teq	r4, r5
 800053a:	bf08      	it	eq
 800053c:	ea90 0f02 	teqeq	r0, r2
 8000540:	d005      	beq.n	800054e <__adddf3+0x212>
 8000542:	ea54 0c00 	orrs.w	ip, r4, r0
 8000546:	bf04      	itt	eq
 8000548:	4619      	moveq	r1, r3
 800054a:	4610      	moveq	r0, r2
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	ea91 0f03 	teq	r1, r3
 8000552:	bf1e      	ittt	ne
 8000554:	2100      	movne	r1, #0
 8000556:	2000      	movne	r0, #0
 8000558:	bd30      	popne	{r4, r5, pc}
 800055a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800055e:	d105      	bne.n	800056c <__adddf3+0x230>
 8000560:	0040      	lsls	r0, r0, #1
 8000562:	4149      	adcs	r1, r1
 8000564:	bf28      	it	cs
 8000566:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000570:	bf3c      	itt	cc
 8000572:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000576:	bd30      	popcc	{r4, r5, pc}
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800057c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000580:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000584:	f04f 0000 	mov.w	r0, #0
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf1a      	itte	ne
 8000590:	4619      	movne	r1, r3
 8000592:	4610      	movne	r0, r2
 8000594:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000598:	bf1c      	itt	ne
 800059a:	460b      	movne	r3, r1
 800059c:	4602      	movne	r2, r0
 800059e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005a2:	bf06      	itte	eq
 80005a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005a8:	ea91 0f03 	teqeq	r1, r3
 80005ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80005b0:	bd30      	pop	{r4, r5, pc}
 80005b2:	bf00      	nop

080005b4 <__aeabi_ui2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c8:	f04f 0500 	mov.w	r5, #0
 80005cc:	f04f 0100 	mov.w	r1, #0
 80005d0:	e750      	b.n	8000474 <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_i2d>:
 80005d4:	f090 0f00 	teq	r0, #0
 80005d8:	bf04      	itt	eq
 80005da:	2100      	moveq	r1, #0
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ec:	bf48      	it	mi
 80005ee:	4240      	negmi	r0, r0
 80005f0:	f04f 0100 	mov.w	r1, #0
 80005f4:	e73e      	b.n	8000474 <__adddf3+0x138>
 80005f6:	bf00      	nop

080005f8 <__aeabi_f2d>:
 80005f8:	0042      	lsls	r2, r0, #1
 80005fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000602:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000606:	bf1f      	itttt	ne
 8000608:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800060c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000610:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000614:	4770      	bxne	lr
 8000616:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800061a:	bf08      	it	eq
 800061c:	4770      	bxeq	lr
 800061e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000622:	bf04      	itt	eq
 8000624:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000628:	4770      	bxeq	lr
 800062a:	b530      	push	{r4, r5, lr}
 800062c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000630:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000634:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000638:	e71c      	b.n	8000474 <__adddf3+0x138>
 800063a:	bf00      	nop

0800063c <__aeabi_ul2d>:
 800063c:	ea50 0201 	orrs.w	r2, r0, r1
 8000640:	bf08      	it	eq
 8000642:	4770      	bxeq	lr
 8000644:	b530      	push	{r4, r5, lr}
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	e00a      	b.n	8000662 <__aeabi_l2d+0x16>

0800064c <__aeabi_l2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800065a:	d502      	bpl.n	8000662 <__aeabi_l2d+0x16>
 800065c:	4240      	negs	r0, r0
 800065e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000662:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000666:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800066a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800066e:	f43f aed8 	beq.w	8000422 <__adddf3+0xe6>
 8000672:	f04f 0203 	mov.w	r2, #3
 8000676:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800067a:	bf18      	it	ne
 800067c:	3203      	addne	r2, #3
 800067e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000682:	bf18      	it	ne
 8000684:	3203      	addne	r2, #3
 8000686:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800068a:	f1c2 0320 	rsb	r3, r2, #32
 800068e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 fe03 	lsl.w	lr, r1, r3
 800069a:	ea40 000e 	orr.w	r0, r0, lr
 800069e:	fa21 f102 	lsr.w	r1, r1, r2
 80006a2:	4414      	add	r4, r2
 80006a4:	e6bd      	b.n	8000422 <__adddf3+0xe6>
 80006a6:	bf00      	nop

080006a8 <__gedf2>:
 80006a8:	f04f 3cff 	mov.w	ip, #4294967295
 80006ac:	e006      	b.n	80006bc <__cmpdf2+0x4>
 80006ae:	bf00      	nop

080006b0 <__ledf2>:
 80006b0:	f04f 0c01 	mov.w	ip, #1
 80006b4:	e002      	b.n	80006bc <__cmpdf2+0x4>
 80006b6:	bf00      	nop

080006b8 <__cmpdf2>:
 80006b8:	f04f 0c01 	mov.w	ip, #1
 80006bc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80006c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80006c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006cc:	bf18      	it	ne
 80006ce:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80006d2:	d01b      	beq.n	800070c <__cmpdf2+0x54>
 80006d4:	b001      	add	sp, #4
 80006d6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80006da:	bf0c      	ite	eq
 80006dc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80006e0:	ea91 0f03 	teqne	r1, r3
 80006e4:	bf02      	ittt	eq
 80006e6:	ea90 0f02 	teqeq	r0, r2
 80006ea:	2000      	moveq	r0, #0
 80006ec:	4770      	bxeq	lr
 80006ee:	f110 0f00 	cmn.w	r0, #0
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf58      	it	pl
 80006f8:	4299      	cmppl	r1, r3
 80006fa:	bf08      	it	eq
 80006fc:	4290      	cmpeq	r0, r2
 80006fe:	bf2c      	ite	cs
 8000700:	17d8      	asrcs	r0, r3, #31
 8000702:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000706:	f040 0001 	orr.w	r0, r0, #1
 800070a:	4770      	bx	lr
 800070c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000710:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000714:	d102      	bne.n	800071c <__cmpdf2+0x64>
 8000716:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800071a:	d107      	bne.n	800072c <__cmpdf2+0x74>
 800071c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000720:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000724:	d1d6      	bne.n	80006d4 <__cmpdf2+0x1c>
 8000726:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800072a:	d0d3      	beq.n	80006d4 <__cmpdf2+0x1c>
 800072c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop

08000734 <__aeabi_cdrcmple>:
 8000734:	4684      	mov	ip, r0
 8000736:	4610      	mov	r0, r2
 8000738:	4662      	mov	r2, ip
 800073a:	468c      	mov	ip, r1
 800073c:	4619      	mov	r1, r3
 800073e:	4663      	mov	r3, ip
 8000740:	e000      	b.n	8000744 <__aeabi_cdcmpeq>
 8000742:	bf00      	nop

08000744 <__aeabi_cdcmpeq>:
 8000744:	b501      	push	{r0, lr}
 8000746:	f7ff ffb7 	bl	80006b8 <__cmpdf2>
 800074a:	2800      	cmp	r0, #0
 800074c:	bf48      	it	mi
 800074e:	f110 0f00 	cmnmi.w	r0, #0
 8000752:	bd01      	pop	{r0, pc}

08000754 <__aeabi_dcmpeq>:
 8000754:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000758:	f7ff fff4 	bl	8000744 <__aeabi_cdcmpeq>
 800075c:	bf0c      	ite	eq
 800075e:	2001      	moveq	r0, #1
 8000760:	2000      	movne	r0, #0
 8000762:	f85d fb08 	ldr.w	pc, [sp], #8
 8000766:	bf00      	nop

08000768 <__aeabi_dcmplt>:
 8000768:	f84d ed08 	str.w	lr, [sp, #-8]!
 800076c:	f7ff ffea 	bl	8000744 <__aeabi_cdcmpeq>
 8000770:	bf34      	ite	cc
 8000772:	2001      	movcc	r0, #1
 8000774:	2000      	movcs	r0, #0
 8000776:	f85d fb08 	ldr.w	pc, [sp], #8
 800077a:	bf00      	nop

0800077c <__aeabi_dcmple>:
 800077c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000780:	f7ff ffe0 	bl	8000744 <__aeabi_cdcmpeq>
 8000784:	bf94      	ite	ls
 8000786:	2001      	movls	r0, #1
 8000788:	2000      	movhi	r0, #0
 800078a:	f85d fb08 	ldr.w	pc, [sp], #8
 800078e:	bf00      	nop

08000790 <__aeabi_dcmpge>:
 8000790:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000794:	f7ff ffce 	bl	8000734 <__aeabi_cdrcmple>
 8000798:	bf94      	ite	ls
 800079a:	2001      	movls	r0, #1
 800079c:	2000      	movhi	r0, #0
 800079e:	f85d fb08 	ldr.w	pc, [sp], #8
 80007a2:	bf00      	nop

080007a4 <__aeabi_dcmpgt>:
 80007a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007a8:	f7ff ffc4 	bl	8000734 <__aeabi_cdrcmple>
 80007ac:	bf34      	ite	cc
 80007ae:	2001      	movcc	r0, #1
 80007b0:	2000      	movcs	r0, #0
 80007b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80007b6:	bf00      	nop

080007b8 <__gesf2>:
 80007b8:	f04f 3cff 	mov.w	ip, #4294967295
 80007bc:	e006      	b.n	80007cc <__cmpsf2+0x4>
 80007be:	bf00      	nop

080007c0 <__lesf2>:
 80007c0:	f04f 0c01 	mov.w	ip, #1
 80007c4:	e002      	b.n	80007cc <__cmpsf2+0x4>
 80007c6:	bf00      	nop

080007c8 <__cmpsf2>:
 80007c8:	f04f 0c01 	mov.w	ip, #1
 80007cc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80007d4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80007d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80007dc:	bf18      	it	ne
 80007de:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80007e2:	d011      	beq.n	8000808 <__cmpsf2+0x40>
 80007e4:	b001      	add	sp, #4
 80007e6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80007ea:	bf18      	it	ne
 80007ec:	ea90 0f01 	teqne	r0, r1
 80007f0:	bf58      	it	pl
 80007f2:	ebb2 0003 	subspl.w	r0, r2, r3
 80007f6:	bf88      	it	hi
 80007f8:	17c8      	asrhi	r0, r1, #31
 80007fa:	bf38      	it	cc
 80007fc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000800:	bf18      	it	ne
 8000802:	f040 0001 	orrne.w	r0, r0, #1
 8000806:	4770      	bx	lr
 8000808:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800080c:	d102      	bne.n	8000814 <__cmpsf2+0x4c>
 800080e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000812:	d105      	bne.n	8000820 <__cmpsf2+0x58>
 8000814:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000818:	d1e4      	bne.n	80007e4 <__cmpsf2+0x1c>
 800081a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800081e:	d0e1      	beq.n	80007e4 <__cmpsf2+0x1c>
 8000820:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop

08000828 <__aeabi_cfrcmple>:
 8000828:	4684      	mov	ip, r0
 800082a:	4608      	mov	r0, r1
 800082c:	4661      	mov	r1, ip
 800082e:	e7ff      	b.n	8000830 <__aeabi_cfcmpeq>

08000830 <__aeabi_cfcmpeq>:
 8000830:	b50f      	push	{r0, r1, r2, r3, lr}
 8000832:	f7ff ffc9 	bl	80007c8 <__cmpsf2>
 8000836:	2800      	cmp	r0, #0
 8000838:	bf48      	it	mi
 800083a:	f110 0f00 	cmnmi.w	r0, #0
 800083e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000840 <__aeabi_fcmpeq>:
 8000840:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000844:	f7ff fff4 	bl	8000830 <__aeabi_cfcmpeq>
 8000848:	bf0c      	ite	eq
 800084a:	2001      	moveq	r0, #1
 800084c:	2000      	movne	r0, #0
 800084e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000852:	bf00      	nop

08000854 <__aeabi_fcmplt>:
 8000854:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000858:	f7ff ffea 	bl	8000830 <__aeabi_cfcmpeq>
 800085c:	bf34      	ite	cc
 800085e:	2001      	movcc	r0, #1
 8000860:	2000      	movcs	r0, #0
 8000862:	f85d fb08 	ldr.w	pc, [sp], #8
 8000866:	bf00      	nop

08000868 <__aeabi_fcmple>:
 8000868:	f84d ed08 	str.w	lr, [sp, #-8]!
 800086c:	f7ff ffe0 	bl	8000830 <__aeabi_cfcmpeq>
 8000870:	bf94      	ite	ls
 8000872:	2001      	movls	r0, #1
 8000874:	2000      	movhi	r0, #0
 8000876:	f85d fb08 	ldr.w	pc, [sp], #8
 800087a:	bf00      	nop

0800087c <__aeabi_fcmpge>:
 800087c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000880:	f7ff ffd2 	bl	8000828 <__aeabi_cfrcmple>
 8000884:	bf94      	ite	ls
 8000886:	2001      	movls	r0, #1
 8000888:	2000      	movhi	r0, #0
 800088a:	f85d fb08 	ldr.w	pc, [sp], #8
 800088e:	bf00      	nop

08000890 <__aeabi_fcmpgt>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff ffc8 	bl	8000828 <__aeabi_cfrcmple>
 8000898:	bf34      	ite	cc
 800089a:	2001      	movcc	r0, #1
 800089c:	2000      	movcs	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_f2uiz>:
 80008a4:	0042      	lsls	r2, r0, #1
 80008a6:	d20e      	bcs.n	80008c6 <__aeabi_f2uiz+0x22>
 80008a8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80008ac:	d30b      	bcc.n	80008c6 <__aeabi_f2uiz+0x22>
 80008ae:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80008b2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80008b6:	d409      	bmi.n	80008cc <__aeabi_f2uiz+0x28>
 80008b8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80008bc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80008c0:	fa23 f002 	lsr.w	r0, r3, r2
 80008c4:	4770      	bx	lr
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	4770      	bx	lr
 80008cc:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80008d0:	d101      	bne.n	80008d6 <__aeabi_f2uiz+0x32>
 80008d2:	0242      	lsls	r2, r0, #9
 80008d4:	d102      	bne.n	80008dc <__aeabi_f2uiz+0x38>
 80008d6:	f04f 30ff 	mov.w	r0, #4294967295
 80008da:	4770      	bx	lr
 80008dc:	f04f 0000 	mov.w	r0, #0
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop

080008e4 <__aeabi_uldivmod>:
 80008e4:	b953      	cbnz	r3, 80008fc <__aeabi_uldivmod+0x18>
 80008e6:	b94a      	cbnz	r2, 80008fc <__aeabi_uldivmod+0x18>
 80008e8:	2900      	cmp	r1, #0
 80008ea:	bf08      	it	eq
 80008ec:	2800      	cmpeq	r0, #0
 80008ee:	bf1c      	itt	ne
 80008f0:	f04f 31ff 	movne.w	r1, #4294967295
 80008f4:	f04f 30ff 	movne.w	r0, #4294967295
 80008f8:	f000 b968 	b.w	8000bcc <__aeabi_idiv0>
 80008fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000900:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000904:	f000 f806 	bl	8000914 <__udivmoddi4>
 8000908:	f8dd e004 	ldr.w	lr, [sp, #4]
 800090c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000910:	b004      	add	sp, #16
 8000912:	4770      	bx	lr

08000914 <__udivmoddi4>:
 8000914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000918:	9d08      	ldr	r5, [sp, #32]
 800091a:	460c      	mov	r4, r1
 800091c:	2b00      	cmp	r3, #0
 800091e:	d14e      	bne.n	80009be <__udivmoddi4+0xaa>
 8000920:	4694      	mov	ip, r2
 8000922:	458c      	cmp	ip, r1
 8000924:	4686      	mov	lr, r0
 8000926:	fab2 f282 	clz	r2, r2
 800092a:	d962      	bls.n	80009f2 <__udivmoddi4+0xde>
 800092c:	b14a      	cbz	r2, 8000942 <__udivmoddi4+0x2e>
 800092e:	f1c2 0320 	rsb	r3, r2, #32
 8000932:	4091      	lsls	r1, r2
 8000934:	fa20 f303 	lsr.w	r3, r0, r3
 8000938:	fa0c fc02 	lsl.w	ip, ip, r2
 800093c:	4319      	orrs	r1, r3
 800093e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000942:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000946:	fbb1 f4f7 	udiv	r4, r1, r7
 800094a:	fb07 1114 	mls	r1, r7, r4, r1
 800094e:	fa1f f68c 	uxth.w	r6, ip
 8000952:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000956:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800095a:	fb04 f106 	mul.w	r1, r4, r6
 800095e:	4299      	cmp	r1, r3
 8000960:	d90a      	bls.n	8000978 <__udivmoddi4+0x64>
 8000962:	eb1c 0303 	adds.w	r3, ip, r3
 8000966:	f104 30ff 	add.w	r0, r4, #4294967295
 800096a:	f080 8110 	bcs.w	8000b8e <__udivmoddi4+0x27a>
 800096e:	4299      	cmp	r1, r3
 8000970:	f240 810d 	bls.w	8000b8e <__udivmoddi4+0x27a>
 8000974:	3c02      	subs	r4, #2
 8000976:	4463      	add	r3, ip
 8000978:	1a59      	subs	r1, r3, r1
 800097a:	fbb1 f0f7 	udiv	r0, r1, r7
 800097e:	fb07 1110 	mls	r1, r7, r0, r1
 8000982:	fb00 f606 	mul.w	r6, r0, r6
 8000986:	fa1f f38e 	uxth.w	r3, lr
 800098a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800098e:	429e      	cmp	r6, r3
 8000990:	d90a      	bls.n	80009a8 <__udivmoddi4+0x94>
 8000992:	eb1c 0303 	adds.w	r3, ip, r3
 8000996:	f100 31ff 	add.w	r1, r0, #4294967295
 800099a:	f080 80fa 	bcs.w	8000b92 <__udivmoddi4+0x27e>
 800099e:	429e      	cmp	r6, r3
 80009a0:	f240 80f7 	bls.w	8000b92 <__udivmoddi4+0x27e>
 80009a4:	4463      	add	r3, ip
 80009a6:	3802      	subs	r0, #2
 80009a8:	2100      	movs	r1, #0
 80009aa:	1b9b      	subs	r3, r3, r6
 80009ac:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80009b0:	b11d      	cbz	r5, 80009ba <__udivmoddi4+0xa6>
 80009b2:	40d3      	lsrs	r3, r2
 80009b4:	2200      	movs	r2, #0
 80009b6:	e9c5 3200 	strd	r3, r2, [r5]
 80009ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009be:	428b      	cmp	r3, r1
 80009c0:	d905      	bls.n	80009ce <__udivmoddi4+0xba>
 80009c2:	b10d      	cbz	r5, 80009c8 <__udivmoddi4+0xb4>
 80009c4:	e9c5 0100 	strd	r0, r1, [r5]
 80009c8:	2100      	movs	r1, #0
 80009ca:	4608      	mov	r0, r1
 80009cc:	e7f5      	b.n	80009ba <__udivmoddi4+0xa6>
 80009ce:	fab3 f183 	clz	r1, r3
 80009d2:	2900      	cmp	r1, #0
 80009d4:	d146      	bne.n	8000a64 <__udivmoddi4+0x150>
 80009d6:	42a3      	cmp	r3, r4
 80009d8:	d302      	bcc.n	80009e0 <__udivmoddi4+0xcc>
 80009da:	4290      	cmp	r0, r2
 80009dc:	f0c0 80ee 	bcc.w	8000bbc <__udivmoddi4+0x2a8>
 80009e0:	1a86      	subs	r6, r0, r2
 80009e2:	eb64 0303 	sbc.w	r3, r4, r3
 80009e6:	2001      	movs	r0, #1
 80009e8:	2d00      	cmp	r5, #0
 80009ea:	d0e6      	beq.n	80009ba <__udivmoddi4+0xa6>
 80009ec:	e9c5 6300 	strd	r6, r3, [r5]
 80009f0:	e7e3      	b.n	80009ba <__udivmoddi4+0xa6>
 80009f2:	2a00      	cmp	r2, #0
 80009f4:	f040 808f 	bne.w	8000b16 <__udivmoddi4+0x202>
 80009f8:	eba1 040c 	sub.w	r4, r1, ip
 80009fc:	2101      	movs	r1, #1
 80009fe:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a02:	fa1f f78c 	uxth.w	r7, ip
 8000a06:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a0a:	fb08 4416 	mls	r4, r8, r6, r4
 8000a0e:	fb07 f006 	mul.w	r0, r7, r6
 8000a12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a1a:	4298      	cmp	r0, r3
 8000a1c:	d908      	bls.n	8000a30 <__udivmoddi4+0x11c>
 8000a1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a22:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a26:	d202      	bcs.n	8000a2e <__udivmoddi4+0x11a>
 8000a28:	4298      	cmp	r0, r3
 8000a2a:	f200 80cb 	bhi.w	8000bc4 <__udivmoddi4+0x2b0>
 8000a2e:	4626      	mov	r6, r4
 8000a30:	1a1c      	subs	r4, r3, r0
 8000a32:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a36:	fb08 4410 	mls	r4, r8, r0, r4
 8000a3a:	fb00 f707 	mul.w	r7, r0, r7
 8000a3e:	fa1f f38e 	uxth.w	r3, lr
 8000a42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a46:	429f      	cmp	r7, r3
 8000a48:	d908      	bls.n	8000a5c <__udivmoddi4+0x148>
 8000a4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a4e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a52:	d202      	bcs.n	8000a5a <__udivmoddi4+0x146>
 8000a54:	429f      	cmp	r7, r3
 8000a56:	f200 80ae 	bhi.w	8000bb6 <__udivmoddi4+0x2a2>
 8000a5a:	4620      	mov	r0, r4
 8000a5c:	1bdb      	subs	r3, r3, r7
 8000a5e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a62:	e7a5      	b.n	80009b0 <__udivmoddi4+0x9c>
 8000a64:	f1c1 0720 	rsb	r7, r1, #32
 8000a68:	408b      	lsls	r3, r1
 8000a6a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a6e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a72:	fa24 f607 	lsr.w	r6, r4, r7
 8000a76:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a7a:	fbb6 f8f9 	udiv	r8, r6, r9
 8000a7e:	fa1f fe8c 	uxth.w	lr, ip
 8000a82:	fb09 6618 	mls	r6, r9, r8, r6
 8000a86:	fa20 f307 	lsr.w	r3, r0, r7
 8000a8a:	408c      	lsls	r4, r1
 8000a8c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000a90:	fb08 f00e 	mul.w	r0, r8, lr
 8000a94:	431c      	orrs	r4, r3
 8000a96:	0c23      	lsrs	r3, r4, #16
 8000a98:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a9c:	4298      	cmp	r0, r3
 8000a9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000aa2:	d90a      	bls.n	8000aba <__udivmoddi4+0x1a6>
 8000aa4:	eb1c 0303 	adds.w	r3, ip, r3
 8000aa8:	f108 36ff 	add.w	r6, r8, #4294967295
 8000aac:	f080 8081 	bcs.w	8000bb2 <__udivmoddi4+0x29e>
 8000ab0:	4298      	cmp	r0, r3
 8000ab2:	d97e      	bls.n	8000bb2 <__udivmoddi4+0x29e>
 8000ab4:	f1a8 0802 	sub.w	r8, r8, #2
 8000ab8:	4463      	add	r3, ip
 8000aba:	1a1e      	subs	r6, r3, r0
 8000abc:	fbb6 f3f9 	udiv	r3, r6, r9
 8000ac0:	fb09 6613 	mls	r6, r9, r3, r6
 8000ac4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ac8:	b2a4      	uxth	r4, r4
 8000aca:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000ace:	45a6      	cmp	lr, r4
 8000ad0:	d908      	bls.n	8000ae4 <__udivmoddi4+0x1d0>
 8000ad2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ad6:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ada:	d266      	bcs.n	8000baa <__udivmoddi4+0x296>
 8000adc:	45a6      	cmp	lr, r4
 8000ade:	d964      	bls.n	8000baa <__udivmoddi4+0x296>
 8000ae0:	3b02      	subs	r3, #2
 8000ae2:	4464      	add	r4, ip
 8000ae4:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000ae8:	fba0 8302 	umull	r8, r3, r0, r2
 8000aec:	eba4 040e 	sub.w	r4, r4, lr
 8000af0:	429c      	cmp	r4, r3
 8000af2:	46c6      	mov	lr, r8
 8000af4:	461e      	mov	r6, r3
 8000af6:	d350      	bcc.n	8000b9a <__udivmoddi4+0x286>
 8000af8:	d04d      	beq.n	8000b96 <__udivmoddi4+0x282>
 8000afa:	b155      	cbz	r5, 8000b12 <__udivmoddi4+0x1fe>
 8000afc:	ebba 030e 	subs.w	r3, sl, lr
 8000b00:	eb64 0406 	sbc.w	r4, r4, r6
 8000b04:	fa04 f707 	lsl.w	r7, r4, r7
 8000b08:	40cb      	lsrs	r3, r1
 8000b0a:	431f      	orrs	r7, r3
 8000b0c:	40cc      	lsrs	r4, r1
 8000b0e:	e9c5 7400 	strd	r7, r4, [r5]
 8000b12:	2100      	movs	r1, #0
 8000b14:	e751      	b.n	80009ba <__udivmoddi4+0xa6>
 8000b16:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b1a:	f1c2 0320 	rsb	r3, r2, #32
 8000b1e:	40d9      	lsrs	r1, r3
 8000b20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b24:	fa20 f303 	lsr.w	r3, r0, r3
 8000b28:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b2c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000b30:	fb08 1110 	mls	r1, r8, r0, r1
 8000b34:	4094      	lsls	r4, r2
 8000b36:	431c      	orrs	r4, r3
 8000b38:	fa1f f78c 	uxth.w	r7, ip
 8000b3c:	0c23      	lsrs	r3, r4, #16
 8000b3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b42:	fb00 f107 	mul.w	r1, r0, r7
 8000b46:	4299      	cmp	r1, r3
 8000b48:	d908      	bls.n	8000b5c <__udivmoddi4+0x248>
 8000b4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b52:	d22c      	bcs.n	8000bae <__udivmoddi4+0x29a>
 8000b54:	4299      	cmp	r1, r3
 8000b56:	d92a      	bls.n	8000bae <__udivmoddi4+0x29a>
 8000b58:	3802      	subs	r0, #2
 8000b5a:	4463      	add	r3, ip
 8000b5c:	1a5b      	subs	r3, r3, r1
 8000b5e:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b62:	fb08 3311 	mls	r3, r8, r1, r3
 8000b66:	b2a4      	uxth	r4, r4
 8000b68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b6c:	fb01 f307 	mul.w	r3, r1, r7
 8000b70:	42a3      	cmp	r3, r4
 8000b72:	d908      	bls.n	8000b86 <__udivmoddi4+0x272>
 8000b74:	eb1c 0404 	adds.w	r4, ip, r4
 8000b78:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b7c:	d213      	bcs.n	8000ba6 <__udivmoddi4+0x292>
 8000b7e:	42a3      	cmp	r3, r4
 8000b80:	d911      	bls.n	8000ba6 <__udivmoddi4+0x292>
 8000b82:	3902      	subs	r1, #2
 8000b84:	4464      	add	r4, ip
 8000b86:	1ae4      	subs	r4, r4, r3
 8000b88:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b8c:	e73b      	b.n	8000a06 <__udivmoddi4+0xf2>
 8000b8e:	4604      	mov	r4, r0
 8000b90:	e6f2      	b.n	8000978 <__udivmoddi4+0x64>
 8000b92:	4608      	mov	r0, r1
 8000b94:	e708      	b.n	80009a8 <__udivmoddi4+0x94>
 8000b96:	45c2      	cmp	sl, r8
 8000b98:	d2af      	bcs.n	8000afa <__udivmoddi4+0x1e6>
 8000b9a:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b9e:	eb63 060c 	sbc.w	r6, r3, ip
 8000ba2:	3801      	subs	r0, #1
 8000ba4:	e7a9      	b.n	8000afa <__udivmoddi4+0x1e6>
 8000ba6:	4631      	mov	r1, r6
 8000ba8:	e7ed      	b.n	8000b86 <__udivmoddi4+0x272>
 8000baa:	4603      	mov	r3, r0
 8000bac:	e79a      	b.n	8000ae4 <__udivmoddi4+0x1d0>
 8000bae:	4630      	mov	r0, r6
 8000bb0:	e7d4      	b.n	8000b5c <__udivmoddi4+0x248>
 8000bb2:	46b0      	mov	r8, r6
 8000bb4:	e781      	b.n	8000aba <__udivmoddi4+0x1a6>
 8000bb6:	4463      	add	r3, ip
 8000bb8:	3802      	subs	r0, #2
 8000bba:	e74f      	b.n	8000a5c <__udivmoddi4+0x148>
 8000bbc:	4606      	mov	r6, r0
 8000bbe:	4623      	mov	r3, r4
 8000bc0:	4608      	mov	r0, r1
 8000bc2:	e711      	b.n	80009e8 <__udivmoddi4+0xd4>
 8000bc4:	3e02      	subs	r6, #2
 8000bc6:	4463      	add	r3, ip
 8000bc8:	e732      	b.n	8000a30 <__udivmoddi4+0x11c>
 8000bca:	bf00      	nop

08000bcc <__aeabi_idiv0>:
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <Delay_Init>:

#include "main.h"
#include "delay.h"

void Delay_Init(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk))
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c08 <Delay_Init+0x38>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d10e      	bne.n	8000bfe <Delay_Init+0x2e>
    {
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000be0:	4b09      	ldr	r3, [pc, #36]	@ (8000c08 <Delay_Init+0x38>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	4a08      	ldr	r2, [pc, #32]	@ (8000c08 <Delay_Init+0x38>)
 8000be6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000bea:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 8000bec:	4b07      	ldr	r3, [pc, #28]	@ (8000c0c <Delay_Init+0x3c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000bf2:	4b06      	ldr	r3, [pc, #24]	@ (8000c0c <Delay_Init+0x3c>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a05      	ldr	r2, [pc, #20]	@ (8000c0c <Delay_Init+0x3c>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	6013      	str	r3, [r2, #0]
    }
}
 8000bfe:	bf00      	nop
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bc80      	pop	{r7}
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	e000edf0 	.word	0xe000edf0
 8000c0c:	e0001000 	.word	0xe0001000

08000c10 <readIR>:
uint8_t complete = 0;

uint32_t usDelay = 100;

uint16_t readIR(IR ir)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	71fb      	strb	r3, [r7, #7]
	uint16_t readValue;

	switch(ir)
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	2b03      	cmp	r3, #3
 8000c1e:	d82b      	bhi.n	8000c78 <readIR+0x68>
 8000c20:	a201      	add	r2, pc, #4	@ (adr r2, 8000c28 <readIR+0x18>)
 8000c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c26:	bf00      	nop
 8000c28:	08000c39 	.word	0x08000c39
 8000c2c:	08000c49 	.word	0x08000c49
 8000c30:	08000c59 	.word	0x08000c59
 8000c34:	08000c69 	.word	0x08000c69
	    {
	        case IR_FORWARD_LEFT:
//	        	HAL_GPIO_WritePin(ForwardLeftEmitter_GPIO_Port, ForwardLeftEmitter_Pin, GPIO_PIN_SET);
//	        	delayMicroseconds(usDelay);
	        	readValue = analogRead(ir);
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 f822 	bl	8000c84 <analogRead>
 8000c40:	4603      	mov	r3, r0
 8000c42:	81fb      	strh	r3, [r7, #14]
//	        	HAL_GPIO_WritePin(ForwardLeftEmitter_GPIO_Port, ForwardLeftEmitter_Pin, GPIO_PIN_RESET);
	        	return readValue;
 8000c44:	89fb      	ldrh	r3, [r7, #14]
 8000c46:	e018      	b.n	8000c7a <readIR+0x6a>
	            break;
	        case IR_LEFT:
//	        	HAL_GPIO_WritePin(LeftEmitter_GPIO_Port, LeftEmitter_Pin, GPIO_PIN_SET);
//	        	delayMicroseconds(usDelay);
	        	readValue = analogRead(ir);
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f000 f81a 	bl	8000c84 <analogRead>
 8000c50:	4603      	mov	r3, r0
 8000c52:	81fb      	strh	r3, [r7, #14]
//	        	HAL_GPIO_WritePin(LeftEmitter_GPIO_Port, LeftEmitter_Pin, GPIO_PIN_RESET);
	        	return readValue;
 8000c54:	89fb      	ldrh	r3, [r7, #14]
 8000c56:	e010      	b.n	8000c7a <readIR+0x6a>
	            break;
	        case IR_RIGHT:
//	        	HAL_GPIO_WritePin(RightEmitter_GPIO_Port, RightEmitter_Pin, GPIO_PIN_SET);
//	        	delayMicroseconds(usDelay);
	        	readValue = analogRead(ir);
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f000 f812 	bl	8000c84 <analogRead>
 8000c60:	4603      	mov	r3, r0
 8000c62:	81fb      	strh	r3, [r7, #14]
//	        	HAL_GPIO_WritePin(RightEmitter_GPIO_Port, RightEmitter_Pin, GPIO_PIN_RESET);
	        	return readValue;
 8000c64:	89fb      	ldrh	r3, [r7, #14]
 8000c66:	e008      	b.n	8000c7a <readIR+0x6a>
	            break;
	        case IR_FORWARD_RIGHT:
//	        	HAL_GPIO_WritePin(ForwardRightEmitter_GPIO_Port, ForwardRightEmitter_Pin, GPIO_PIN_SET);
//	        	delayMicroseconds(usDelay);
	        	readValue = analogRead(ir);
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 f80a 	bl	8000c84 <analogRead>
 8000c70:	4603      	mov	r3, r0
 8000c72:	81fb      	strh	r3, [r7, #14]
//	        	HAL_GPIO_WritePin(ForwardRightEmitter_GPIO_Port, ForwardRightEmitter_Pin, GPIO_PIN_RESET);
	        	return readValue;
 8000c74:	89fb      	ldrh	r3, [r7, #14]
 8000c76:	e000      	b.n	8000c7a <readIR+0x6a>
	            break;
	        default:
	            return 0;
 8000c78:	2300      	movs	r3, #0
	    }
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop

08000c84 <analogRead>:
{
	return readIR(IR_FORWARD_RIGHT);
}

uint16_t analogRead(IR ir)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08a      	sub	sp, #40	@ 0x28
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71fb      	strb	r3, [r7, #7]
    ADC_ChannelConfTypeDef sConfig = {0}; //this initializes the IR ADC [Analog to Digital Converter]
 8000c8e:	f107 030c 	add.w	r3, r7, #12
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]
    ADC_HandleTypeDef *hadc1_ptr = Get_HADC1_Ptr(); //this is a pointer to your hal_adc
 8000c9c:	f000 fc02 	bl	80014a4 <Get_HADC1_Ptr>
 8000ca0:	61f8      	str	r0, [r7, #28]
    //this pointer will also be used to read the analog value, val = HAL_ADC_GetValue(hadc1_ptr);

    //this picks the IR direction to choose the right ADC.
    switch(ir)
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	2b03      	cmp	r3, #3
 8000ca6:	d817      	bhi.n	8000cd8 <analogRead+0x54>
 8000ca8:	a201      	add	r2, pc, #4	@ (adr r2, 8000cb0 <analogRead+0x2c>)
 8000caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cae:	bf00      	nop
 8000cb0:	08000cc1 	.word	0x08000cc1
 8000cb4:	08000cc7 	.word	0x08000cc7
 8000cb8:	08000ccd 	.word	0x08000ccd
 8000cbc:	08000cd3 	.word	0x08000cd3
    {
        case IR_FORWARD_LEFT:
            sConfig.Channel = ADC_CHANNEL_6;
 8000cc0:	2306      	movs	r3, #6
 8000cc2:	60fb      	str	r3, [r7, #12]
            break;
 8000cc4:	e00a      	b.n	8000cdc <analogRead+0x58>
        case IR_LEFT:
            sConfig.Channel = ADC_CHANNEL_5;
 8000cc6:	2305      	movs	r3, #5
 8000cc8:	60fb      	str	r3, [r7, #12]
            break;
 8000cca:	e007      	b.n	8000cdc <analogRead+0x58>
        case IR_RIGHT:
            sConfig.Channel = ADC_CHANNEL_11;
 8000ccc:	230b      	movs	r3, #11
 8000cce:	60fb      	str	r3, [r7, #12]
            break;
 8000cd0:	e004      	b.n	8000cdc <analogRead+0x58>
        case IR_FORWARD_RIGHT:
            sConfig.Channel = ADC_CHANNEL_10;
 8000cd2:	230a      	movs	r3, #10
 8000cd4:	60fb      	str	r3, [r7, #12]
            break;
 8000cd6:	e001      	b.n	8000cdc <analogRead+0x58>
        default:
            return 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	e032      	b.n	8000d42 <analogRead+0xbe>
    }

    sConfig.Rank = 1;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]

    // make sure everything was set up correctly
    if (HAL_ADC_ConfigChannel(hadc1_ptr, &sConfig) != HAL_OK)
 8000ce4:	f107 030c 	add.w	r3, r7, #12
 8000ce8:	4619      	mov	r1, r3
 8000cea:	69f8      	ldr	r0, [r7, #28]
 8000cec:	f001 f892 	bl	8001e14 <HAL_ADC_ConfigChannel>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <analogRead+0x76>
    {
        return 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e023      	b.n	8000d42 <analogRead+0xbe>
    }

    complete = 0;
 8000cfa:	4b14      	ldr	r3, [pc, #80]	@ (8000d4c <analogRead+0xc8>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	701a      	strb	r2, [r3, #0]

    // start filling up the ADC buffer
    HAL_ADC_Start_DMA(hadc1_ptr, (uint32_t*)adc_buf, NUM_SAMPLES);
 8000d00:	2280      	movs	r2, #128	@ 0x80
 8000d02:	4913      	ldr	r1, [pc, #76]	@ (8000d50 <analogRead+0xcc>)
 8000d04:	69f8      	ldr	r0, [r7, #28]
 8000d06:	f000 ff43 	bl	8001b90 <HAL_ADC_Start_DMA>

    // wait for the buffer to become full
    while (complete == 0)
 8000d0a:	e000      	b.n	8000d0e <analogRead+0x8a>
    {
        continue;
 8000d0c:	bf00      	nop
    while (complete == 0)
 8000d0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d4c <analogRead+0xc8>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d0fa      	beq.n	8000d0c <analogRead+0x88>
    }

    uint32_t sum = 0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	627b      	str	r3, [r7, #36]	@ 0x24
    // calculate the sum of the measurements in order to calculate the average
    uint16_t measurement = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	847b      	strh	r3, [r7, #34]	@ 0x22
    while(measurement < NUM_SAMPLES) //this takes multiple measurements
 8000d1e:	e00a      	b.n	8000d36 <analogRead+0xb2>
    {
        sum += adc_buf[measurement];
 8000d20:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000d22:	4a0b      	ldr	r2, [pc, #44]	@ (8000d50 <analogRead+0xcc>)
 8000d24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d28:	461a      	mov	r2, r3
 8000d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d2c:	4413      	add	r3, r2
 8000d2e:	627b      	str	r3, [r7, #36]	@ 0x24
        ++measurement;
 8000d30:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000d32:	3301      	adds	r3, #1
 8000d34:	847b      	strh	r3, [r7, #34]	@ 0x22
    while(measurement < NUM_SAMPLES) //this takes multiple measurements
 8000d36:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000d38:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d3a:	d9f1      	bls.n	8000d20 <analogRead+0x9c>
    }

    return sum/NUM_SAMPLES;
 8000d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d3e:	09db      	lsrs	r3, r3, #7
 8000d40:	b29b      	uxth	r3, r3
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3728      	adds	r7, #40	@ 0x28
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000128 	.word	0x20000128
 8000d50:	20000028 	.word	0x20000028

08000d54 <HAL_ADC_ConvCpltCallback>:

/*
 This function is called when the ADC buffer is filled
 It stops the ADC and changes our "complete" variable to be "true"
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
    // stop the ADC
    HAL_ADC_Stop_DMA(hadc);
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f000 fff5 	bl	8001d4c <HAL_ADC_Stop_DMA>
    complete = 1;
 8000d62:	4b03      	ldr	r3, [pc, #12]	@ (8000d70 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	701a      	strb	r2, [r3, #0]
}
 8000d68:	bf00      	nop
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20000128 	.word	0x20000128

08000d74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d78:	f000 fe58 	bl	8001a2c <HAL_Init>

  /* USER CODE BEGIN Init */
  Delay_Init();
 8000d7c:	f7ff ff28 	bl	8000bd0 <Delay_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d80:	f000 f8cc 	bl	8000f1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d84:	f000 facc 	bl	8001320 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d88:	f000 faaa 	bl	80012e0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000d8c:	f000 f902 	bl	8000f94 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000d90:	f000 f9fa 	bl	8001188 <MX_TIM3_Init>
  MX_TIM8_Init();
 8000d94:	f000 fa4c 	bl	8001230 <MX_TIM8_Init>
  MX_TIM1_Init();
 8000d98:	f000 f94e 	bl	8001038 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000d9c:	213c      	movs	r1, #60	@ 0x3c
 8000d9e:	484e      	ldr	r0, [pc, #312]	@ (8000ed8 <main+0x164>)
 8000da0:	f002 ff5c 	bl	8003c5c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8000da4:	213c      	movs	r1, #60	@ 0x3c
 8000da6:	484d      	ldr	r0, [pc, #308]	@ (8000edc <main+0x168>)
 8000da8:	f002 ff58 	bl	8003c5c <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000dac:	2100      	movs	r1, #0
 8000dae:	484c      	ldr	r0, [pc, #304]	@ (8000ee0 <main+0x16c>)
 8000db0:	f002 fde6 	bl	8003980 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000db4:	2104      	movs	r1, #4
 8000db6:	484a      	ldr	r0, [pc, #296]	@ (8000ee0 <main+0x16c>)
 8000db8:	f002 fde2 	bl	8003980 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000dbc:	2108      	movs	r1, #8
 8000dbe:	4848      	ldr	r0, [pc, #288]	@ (8000ee0 <main+0x16c>)
 8000dc0:	f002 fdde 	bl	8003980 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000dc4:	210c      	movs	r1, #12
 8000dc6:	4846      	ldr	r0, [pc, #280]	@ (8000ee0 <main+0x16c>)
 8000dc8:	f002 fdda 	bl	8003980 <HAL_TIM_PWM_Start>

  HAL_GPIO_WritePin(ForwardLeftEmitter_GPIO_Port, ForwardLeftEmitter_Pin, GPIO_PIN_SET);
 8000dcc:	2201      	movs	r2, #1
 8000dce:	2180      	movs	r1, #128	@ 0x80
 8000dd0:	4844      	ldr	r0, [pc, #272]	@ (8000ee4 <main+0x170>)
 8000dd2:	f002 f966 	bl	80030a2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LeftEmitter_GPIO_Port, LeftEmitter_Pin, GPIO_PIN_SET);
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	2110      	movs	r1, #16
 8000dda:	4842      	ldr	r0, [pc, #264]	@ (8000ee4 <main+0x170>)
 8000ddc:	f002 f961 	bl	80030a2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RightEmitter_GPIO_Port, RightEmitter_Pin, GPIO_PIN_SET);
 8000de0:	2201      	movs	r2, #1
 8000de2:	2104      	movs	r1, #4
 8000de4:	483f      	ldr	r0, [pc, #252]	@ (8000ee4 <main+0x170>)
 8000de6:	f002 f95c 	bl	80030a2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ForwardRightEmitter_GPIO_Port, ForwardRightEmitter_Pin, GPIO_PIN_SET);
 8000dea:	2201      	movs	r2, #1
 8000dec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000df0:	483d      	ldr	r0, [pc, #244]	@ (8000ee8 <main+0x174>)
 8000df2:	f002 f956 	bl	80030a2 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  S1 = HAL_GPIO_ReadPin(Button1_GPIO_Port, Switch1_Pin);
 8000df6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000dfa:	483b      	ldr	r0, [pc, #236]	@ (8000ee8 <main+0x174>)
 8000dfc:	f002 f93a 	bl	8003074 <HAL_GPIO_ReadPin>
 8000e00:	4603      	mov	r3, r0
 8000e02:	461a      	mov	r2, r3
 8000e04:	4b39      	ldr	r3, [pc, #228]	@ (8000eec <main+0x178>)
 8000e06:	701a      	strb	r2, [r3, #0]
	  S2 = HAL_GPIO_ReadPin(Switch2_GPIO_Port, Switch2_Pin);
 8000e08:	2104      	movs	r1, #4
 8000e0a:	4839      	ldr	r0, [pc, #228]	@ (8000ef0 <main+0x17c>)
 8000e0c:	f002 f932 	bl	8003074 <HAL_GPIO_ReadPin>
 8000e10:	4603      	mov	r3, r0
 8000e12:	461a      	mov	r2, r3
 8000e14:	4b37      	ldr	r3, [pc, #220]	@ (8000ef4 <main+0x180>)
 8000e16:	701a      	strb	r2, [r3, #0]
	  S3 = HAL_GPIO_ReadPin(Switch3_GPIO_Port, Switch3_Pin);
 8000e18:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e1c:	4831      	ldr	r0, [pc, #196]	@ (8000ee4 <main+0x170>)
 8000e1e:	f002 f929 	bl	8003074 <HAL_GPIO_ReadPin>
 8000e22:	4603      	mov	r3, r0
 8000e24:	461a      	mov	r2, r3
 8000e26:	4b34      	ldr	r3, [pc, #208]	@ (8000ef8 <main+0x184>)
 8000e28:	701a      	strb	r2, [r3, #0]
	  S4 = HAL_GPIO_ReadPin(Switch4_GPIO_Port, Switch4_Pin);
 8000e2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e2e:	482e      	ldr	r0, [pc, #184]	@ (8000ee8 <main+0x174>)
 8000e30:	f002 f920 	bl	8003074 <HAL_GPIO_ReadPin>
 8000e34:	4603      	mov	r3, r0
 8000e36:	461a      	mov	r2, r3
 8000e38:	4b30      	ldr	r3, [pc, #192]	@ (8000efc <main+0x188>)
 8000e3a:	701a      	strb	r2, [r3, #0]
	  B1 = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 8000e3c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e40:	4829      	ldr	r0, [pc, #164]	@ (8000ee8 <main+0x174>)
 8000e42:	f002 f917 	bl	8003074 <HAL_GPIO_ReadPin>
 8000e46:	4603      	mov	r3, r0
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4b2d      	ldr	r3, [pc, #180]	@ (8000f00 <main+0x18c>)
 8000e4c:	701a      	strb	r2, [r3, #0]
	  B2 = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 8000e4e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e52:	4825      	ldr	r0, [pc, #148]	@ (8000ee8 <main+0x174>)
 8000e54:	f002 f90e 	bl	8003074 <HAL_GPIO_ReadPin>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	4b29      	ldr	r3, [pc, #164]	@ (8000f04 <main+0x190>)
 8000e5e:	701a      	strb	r2, [r3, #0]
//
//	  HAL_GPIO_WritePin(R_LED_GPIO_Port, R_LED_Pin, GPIO_PIN_SET);
//	  HAL_GPIO_WritePin(Y_LED_GPIO_Port, Y_LED_Pin, GPIO_PIN_SET);
//	  HAL_GPIO_WritePin(G_LED_GPIO_Port, G_LED_Pin, GPIO_PIN_SET);

	  forwardLeftIRvalue = readIR(IR_FORWARD_LEFT);
 8000e60:	2000      	movs	r0, #0
 8000e62:	f7ff fed5 	bl	8000c10 <readIR>
 8000e66:	4603      	mov	r3, r0
 8000e68:	b21a      	sxth	r2, r3
 8000e6a:	4b27      	ldr	r3, [pc, #156]	@ (8000f08 <main+0x194>)
 8000e6c:	801a      	strh	r2, [r3, #0]
	  leftIRvalue = readIR(IR_LEFT);
 8000e6e:	2001      	movs	r0, #1
 8000e70:	f7ff fece 	bl	8000c10 <readIR>
 8000e74:	4603      	mov	r3, r0
 8000e76:	b21a      	sxth	r2, r3
 8000e78:	4b24      	ldr	r3, [pc, #144]	@ (8000f0c <main+0x198>)
 8000e7a:	801a      	strh	r2, [r3, #0]
	  rightIRvalue = readIR(IR_RIGHT);
 8000e7c:	2002      	movs	r0, #2
 8000e7e:	f7ff fec7 	bl	8000c10 <readIR>
 8000e82:	4603      	mov	r3, r0
 8000e84:	b21a      	sxth	r2, r3
 8000e86:	4b22      	ldr	r3, [pc, #136]	@ (8000f10 <main+0x19c>)
 8000e88:	801a      	strh	r2, [r3, #0]
	  forwardRightIRvalue = readIR(IR_FORWARD_RIGHT);
 8000e8a:	2003      	movs	r0, #3
 8000e8c:	f7ff fec0 	bl	8000c10 <readIR>
 8000e90:	4603      	mov	r3, r0
 8000e92:	b21a      	sxth	r2, r3
 8000e94:	4b1f      	ldr	r3, [pc, #124]	@ (8000f14 <main+0x1a0>)
 8000e96:	801a      	strh	r2, [r3, #0]

//
//	  left_counts = getLeftEncoderCounts();
//	  right_counts = getRightEncoderCounts();
//
	  if (B2 == GPIO_PIN_SET) {
 8000e98:	4b1a      	ldr	r3, [pc, #104]	@ (8000f04 <main+0x190>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d108      	bne.n	8000eb2 <main+0x13e>
		  setMotorLPWM(0.5);
 8000ea0:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 8000ea4:	f000 fb40 	bl	8001528 <setMotorLPWM>
		  setMotorRPWM(0.5);
 8000ea8:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 8000eac:	f000 fb78 	bl	80015a0 <setMotorRPWM>
 8000eb0:	e007      	b.n	8000ec2 <main+0x14e>
	  }
	  else {
		  setMotorLPWM(-0.5);
 8000eb2:	f04f 403f 	mov.w	r0, #3204448256	@ 0xbf000000
 8000eb6:	f000 fb37 	bl	8001528 <setMotorLPWM>
		  setMotorRPWM(-0.5);
 8000eba:	f04f 403f 	mov.w	r0, #3204448256	@ 0xbf000000
 8000ebe:	f000 fb6f 	bl	80015a0 <setMotorRPWM>
	  }

//	  delayMicroseconds(100);

	  left_counts++;
 8000ec2:	4b15      	ldr	r3, [pc, #84]	@ (8000f18 <main+0x1a4>)
 8000ec4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	3301      	adds	r3, #1
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	b21a      	sxth	r2, r3
 8000ed0:	4b11      	ldr	r3, [pc, #68]	@ (8000f18 <main+0x1a4>)
 8000ed2:	801a      	strh	r2, [r3, #0]
	  S1 = HAL_GPIO_ReadPin(Button1_GPIO_Port, Switch1_Pin);
 8000ed4:	e78f      	b.n	8000df6 <main+0x82>
 8000ed6:	bf00      	nop
 8000ed8:	2000021c 	.word	0x2000021c
 8000edc:	20000264 	.word	0x20000264
 8000ee0:	200001d4 	.word	0x200001d4
 8000ee4:	40020000 	.word	0x40020000
 8000ee8:	40020400 	.word	0x40020400
 8000eec:	200002ac 	.word	0x200002ac
 8000ef0:	40020c00 	.word	0x40020c00
 8000ef4:	200002ad 	.word	0x200002ad
 8000ef8:	200002ae 	.word	0x200002ae
 8000efc:	200002af 	.word	0x200002af
 8000f00:	200002b0 	.word	0x200002b0
 8000f04:	200002b1 	.word	0x200002b1
 8000f08:	200002b4 	.word	0x200002b4
 8000f0c:	200002b6 	.word	0x200002b6
 8000f10:	200002b8 	.word	0x200002b8
 8000f14:	200002ba 	.word	0x200002ba
 8000f18:	200002b2 	.word	0x200002b2

08000f1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b092      	sub	sp, #72	@ 0x48
 8000f20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f22:	f107 0318 	add.w	r3, r7, #24
 8000f26:	2230      	movs	r2, #48	@ 0x30
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f003 fc67 	bl	80047fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f30:	1d3b      	adds	r3, r7, #4
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
 8000f3c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f42:	2301      	movs	r3, #1
 8000f44:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f46:	2310      	movs	r3, #16
 8000f48:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f4e:	f107 0318 	add.w	r3, r7, #24
 8000f52:	4618      	mov	r0, r3
 8000f54:	f002 f8be 	bl	80030d4 <HAL_RCC_OscConfig>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000f5e:	f000 faab 	bl	80014b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f62:	230f      	movs	r3, #15
 8000f64:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f66:	2300      	movs	r3, #0
 8000f68:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f76:	1d3b      	adds	r3, r7, #4
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f002 fafe 	bl	800357c <HAL_RCC_ClockConfig>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000f86:	f000 fa97 	bl	80014b8 <Error_Handler>
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	3748      	adds	r7, #72	@ 0x48
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f9a:	463b      	mov	r3, r7
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fa6:	4b21      	ldr	r3, [pc, #132]	@ (800102c <MX_ADC1_Init+0x98>)
 8000fa8:	4a21      	ldr	r2, [pc, #132]	@ (8001030 <MX_ADC1_Init+0x9c>)
 8000faa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000fac:	4b1f      	ldr	r3, [pc, #124]	@ (800102c <MX_ADC1_Init+0x98>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fb2:	4b1e      	ldr	r3, [pc, #120]	@ (800102c <MX_ADC1_Init+0x98>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000fb8:	4b1c      	ldr	r3, [pc, #112]	@ (800102c <MX_ADC1_Init+0x98>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000fbe:	4b1b      	ldr	r3, [pc, #108]	@ (800102c <MX_ADC1_Init+0x98>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fc4:	4b19      	ldr	r3, [pc, #100]	@ (800102c <MX_ADC1_Init+0x98>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fcc:	4b17      	ldr	r3, [pc, #92]	@ (800102c <MX_ADC1_Init+0x98>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fd2:	4b16      	ldr	r3, [pc, #88]	@ (800102c <MX_ADC1_Init+0x98>)
 8000fd4:	4a17      	ldr	r2, [pc, #92]	@ (8001034 <MX_ADC1_Init+0xa0>)
 8000fd6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fd8:	4b14      	ldr	r3, [pc, #80]	@ (800102c <MX_ADC1_Init+0x98>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fde:	4b13      	ldr	r3, [pc, #76]	@ (800102c <MX_ADC1_Init+0x98>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fe4:	4b11      	ldr	r3, [pc, #68]	@ (800102c <MX_ADC1_Init+0x98>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fec:	4b0f      	ldr	r3, [pc, #60]	@ (800102c <MX_ADC1_Init+0x98>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ff2:	480e      	ldr	r0, [pc, #56]	@ (800102c <MX_ADC1_Init+0x98>)
 8000ff4:	f000 fd88 	bl	8001b08 <HAL_ADC_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000ffe:	f000 fa5b 	bl	80014b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001002:	2305      	movs	r3, #5
 8001004:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001006:	2301      	movs	r3, #1
 8001008:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800100a:	2300      	movs	r3, #0
 800100c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800100e:	463b      	mov	r3, r7
 8001010:	4619      	mov	r1, r3
 8001012:	4806      	ldr	r0, [pc, #24]	@ (800102c <MX_ADC1_Init+0x98>)
 8001014:	f000 fefe 	bl	8001e14 <HAL_ADC_ConfigChannel>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800101e:	f000 fa4b 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	2000012c 	.word	0x2000012c
 8001030:	40012000 	.word	0x40012000
 8001034:	0f000001 	.word	0x0f000001

08001038 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b092      	sub	sp, #72	@ 0x48
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800103e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001048:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
 8001058:	615a      	str	r2, [r3, #20]
 800105a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	2220      	movs	r2, #32
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f003 fbcb 	bl	80047fe <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001068:	4b45      	ldr	r3, [pc, #276]	@ (8001180 <MX_TIM1_Init+0x148>)
 800106a:	4a46      	ldr	r2, [pc, #280]	@ (8001184 <MX_TIM1_Init+0x14c>)
 800106c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800106e:	4b44      	ldr	r3, [pc, #272]	@ (8001180 <MX_TIM1_Init+0x148>)
 8001070:	2200      	movs	r2, #0
 8001072:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001074:	4b42      	ldr	r3, [pc, #264]	@ (8001180 <MX_TIM1_Init+0x148>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3199;
 800107a:	4b41      	ldr	r3, [pc, #260]	@ (8001180 <MX_TIM1_Init+0x148>)
 800107c:	f640 427f 	movw	r2, #3199	@ 0xc7f
 8001080:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001082:	4b3f      	ldr	r3, [pc, #252]	@ (8001180 <MX_TIM1_Init+0x148>)
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001088:	4b3d      	ldr	r3, [pc, #244]	@ (8001180 <MX_TIM1_Init+0x148>)
 800108a:	2200      	movs	r2, #0
 800108c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800108e:	4b3c      	ldr	r3, [pc, #240]	@ (8001180 <MX_TIM1_Init+0x148>)
 8001090:	2200      	movs	r2, #0
 8001092:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001094:	483a      	ldr	r0, [pc, #232]	@ (8001180 <MX_TIM1_Init+0x148>)
 8001096:	f002 fc23 	bl	80038e0 <HAL_TIM_PWM_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80010a0:	f000 fa0a 	bl	80014b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a4:	2300      	movs	r3, #0
 80010a6:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a8:	2300      	movs	r3, #0
 80010aa:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010ac:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80010b0:	4619      	mov	r1, r3
 80010b2:	4833      	ldr	r0, [pc, #204]	@ (8001180 <MX_TIM1_Init+0x148>)
 80010b4:	f003 fac6 	bl	8004644 <HAL_TIMEx_MasterConfigSynchronization>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80010be:	f000 f9fb 	bl	80014b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010c2:	2360      	movs	r3, #96	@ 0x60
 80010c4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ca:	2300      	movs	r3, #0
 80010cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010ce:	2300      	movs	r3, #0
 80010d0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010d2:	2300      	movs	r3, #0
 80010d4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010d6:	2300      	movs	r3, #0
 80010d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010da:	2300      	movs	r3, #0
 80010dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010e2:	2200      	movs	r2, #0
 80010e4:	4619      	mov	r1, r3
 80010e6:	4826      	ldr	r0, [pc, #152]	@ (8001180 <MX_TIM1_Init+0x148>)
 80010e8:	f002 ff4e 	bl	8003f88 <HAL_TIM_PWM_ConfigChannel>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80010f2:	f000 f9e1 	bl	80014b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010fa:	2204      	movs	r2, #4
 80010fc:	4619      	mov	r1, r3
 80010fe:	4820      	ldr	r0, [pc, #128]	@ (8001180 <MX_TIM1_Init+0x148>)
 8001100:	f002 ff42 	bl	8003f88 <HAL_TIM_PWM_ConfigChannel>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800110a:	f000 f9d5 	bl	80014b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800110e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001112:	2208      	movs	r2, #8
 8001114:	4619      	mov	r1, r3
 8001116:	481a      	ldr	r0, [pc, #104]	@ (8001180 <MX_TIM1_Init+0x148>)
 8001118:	f002 ff36 	bl	8003f88 <HAL_TIM_PWM_ConfigChannel>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8001122:	f000 f9c9 	bl	80014b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001126:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800112a:	220c      	movs	r2, #12
 800112c:	4619      	mov	r1, r3
 800112e:	4814      	ldr	r0, [pc, #80]	@ (8001180 <MX_TIM1_Init+0x148>)
 8001130:	f002 ff2a 	bl	8003f88 <HAL_TIM_PWM_ConfigChannel>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800113a:	f000 f9bd 	bl	80014b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001142:	2300      	movs	r3, #0
 8001144:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001152:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001156:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001158:	2300      	movs	r3, #0
 800115a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	4619      	mov	r1, r3
 8001160:	4807      	ldr	r0, [pc, #28]	@ (8001180 <MX_TIM1_Init+0x148>)
 8001162:	f003 fae9 	bl	8004738 <HAL_TIMEx_ConfigBreakDeadTime>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 800116c:	f000 f9a4 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001170:	4803      	ldr	r0, [pc, #12]	@ (8001180 <MX_TIM1_Init+0x148>)
 8001172:	f000 fbb1 	bl	80018d8 <HAL_TIM_MspPostInit>

}
 8001176:	bf00      	nop
 8001178:	3748      	adds	r7, #72	@ 0x48
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	200001d4 	.word	0x200001d4
 8001184:	40010000 	.word	0x40010000

08001188 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08c      	sub	sp, #48	@ 0x30
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800118e:	f107 030c 	add.w	r3, r7, #12
 8001192:	2224      	movs	r2, #36	@ 0x24
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f003 fb31 	bl	80047fe <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011a4:	4b20      	ldr	r3, [pc, #128]	@ (8001228 <MX_TIM3_Init+0xa0>)
 80011a6:	4a21      	ldr	r2, [pc, #132]	@ (800122c <MX_TIM3_Init+0xa4>)
 80011a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80011aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001228 <MX_TIM3_Init+0xa0>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001228 <MX_TIM3_Init+0xa0>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80011b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001228 <MX_TIM3_Init+0xa0>)
 80011b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011be:	4b1a      	ldr	r3, [pc, #104]	@ (8001228 <MX_TIM3_Init+0xa0>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c4:	4b18      	ldr	r3, [pc, #96]	@ (8001228 <MX_TIM3_Init+0xa0>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011ca:	2303      	movs	r3, #3
 80011cc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011ce:	2300      	movs	r3, #0
 80011d0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011d2:	2301      	movs	r3, #1
 80011d4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011de:	2300      	movs	r3, #0
 80011e0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011e2:	2301      	movs	r3, #1
 80011e4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011e6:	2300      	movs	r3, #0
 80011e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80011ee:	f107 030c 	add.w	r3, r7, #12
 80011f2:	4619      	mov	r1, r3
 80011f4:	480c      	ldr	r0, [pc, #48]	@ (8001228 <MX_TIM3_Init+0xa0>)
 80011f6:	f002 fc8b 	bl	8003b10 <HAL_TIM_Encoder_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001200:	f000 f95a 	bl	80014b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001204:	2300      	movs	r3, #0
 8001206:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001208:	2300      	movs	r3, #0
 800120a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	4619      	mov	r1, r3
 8001210:	4805      	ldr	r0, [pc, #20]	@ (8001228 <MX_TIM3_Init+0xa0>)
 8001212:	f003 fa17 	bl	8004644 <HAL_TIMEx_MasterConfigSynchronization>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800121c:	f000 f94c 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001220:	bf00      	nop
 8001222:	3730      	adds	r7, #48	@ 0x30
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	2000021c 	.word	0x2000021c
 800122c:	40000400 	.word	0x40000400

08001230 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08c      	sub	sp, #48	@ 0x30
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001236:	f107 030c 	add.w	r3, r7, #12
 800123a:	2224      	movs	r2, #36	@ 0x24
 800123c:	2100      	movs	r1, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f003 fadd 	bl	80047fe <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800124c:	4b22      	ldr	r3, [pc, #136]	@ (80012d8 <MX_TIM8_Init+0xa8>)
 800124e:	4a23      	ldr	r2, [pc, #140]	@ (80012dc <MX_TIM8_Init+0xac>)
 8001250:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001252:	4b21      	ldr	r3, [pc, #132]	@ (80012d8 <MX_TIM8_Init+0xa8>)
 8001254:	2200      	movs	r2, #0
 8001256:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001258:	4b1f      	ldr	r3, [pc, #124]	@ (80012d8 <MX_TIM8_Init+0xa8>)
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800125e:	4b1e      	ldr	r3, [pc, #120]	@ (80012d8 <MX_TIM8_Init+0xa8>)
 8001260:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001264:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001266:	4b1c      	ldr	r3, [pc, #112]	@ (80012d8 <MX_TIM8_Init+0xa8>)
 8001268:	2200      	movs	r2, #0
 800126a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800126c:	4b1a      	ldr	r3, [pc, #104]	@ (80012d8 <MX_TIM8_Init+0xa8>)
 800126e:	2200      	movs	r2, #0
 8001270:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001272:	4b19      	ldr	r3, [pc, #100]	@ (80012d8 <MX_TIM8_Init+0xa8>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001278:	2303      	movs	r3, #3
 800127a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800127c:	2300      	movs	r3, #0
 800127e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001280:	2301      	movs	r3, #1
 8001282:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001284:	2300      	movs	r3, #0
 8001286:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800128c:	2300      	movs	r3, #0
 800128e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001290:	2301      	movs	r3, #1
 8001292:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001294:	2300      	movs	r3, #0
 8001296:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800129c:	f107 030c 	add.w	r3, r7, #12
 80012a0:	4619      	mov	r1, r3
 80012a2:	480d      	ldr	r0, [pc, #52]	@ (80012d8 <MX_TIM8_Init+0xa8>)
 80012a4:	f002 fc34 	bl	8003b10 <HAL_TIM_Encoder_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80012ae:	f000 f903 	bl	80014b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b2:	2300      	movs	r3, #0
 80012b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	4619      	mov	r1, r3
 80012be:	4806      	ldr	r0, [pc, #24]	@ (80012d8 <MX_TIM8_Init+0xa8>)
 80012c0:	f003 f9c0 	bl	8004644 <HAL_TIMEx_MasterConfigSynchronization>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80012ca:	f000 f8f5 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80012ce:	bf00      	nop
 80012d0:	3730      	adds	r7, #48	@ 0x30
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000264 	.word	0x20000264
 80012dc:	40010400 	.word	0x40010400

080012e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	607b      	str	r3, [r7, #4]
 80012ea:	4b0c      	ldr	r3, [pc, #48]	@ (800131c <MX_DMA_Init+0x3c>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	4a0b      	ldr	r2, [pc, #44]	@ (800131c <MX_DMA_Init+0x3c>)
 80012f0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80012f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f6:	4b09      	ldr	r3, [pc, #36]	@ (800131c <MX_DMA_Init+0x3c>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012fe:	607b      	str	r3, [r7, #4]
 8001300:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	2100      	movs	r1, #0
 8001306:	2038      	movs	r0, #56	@ 0x38
 8001308:	f001 f903 	bl	8002512 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800130c:	2038      	movs	r0, #56	@ 0x38
 800130e:	f001 f91c 	bl	800254a <HAL_NVIC_EnableIRQ>

}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40023800 	.word	0x40023800

08001320 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	@ 0x28
 8001324:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001326:	f107 0314 	add.w	r3, r7, #20
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]
 8001334:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
 800133a:	4b55      	ldr	r3, [pc, #340]	@ (8001490 <MX_GPIO_Init+0x170>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133e:	4a54      	ldr	r2, [pc, #336]	@ (8001490 <MX_GPIO_Init+0x170>)
 8001340:	f043 0304 	orr.w	r3, r3, #4
 8001344:	6313      	str	r3, [r2, #48]	@ 0x30
 8001346:	4b52      	ldr	r3, [pc, #328]	@ (8001490 <MX_GPIO_Init+0x170>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134a:	f003 0304 	and.w	r3, r3, #4
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	4b4e      	ldr	r3, [pc, #312]	@ (8001490 <MX_GPIO_Init+0x170>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135a:	4a4d      	ldr	r2, [pc, #308]	@ (8001490 <MX_GPIO_Init+0x170>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	6313      	str	r3, [r2, #48]	@ 0x30
 8001362:	4b4b      	ldr	r3, [pc, #300]	@ (8001490 <MX_GPIO_Init+0x170>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	60bb      	str	r3, [r7, #8]
 8001372:	4b47      	ldr	r3, [pc, #284]	@ (8001490 <MX_GPIO_Init+0x170>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	4a46      	ldr	r2, [pc, #280]	@ (8001490 <MX_GPIO_Init+0x170>)
 8001378:	f043 0302 	orr.w	r3, r3, #2
 800137c:	6313      	str	r3, [r2, #48]	@ 0x30
 800137e:	4b44      	ldr	r3, [pc, #272]	@ (8001490 <MX_GPIO_Init+0x170>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	607b      	str	r3, [r7, #4]
 800138e:	4b40      	ldr	r3, [pc, #256]	@ (8001490 <MX_GPIO_Init+0x170>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	4a3f      	ldr	r2, [pc, #252]	@ (8001490 <MX_GPIO_Init+0x170>)
 8001394:	f043 0308 	orr.w	r3, r3, #8
 8001398:	6313      	str	r3, [r2, #48]	@ 0x30
 800139a:	4b3d      	ldr	r3, [pc, #244]	@ (8001490 <MX_GPIO_Init+0x170>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139e:	f003 0308 	and.w	r3, r3, #8
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, G_LED_Pin|Y_LED_Pin|R_LED_Pin, GPIO_PIN_RESET);
 80013a6:	2200      	movs	r2, #0
 80013a8:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 80013ac:	4839      	ldr	r0, [pc, #228]	@ (8001494 <MX_GPIO_Init+0x174>)
 80013ae:	f001 fe78 	bl	80030a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RightEmitter_Pin|LeftEmitter_Pin|ForwardLeftEmitter_Pin, GPIO_PIN_RESET);
 80013b2:	2200      	movs	r2, #0
 80013b4:	2194      	movs	r1, #148	@ 0x94
 80013b6:	4838      	ldr	r0, [pc, #224]	@ (8001498 <MX_GPIO_Init+0x178>)
 80013b8:	f001 fe73 	bl	80030a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ForwardRightEmitter_GPIO_Port, ForwardRightEmitter_Pin, GPIO_PIN_RESET);
 80013bc:	2200      	movs	r2, #0
 80013be:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013c2:	4836      	ldr	r0, [pc, #216]	@ (800149c <MX_GPIO_Init+0x17c>)
 80013c4:	f001 fe6d 	bl	80030a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : G_LED_Pin Y_LED_Pin R_LED_Pin */
  GPIO_InitStruct.Pin = G_LED_Pin|Y_LED_Pin|R_LED_Pin;
 80013c8:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80013cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ce:	2301      	movs	r3, #1
 80013d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d6:	2300      	movs	r3, #0
 80013d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013da:	f107 0314 	add.w	r3, r7, #20
 80013de:	4619      	mov	r1, r3
 80013e0:	482c      	ldr	r0, [pc, #176]	@ (8001494 <MX_GPIO_Init+0x174>)
 80013e2:	f001 fca9 	bl	8002d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : RightEmitter_Pin LeftEmitter_Pin ForwardLeftEmitter_Pin */
  GPIO_InitStruct.Pin = RightEmitter_Pin|LeftEmitter_Pin|ForwardLeftEmitter_Pin;
 80013e6:	2394      	movs	r3, #148	@ 0x94
 80013e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ea:	2301      	movs	r3, #1
 80013ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	2300      	movs	r3, #0
 80013f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f6:	f107 0314 	add.w	r3, r7, #20
 80013fa:	4619      	mov	r1, r3
 80013fc:	4826      	ldr	r0, [pc, #152]	@ (8001498 <MX_GPIO_Init+0x178>)
 80013fe:	f001 fc9b 	bl	8002d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button2_Pin Button1_Pin Switch4_Pin */
  GPIO_InitStruct.Pin = Button2_Pin|Button1_Pin|Switch4_Pin;
 8001402:	f44f 4341 	mov.w	r3, #49408	@ 0xc100
 8001406:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001408:	2300      	movs	r3, #0
 800140a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	4619      	mov	r1, r3
 8001416:	4821      	ldr	r0, [pc, #132]	@ (800149c <MX_GPIO_Init+0x17c>)
 8001418:	f001 fc8e 	bl	8002d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : Switch3_Pin */
  GPIO_InitStruct.Pin = Switch3_Pin;
 800141c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001420:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001422:	2300      	movs	r3, #0
 8001424:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Switch3_GPIO_Port, &GPIO_InitStruct);
 800142a:	f107 0314 	add.w	r3, r7, #20
 800142e:	4619      	mov	r1, r3
 8001430:	4819      	ldr	r0, [pc, #100]	@ (8001498 <MX_GPIO_Init+0x178>)
 8001432:	f001 fc81 	bl	8002d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : Switch1_Pin */
  GPIO_InitStruct.Pin = Switch1_Pin;
 8001436:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800143a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800143c:	2300      	movs	r3, #0
 800143e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Switch1_GPIO_Port, &GPIO_InitStruct);
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	4619      	mov	r1, r3
 800144a:	4812      	ldr	r0, [pc, #72]	@ (8001494 <MX_GPIO_Init+0x174>)
 800144c:	f001 fc74 	bl	8002d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : Switch2_Pin */
  GPIO_InitStruct.Pin = Switch2_Pin;
 8001450:	2304      	movs	r3, #4
 8001452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001454:	2300      	movs	r3, #0
 8001456:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Switch2_GPIO_Port, &GPIO_InitStruct);
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	4619      	mov	r1, r3
 8001462:	480f      	ldr	r0, [pc, #60]	@ (80014a0 <MX_GPIO_Init+0x180>)
 8001464:	f001 fc68 	bl	8002d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : ForwardRightEmitter_Pin */
  GPIO_InitStruct.Pin = ForwardRightEmitter_Pin;
 8001468:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800146c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146e:	2301      	movs	r3, #1
 8001470:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001476:	2300      	movs	r3, #0
 8001478:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ForwardRightEmitter_GPIO_Port, &GPIO_InitStruct);
 800147a:	f107 0314 	add.w	r3, r7, #20
 800147e:	4619      	mov	r1, r3
 8001480:	4806      	ldr	r0, [pc, #24]	@ (800149c <MX_GPIO_Init+0x17c>)
 8001482:	f001 fc59 	bl	8002d38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001486:	bf00      	nop
 8001488:	3728      	adds	r7, #40	@ 0x28
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40023800 	.word	0x40023800
 8001494:	40020800 	.word	0x40020800
 8001498:	40020000 	.word	0x40020000
 800149c:	40020400 	.word	0x40020400
 80014a0:	40020c00 	.word	0x40020c00

080014a4 <Get_HADC1_Ptr>:

/* USER CODE BEGIN 4 */
ADC_HandleTypeDef* Get_HADC1_Ptr(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
	return &hadc1;
 80014a8:	4b02      	ldr	r3, [pc, #8]	@ (80014b4 <Get_HADC1_Ptr+0x10>)
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bc80      	pop	{r7}
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	2000012c 	.word	0x2000012c

080014b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014bc:	b672      	cpsid	i
}
 80014be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014c0:	bf00      	nop
 80014c2:	e7fd      	b.n	80014c0 <Error_Handler+0x8>
 80014c4:	0000      	movs	r0, r0
	...

080014c8 <limitPWM>:
//#include "pid.h"
//
//extern float velocity_left;
//extern float velocity_right;

float limitPWM(float pwm) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
	if (pwm > PWM_MAX)
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f7ff f891 	bl	80005f8 <__aeabi_f2d>
 80014d6:	a30e      	add	r3, pc, #56	@ (adr r3, 8001510 <limitPWM+0x48>)
 80014d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014dc:	f7ff f962 	bl	80007a4 <__aeabi_dcmpgt>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <limitPWM+0x22>
		return PWM_MAX;
 80014e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001520 <limitPWM+0x58>)
 80014e8:	e00d      	b.n	8001506 <limitPWM+0x3e>
	else if (pwm < -PWM_MAX)
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff f884 	bl	80005f8 <__aeabi_f2d>
 80014f0:	a309      	add	r3, pc, #36	@ (adr r3, 8001518 <limitPWM+0x50>)
 80014f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f6:	f7ff f937 	bl	8000768 <__aeabi_dcmplt>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <limitPWM+0x3c>
		return -PWM_MAX;
 8001500:	4b08      	ldr	r3, [pc, #32]	@ (8001524 <limitPWM+0x5c>)
 8001502:	e000      	b.n	8001506 <limitPWM+0x3e>
	else
		return pwm;
 8001504:	687b      	ldr	r3, [r7, #4]
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	66666666 	.word	0x66666666
 8001514:	3fee6666 	.word	0x3fee6666
 8001518:	66666666 	.word	0x66666666
 800151c:	bfee6666 	.word	0xbfee6666
 8001520:	3f733333 	.word	0x3f733333
 8001524:	bf733333 	.word	0xbf733333

08001528 <setMotorLPWM>:

void setMotorLPWM(float pwm) {
 8001528:	b590      	push	{r4, r7, lr}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
	if (pwm >= 0)
 8001530:	f04f 0100 	mov.w	r1, #0
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff f9a1 	bl	800087c <__aeabi_fcmpge>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d012      	beq.n	8001566 <setMotorLPWM+0x3e>
	{
		TIM1->CCR1 = 0;
 8001540:	4b15      	ldr	r3, [pc, #84]	@ (8001598 <setMotorLPWM+0x70>)
 8001542:	2200      	movs	r2, #0
 8001544:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM1->CCR2 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f7ff ffbe 	bl	80014c8 <limitPWM>
 800154c:	4603      	mov	r3, r0
 800154e:	4913      	ldr	r1, [pc, #76]	@ (800159c <setMotorLPWM+0x74>)
 8001550:	4618      	mov	r0, r3
 8001552:	f7fe fe39 	bl	80001c8 <__aeabi_fmul>
 8001556:	4603      	mov	r3, r0
 8001558:	4c0f      	ldr	r4, [pc, #60]	@ (8001598 <setMotorLPWM+0x70>)
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff f9a2 	bl	80008a4 <__aeabi_f2uiz>
 8001560:	4603      	mov	r3, r0
 8001562:	63a3      	str	r3, [r4, #56]	@ 0x38
	{
		TIM1->CCR2 = 0;
		TIM1->CCR1 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
	}

}
 8001564:	e013      	b.n	800158e <setMotorLPWM+0x66>
		TIM1->CCR2 = 0;
 8001566:	4b0c      	ldr	r3, [pc, #48]	@ (8001598 <setMotorLPWM+0x70>)
 8001568:	2200      	movs	r2, #0
 800156a:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM1->CCR1 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff ffab 	bl	80014c8 <limitPWM>
 8001572:	4603      	mov	r3, r0
 8001574:	4909      	ldr	r1, [pc, #36]	@ (800159c <setMotorLPWM+0x74>)
 8001576:	4618      	mov	r0, r3
 8001578:	f7fe fe26 	bl	80001c8 <__aeabi_fmul>
 800157c:	4603      	mov	r3, r0
 800157e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001582:	4c05      	ldr	r4, [pc, #20]	@ (8001598 <setMotorLPWM+0x70>)
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff f98d 	bl	80008a4 <__aeabi_f2uiz>
 800158a:	4603      	mov	r3, r0
 800158c:	6363      	str	r3, [r4, #52]	@ 0x34
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	bd90      	pop	{r4, r7, pc}
 8001596:	bf00      	nop
 8001598:	40010000 	.word	0x40010000
 800159c:	4547f000 	.word	0x4547f000

080015a0 <setMotorRPWM>:

void setMotorRPWM(float pwm) {
 80015a0:	b590      	push	{r4, r7, lr}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
	if (pwm >= 0)
 80015a8:	f04f 0100 	mov.w	r1, #0
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff f965 	bl	800087c <__aeabi_fcmpge>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d012      	beq.n	80015de <setMotorRPWM+0x3e>
	{
		TIM1->CCR4 = 0;
 80015b8:	4b15      	ldr	r3, [pc, #84]	@ (8001610 <setMotorRPWM+0x70>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	641a      	str	r2, [r3, #64]	@ 0x40
		TIM1->CCR3 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff ff82 	bl	80014c8 <limitPWM>
 80015c4:	4603      	mov	r3, r0
 80015c6:	4913      	ldr	r1, [pc, #76]	@ (8001614 <setMotorRPWM+0x74>)
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7fe fdfd 	bl	80001c8 <__aeabi_fmul>
 80015ce:	4603      	mov	r3, r0
 80015d0:	4c0f      	ldr	r4, [pc, #60]	@ (8001610 <setMotorRPWM+0x70>)
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff f966 	bl	80008a4 <__aeabi_f2uiz>
 80015d8:	4603      	mov	r3, r0
 80015da:	63e3      	str	r3, [r4, #60]	@ 0x3c
	else
	{
		TIM1->CCR3 = 0;
		TIM1->CCR4 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
	}
}
 80015dc:	e013      	b.n	8001606 <setMotorRPWM+0x66>
		TIM1->CCR3 = 0;
 80015de:	4b0c      	ldr	r3, [pc, #48]	@ (8001610 <setMotorRPWM+0x70>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM1->CCR4 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7ff ff6f 	bl	80014c8 <limitPWM>
 80015ea:	4603      	mov	r3, r0
 80015ec:	4909      	ldr	r1, [pc, #36]	@ (8001614 <setMotorRPWM+0x74>)
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7fe fdea 	bl	80001c8 <__aeabi_fmul>
 80015f4:	4603      	mov	r3, r0
 80015f6:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80015fa:	4c05      	ldr	r4, [pc, #20]	@ (8001610 <setMotorRPWM+0x70>)
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff f951 	bl	80008a4 <__aeabi_f2uiz>
 8001602:	4603      	mov	r3, r0
 8001604:	6423      	str	r3, [r4, #64]	@ 0x40
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	bd90      	pop	{r4, r7, pc}
 800160e:	bf00      	nop
 8001610:	40010000 	.word	0x40010000
 8001614:	4547f000 	.word	0x4547f000

08001618 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	607b      	str	r3, [r7, #4]
 8001622:	4b0f      	ldr	r3, [pc, #60]	@ (8001660 <HAL_MspInit+0x48>)
 8001624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001626:	4a0e      	ldr	r2, [pc, #56]	@ (8001660 <HAL_MspInit+0x48>)
 8001628:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800162c:	6453      	str	r3, [r2, #68]	@ 0x44
 800162e:	4b0c      	ldr	r3, [pc, #48]	@ (8001660 <HAL_MspInit+0x48>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001632:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001636:	607b      	str	r3, [r7, #4]
 8001638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	603b      	str	r3, [r7, #0]
 800163e:	4b08      	ldr	r3, [pc, #32]	@ (8001660 <HAL_MspInit+0x48>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001642:	4a07      	ldr	r2, [pc, #28]	@ (8001660 <HAL_MspInit+0x48>)
 8001644:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001648:	6413      	str	r3, [r2, #64]	@ 0x40
 800164a:	4b05      	ldr	r3, [pc, #20]	@ (8001660 <HAL_MspInit+0x48>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001652:	603b      	str	r3, [r7, #0]
 8001654:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr
 8001660:	40023800 	.word	0x40023800

08001664 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08a      	sub	sp, #40	@ 0x28
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a3c      	ldr	r2, [pc, #240]	@ (8001774 <HAL_ADC_MspInit+0x110>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d171      	bne.n	800176a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	613b      	str	r3, [r7, #16]
 800168a:	4b3b      	ldr	r3, [pc, #236]	@ (8001778 <HAL_ADC_MspInit+0x114>)
 800168c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800168e:	4a3a      	ldr	r2, [pc, #232]	@ (8001778 <HAL_ADC_MspInit+0x114>)
 8001690:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001694:	6453      	str	r3, [r2, #68]	@ 0x44
 8001696:	4b38      	ldr	r3, [pc, #224]	@ (8001778 <HAL_ADC_MspInit+0x114>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800169a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	4b34      	ldr	r3, [pc, #208]	@ (8001778 <HAL_ADC_MspInit+0x114>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016aa:	4a33      	ldr	r2, [pc, #204]	@ (8001778 <HAL_ADC_MspInit+0x114>)
 80016ac:	f043 0304 	orr.w	r3, r3, #4
 80016b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b2:	4b31      	ldr	r3, [pc, #196]	@ (8001778 <HAL_ADC_MspInit+0x114>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	f003 0304 	and.w	r3, r3, #4
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	60bb      	str	r3, [r7, #8]
 80016c2:	4b2d      	ldr	r3, [pc, #180]	@ (8001778 <HAL_ADC_MspInit+0x114>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c6:	4a2c      	ldr	r2, [pc, #176]	@ (8001778 <HAL_ADC_MspInit+0x114>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001778 <HAL_ADC_MspInit+0x114>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	60bb      	str	r3, [r7, #8]
 80016d8:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ForwardRightReceiver_Pin|RightReceiver_Pin;
 80016da:	2303      	movs	r3, #3
 80016dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016de:	2303      	movs	r3, #3
 80016e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016e6:	f107 0314 	add.w	r3, r7, #20
 80016ea:	4619      	mov	r1, r3
 80016ec:	4823      	ldr	r0, [pc, #140]	@ (800177c <HAL_ADC_MspInit+0x118>)
 80016ee:	f001 fb23 	bl	8002d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LeftReceiver_Pin|ForwardLeftReceiver_Pin;
 80016f2:	2360      	movs	r3, #96	@ 0x60
 80016f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016f6:	2303      	movs	r3, #3
 80016f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fe:	f107 0314 	add.w	r3, r7, #20
 8001702:	4619      	mov	r1, r3
 8001704:	481e      	ldr	r0, [pc, #120]	@ (8001780 <HAL_ADC_MspInit+0x11c>)
 8001706:	f001 fb17 	bl	8002d38 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800170a:	4b1e      	ldr	r3, [pc, #120]	@ (8001784 <HAL_ADC_MspInit+0x120>)
 800170c:	4a1e      	ldr	r2, [pc, #120]	@ (8001788 <HAL_ADC_MspInit+0x124>)
 800170e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001710:	4b1c      	ldr	r3, [pc, #112]	@ (8001784 <HAL_ADC_MspInit+0x120>)
 8001712:	2200      	movs	r2, #0
 8001714:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001716:	4b1b      	ldr	r3, [pc, #108]	@ (8001784 <HAL_ADC_MspInit+0x120>)
 8001718:	2200      	movs	r2, #0
 800171a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800171c:	4b19      	ldr	r3, [pc, #100]	@ (8001784 <HAL_ADC_MspInit+0x120>)
 800171e:	2200      	movs	r2, #0
 8001720:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001722:	4b18      	ldr	r3, [pc, #96]	@ (8001784 <HAL_ADC_MspInit+0x120>)
 8001724:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001728:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800172a:	4b16      	ldr	r3, [pc, #88]	@ (8001784 <HAL_ADC_MspInit+0x120>)
 800172c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001730:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001732:	4b14      	ldr	r3, [pc, #80]	@ (8001784 <HAL_ADC_MspInit+0x120>)
 8001734:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001738:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800173a:	4b12      	ldr	r3, [pc, #72]	@ (8001784 <HAL_ADC_MspInit+0x120>)
 800173c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001740:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001742:	4b10      	ldr	r3, [pc, #64]	@ (8001784 <HAL_ADC_MspInit+0x120>)
 8001744:	2200      	movs	r2, #0
 8001746:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001748:	4b0e      	ldr	r3, [pc, #56]	@ (8001784 <HAL_ADC_MspInit+0x120>)
 800174a:	2200      	movs	r2, #0
 800174c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800174e:	480d      	ldr	r0, [pc, #52]	@ (8001784 <HAL_ADC_MspInit+0x120>)
 8001750:	f000 ff16 	bl	8002580 <HAL_DMA_Init>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800175a:	f7ff fead 	bl	80014b8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a08      	ldr	r2, [pc, #32]	@ (8001784 <HAL_ADC_MspInit+0x120>)
 8001762:	639a      	str	r2, [r3, #56]	@ 0x38
 8001764:	4a07      	ldr	r2, [pc, #28]	@ (8001784 <HAL_ADC_MspInit+0x120>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800176a:	bf00      	nop
 800176c:	3728      	adds	r7, #40	@ 0x28
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40012000 	.word	0x40012000
 8001778:	40023800 	.word	0x40023800
 800177c:	40020800 	.word	0x40020800
 8001780:	40020000 	.word	0x40020000
 8001784:	20000174 	.word	0x20000174
 8001788:	40026410 	.word	0x40026410

0800178c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a0e      	ldr	r2, [pc, #56]	@ (80017d4 <HAL_TIM_PWM_MspInit+0x48>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d115      	bne.n	80017ca <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	4b0d      	ldr	r3, [pc, #52]	@ (80017d8 <HAL_TIM_PWM_MspInit+0x4c>)
 80017a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017a6:	4a0c      	ldr	r2, [pc, #48]	@ (80017d8 <HAL_TIM_PWM_MspInit+0x4c>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80017ae:	4b0a      	ldr	r3, [pc, #40]	@ (80017d8 <HAL_TIM_PWM_MspInit+0x4c>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80017ba:	2200      	movs	r2, #0
 80017bc:	2100      	movs	r1, #0
 80017be:	2019      	movs	r0, #25
 80017c0:	f000 fea7 	bl	8002512 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80017c4:	2019      	movs	r0, #25
 80017c6:	f000 fec0 	bl	800254a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80017ca:	bf00      	nop
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40010000 	.word	0x40010000
 80017d8:	40023800 	.word	0x40023800

080017dc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08c      	sub	sp, #48	@ 0x30
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e4:	f107 031c 	add.w	r3, r7, #28
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a32      	ldr	r2, [pc, #200]	@ (80018c4 <HAL_TIM_Encoder_MspInit+0xe8>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d12c      	bne.n	8001858 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	61bb      	str	r3, [r7, #24]
 8001802:	4b31      	ldr	r3, [pc, #196]	@ (80018c8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001806:	4a30      	ldr	r2, [pc, #192]	@ (80018c8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001808:	f043 0302 	orr.w	r3, r3, #2
 800180c:	6413      	str	r3, [r2, #64]	@ 0x40
 800180e:	4b2e      	ldr	r3, [pc, #184]	@ (80018c8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	61bb      	str	r3, [r7, #24]
 8001818:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	617b      	str	r3, [r7, #20]
 800181e:	4b2a      	ldr	r3, [pc, #168]	@ (80018c8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001822:	4a29      	ldr	r2, [pc, #164]	@ (80018c8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001824:	f043 0302 	orr.w	r3, r3, #2
 8001828:	6313      	str	r3, [r2, #48]	@ 0x30
 800182a:	4b27      	ldr	r3, [pc, #156]	@ (80018c8 <HAL_TIM_Encoder_MspInit+0xec>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	617b      	str	r3, [r7, #20]
 8001834:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = RightEncoderCh1_Pin|RightEncoderCh2_Pin;
 8001836:	2330      	movs	r3, #48	@ 0x30
 8001838:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183a:	2302      	movs	r3, #2
 800183c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001842:	2300      	movs	r3, #0
 8001844:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001846:	2302      	movs	r3, #2
 8001848:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184a:	f107 031c 	add.w	r3, r7, #28
 800184e:	4619      	mov	r1, r3
 8001850:	481e      	ldr	r0, [pc, #120]	@ (80018cc <HAL_TIM_Encoder_MspInit+0xf0>)
 8001852:	f001 fa71 	bl	8002d38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001856:	e030      	b.n	80018ba <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a1c      	ldr	r2, [pc, #112]	@ (80018d0 <HAL_TIM_Encoder_MspInit+0xf4>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d12b      	bne.n	80018ba <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]
 8001866:	4b18      	ldr	r3, [pc, #96]	@ (80018c8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800186a:	4a17      	ldr	r2, [pc, #92]	@ (80018c8 <HAL_TIM_Encoder_MspInit+0xec>)
 800186c:	f043 0302 	orr.w	r3, r3, #2
 8001870:	6453      	str	r3, [r2, #68]	@ 0x44
 8001872:	4b15      	ldr	r3, [pc, #84]	@ (80018c8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	4b11      	ldr	r3, [pc, #68]	@ (80018c8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001886:	4a10      	ldr	r2, [pc, #64]	@ (80018c8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001888:	f043 0304 	orr.w	r3, r3, #4
 800188c:	6313      	str	r3, [r2, #48]	@ 0x30
 800188e:	4b0e      	ldr	r3, [pc, #56]	@ (80018c8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001892:	f003 0304 	and.w	r3, r3, #4
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LeftEncoderCh1_Pin|LeftEncoderCh2_Pin;
 800189a:	23c0      	movs	r3, #192	@ 0xc0
 800189c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189e:	2302      	movs	r3, #2
 80018a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a6:	2300      	movs	r3, #0
 80018a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80018aa:	2303      	movs	r3, #3
 80018ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ae:	f107 031c 	add.w	r3, r7, #28
 80018b2:	4619      	mov	r1, r3
 80018b4:	4807      	ldr	r0, [pc, #28]	@ (80018d4 <HAL_TIM_Encoder_MspInit+0xf8>)
 80018b6:	f001 fa3f 	bl	8002d38 <HAL_GPIO_Init>
}
 80018ba:	bf00      	nop
 80018bc:	3730      	adds	r7, #48	@ 0x30
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40000400 	.word	0x40000400
 80018c8:	40023800 	.word	0x40023800
 80018cc:	40020400 	.word	0x40020400
 80018d0:	40010400 	.word	0x40010400
 80018d4:	40020800 	.word	0x40020800

080018d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b088      	sub	sp, #32
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e0:	f107 030c 	add.w	r3, r7, #12
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a12      	ldr	r2, [pc, #72]	@ (8001940 <HAL_TIM_MspPostInit+0x68>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d11e      	bne.n	8001938 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	60bb      	str	r3, [r7, #8]
 80018fe:	4b11      	ldr	r3, [pc, #68]	@ (8001944 <HAL_TIM_MspPostInit+0x6c>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001902:	4a10      	ldr	r2, [pc, #64]	@ (8001944 <HAL_TIM_MspPostInit+0x6c>)
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	6313      	str	r3, [r2, #48]	@ 0x30
 800190a:	4b0e      	ldr	r3, [pc, #56]	@ (8001944 <HAL_TIM_MspPostInit+0x6c>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	60bb      	str	r3, [r7, #8]
 8001914:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LeftMotorCh1_Pin|LeftMotorCh2_Pin|RightMotorCh1_Pin|RightMotorCh2_Pin;
 8001916:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800191a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191c:	2302      	movs	r3, #2
 800191e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001924:	2300      	movs	r3, #0
 8001926:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001928:	2301      	movs	r3, #1
 800192a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192c:	f107 030c 	add.w	r3, r7, #12
 8001930:	4619      	mov	r1, r3
 8001932:	4805      	ldr	r0, [pc, #20]	@ (8001948 <HAL_TIM_MspPostInit+0x70>)
 8001934:	f001 fa00 	bl	8002d38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001938:	bf00      	nop
 800193a:	3720      	adds	r7, #32
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40010000 	.word	0x40010000
 8001944:	40023800 	.word	0x40023800
 8001948:	40020000 	.word	0x40020000

0800194c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001950:	bf00      	nop
 8001952:	e7fd      	b.n	8001950 <NMI_Handler+0x4>

08001954 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001958:	bf00      	nop
 800195a:	e7fd      	b.n	8001958 <HardFault_Handler+0x4>

0800195c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001960:	bf00      	nop
 8001962:	e7fd      	b.n	8001960 <MemManage_Handler+0x4>

08001964 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001968:	bf00      	nop
 800196a:	e7fd      	b.n	8001968 <BusFault_Handler+0x4>

0800196c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001970:	bf00      	nop
 8001972:	e7fd      	b.n	8001970 <UsageFault_Handler+0x4>

08001974 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr

08001980 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr

0800198c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr

08001998 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800199c:	f000 f898 	bl	8001ad0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019a0:	bf00      	nop
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019a8:	4802      	ldr	r0, [pc, #8]	@ (80019b4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80019aa:	f002 f9e5 	bl	8003d78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	200001d4 	.word	0x200001d4

080019b8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80019bc:	4802      	ldr	r0, [pc, #8]	@ (80019c8 <DMA2_Stream0_IRQHandler+0x10>)
 80019be:	f000 ff55 	bl	800286c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000174 	.word	0x20000174

080019cc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr

080019d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80019d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a10 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 80019dc:	f7ff fff6 	bl	80019cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019e0:	480c      	ldr	r0, [pc, #48]	@ (8001a14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019e2:	490d      	ldr	r1, [pc, #52]	@ (8001a18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019e4:	4a0d      	ldr	r2, [pc, #52]	@ (8001a1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019e8:	e002      	b.n	80019f0 <LoopCopyDataInit>

080019ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ee:	3304      	adds	r3, #4

080019f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019f4:	d3f9      	bcc.n	80019ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001a20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001a24 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019fc:	e001      	b.n	8001a02 <LoopFillZerobss>

080019fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a00:	3204      	adds	r2, #4

08001a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a04:	d3fb      	bcc.n	80019fe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001a06:	f002 ff03 	bl	8004810 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a0a:	f7ff f9b3 	bl	8000d74 <main>
  bx  lr    
 8001a0e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a18:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001a1c:	08004898 	.word	0x08004898
  ldr r2, =_sbss
 8001a20:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001a24:	200002c0 	.word	0x200002c0

08001a28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a28:	e7fe      	b.n	8001a28 <ADC_IRQHandler>
	...

08001a2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a30:	4b0e      	ldr	r3, [pc, #56]	@ (8001a6c <HAL_Init+0x40>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a0d      	ldr	r2, [pc, #52]	@ (8001a6c <HAL_Init+0x40>)
 8001a36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a6c <HAL_Init+0x40>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a0a      	ldr	r2, [pc, #40]	@ (8001a6c <HAL_Init+0x40>)
 8001a42:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a48:	4b08      	ldr	r3, [pc, #32]	@ (8001a6c <HAL_Init+0x40>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a07      	ldr	r2, [pc, #28]	@ (8001a6c <HAL_Init+0x40>)
 8001a4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a54:	2003      	movs	r0, #3
 8001a56:	f000 fd51 	bl	80024fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a5a:	200f      	movs	r0, #15
 8001a5c:	f000 f808 	bl	8001a70 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001a60:	f7ff fdda 	bl	8001618 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40023c00 	.word	0x40023c00

08001a70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a78:	4b12      	ldr	r3, [pc, #72]	@ (8001ac4 <HAL_InitTick+0x54>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	4b12      	ldr	r3, [pc, #72]	@ (8001ac8 <HAL_InitTick+0x58>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	4619      	mov	r1, r3
 8001a82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a86:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f000 fd69 	bl	8002566 <HAL_SYSTICK_Config>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e00e      	b.n	8001abc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2b0f      	cmp	r3, #15
 8001aa2:	d80a      	bhi.n	8001aba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	6879      	ldr	r1, [r7, #4]
 8001aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8001aac:	f000 fd31 	bl	8002512 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ab0:	4a06      	ldr	r2, [pc, #24]	@ (8001acc <HAL_InitTick+0x5c>)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	e000      	b.n	8001abc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	20000000 	.word	0x20000000
 8001ac8:	20000008 	.word	0x20000008
 8001acc:	20000004 	.word	0x20000004

08001ad0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ad4:	4b05      	ldr	r3, [pc, #20]	@ (8001aec <HAL_IncTick+0x1c>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4b05      	ldr	r3, [pc, #20]	@ (8001af0 <HAL_IncTick+0x20>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4413      	add	r3, r2
 8001ae0:	4a03      	ldr	r2, [pc, #12]	@ (8001af0 <HAL_IncTick+0x20>)
 8001ae2:	6013      	str	r3, [r2, #0]
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc80      	pop	{r7}
 8001aea:	4770      	bx	lr
 8001aec:	20000008 	.word	0x20000008
 8001af0:	200002bc 	.word	0x200002bc

08001af4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  return uwTick;
 8001af8:	4b02      	ldr	r3, [pc, #8]	@ (8001b04 <HAL_GetTick+0x10>)
 8001afa:	681b      	ldr	r3, [r3, #0]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr
 8001b04:	200002bc 	.word	0x200002bc

08001b08 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b10:	2300      	movs	r3, #0
 8001b12:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e033      	b.n	8001b86 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d109      	bne.n	8001b3a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7ff fd9c 	bl	8001664 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3e:	f003 0310 	and.w	r3, r3, #16
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d118      	bne.n	8001b78 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001b4e:	f023 0302 	bic.w	r3, r3, #2
 8001b52:	f043 0202 	orr.w	r2, r3, #2
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 fa7a 	bl	8002054 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6a:	f023 0303 	bic.w	r3, r3, #3
 8001b6e:	f043 0201 	orr.w	r2, r3, #1
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b76:	e001      	b.n	8001b7c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
	...

08001b90 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d101      	bne.n	8001bae <HAL_ADC_Start_DMA+0x1e>
 8001baa:	2302      	movs	r3, #2
 8001bac:	e0bc      	b.n	8001d28 <HAL_ADC_Start_DMA+0x198>
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d018      	beq.n	8001bf6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689a      	ldr	r2, [r3, #8]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f042 0201 	orr.w	r2, r2, #1
 8001bd2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001bd4:	4b56      	ldr	r3, [pc, #344]	@ (8001d30 <HAL_ADC_Start_DMA+0x1a0>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a56      	ldr	r2, [pc, #344]	@ (8001d34 <HAL_ADC_Start_DMA+0x1a4>)
 8001bda:	fba2 2303 	umull	r2, r3, r2, r3
 8001bde:	0c9a      	lsrs	r2, r3, #18
 8001be0:	4613      	mov	r3, r2
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	4413      	add	r3, r2
 8001be6:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8001be8:	e002      	b.n	8001bf0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	3b01      	subs	r3, #1
 8001bee:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1f9      	bne.n	8001bea <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	f040 8084 	bne.w	8001d0e <HAL_ADC_Start_DMA+0x17e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001c0e:	f023 0301 	bic.w	r3, r3, #1
 8001c12:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d007      	beq.n	8001c38 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001c30:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c44:	d106      	bne.n	8001c54 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c4a:	f023 0206 	bic.w	r2, r3, #6
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	645a      	str	r2, [r3, #68]	@ 0x44
 8001c52:	e002      	b.n	8001c5a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2200      	movs	r2, #0
 8001c58:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c66:	4a34      	ldr	r2, [pc, #208]	@ (8001d38 <HAL_ADC_Start_DMA+0x1a8>)
 8001c68:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c6e:	4a33      	ldr	r2, [pc, #204]	@ (8001d3c <HAL_ADC_Start_DMA+0x1ac>)
 8001c70:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c76:	4a32      	ldr	r2, [pc, #200]	@ (8001d40 <HAL_ADC_Start_DMA+0x1b0>)
 8001c78:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001c82:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	685a      	ldr	r2, [r3, #4]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001c92:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	689a      	ldr	r2, [r3, #8]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ca2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	334c      	adds	r3, #76	@ 0x4c
 8001cae:	4619      	mov	r1, r3
 8001cb0:	68ba      	ldr	r2, [r7, #8]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f000 fd12 	bl	80026dc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001cb8:	4b22      	ldr	r3, [pc, #136]	@ (8001d44 <HAL_ADC_Start_DMA+0x1b4>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 031f 	and.w	r3, r3, #31
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d10f      	bne.n	8001ce4 <HAL_ADC_Start_DMA+0x154>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d129      	bne.n	8001d26 <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	689a      	ldr	r2, [r3, #8]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001ce0:	609a      	str	r2, [r3, #8]
 8001ce2:	e020      	b.n	8001d26 <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a17      	ldr	r2, [pc, #92]	@ (8001d48 <HAL_ADC_Start_DMA+0x1b8>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d11b      	bne.n	8001d26 <HAL_ADC_Start_DMA+0x196>
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d114      	bne.n	8001d26 <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	689a      	ldr	r2, [r3, #8]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	e00b      	b.n	8001d26 <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d12:	f043 0210 	orr.w	r2, r3, #16
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d1e:	f043 0201 	orr.w	r2, r3, #1
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20000000 	.word	0x20000000
 8001d34:	431bde83 	.word	0x431bde83
 8001d38:	08002261 	.word	0x08002261
 8001d3c:	0800231b 	.word	0x0800231b
 8001d40:	08002337 	.word	0x08002337
 8001d44:	40012300 	.word	0x40012300
 8001d48:	40012000 	.word	0x40012000

08001d4c <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d54:	2300      	movs	r3, #0
 8001d56:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d101      	bne.n	8001d66 <HAL_ADC_Stop_DMA+0x1a>
 8001d62:	2302      	movs	r3, #2
 8001d64:	e03f      	b.n	8001de6 <HAL_ADC_Stop_DMA+0x9a>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 0201 	bic.w	r2, r2, #1
 8001d7c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d127      	bne.n	8001ddc <HAL_ADC_Stop_DMA+0x90>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	689a      	ldr	r2, [r3, #8]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d9a:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001da0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d118      	bne.n	8001ddc <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dae:	4618      	mov	r0, r3
 8001db0:	f000 fcec 	bl	800278c <HAL_DMA_Abort>
 8001db4:	4603      	mov	r3, r0
 8001db6:	73fb      	strb	r3, [r7, #15]
      
      /* Disable ADC overrun interrupt */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8001dc6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dcc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001dd0:	f023 0301 	bic.w	r3, r3, #1
 8001dd4:	f043 0201 	orr.w	r2, r3, #1
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b083      	sub	sp, #12
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001df6:	bf00      	nop
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr

08001e00 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bc80      	pop	{r7}
 8001e10:	4770      	bx	lr
	...

08001e14 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d101      	bne.n	8001e30 <HAL_ADC_ConfigChannel+0x1c>
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	e103      	b.n	8002038 <HAL_ADC_ConfigChannel+0x224>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2b09      	cmp	r3, #9
 8001e3e:	d925      	bls.n	8001e8c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68d9      	ldr	r1, [r3, #12]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	4613      	mov	r3, r2
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	4413      	add	r3, r2
 8001e54:	3b1e      	subs	r3, #30
 8001e56:	2207      	movs	r2, #7
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43da      	mvns	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	400a      	ands	r2, r1
 8001e64:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68d9      	ldr	r1, [r3, #12]
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	4618      	mov	r0, r3
 8001e78:	4603      	mov	r3, r0
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	4403      	add	r3, r0
 8001e7e:	3b1e      	subs	r3, #30
 8001e80:	409a      	lsls	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	430a      	orrs	r2, r1
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	e022      	b.n	8001ed2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6919      	ldr	r1, [r3, #16]
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	4413      	add	r3, r2
 8001ea0:	2207      	movs	r2, #7
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	43da      	mvns	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	400a      	ands	r2, r1
 8001eae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6919      	ldr	r1, [r3, #16]
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	689a      	ldr	r2, [r3, #8]
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	4403      	add	r3, r0
 8001ec8:	409a      	lsls	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	2b06      	cmp	r3, #6
 8001ed8:	d824      	bhi.n	8001f24 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4413      	add	r3, r2
 8001eea:	3b05      	subs	r3, #5
 8001eec:	221f      	movs	r2, #31
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	43da      	mvns	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	400a      	ands	r2, r1
 8001efa:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	4618      	mov	r0, r3
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685a      	ldr	r2, [r3, #4]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4413      	add	r3, r2
 8001f14:	3b05      	subs	r3, #5
 8001f16:	fa00 f203 	lsl.w	r2, r0, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f22:	e04c      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	2b0c      	cmp	r3, #12
 8001f2a:	d824      	bhi.n	8001f76 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	4613      	mov	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	3b23      	subs	r3, #35	@ 0x23
 8001f3e:	221f      	movs	r2, #31
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43da      	mvns	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	400a      	ands	r2, r1
 8001f4c:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685a      	ldr	r2, [r3, #4]
 8001f60:	4613      	mov	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4413      	add	r3, r2
 8001f66:	3b23      	subs	r3, #35	@ 0x23
 8001f68:	fa00 f203 	lsl.w	r2, r0, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f74:	e023      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	4613      	mov	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4413      	add	r3, r2
 8001f86:	3b41      	subs	r3, #65	@ 0x41
 8001f88:	221f      	movs	r2, #31
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	43da      	mvns	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	400a      	ands	r2, r1
 8001f96:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	4613      	mov	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	3b41      	subs	r3, #65	@ 0x41
 8001fb2:	fa00 f203 	lsl.w	r2, r0, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a20      	ldr	r2, [pc, #128]	@ (8002044 <HAL_ADC_ConfigChannel+0x230>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d109      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x1c8>
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2b12      	cmp	r3, #18
 8001fce:	d105      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001fd0:	4b1d      	ldr	r3, [pc, #116]	@ (8002048 <HAL_ADC_ConfigChannel+0x234>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	4a1c      	ldr	r2, [pc, #112]	@ (8002048 <HAL_ADC_ConfigChannel+0x234>)
 8001fd6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001fda:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a18      	ldr	r2, [pc, #96]	@ (8002044 <HAL_ADC_ConfigChannel+0x230>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d123      	bne.n	800202e <HAL_ADC_ConfigChannel+0x21a>
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2b10      	cmp	r3, #16
 8001fec:	d003      	beq.n	8001ff6 <HAL_ADC_ConfigChannel+0x1e2>
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2b11      	cmp	r3, #17
 8001ff4:	d11b      	bne.n	800202e <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001ff6:	4b14      	ldr	r3, [pc, #80]	@ (8002048 <HAL_ADC_ConfigChannel+0x234>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	4a13      	ldr	r2, [pc, #76]	@ (8002048 <HAL_ADC_ConfigChannel+0x234>)
 8001ffc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002000:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2b10      	cmp	r3, #16
 8002008:	d111      	bne.n	800202e <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800200a:	4b10      	ldr	r3, [pc, #64]	@ (800204c <HAL_ADC_ConfigChannel+0x238>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a10      	ldr	r2, [pc, #64]	@ (8002050 <HAL_ADC_ConfigChannel+0x23c>)
 8002010:	fba2 2303 	umull	r2, r3, r2, r3
 8002014:	0c9a      	lsrs	r2, r3, #18
 8002016:	4613      	mov	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8002020:	e002      	b.n	8002028 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	3b01      	subs	r3, #1
 8002026:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f9      	bne.n	8002022 <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	3714      	adds	r7, #20
 800203c:	46bd      	mov	sp, r7
 800203e:	bc80      	pop	{r7}
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	40012000 	.word	0x40012000
 8002048:	40012300 	.word	0x40012300
 800204c:	20000000 	.word	0x20000000
 8002050:	431bde83 	.word	0x431bde83

08002054 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800205c:	4b7e      	ldr	r3, [pc, #504]	@ (8002258 <ADC_Init+0x204>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	4a7d      	ldr	r2, [pc, #500]	@ (8002258 <ADC_Init+0x204>)
 8002062:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002066:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002068:	4b7b      	ldr	r3, [pc, #492]	@ (8002258 <ADC_Init+0x204>)
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	4979      	ldr	r1, [pc, #484]	@ (8002258 <ADC_Init+0x204>)
 8002072:	4313      	orrs	r3, r2
 8002074:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002084:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6859      	ldr	r1, [r3, #4]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	021a      	lsls	r2, r3, #8
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	430a      	orrs	r2, r1
 8002098:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	685a      	ldr	r2, [r3, #4]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80020a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6859      	ldr	r1, [r3, #4]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6899      	ldr	r1, [r3, #8]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	68da      	ldr	r2, [r3, #12]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	430a      	orrs	r2, r1
 80020dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e2:	4a5e      	ldr	r2, [pc, #376]	@ (800225c <ADC_Init+0x208>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d022      	beq.n	800212e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	689a      	ldr	r2, [r3, #8]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80020f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6899      	ldr	r1, [r3, #8]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	430a      	orrs	r2, r1
 8002108:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002118:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6899      	ldr	r1, [r3, #8]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	430a      	orrs	r2, r1
 800212a:	609a      	str	r2, [r3, #8]
 800212c:	e00f      	b.n	800214e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800213c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800214c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 0202 	bic.w	r2, r2, #2
 800215c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6899      	ldr	r1, [r3, #8]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	7e1b      	ldrb	r3, [r3, #24]
 8002168:	005a      	lsls	r2, r3, #1
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	430a      	orrs	r2, r1
 8002170:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d027      	beq.n	80021cc <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800218a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800219a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a0:	3b01      	subs	r3, #1
 80021a2:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 80021a6:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	fa92 f2a2 	rbit	r2, r2
 80021ae:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021b0:	68ba      	ldr	r2, [r7, #8]
 80021b2:	fab2 f282 	clz	r2, r2
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	fa03 f102 	lsl.w	r1, r3, r2
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	e007      	b.n	80021dc <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021da:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80021ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	051a      	lsls	r2, r3, #20
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	430a      	orrs	r2, r1
 8002200:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	689a      	ldr	r2, [r3, #8]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002210:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6899      	ldr	r1, [r3, #8]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800221e:	025a      	lsls	r2, r3, #9
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	430a      	orrs	r2, r1
 8002226:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689a      	ldr	r2, [r3, #8]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002236:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6899      	ldr	r1, [r3, #8]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	029a      	lsls	r2, r3, #10
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	430a      	orrs	r2, r1
 800224a:	609a      	str	r2, [r3, #8]
}
 800224c:	bf00      	nop
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	bc80      	pop	{r7}
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	40012300 	.word	0x40012300
 800225c:	0f000001 	.word	0x0f000001

08002260 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800226c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002272:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002276:	2b00      	cmp	r3, #0
 8002278:	d13c      	bne.n	80022f4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d12b      	bne.n	80022ec <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002298:	2b00      	cmp	r3, #0
 800229a:	d127      	bne.n	80022ec <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d006      	beq.n	80022b8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d119      	bne.n	80022ec <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	685a      	ldr	r2, [r3, #4]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f022 0220 	bic.w	r2, r2, #32
 80022c6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d105      	bne.n	80022ec <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e4:	f043 0201 	orr.w	r2, r3, #1
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022ec:	68f8      	ldr	r0, [r7, #12]
 80022ee:	f7fe fd31 	bl	8000d54 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80022f2:	e00e      	b.n	8002312 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f8:	f003 0310 	and.w	r3, r3, #16
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f7ff fd7d 	bl	8001e00 <HAL_ADC_ErrorCallback>
}
 8002306:	e004      	b.n	8002312 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800230c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	4798      	blx	r3
}
 8002312:	bf00      	nop
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b084      	sub	sp, #16
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002326:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f7ff fd60 	bl	8001dee <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800232e:	bf00      	nop
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b084      	sub	sp, #16
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002342:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2240      	movs	r2, #64	@ 0x40
 8002348:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800234e:	f043 0204 	orr.w	r2, r3, #4
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	645a      	str	r2, [r3, #68]	@ 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f7ff fd52 	bl	8001e00 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800235c:	bf00      	nop
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002374:	4b0c      	ldr	r3, [pc, #48]	@ (80023a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002380:	4013      	ands	r3, r2
 8002382:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800238c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002390:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002394:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002396:	4a04      	ldr	r2, [pc, #16]	@ (80023a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	60d3      	str	r3, [r2, #12]
}
 800239c:	bf00      	nop
 800239e:	3714      	adds	r7, #20
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bc80      	pop	{r7}
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	e000ed00 	.word	0xe000ed00

080023ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023b0:	4b04      	ldr	r3, [pc, #16]	@ (80023c4 <__NVIC_GetPriorityGrouping+0x18>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	0a1b      	lsrs	r3, r3, #8
 80023b6:	f003 0307 	and.w	r3, r3, #7
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc80      	pop	{r7}
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	db0b      	blt.n	80023f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023da:	79fb      	ldrb	r3, [r7, #7]
 80023dc:	f003 021f 	and.w	r2, r3, #31
 80023e0:	4906      	ldr	r1, [pc, #24]	@ (80023fc <__NVIC_EnableIRQ+0x34>)
 80023e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e6:	095b      	lsrs	r3, r3, #5
 80023e8:	2001      	movs	r0, #1
 80023ea:	fa00 f202 	lsl.w	r2, r0, r2
 80023ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bc80      	pop	{r7}
 80023fa:	4770      	bx	lr
 80023fc:	e000e100 	.word	0xe000e100

08002400 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	6039      	str	r1, [r7, #0]
 800240a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800240c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002410:	2b00      	cmp	r3, #0
 8002412:	db0a      	blt.n	800242a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	b2da      	uxtb	r2, r3
 8002418:	490c      	ldr	r1, [pc, #48]	@ (800244c <__NVIC_SetPriority+0x4c>)
 800241a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241e:	0112      	lsls	r2, r2, #4
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	440b      	add	r3, r1
 8002424:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002428:	e00a      	b.n	8002440 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	b2da      	uxtb	r2, r3
 800242e:	4908      	ldr	r1, [pc, #32]	@ (8002450 <__NVIC_SetPriority+0x50>)
 8002430:	79fb      	ldrb	r3, [r7, #7]
 8002432:	f003 030f 	and.w	r3, r3, #15
 8002436:	3b04      	subs	r3, #4
 8002438:	0112      	lsls	r2, r2, #4
 800243a:	b2d2      	uxtb	r2, r2
 800243c:	440b      	add	r3, r1
 800243e:	761a      	strb	r2, [r3, #24]
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	e000e100 	.word	0xe000e100
 8002450:	e000ed00 	.word	0xe000ed00

08002454 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002454:	b480      	push	{r7}
 8002456:	b089      	sub	sp, #36	@ 0x24
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	f1c3 0307 	rsb	r3, r3, #7
 800246e:	2b04      	cmp	r3, #4
 8002470:	bf28      	it	cs
 8002472:	2304      	movcs	r3, #4
 8002474:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	3304      	adds	r3, #4
 800247a:	2b06      	cmp	r3, #6
 800247c:	d902      	bls.n	8002484 <NVIC_EncodePriority+0x30>
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	3b03      	subs	r3, #3
 8002482:	e000      	b.n	8002486 <NVIC_EncodePriority+0x32>
 8002484:	2300      	movs	r3, #0
 8002486:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002488:	f04f 32ff 	mov.w	r2, #4294967295
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	43da      	mvns	r2, r3
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	401a      	ands	r2, r3
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800249c:	f04f 31ff 	mov.w	r1, #4294967295
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	fa01 f303 	lsl.w	r3, r1, r3
 80024a6:	43d9      	mvns	r1, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024ac:	4313      	orrs	r3, r2
         );
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3724      	adds	r7, #36	@ 0x24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr

080024b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3b01      	subs	r3, #1
 80024c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024c8:	d301      	bcc.n	80024ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ca:	2301      	movs	r3, #1
 80024cc:	e00f      	b.n	80024ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ce:	4a0a      	ldr	r2, [pc, #40]	@ (80024f8 <SysTick_Config+0x40>)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3b01      	subs	r3, #1
 80024d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024d6:	210f      	movs	r1, #15
 80024d8:	f04f 30ff 	mov.w	r0, #4294967295
 80024dc:	f7ff ff90 	bl	8002400 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024e0:	4b05      	ldr	r3, [pc, #20]	@ (80024f8 <SysTick_Config+0x40>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024e6:	4b04      	ldr	r3, [pc, #16]	@ (80024f8 <SysTick_Config+0x40>)
 80024e8:	2207      	movs	r2, #7
 80024ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	e000e010 	.word	0xe000e010

080024fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f7ff ff2d 	bl	8002364 <__NVIC_SetPriorityGrouping>
}
 800250a:	bf00      	nop
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002512:	b580      	push	{r7, lr}
 8002514:	b086      	sub	sp, #24
 8002516:	af00      	add	r7, sp, #0
 8002518:	4603      	mov	r3, r0
 800251a:	60b9      	str	r1, [r7, #8]
 800251c:	607a      	str	r2, [r7, #4]
 800251e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002520:	2300      	movs	r3, #0
 8002522:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002524:	f7ff ff42 	bl	80023ac <__NVIC_GetPriorityGrouping>
 8002528:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	68b9      	ldr	r1, [r7, #8]
 800252e:	6978      	ldr	r0, [r7, #20]
 8002530:	f7ff ff90 	bl	8002454 <NVIC_EncodePriority>
 8002534:	4602      	mov	r2, r0
 8002536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800253a:	4611      	mov	r1, r2
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff ff5f 	bl	8002400 <__NVIC_SetPriority>
}
 8002542:	bf00      	nop
 8002544:	3718      	adds	r7, #24
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b082      	sub	sp, #8
 800254e:	af00      	add	r7, sp, #0
 8002550:	4603      	mov	r3, r0
 8002552:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff ff35 	bl	80023c8 <__NVIC_EnableIRQ>
}
 800255e:	bf00      	nop
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b082      	sub	sp, #8
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7ff ffa2 	bl	80024b8 <SysTick_Config>
 8002574:	4603      	mov	r3, r0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
	...

08002580 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002588:	2300      	movs	r3, #0
 800258a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800258c:	f7ff fab2 	bl	8001af4 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e099      	b.n	80026d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2202      	movs	r2, #2
 80025a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f022 0201 	bic.w	r2, r2, #1
 80025ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025bc:	e00f      	b.n	80025de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025be:	f7ff fa99 	bl	8001af4 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b05      	cmp	r3, #5
 80025ca:	d908      	bls.n	80025de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2220      	movs	r2, #32
 80025d0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2203      	movs	r2, #3
 80025d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e078      	b.n	80026d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1e8      	bne.n	80025be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	4b38      	ldr	r3, [pc, #224]	@ (80026d8 <HAL_DMA_Init+0x158>)
 80025f8:	4013      	ands	r3, r2
 80025fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800260a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002616:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002622:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	4313      	orrs	r3, r2
 800262e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002634:	2b04      	cmp	r3, #4
 8002636:	d107      	bne.n	8002648 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002640:	4313      	orrs	r3, r2
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	4313      	orrs	r3, r2
 8002646:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	f023 0307 	bic.w	r3, r3, #7
 800265e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	4313      	orrs	r3, r2
 8002668:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266e:	2b04      	cmp	r3, #4
 8002670:	d117      	bne.n	80026a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	4313      	orrs	r3, r2
 800267a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00e      	beq.n	80026a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 fadd 	bl	8002c44 <DMA_CheckFifoParam>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d008      	beq.n	80026a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2240      	movs	r2, #64	@ 0x40
 8002694:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2201      	movs	r2, #1
 800269a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800269e:	2301      	movs	r3, #1
 80026a0:	e016      	b.n	80026d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 fa96 	bl	8002bdc <DMA_CalcBaseAndBitshift>
 80026b0:	4603      	mov	r3, r0
 80026b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b8:	223f      	movs	r2, #63	@ 0x3f
 80026ba:	409a      	lsls	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3718      	adds	r7, #24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	f010803f 	.word	0xf010803f

080026dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
 80026e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026ea:	2300      	movs	r3, #0
 80026ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d101      	bne.n	8002702 <HAL_DMA_Start_IT+0x26>
 80026fe:	2302      	movs	r3, #2
 8002700:	e040      	b.n	8002784 <HAL_DMA_Start_IT+0xa8>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b01      	cmp	r3, #1
 8002714:	d12f      	bne.n	8002776 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2202      	movs	r2, #2
 800271a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	68b9      	ldr	r1, [r7, #8]
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f000 fa28 	bl	8002b80 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002734:	223f      	movs	r2, #63	@ 0x3f
 8002736:	409a      	lsls	r2, r3
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f042 0216 	orr.w	r2, r2, #22
 800274a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002750:	2b00      	cmp	r3, #0
 8002752:	d007      	beq.n	8002764 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f042 0208 	orr.w	r2, r2, #8
 8002762:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f042 0201 	orr.w	r2, r2, #1
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	e005      	b.n	8002782 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800277e:	2302      	movs	r3, #2
 8002780:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002782:	7dfb      	ldrb	r3, [r7, #23]
}
 8002784:	4618      	mov	r0, r3
 8002786:	3718      	adds	r7, #24
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002798:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800279a:	f7ff f9ab 	bl	8001af4 <HAL_GetTick>
 800279e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d008      	beq.n	80027be <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2280      	movs	r2, #128	@ 0x80
 80027b0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e052      	b.n	8002864 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 0216 	bic.w	r2, r2, #22
 80027cc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	695a      	ldr	r2, [r3, #20]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027dc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d103      	bne.n	80027ee <HAL_DMA_Abort+0x62>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d007      	beq.n	80027fe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f022 0208 	bic.w	r2, r2, #8
 80027fc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 0201 	bic.w	r2, r2, #1
 800280c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800280e:	e013      	b.n	8002838 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002810:	f7ff f970 	bl	8001af4 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b05      	cmp	r3, #5
 800281c:	d90c      	bls.n	8002838 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2220      	movs	r2, #32
 8002822:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2203      	movs	r2, #3
 8002828:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e015      	b.n	8002864 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1e4      	bne.n	8002810 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800284a:	223f      	movs	r2, #63	@ 0x3f
 800284c:	409a      	lsls	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002874:	2300      	movs	r3, #0
 8002876:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002878:	4b8e      	ldr	r3, [pc, #568]	@ (8002ab4 <HAL_DMA_IRQHandler+0x248>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a8e      	ldr	r2, [pc, #568]	@ (8002ab8 <HAL_DMA_IRQHandler+0x24c>)
 800287e:	fba2 2303 	umull	r2, r3, r2, r3
 8002882:	0a9b      	lsrs	r3, r3, #10
 8002884:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800288a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002896:	2208      	movs	r2, #8
 8002898:	409a      	lsls	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	4013      	ands	r3, r2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d01a      	beq.n	80028d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0304 	and.w	r3, r3, #4
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d013      	beq.n	80028d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 0204 	bic.w	r2, r2, #4
 80028be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c4:	2208      	movs	r2, #8
 80028c6:	409a      	lsls	r2, r3
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028d0:	f043 0201 	orr.w	r2, r3, #1
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028dc:	2201      	movs	r2, #1
 80028de:	409a      	lsls	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	4013      	ands	r3, r2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d012      	beq.n	800290e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00b      	beq.n	800290e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028fa:	2201      	movs	r2, #1
 80028fc:	409a      	lsls	r2, r3
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002906:	f043 0202 	orr.w	r2, r3, #2
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002912:	2204      	movs	r2, #4
 8002914:	409a      	lsls	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	4013      	ands	r3, r2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d012      	beq.n	8002944 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00b      	beq.n	8002944 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002930:	2204      	movs	r2, #4
 8002932:	409a      	lsls	r2, r3
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800293c:	f043 0204 	orr.w	r2, r3, #4
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002948:	2210      	movs	r2, #16
 800294a:	409a      	lsls	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	4013      	ands	r3, r2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d043      	beq.n	80029dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0308 	and.w	r3, r3, #8
 800295e:	2b00      	cmp	r3, #0
 8002960:	d03c      	beq.n	80029dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002966:	2210      	movs	r2, #16
 8002968:	409a      	lsls	r2, r3
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d018      	beq.n	80029ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d108      	bne.n	800299c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298e:	2b00      	cmp	r3, #0
 8002990:	d024      	beq.n	80029dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	4798      	blx	r3
 800299a:	e01f      	b.n	80029dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d01b      	beq.n	80029dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	4798      	blx	r3
 80029ac:	e016      	b.n	80029dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d107      	bne.n	80029cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 0208 	bic.w	r2, r2, #8
 80029ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d003      	beq.n	80029dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029e0:	2220      	movs	r2, #32
 80029e2:	409a      	lsls	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	4013      	ands	r3, r2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f000 808f 	beq.w	8002b0c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0310 	and.w	r3, r3, #16
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 8087 	beq.w	8002b0c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a02:	2220      	movs	r2, #32
 8002a04:	409a      	lsls	r2, r3
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b05      	cmp	r3, #5
 8002a14:	d136      	bne.n	8002a84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 0216 	bic.w	r2, r2, #22
 8002a24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	695a      	ldr	r2, [r3, #20]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d103      	bne.n	8002a46 <HAL_DMA_IRQHandler+0x1da>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d007      	beq.n	8002a56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 0208 	bic.w	r2, r2, #8
 8002a54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a5a:	223f      	movs	r2, #63	@ 0x3f
 8002a5c:	409a      	lsls	r2, r3
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d07e      	beq.n	8002b78 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	4798      	blx	r3
        }
        return;
 8002a82:	e079      	b.n	8002b78 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d01d      	beq.n	8002ace <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d10d      	bne.n	8002abc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d031      	beq.n	8002b0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	4798      	blx	r3
 8002ab0:	e02c      	b.n	8002b0c <HAL_DMA_IRQHandler+0x2a0>
 8002ab2:	bf00      	nop
 8002ab4:	20000000 	.word	0x20000000
 8002ab8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d023      	beq.n	8002b0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	4798      	blx	r3
 8002acc:	e01e      	b.n	8002b0c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d10f      	bne.n	8002afc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f022 0210 	bic.w	r2, r2, #16
 8002aea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d003      	beq.n	8002b0c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d032      	beq.n	8002b7a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d022      	beq.n	8002b66 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2205      	movs	r2, #5
 8002b24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f022 0201 	bic.w	r2, r2, #1
 8002b36:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	60bb      	str	r3, [r7, #8]
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d307      	bcc.n	8002b54 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1f2      	bne.n	8002b38 <HAL_DMA_IRQHandler+0x2cc>
 8002b52:	e000      	b.n	8002b56 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002b54:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d005      	beq.n	8002b7a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	4798      	blx	r3
 8002b76:	e000      	b.n	8002b7a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b78:	bf00      	nop
    }
  }
}
 8002b7a:	3718      	adds	r7, #24
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
 8002b8c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002b9c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	2b40      	cmp	r3, #64	@ 0x40
 8002bac:	d108      	bne.n	8002bc0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68ba      	ldr	r2, [r7, #8]
 8002bbc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002bbe:	e007      	b.n	8002bd0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68ba      	ldr	r2, [r7, #8]
 8002bc6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	60da      	str	r2, [r3, #12]
}
 8002bd0:	bf00      	nop
 8002bd2:	3714      	adds	r7, #20
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bc80      	pop	{r7}
 8002bd8:	4770      	bx	lr
	...

08002bdc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	3b10      	subs	r3, #16
 8002bec:	4a13      	ldr	r2, [pc, #76]	@ (8002c3c <DMA_CalcBaseAndBitshift+0x60>)
 8002bee:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf2:	091b      	lsrs	r3, r3, #4
 8002bf4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002bf6:	4a12      	ldr	r2, [pc, #72]	@ (8002c40 <DMA_CalcBaseAndBitshift+0x64>)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	461a      	mov	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2b03      	cmp	r3, #3
 8002c08:	d909      	bls.n	8002c1e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002c12:	f023 0303 	bic.w	r3, r3, #3
 8002c16:	1d1a      	adds	r2, r3, #4
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	659a      	str	r2, [r3, #88]	@ 0x58
 8002c1c:	e007      	b.n	8002c2e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002c26:	f023 0303 	bic.w	r3, r3, #3
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3714      	adds	r7, #20
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr
 8002c3c:	aaaaaaab 	.word	0xaaaaaaab
 8002c40:	08004880 	.word	0x08004880

08002c44 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c54:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d11f      	bne.n	8002c9e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	2b03      	cmp	r3, #3
 8002c62:	d856      	bhi.n	8002d12 <DMA_CheckFifoParam+0xce>
 8002c64:	a201      	add	r2, pc, #4	@ (adr r2, 8002c6c <DMA_CheckFifoParam+0x28>)
 8002c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c6a:	bf00      	nop
 8002c6c:	08002c7d 	.word	0x08002c7d
 8002c70:	08002c8f 	.word	0x08002c8f
 8002c74:	08002c7d 	.word	0x08002c7d
 8002c78:	08002d13 	.word	0x08002d13
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d046      	beq.n	8002d16 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c8c:	e043      	b.n	8002d16 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c92:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c96:	d140      	bne.n	8002d1a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c9c:	e03d      	b.n	8002d1a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ca6:	d121      	bne.n	8002cec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	2b03      	cmp	r3, #3
 8002cac:	d837      	bhi.n	8002d1e <DMA_CheckFifoParam+0xda>
 8002cae:	a201      	add	r2, pc, #4	@ (adr r2, 8002cb4 <DMA_CheckFifoParam+0x70>)
 8002cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb4:	08002cc5 	.word	0x08002cc5
 8002cb8:	08002ccb 	.word	0x08002ccb
 8002cbc:	08002cc5 	.word	0x08002cc5
 8002cc0:	08002cdd 	.word	0x08002cdd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	73fb      	strb	r3, [r7, #15]
      break;
 8002cc8:	e030      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d025      	beq.n	8002d22 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cda:	e022      	b.n	8002d22 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ce4:	d11f      	bne.n	8002d26 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002cea:	e01c      	b.n	8002d26 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d903      	bls.n	8002cfa <DMA_CheckFifoParam+0xb6>
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	2b03      	cmp	r3, #3
 8002cf6:	d003      	beq.n	8002d00 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002cf8:	e018      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	73fb      	strb	r3, [r7, #15]
      break;
 8002cfe:	e015      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00e      	beq.n	8002d2a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d10:	e00b      	b.n	8002d2a <DMA_CheckFifoParam+0xe6>
      break;
 8002d12:	bf00      	nop
 8002d14:	e00a      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
      break;
 8002d16:	bf00      	nop
 8002d18:	e008      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
      break;
 8002d1a:	bf00      	nop
 8002d1c:	e006      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
      break;
 8002d1e:	bf00      	nop
 8002d20:	e004      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
      break;
 8002d22:	bf00      	nop
 8002d24:	e002      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
      break;   
 8002d26:	bf00      	nop
 8002d28:	e000      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
      break;
 8002d2a:	bf00      	nop
    }
  } 
  
  return status; 
 8002d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3714      	adds	r7, #20
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bc80      	pop	{r7}
 8002d36:	4770      	bx	lr

08002d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b087      	sub	sp, #28
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d42:	2300      	movs	r3, #0
 8002d44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d46:	e16f      	b.n	8003028 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	2101      	movs	r1, #1
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	fa01 f303 	lsl.w	r3, r1, r3
 8002d54:	4013      	ands	r3, r2
 8002d56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f000 8161 	beq.w	8003022 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f003 0303 	and.w	r3, r3, #3
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d005      	beq.n	8002d78 <HAL_GPIO_Init+0x40>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f003 0303 	and.w	r3, r3, #3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d130      	bne.n	8002dda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	2203      	movs	r2, #3
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	68da      	ldr	r2, [r3, #12]
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dae:	2201      	movs	r2, #1
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	43db      	mvns	r3, r3
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	091b      	lsrs	r3, r3, #4
 8002dc4:	f003 0201 	and.w	r2, r3, #1
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f003 0303 	and.w	r3, r3, #3
 8002de2:	2b03      	cmp	r3, #3
 8002de4:	d017      	beq.n	8002e16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	2203      	movs	r2, #3
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	43db      	mvns	r3, r3
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	689a      	ldr	r2, [r3, #8]
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d123      	bne.n	8002e6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	08da      	lsrs	r2, r3, #3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	3208      	adds	r2, #8
 8002e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	f003 0307 	and.w	r3, r3, #7
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	220f      	movs	r2, #15
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	43db      	mvns	r3, r3
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	4013      	ands	r3, r2
 8002e44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	691a      	ldr	r2, [r3, #16]
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	f003 0307 	and.w	r3, r3, #7
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	08da      	lsrs	r2, r3, #3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3208      	adds	r2, #8
 8002e64:	6939      	ldr	r1, [r7, #16]
 8002e66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	2203      	movs	r2, #3
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f003 0203 	and.w	r2, r3, #3
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f000 80bb 	beq.w	8003022 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eac:	2300      	movs	r3, #0
 8002eae:	60bb      	str	r3, [r7, #8]
 8002eb0:	4b64      	ldr	r3, [pc, #400]	@ (8003044 <HAL_GPIO_Init+0x30c>)
 8002eb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb4:	4a63      	ldr	r2, [pc, #396]	@ (8003044 <HAL_GPIO_Init+0x30c>)
 8002eb6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002eba:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ebc:	4b61      	ldr	r3, [pc, #388]	@ (8003044 <HAL_GPIO_Init+0x30c>)
 8002ebe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ec4:	60bb      	str	r3, [r7, #8]
 8002ec6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ec8:	4a5f      	ldr	r2, [pc, #380]	@ (8003048 <HAL_GPIO_Init+0x310>)
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	089b      	lsrs	r3, r3, #2
 8002ece:	3302      	adds	r3, #2
 8002ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	f003 0303 	and.w	r3, r3, #3
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	220f      	movs	r2, #15
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a57      	ldr	r2, [pc, #348]	@ (800304c <HAL_GPIO_Init+0x314>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d031      	beq.n	8002f58 <HAL_GPIO_Init+0x220>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a56      	ldr	r2, [pc, #344]	@ (8003050 <HAL_GPIO_Init+0x318>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d02b      	beq.n	8002f54 <HAL_GPIO_Init+0x21c>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a55      	ldr	r2, [pc, #340]	@ (8003054 <HAL_GPIO_Init+0x31c>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d025      	beq.n	8002f50 <HAL_GPIO_Init+0x218>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a54      	ldr	r2, [pc, #336]	@ (8003058 <HAL_GPIO_Init+0x320>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d01f      	beq.n	8002f4c <HAL_GPIO_Init+0x214>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a53      	ldr	r2, [pc, #332]	@ (800305c <HAL_GPIO_Init+0x324>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d019      	beq.n	8002f48 <HAL_GPIO_Init+0x210>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a52      	ldr	r2, [pc, #328]	@ (8003060 <HAL_GPIO_Init+0x328>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d013      	beq.n	8002f44 <HAL_GPIO_Init+0x20c>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a51      	ldr	r2, [pc, #324]	@ (8003064 <HAL_GPIO_Init+0x32c>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d00d      	beq.n	8002f40 <HAL_GPIO_Init+0x208>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a50      	ldr	r2, [pc, #320]	@ (8003068 <HAL_GPIO_Init+0x330>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d007      	beq.n	8002f3c <HAL_GPIO_Init+0x204>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a4f      	ldr	r2, [pc, #316]	@ (800306c <HAL_GPIO_Init+0x334>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d101      	bne.n	8002f38 <HAL_GPIO_Init+0x200>
 8002f34:	2308      	movs	r3, #8
 8002f36:	e010      	b.n	8002f5a <HAL_GPIO_Init+0x222>
 8002f38:	2309      	movs	r3, #9
 8002f3a:	e00e      	b.n	8002f5a <HAL_GPIO_Init+0x222>
 8002f3c:	2307      	movs	r3, #7
 8002f3e:	e00c      	b.n	8002f5a <HAL_GPIO_Init+0x222>
 8002f40:	2306      	movs	r3, #6
 8002f42:	e00a      	b.n	8002f5a <HAL_GPIO_Init+0x222>
 8002f44:	2305      	movs	r3, #5
 8002f46:	e008      	b.n	8002f5a <HAL_GPIO_Init+0x222>
 8002f48:	2304      	movs	r3, #4
 8002f4a:	e006      	b.n	8002f5a <HAL_GPIO_Init+0x222>
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e004      	b.n	8002f5a <HAL_GPIO_Init+0x222>
 8002f50:	2302      	movs	r3, #2
 8002f52:	e002      	b.n	8002f5a <HAL_GPIO_Init+0x222>
 8002f54:	2301      	movs	r3, #1
 8002f56:	e000      	b.n	8002f5a <HAL_GPIO_Init+0x222>
 8002f58:	2300      	movs	r3, #0
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	f002 0203 	and.w	r2, r2, #3
 8002f60:	0092      	lsls	r2, r2, #2
 8002f62:	4093      	lsls	r3, r2
 8002f64:	461a      	mov	r2, r3
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f6c:	4936      	ldr	r1, [pc, #216]	@ (8003048 <HAL_GPIO_Init+0x310>)
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	089b      	lsrs	r3, r3, #2
 8002f72:	3302      	adds	r3, #2
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f7a:	4b3d      	ldr	r3, [pc, #244]	@ (8003070 <HAL_GPIO_Init+0x338>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	43db      	mvns	r3, r3
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	4013      	ands	r3, r2
 8002f88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002f9e:	4a34      	ldr	r2, [pc, #208]	@ (8003070 <HAL_GPIO_Init+0x338>)
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fa4:	4b32      	ldr	r3, [pc, #200]	@ (8003070 <HAL_GPIO_Init+0x338>)
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	43db      	mvns	r3, r3
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d003      	beq.n	8002fc8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002fc8:	4a29      	ldr	r2, [pc, #164]	@ (8003070 <HAL_GPIO_Init+0x338>)
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fce:	4b28      	ldr	r3, [pc, #160]	@ (8003070 <HAL_GPIO_Init+0x338>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002ff2:	4a1f      	ldr	r2, [pc, #124]	@ (8003070 <HAL_GPIO_Init+0x338>)
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ff8:	4b1d      	ldr	r3, [pc, #116]	@ (8003070 <HAL_GPIO_Init+0x338>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	43db      	mvns	r3, r3
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	4013      	ands	r3, r2
 8003006:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d003      	beq.n	800301c <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	4313      	orrs	r3, r2
 800301a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800301c:	4a14      	ldr	r2, [pc, #80]	@ (8003070 <HAL_GPIO_Init+0x338>)
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	3301      	adds	r3, #1
 8003026:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	fa22 f303 	lsr.w	r3, r2, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	f47f ae88 	bne.w	8002d48 <HAL_GPIO_Init+0x10>
  }
}
 8003038:	bf00      	nop
 800303a:	bf00      	nop
 800303c:	371c      	adds	r7, #28
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr
 8003044:	40023800 	.word	0x40023800
 8003048:	40013800 	.word	0x40013800
 800304c:	40020000 	.word	0x40020000
 8003050:	40020400 	.word	0x40020400
 8003054:	40020800 	.word	0x40020800
 8003058:	40020c00 	.word	0x40020c00
 800305c:	40021000 	.word	0x40021000
 8003060:	40021400 	.word	0x40021400
 8003064:	40021800 	.word	0x40021800
 8003068:	40021c00 	.word	0x40021c00
 800306c:	40022000 	.word	0x40022000
 8003070:	40013c00 	.word	0x40013c00

08003074 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	460b      	mov	r3, r1
 800307e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	691a      	ldr	r2, [r3, #16]
 8003084:	887b      	ldrh	r3, [r7, #2]
 8003086:	4013      	ands	r3, r2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d002      	beq.n	8003092 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800308c:	2301      	movs	r3, #1
 800308e:	73fb      	strb	r3, [r7, #15]
 8003090:	e001      	b.n	8003096 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003092:	2300      	movs	r3, #0
 8003094:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003096:	7bfb      	ldrb	r3, [r7, #15]
}
 8003098:	4618      	mov	r0, r3
 800309a:	3714      	adds	r7, #20
 800309c:	46bd      	mov	sp, r7
 800309e:	bc80      	pop	{r7}
 80030a0:	4770      	bx	lr

080030a2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
 80030aa:	460b      	mov	r3, r1
 80030ac:	807b      	strh	r3, [r7, #2]
 80030ae:	4613      	mov	r3, r2
 80030b0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030b2:	787b      	ldrb	r3, [r7, #1]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d003      	beq.n	80030c0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030b8:	887a      	ldrh	r2, [r7, #2]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030be:	e003      	b.n	80030c8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030c0:	887b      	ldrh	r3, [r7, #2]
 80030c2:	041a      	lsls	r2, r3, #16
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	619a      	str	r2, [r3, #24]
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bc80      	pop	{r7}
 80030d0:	4770      	bx	lr
	...

080030d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b08a      	sub	sp, #40	@ 0x28
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e23b      	b.n	800355e <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d050      	beq.n	8003194 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030f2:	4b9e      	ldr	r3, [pc, #632]	@ (800336c <HAL_RCC_OscConfig+0x298>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f003 030c 	and.w	r3, r3, #12
 80030fa:	2b04      	cmp	r3, #4
 80030fc:	d00c      	beq.n	8003118 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030fe:	4b9b      	ldr	r3, [pc, #620]	@ (800336c <HAL_RCC_OscConfig+0x298>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003106:	2b08      	cmp	r3, #8
 8003108:	d112      	bne.n	8003130 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800310a:	4b98      	ldr	r3, [pc, #608]	@ (800336c <HAL_RCC_OscConfig+0x298>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003112:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003116:	d10b      	bne.n	8003130 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003118:	4b94      	ldr	r3, [pc, #592]	@ (800336c <HAL_RCC_OscConfig+0x298>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d036      	beq.n	8003192 <HAL_RCC_OscConfig+0xbe>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d132      	bne.n	8003192 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e216      	b.n	800355e <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685a      	ldr	r2, [r3, #4]
 8003134:	4b8e      	ldr	r3, [pc, #568]	@ (8003370 <HAL_RCC_OscConfig+0x29c>)
 8003136:	b2d2      	uxtb	r2, r2
 8003138:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d013      	beq.n	800316a <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003142:	f7fe fcd7 	bl	8001af4 <HAL_GetTick>
 8003146:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003148:	e008      	b.n	800315c <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800314a:	f7fe fcd3 	bl	8001af4 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	6a3b      	ldr	r3, [r7, #32]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b64      	cmp	r3, #100	@ 0x64
 8003156:	d901      	bls.n	800315c <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e200      	b.n	800355e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800315c:	4b83      	ldr	r3, [pc, #524]	@ (800336c <HAL_RCC_OscConfig+0x298>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0f0      	beq.n	800314a <HAL_RCC_OscConfig+0x76>
 8003168:	e014      	b.n	8003194 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800316a:	f7fe fcc3 	bl	8001af4 <HAL_GetTick>
 800316e:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003170:	e008      	b.n	8003184 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003172:	f7fe fcbf 	bl	8001af4 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	6a3b      	ldr	r3, [r7, #32]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b64      	cmp	r3, #100	@ 0x64
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e1ec      	b.n	800355e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003184:	4b79      	ldr	r3, [pc, #484]	@ (800336c <HAL_RCC_OscConfig+0x298>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1f0      	bne.n	8003172 <HAL_RCC_OscConfig+0x9e>
 8003190:	e000      	b.n	8003194 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003192:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d077      	beq.n	8003290 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031a0:	4b72      	ldr	r3, [pc, #456]	@ (800336c <HAL_RCC_OscConfig+0x298>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f003 030c 	and.w	r3, r3, #12
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00b      	beq.n	80031c4 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031ac:	4b6f      	ldr	r3, [pc, #444]	@ (800336c <HAL_RCC_OscConfig+0x298>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031b4:	2b08      	cmp	r3, #8
 80031b6:	d126      	bne.n	8003206 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031b8:	4b6c      	ldr	r3, [pc, #432]	@ (800336c <HAL_RCC_OscConfig+0x298>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d120      	bne.n	8003206 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031c4:	4b69      	ldr	r3, [pc, #420]	@ (800336c <HAL_RCC_OscConfig+0x298>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d005      	beq.n	80031dc <HAL_RCC_OscConfig+0x108>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d001      	beq.n	80031dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e1c0      	b.n	800355e <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031dc:	4b63      	ldr	r3, [pc, #396]	@ (800336c <HAL_RCC_OscConfig+0x298>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	21f8      	movs	r1, #248	@ 0xf8
 80031ea:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ec:	69b9      	ldr	r1, [r7, #24]
 80031ee:	fa91 f1a1 	rbit	r1, r1
 80031f2:	6179      	str	r1, [r7, #20]
  return result;
 80031f4:	6979      	ldr	r1, [r7, #20]
 80031f6:	fab1 f181 	clz	r1, r1
 80031fa:	b2c9      	uxtb	r1, r1
 80031fc:	408b      	lsls	r3, r1
 80031fe:	495b      	ldr	r1, [pc, #364]	@ (800336c <HAL_RCC_OscConfig+0x298>)
 8003200:	4313      	orrs	r3, r2
 8003202:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003204:	e044      	b.n	8003290 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d02a      	beq.n	8003264 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800320e:	4b59      	ldr	r3, [pc, #356]	@ (8003374 <HAL_RCC_OscConfig+0x2a0>)
 8003210:	2201      	movs	r2, #1
 8003212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003214:	f7fe fc6e 	bl	8001af4 <HAL_GetTick>
 8003218:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800321c:	f7fe fc6a 	bl	8001af4 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	6a3b      	ldr	r3, [r7, #32]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e197      	b.n	800355e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800322e:	4b4f      	ldr	r3, [pc, #316]	@ (800336c <HAL_RCC_OscConfig+0x298>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d0f0      	beq.n	800321c <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800323a:	4b4c      	ldr	r3, [pc, #304]	@ (800336c <HAL_RCC_OscConfig+0x298>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	21f8      	movs	r1, #248	@ 0xf8
 8003248:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324a:	6939      	ldr	r1, [r7, #16]
 800324c:	fa91 f1a1 	rbit	r1, r1
 8003250:	60f9      	str	r1, [r7, #12]
  return result;
 8003252:	68f9      	ldr	r1, [r7, #12]
 8003254:	fab1 f181 	clz	r1, r1
 8003258:	b2c9      	uxtb	r1, r1
 800325a:	408b      	lsls	r3, r1
 800325c:	4943      	ldr	r1, [pc, #268]	@ (800336c <HAL_RCC_OscConfig+0x298>)
 800325e:	4313      	orrs	r3, r2
 8003260:	600b      	str	r3, [r1, #0]
 8003262:	e015      	b.n	8003290 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003264:	4b43      	ldr	r3, [pc, #268]	@ (8003374 <HAL_RCC_OscConfig+0x2a0>)
 8003266:	2200      	movs	r2, #0
 8003268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326a:	f7fe fc43 	bl	8001af4 <HAL_GetTick>
 800326e:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003270:	e008      	b.n	8003284 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003272:	f7fe fc3f 	bl	8001af4 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	6a3b      	ldr	r3, [r7, #32]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e16c      	b.n	800355e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003284:	4b39      	ldr	r3, [pc, #228]	@ (800336c <HAL_RCC_OscConfig+0x298>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1f0      	bne.n	8003272 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0308 	and.w	r3, r3, #8
 8003298:	2b00      	cmp	r3, #0
 800329a:	d030      	beq.n	80032fe <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d016      	beq.n	80032d2 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032a4:	4b34      	ldr	r3, [pc, #208]	@ (8003378 <HAL_RCC_OscConfig+0x2a4>)
 80032a6:	2201      	movs	r2, #1
 80032a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032aa:	f7fe fc23 	bl	8001af4 <HAL_GetTick>
 80032ae:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032b0:	e008      	b.n	80032c4 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032b2:	f7fe fc1f 	bl	8001af4 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	6a3b      	ldr	r3, [r7, #32]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e14c      	b.n	800355e <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032c4:	4b29      	ldr	r3, [pc, #164]	@ (800336c <HAL_RCC_OscConfig+0x298>)
 80032c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d0f0      	beq.n	80032b2 <HAL_RCC_OscConfig+0x1de>
 80032d0:	e015      	b.n	80032fe <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032d2:	4b29      	ldr	r3, [pc, #164]	@ (8003378 <HAL_RCC_OscConfig+0x2a4>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032d8:	f7fe fc0c 	bl	8001af4 <HAL_GetTick>
 80032dc:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032e0:	f7fe fc08 	bl	8001af4 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	6a3b      	ldr	r3, [r7, #32]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e135      	b.n	800355e <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032f2:	4b1e      	ldr	r3, [pc, #120]	@ (800336c <HAL_RCC_OscConfig+0x298>)
 80032f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1f0      	bne.n	80032e0 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0304 	and.w	r3, r3, #4
 8003306:	2b00      	cmp	r3, #0
 8003308:	f000 8087 	beq.w	800341a <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 800330c:	2300      	movs	r3, #0
 800330e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003312:	4b16      	ldr	r3, [pc, #88]	@ (800336c <HAL_RCC_OscConfig+0x298>)
 8003314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003316:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d110      	bne.n	8003340 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800331e:	2300      	movs	r3, #0
 8003320:	60bb      	str	r3, [r7, #8]
 8003322:	4b12      	ldr	r3, [pc, #72]	@ (800336c <HAL_RCC_OscConfig+0x298>)
 8003324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003326:	4a11      	ldr	r2, [pc, #68]	@ (800336c <HAL_RCC_OscConfig+0x298>)
 8003328:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800332c:	6413      	str	r3, [r2, #64]	@ 0x40
 800332e:	4b0f      	ldr	r3, [pc, #60]	@ (800336c <HAL_RCC_OscConfig+0x298>)
 8003330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003336:	60bb      	str	r3, [r7, #8]
 8003338:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800333a:	2301      	movs	r3, #1
 800333c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003340:	4b0e      	ldr	r3, [pc, #56]	@ (800337c <HAL_RCC_OscConfig+0x2a8>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a0d      	ldr	r2, [pc, #52]	@ (800337c <HAL_RCC_OscConfig+0x2a8>)
 8003346:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800334a:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800334c:	4b0b      	ldr	r3, [pc, #44]	@ (800337c <HAL_RCC_OscConfig+0x2a8>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003354:	2b00      	cmp	r3, #0
 8003356:	d122      	bne.n	800339e <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003358:	4b08      	ldr	r3, [pc, #32]	@ (800337c <HAL_RCC_OscConfig+0x2a8>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a07      	ldr	r2, [pc, #28]	@ (800337c <HAL_RCC_OscConfig+0x2a8>)
 800335e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003362:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003364:	f7fe fbc6 	bl	8001af4 <HAL_GetTick>
 8003368:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336a:	e012      	b.n	8003392 <HAL_RCC_OscConfig+0x2be>
 800336c:	40023800 	.word	0x40023800
 8003370:	40023802 	.word	0x40023802
 8003374:	42470000 	.word	0x42470000
 8003378:	42470e80 	.word	0x42470e80
 800337c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003380:	f7fe fbb8 	bl	8001af4 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	6a3b      	ldr	r3, [r7, #32]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e0e5      	b.n	800355e <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003392:	4b75      	ldr	r3, [pc, #468]	@ (8003568 <HAL_RCC_OscConfig+0x494>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800339a:	2b00      	cmp	r3, #0
 800339c:	d0f0      	beq.n	8003380 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	689a      	ldr	r2, [r3, #8]
 80033a2:	4b72      	ldr	r3, [pc, #456]	@ (800356c <HAL_RCC_OscConfig+0x498>)
 80033a4:	b2d2      	uxtb	r2, r2
 80033a6:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d015      	beq.n	80033dc <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b0:	f7fe fba0 	bl	8001af4 <HAL_GetTick>
 80033b4:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033b6:	e00a      	b.n	80033ce <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033b8:	f7fe fb9c 	bl	8001af4 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	6a3b      	ldr	r3, [r7, #32]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e0c7      	b.n	800355e <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ce:	4b68      	ldr	r3, [pc, #416]	@ (8003570 <HAL_RCC_OscConfig+0x49c>)
 80033d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0ee      	beq.n	80033b8 <HAL_RCC_OscConfig+0x2e4>
 80033da:	e014      	b.n	8003406 <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033dc:	f7fe fb8a 	bl	8001af4 <HAL_GetTick>
 80033e0:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033e2:	e00a      	b.n	80033fa <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033e4:	f7fe fb86 	bl	8001af4 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	6a3b      	ldr	r3, [r7, #32]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e0b1      	b.n	800355e <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033fa:	4b5d      	ldr	r3, [pc, #372]	@ (8003570 <HAL_RCC_OscConfig+0x49c>)
 80033fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1ee      	bne.n	80033e4 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003406:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800340a:	2b01      	cmp	r3, #1
 800340c:	d105      	bne.n	800341a <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800340e:	4b58      	ldr	r3, [pc, #352]	@ (8003570 <HAL_RCC_OscConfig+0x49c>)
 8003410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003412:	4a57      	ldr	r2, [pc, #348]	@ (8003570 <HAL_RCC_OscConfig+0x49c>)
 8003414:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003418:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	2b00      	cmp	r3, #0
 8003420:	f000 809c 	beq.w	800355c <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003424:	4b52      	ldr	r3, [pc, #328]	@ (8003570 <HAL_RCC_OscConfig+0x49c>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f003 030c 	and.w	r3, r3, #12
 800342c:	2b08      	cmp	r3, #8
 800342e:	d061      	beq.n	80034f4 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	2b02      	cmp	r3, #2
 8003436:	d146      	bne.n	80034c6 <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003438:	4b4e      	ldr	r3, [pc, #312]	@ (8003574 <HAL_RCC_OscConfig+0x4a0>)
 800343a:	2200      	movs	r2, #0
 800343c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800343e:	f7fe fb59 	bl	8001af4 <HAL_GetTick>
 8003442:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003444:	e008      	b.n	8003458 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003446:	f7fe fb55 	bl	8001af4 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	6a3b      	ldr	r3, [r7, #32]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b64      	cmp	r3, #100	@ 0x64
 8003452:	d901      	bls.n	8003458 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e082      	b.n	800355e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003458:	4b45      	ldr	r3, [pc, #276]	@ (8003570 <HAL_RCC_OscConfig+0x49c>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1f0      	bne.n	8003446 <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003464:	4b42      	ldr	r3, [pc, #264]	@ (8003570 <HAL_RCC_OscConfig+0x49c>)
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	4b43      	ldr	r3, [pc, #268]	@ (8003578 <HAL_RCC_OscConfig+0x4a4>)
 800346a:	4013      	ands	r3, r2
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	69d1      	ldr	r1, [r2, #28]
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	6a12      	ldr	r2, [r2, #32]
 8003474:	4311      	orrs	r1, r2
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800347a:	0192      	lsls	r2, r2, #6
 800347c:	4311      	orrs	r1, r2
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003482:	0612      	lsls	r2, r2, #24
 8003484:	4311      	orrs	r1, r2
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800348a:	0852      	lsrs	r2, r2, #1
 800348c:	3a01      	subs	r2, #1
 800348e:	0412      	lsls	r2, r2, #16
 8003490:	430a      	orrs	r2, r1
 8003492:	4937      	ldr	r1, [pc, #220]	@ (8003570 <HAL_RCC_OscConfig+0x49c>)
 8003494:	4313      	orrs	r3, r2
 8003496:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003498:	4b36      	ldr	r3, [pc, #216]	@ (8003574 <HAL_RCC_OscConfig+0x4a0>)
 800349a:	2201      	movs	r2, #1
 800349c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349e:	f7fe fb29 	bl	8001af4 <HAL_GetTick>
 80034a2:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034a4:	e008      	b.n	80034b8 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034a6:	f7fe fb25 	bl	8001af4 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	6a3b      	ldr	r3, [r7, #32]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	2b64      	cmp	r3, #100	@ 0x64
 80034b2:	d901      	bls.n	80034b8 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e052      	b.n	800355e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b8:	4b2d      	ldr	r3, [pc, #180]	@ (8003570 <HAL_RCC_OscConfig+0x49c>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d0f0      	beq.n	80034a6 <HAL_RCC_OscConfig+0x3d2>
 80034c4:	e04a      	b.n	800355c <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034c6:	4b2b      	ldr	r3, [pc, #172]	@ (8003574 <HAL_RCC_OscConfig+0x4a0>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034cc:	f7fe fb12 	bl	8001af4 <HAL_GetTick>
 80034d0:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034d4:	f7fe fb0e 	bl	8001af4 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	6a3b      	ldr	r3, [r7, #32]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b64      	cmp	r3, #100	@ 0x64
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e03b      	b.n	800355e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034e6:	4b22      	ldr	r3, [pc, #136]	@ (8003570 <HAL_RCC_OscConfig+0x49c>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1f0      	bne.n	80034d4 <HAL_RCC_OscConfig+0x400>
 80034f2:	e033      	b.n	800355c <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d101      	bne.n	8003500 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e02e      	b.n	800355e <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8003500:	4b1b      	ldr	r3, [pc, #108]	@ (8003570 <HAL_RCC_OscConfig+0x49c>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	69db      	ldr	r3, [r3, #28]
 8003510:	429a      	cmp	r2, r3
 8003512:	d121      	bne.n	8003558 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800351e:	429a      	cmp	r2, r3
 8003520:	d11a      	bne.n	8003558 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003522:	69fa      	ldr	r2, [r7, #28]
 8003524:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003528:	4013      	ands	r3, r2
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800352e:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003530:	4293      	cmp	r3, r2
 8003532:	d111      	bne.n	8003558 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800353e:	085b      	lsrs	r3, r3, #1
 8003540:	3b01      	subs	r3, #1
 8003542:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003544:	429a      	cmp	r2, r3
 8003546:	d107      	bne.n	8003558 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003552:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003554:	429a      	cmp	r2, r3
 8003556:	d001      	beq.n	800355c <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e000      	b.n	800355e <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3728      	adds	r7, #40	@ 0x28
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	40007000 	.word	0x40007000
 800356c:	40023870 	.word	0x40023870
 8003570:	40023800 	.word	0x40023800
 8003574:	42470060 	.word	0x42470060
 8003578:	f0bc8000 	.word	0xf0bc8000

0800357c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e0d2      	b.n	8003736 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003590:	4b6b      	ldr	r3, [pc, #428]	@ (8003740 <HAL_RCC_ClockConfig+0x1c4>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 030f 	and.w	r3, r3, #15
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	429a      	cmp	r2, r3
 800359c:	d90c      	bls.n	80035b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800359e:	4b68      	ldr	r3, [pc, #416]	@ (8003740 <HAL_RCC_ClockConfig+0x1c4>)
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	b2d2      	uxtb	r2, r2
 80035a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035a6:	4b66      	ldr	r3, [pc, #408]	@ (8003740 <HAL_RCC_ClockConfig+0x1c4>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 030f 	and.w	r3, r3, #15
 80035ae:	683a      	ldr	r2, [r7, #0]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d001      	beq.n	80035b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e0be      	b.n	8003736 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d020      	beq.n	8003606 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0304 	and.w	r3, r3, #4
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d005      	beq.n	80035dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035d0:	4b5c      	ldr	r3, [pc, #368]	@ (8003744 <HAL_RCC_ClockConfig+0x1c8>)
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	4a5b      	ldr	r2, [pc, #364]	@ (8003744 <HAL_RCC_ClockConfig+0x1c8>)
 80035d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80035da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0308 	and.w	r3, r3, #8
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d005      	beq.n	80035f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 80035e8:	4b56      	ldr	r3, [pc, #344]	@ (8003744 <HAL_RCC_ClockConfig+0x1c8>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	4a55      	ldr	r2, [pc, #340]	@ (8003744 <HAL_RCC_ClockConfig+0x1c8>)
 80035ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80035f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035f4:	4b53      	ldr	r3, [pc, #332]	@ (8003744 <HAL_RCC_ClockConfig+0x1c8>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	4950      	ldr	r1, [pc, #320]	@ (8003744 <HAL_RCC_ClockConfig+0x1c8>)
 8003602:	4313      	orrs	r3, r2
 8003604:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b00      	cmp	r3, #0
 8003610:	d040      	beq.n	8003694 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d107      	bne.n	800362a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800361a:	4b4a      	ldr	r3, [pc, #296]	@ (8003744 <HAL_RCC_ClockConfig+0x1c8>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d115      	bne.n	8003652 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e085      	b.n	8003736 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	2b02      	cmp	r3, #2
 8003630:	d107      	bne.n	8003642 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003632:	4b44      	ldr	r3, [pc, #272]	@ (8003744 <HAL_RCC_ClockConfig+0x1c8>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d109      	bne.n	8003652 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e079      	b.n	8003736 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003642:	4b40      	ldr	r3, [pc, #256]	@ (8003744 <HAL_RCC_ClockConfig+0x1c8>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e071      	b.n	8003736 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003652:	4b3c      	ldr	r3, [pc, #240]	@ (8003744 <HAL_RCC_ClockConfig+0x1c8>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f023 0203 	bic.w	r2, r3, #3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	4939      	ldr	r1, [pc, #228]	@ (8003744 <HAL_RCC_ClockConfig+0x1c8>)
 8003660:	4313      	orrs	r3, r2
 8003662:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003664:	f7fe fa46 	bl	8001af4 <HAL_GetTick>
 8003668:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800366a:	e00a      	b.n	8003682 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800366c:	f7fe fa42 	bl	8001af4 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	f241 3288 	movw	r2, #5000	@ 0x1388
 800367a:	4293      	cmp	r3, r2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e059      	b.n	8003736 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003682:	4b30      	ldr	r3, [pc, #192]	@ (8003744 <HAL_RCC_ClockConfig+0x1c8>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f003 020c 	and.w	r2, r3, #12
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	429a      	cmp	r2, r3
 8003692:	d1eb      	bne.n	800366c <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003694:	4b2a      	ldr	r3, [pc, #168]	@ (8003740 <HAL_RCC_ClockConfig+0x1c4>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 030f 	and.w	r3, r3, #15
 800369c:	683a      	ldr	r2, [r7, #0]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d20c      	bcs.n	80036bc <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036a2:	4b27      	ldr	r3, [pc, #156]	@ (8003740 <HAL_RCC_ClockConfig+0x1c4>)
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	b2d2      	uxtb	r2, r2
 80036a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036aa:	4b25      	ldr	r3, [pc, #148]	@ (8003740 <HAL_RCC_ClockConfig+0x1c4>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 030f 	and.w	r3, r3, #15
 80036b2:	683a      	ldr	r2, [r7, #0]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d001      	beq.n	80036bc <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e03c      	b.n	8003736 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0304 	and.w	r3, r3, #4
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d008      	beq.n	80036da <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036c8:	4b1e      	ldr	r3, [pc, #120]	@ (8003744 <HAL_RCC_ClockConfig+0x1c8>)
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	491b      	ldr	r1, [pc, #108]	@ (8003744 <HAL_RCC_ClockConfig+0x1c8>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0308 	and.w	r3, r3, #8
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d009      	beq.n	80036fa <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036e6:	4b17      	ldr	r3, [pc, #92]	@ (8003744 <HAL_RCC_ClockConfig+0x1c8>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	4913      	ldr	r1, [pc, #76]	@ (8003744 <HAL_RCC_ClockConfig+0x1c8>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80036fa:	f000 f82b 	bl	8003754 <HAL_RCC_GetSysClockFreq>
 80036fe:	4601      	mov	r1, r0
 8003700:	4b10      	ldr	r3, [pc, #64]	@ (8003744 <HAL_RCC_ClockConfig+0x1c8>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003708:	22f0      	movs	r2, #240	@ 0xf0
 800370a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	fa92 f2a2 	rbit	r2, r2
 8003712:	60fa      	str	r2, [r7, #12]
  return result;
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	fab2 f282 	clz	r2, r2
 800371a:	b2d2      	uxtb	r2, r2
 800371c:	40d3      	lsrs	r3, r2
 800371e:	4a0a      	ldr	r2, [pc, #40]	@ (8003748 <HAL_RCC_ClockConfig+0x1cc>)
 8003720:	5cd3      	ldrb	r3, [r2, r3]
 8003722:	fa21 f303 	lsr.w	r3, r1, r3
 8003726:	4a09      	ldr	r2, [pc, #36]	@ (800374c <HAL_RCC_ClockConfig+0x1d0>)
 8003728:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800372a:	4b09      	ldr	r3, [pc, #36]	@ (8003750 <HAL_RCC_ClockConfig+0x1d4>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4618      	mov	r0, r3
 8003730:	f7fe f99e 	bl	8001a70 <HAL_InitTick>

  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3718      	adds	r7, #24
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	40023c00 	.word	0x40023c00
 8003744:	40023800 	.word	0x40023800
 8003748:	08004870 	.word	0x08004870
 800374c:	20000000 	.word	0x20000000
 8003750:	20000004 	.word	0x20000004

08003754 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003758:	b090      	sub	sp, #64	@ 0x40
 800375a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800375c:	2300      	movs	r3, #0
 800375e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003760:	2300      	movs	r3, #0
 8003762:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003764:	2300      	movs	r3, #0
 8003766:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003768:	2300      	movs	r3, #0
 800376a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800376c:	4b59      	ldr	r3, [pc, #356]	@ (80038d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f003 030c 	and.w	r3, r3, #12
 8003774:	2b08      	cmp	r3, #8
 8003776:	d00d      	beq.n	8003794 <HAL_RCC_GetSysClockFreq+0x40>
 8003778:	2b08      	cmp	r3, #8
 800377a:	f200 80a2 	bhi.w	80038c2 <HAL_RCC_GetSysClockFreq+0x16e>
 800377e:	2b00      	cmp	r3, #0
 8003780:	d002      	beq.n	8003788 <HAL_RCC_GetSysClockFreq+0x34>
 8003782:	2b04      	cmp	r3, #4
 8003784:	d003      	beq.n	800378e <HAL_RCC_GetSysClockFreq+0x3a>
 8003786:	e09c      	b.n	80038c2 <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003788:	4b53      	ldr	r3, [pc, #332]	@ (80038d8 <HAL_RCC_GetSysClockFreq+0x184>)
 800378a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800378c:	e09c      	b.n	80038c8 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800378e:	4b53      	ldr	r3, [pc, #332]	@ (80038dc <HAL_RCC_GetSysClockFreq+0x188>)
 8003790:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003792:	e099      	b.n	80038c8 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003794:	4b4f      	ldr	r3, [pc, #316]	@ (80038d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800379c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800379e:	4b4d      	ldr	r3, [pc, #308]	@ (80038d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d027      	beq.n	80037fa <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037aa:	4b4a      	ldr	r3, [pc, #296]	@ (80038d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	099b      	lsrs	r3, r3, #6
 80037b0:	2200      	movs	r2, #0
 80037b2:	623b      	str	r3, [r7, #32]
 80037b4:	627a      	str	r2, [r7, #36]	@ 0x24
 80037b6:	6a3b      	ldr	r3, [r7, #32]
 80037b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80037bc:	2100      	movs	r1, #0
 80037be:	4b47      	ldr	r3, [pc, #284]	@ (80038dc <HAL_RCC_GetSysClockFreq+0x188>)
 80037c0:	fb03 f201 	mul.w	r2, r3, r1
 80037c4:	2300      	movs	r3, #0
 80037c6:	fb00 f303 	mul.w	r3, r0, r3
 80037ca:	4413      	add	r3, r2
 80037cc:	4a43      	ldr	r2, [pc, #268]	@ (80038dc <HAL_RCC_GetSysClockFreq+0x188>)
 80037ce:	fba0 2102 	umull	r2, r1, r0, r2
 80037d2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80037d4:	62ba      	str	r2, [r7, #40]	@ 0x28
 80037d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037d8:	4413      	add	r3, r2
 80037da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037de:	2200      	movs	r2, #0
 80037e0:	61bb      	str	r3, [r7, #24]
 80037e2:	61fa      	str	r2, [r7, #28]
 80037e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037e8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80037ec:	f7fd f87a 	bl	80008e4 <__aeabi_uldivmod>
 80037f0:	4602      	mov	r2, r0
 80037f2:	460b      	mov	r3, r1
 80037f4:	4613      	mov	r3, r2
 80037f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037f8:	e055      	b.n	80038a6 <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037fa:	4b36      	ldr	r3, [pc, #216]	@ (80038d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	099b      	lsrs	r3, r3, #6
 8003800:	2200      	movs	r2, #0
 8003802:	613b      	str	r3, [r7, #16]
 8003804:	617a      	str	r2, [r7, #20]
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800380c:	f04f 0b00 	mov.w	fp, #0
 8003810:	4652      	mov	r2, sl
 8003812:	465b      	mov	r3, fp
 8003814:	f04f 0000 	mov.w	r0, #0
 8003818:	f04f 0100 	mov.w	r1, #0
 800381c:	0159      	lsls	r1, r3, #5
 800381e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003822:	0150      	lsls	r0, r2, #5
 8003824:	4602      	mov	r2, r0
 8003826:	460b      	mov	r3, r1
 8003828:	ebb2 080a 	subs.w	r8, r2, sl
 800382c:	eb63 090b 	sbc.w	r9, r3, fp
 8003830:	f04f 0200 	mov.w	r2, #0
 8003834:	f04f 0300 	mov.w	r3, #0
 8003838:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800383c:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003840:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003844:	ebb2 0408 	subs.w	r4, r2, r8
 8003848:	eb63 0509 	sbc.w	r5, r3, r9
 800384c:	f04f 0200 	mov.w	r2, #0
 8003850:	f04f 0300 	mov.w	r3, #0
 8003854:	00eb      	lsls	r3, r5, #3
 8003856:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800385a:	00e2      	lsls	r2, r4, #3
 800385c:	4614      	mov	r4, r2
 800385e:	461d      	mov	r5, r3
 8003860:	eb14 030a 	adds.w	r3, r4, sl
 8003864:	603b      	str	r3, [r7, #0]
 8003866:	eb45 030b 	adc.w	r3, r5, fp
 800386a:	607b      	str	r3, [r7, #4]
 800386c:	f04f 0200 	mov.w	r2, #0
 8003870:	f04f 0300 	mov.w	r3, #0
 8003874:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003878:	4629      	mov	r1, r5
 800387a:	028b      	lsls	r3, r1, #10
 800387c:	4620      	mov	r0, r4
 800387e:	4629      	mov	r1, r5
 8003880:	4604      	mov	r4, r0
 8003882:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003886:	4601      	mov	r1, r0
 8003888:	028a      	lsls	r2, r1, #10
 800388a:	4610      	mov	r0, r2
 800388c:	4619      	mov	r1, r3
 800388e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003890:	2200      	movs	r2, #0
 8003892:	60bb      	str	r3, [r7, #8]
 8003894:	60fa      	str	r2, [r7, #12]
 8003896:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800389a:	f7fd f823 	bl	80008e4 <__aeabi_uldivmod>
 800389e:	4602      	mov	r2, r0
 80038a0:	460b      	mov	r3, r1
 80038a2:	4613      	mov	r3, r2
 80038a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038a6:	4b0b      	ldr	r3, [pc, #44]	@ (80038d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	0c1b      	lsrs	r3, r3, #16
 80038ac:	f003 0303 	and.w	r3, r3, #3
 80038b0:	3301      	adds	r3, #1
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80038b6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80038b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80038be:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80038c0:	e002      	b.n	80038c8 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038c2:	4b05      	ldr	r3, [pc, #20]	@ (80038d8 <HAL_RCC_GetSysClockFreq+0x184>)
 80038c4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80038c6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3740      	adds	r7, #64	@ 0x40
 80038ce:	46bd      	mov	sp, r7
 80038d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038d4:	40023800 	.word	0x40023800
 80038d8:	00f42400 	.word	0x00f42400
 80038dc:	017d7840 	.word	0x017d7840

080038e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e041      	b.n	8003976 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d106      	bne.n	800390c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7fd ff40 	bl	800178c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2202      	movs	r2, #2
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	3304      	adds	r3, #4
 800391c:	4619      	mov	r1, r3
 800391e:	4610      	mov	r0, r2
 8003920:	f000 fc22 	bl	8004168 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
	...

08003980 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d109      	bne.n	80039a4 <HAL_TIM_PWM_Start+0x24>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b01      	cmp	r3, #1
 800399a:	bf14      	ite	ne
 800399c:	2301      	movne	r3, #1
 800399e:	2300      	moveq	r3, #0
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	e022      	b.n	80039ea <HAL_TIM_PWM_Start+0x6a>
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	2b04      	cmp	r3, #4
 80039a8:	d109      	bne.n	80039be <HAL_TIM_PWM_Start+0x3e>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	bf14      	ite	ne
 80039b6:	2301      	movne	r3, #1
 80039b8:	2300      	moveq	r3, #0
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	e015      	b.n	80039ea <HAL_TIM_PWM_Start+0x6a>
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	d109      	bne.n	80039d8 <HAL_TIM_PWM_Start+0x58>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	bf14      	ite	ne
 80039d0:	2301      	movne	r3, #1
 80039d2:	2300      	moveq	r3, #0
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	e008      	b.n	80039ea <HAL_TIM_PWM_Start+0x6a>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	bf14      	ite	ne
 80039e4:	2301      	movne	r3, #1
 80039e6:	2300      	moveq	r3, #0
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e07c      	b.n	8003aec <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d104      	bne.n	8003a02 <HAL_TIM_PWM_Start+0x82>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2202      	movs	r2, #2
 80039fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a00:	e013      	b.n	8003a2a <HAL_TIM_PWM_Start+0xaa>
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	2b04      	cmp	r3, #4
 8003a06:	d104      	bne.n	8003a12 <HAL_TIM_PWM_Start+0x92>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a10:	e00b      	b.n	8003a2a <HAL_TIM_PWM_Start+0xaa>
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	2b08      	cmp	r3, #8
 8003a16:	d104      	bne.n	8003a22 <HAL_TIM_PWM_Start+0xa2>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a20:	e003      	b.n	8003a2a <HAL_TIM_PWM_Start+0xaa>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2202      	movs	r2, #2
 8003a26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	6839      	ldr	r1, [r7, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f000 fde2 	bl	80045fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a2d      	ldr	r2, [pc, #180]	@ (8003af4 <HAL_TIM_PWM_Start+0x174>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d004      	beq.n	8003a4c <HAL_TIM_PWM_Start+0xcc>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a2c      	ldr	r2, [pc, #176]	@ (8003af8 <HAL_TIM_PWM_Start+0x178>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d101      	bne.n	8003a50 <HAL_TIM_PWM_Start+0xd0>
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e000      	b.n	8003a52 <HAL_TIM_PWM_Start+0xd2>
 8003a50:	2300      	movs	r3, #0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d007      	beq.n	8003a66 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a64:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a22      	ldr	r2, [pc, #136]	@ (8003af4 <HAL_TIM_PWM_Start+0x174>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d022      	beq.n	8003ab6 <HAL_TIM_PWM_Start+0x136>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a78:	d01d      	beq.n	8003ab6 <HAL_TIM_PWM_Start+0x136>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a1f      	ldr	r2, [pc, #124]	@ (8003afc <HAL_TIM_PWM_Start+0x17c>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d018      	beq.n	8003ab6 <HAL_TIM_PWM_Start+0x136>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a1d      	ldr	r2, [pc, #116]	@ (8003b00 <HAL_TIM_PWM_Start+0x180>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d013      	beq.n	8003ab6 <HAL_TIM_PWM_Start+0x136>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a1c      	ldr	r2, [pc, #112]	@ (8003b04 <HAL_TIM_PWM_Start+0x184>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d00e      	beq.n	8003ab6 <HAL_TIM_PWM_Start+0x136>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a16      	ldr	r2, [pc, #88]	@ (8003af8 <HAL_TIM_PWM_Start+0x178>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d009      	beq.n	8003ab6 <HAL_TIM_PWM_Start+0x136>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a18      	ldr	r2, [pc, #96]	@ (8003b08 <HAL_TIM_PWM_Start+0x188>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d004      	beq.n	8003ab6 <HAL_TIM_PWM_Start+0x136>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a16      	ldr	r2, [pc, #88]	@ (8003b0c <HAL_TIM_PWM_Start+0x18c>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d111      	bne.n	8003ada <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f003 0307 	and.w	r3, r3, #7
 8003ac0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2b06      	cmp	r3, #6
 8003ac6:	d010      	beq.n	8003aea <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f042 0201 	orr.w	r2, r2, #1
 8003ad6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ad8:	e007      	b.n	8003aea <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f042 0201 	orr.w	r2, r2, #1
 8003ae8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	40010000 	.word	0x40010000
 8003af8:	40010400 	.word	0x40010400
 8003afc:	40000400 	.word	0x40000400
 8003b00:	40000800 	.word	0x40000800
 8003b04:	40000c00 	.word	0x40000c00
 8003b08:	40014000 	.word	0x40014000
 8003b0c:	40001800 	.word	0x40001800

08003b10 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e097      	b.n	8003c54 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d106      	bne.n	8003b3e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f7fd fe4f 	bl	80017dc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2202      	movs	r2, #2
 8003b42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	6812      	ldr	r2, [r2, #0]
 8003b50:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b54:	f023 0307 	bic.w	r3, r3, #7
 8003b58:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	3304      	adds	r3, #4
 8003b62:	4619      	mov	r1, r3
 8003b64:	4610      	mov	r0, r2
 8003b66:	f000 faff 	bl	8004168 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b92:	f023 0303 	bic.w	r3, r3, #3
 8003b96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	689a      	ldr	r2, [r3, #8]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	021b      	lsls	r3, r3, #8
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003bb0:	f023 030c 	bic.w	r3, r3, #12
 8003bb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003bbc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003bc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	68da      	ldr	r2, [r3, #12]
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	021b      	lsls	r3, r3, #8
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	011a      	lsls	r2, r3, #4
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	031b      	lsls	r3, r3, #12
 8003be0:	4313      	orrs	r3, r2
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003bee:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003bf6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	685a      	ldr	r2, [r3, #4]
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	695b      	ldr	r3, [r3, #20]
 8003c00:	011b      	lsls	r3, r3, #4
 8003c02:	4313      	orrs	r3, r2
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3718      	adds	r7, #24
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c6c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003c74:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c7c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003c84:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d110      	bne.n	8003cae <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c8c:	7bfb      	ldrb	r3, [r7, #15]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d102      	bne.n	8003c98 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c92:	7b7b      	ldrb	r3, [r7, #13]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d001      	beq.n	8003c9c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e069      	b.n	8003d70 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2202      	movs	r2, #2
 8003ca8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003cac:	e031      	b.n	8003d12 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	2b04      	cmp	r3, #4
 8003cb2:	d110      	bne.n	8003cd6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003cb4:	7bbb      	ldrb	r3, [r7, #14]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d102      	bne.n	8003cc0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003cba:	7b3b      	ldrb	r3, [r7, #12]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d001      	beq.n	8003cc4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e055      	b.n	8003d70 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2202      	movs	r2, #2
 8003cd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003cd4:	e01d      	b.n	8003d12 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003cd6:	7bfb      	ldrb	r3, [r7, #15]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d108      	bne.n	8003cee <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003cdc:	7bbb      	ldrb	r3, [r7, #14]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d105      	bne.n	8003cee <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ce2:	7b7b      	ldrb	r3, [r7, #13]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d102      	bne.n	8003cee <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ce8:	7b3b      	ldrb	r3, [r7, #12]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d001      	beq.n	8003cf2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e03e      	b.n	8003d70 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2202      	movs	r2, #2
 8003cf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2202      	movs	r2, #2
 8003cfe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2202      	movs	r2, #2
 8003d06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2202      	movs	r2, #2
 8003d0e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d003      	beq.n	8003d20 <HAL_TIM_Encoder_Start+0xc4>
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	2b04      	cmp	r3, #4
 8003d1c:	d008      	beq.n	8003d30 <HAL_TIM_Encoder_Start+0xd4>
 8003d1e:	e00f      	b.n	8003d40 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2201      	movs	r2, #1
 8003d26:	2100      	movs	r1, #0
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f000 fc67 	bl	80045fc <TIM_CCxChannelCmd>
      break;
 8003d2e:	e016      	b.n	8003d5e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2201      	movs	r2, #1
 8003d36:	2104      	movs	r1, #4
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f000 fc5f 	bl	80045fc <TIM_CCxChannelCmd>
      break;
 8003d3e:	e00e      	b.n	8003d5e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2201      	movs	r2, #1
 8003d46:	2100      	movs	r1, #0
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f000 fc57 	bl	80045fc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2201      	movs	r2, #1
 8003d54:	2104      	movs	r1, #4
 8003d56:	4618      	mov	r0, r3
 8003d58:	f000 fc50 	bl	80045fc <TIM_CCxChannelCmd>
      break;
 8003d5c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f042 0201 	orr.w	r2, r2, #1
 8003d6c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d122      	bne.n	8003dd4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d11b      	bne.n	8003dd4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f06f 0202 	mvn.w	r2, #2
 8003da4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	f003 0303 	and.w	r3, r3, #3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d003      	beq.n	8003dc2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 f9b8 	bl	8004130 <HAL_TIM_IC_CaptureCallback>
 8003dc0:	e005      	b.n	8003dce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f9ab 	bl	800411e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 f9ba 	bl	8004142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	f003 0304 	and.w	r3, r3, #4
 8003dde:	2b04      	cmp	r3, #4
 8003de0:	d122      	bne.n	8003e28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	f003 0304 	and.w	r3, r3, #4
 8003dec:	2b04      	cmp	r3, #4
 8003dee:	d11b      	bne.n	8003e28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f06f 0204 	mvn.w	r2, #4
 8003df8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2202      	movs	r2, #2
 8003dfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d003      	beq.n	8003e16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f98e 	bl	8004130 <HAL_TIM_IC_CaptureCallback>
 8003e14:	e005      	b.n	8003e22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f981 	bl	800411e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 f990 	bl	8004142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	f003 0308 	and.w	r3, r3, #8
 8003e32:	2b08      	cmp	r3, #8
 8003e34:	d122      	bne.n	8003e7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	f003 0308 	and.w	r3, r3, #8
 8003e40:	2b08      	cmp	r3, #8
 8003e42:	d11b      	bne.n	8003e7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f06f 0208 	mvn.w	r2, #8
 8003e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2204      	movs	r2, #4
 8003e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	69db      	ldr	r3, [r3, #28]
 8003e5a:	f003 0303 	and.w	r3, r3, #3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d003      	beq.n	8003e6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 f964 	bl	8004130 <HAL_TIM_IC_CaptureCallback>
 8003e68:	e005      	b.n	8003e76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f957 	bl	800411e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 f966 	bl	8004142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	f003 0310 	and.w	r3, r3, #16
 8003e86:	2b10      	cmp	r3, #16
 8003e88:	d122      	bne.n	8003ed0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	f003 0310 	and.w	r3, r3, #16
 8003e94:	2b10      	cmp	r3, #16
 8003e96:	d11b      	bne.n	8003ed0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f06f 0210 	mvn.w	r2, #16
 8003ea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2208      	movs	r2, #8
 8003ea6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d003      	beq.n	8003ebe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f93a 	bl	8004130 <HAL_TIM_IC_CaptureCallback>
 8003ebc:	e005      	b.n	8003eca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f92d 	bl	800411e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 f93c 	bl	8004142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d10e      	bne.n	8003efc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d107      	bne.n	8003efc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f06f 0201 	mvn.w	r2, #1
 8003ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f908 	bl	800410c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f06:	2b80      	cmp	r3, #128	@ 0x80
 8003f08:	d10e      	bne.n	8003f28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f14:	2b80      	cmp	r3, #128	@ 0x80
 8003f16:	d107      	bne.n	8003f28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 fc62 	bl	80047ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f32:	2b40      	cmp	r3, #64	@ 0x40
 8003f34:	d10e      	bne.n	8003f54 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f40:	2b40      	cmp	r3, #64	@ 0x40
 8003f42:	d107      	bne.n	8003f54 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f900 	bl	8004154 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	f003 0320 	and.w	r3, r3, #32
 8003f5e:	2b20      	cmp	r3, #32
 8003f60:	d10e      	bne.n	8003f80 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	f003 0320 	and.w	r3, r3, #32
 8003f6c:	2b20      	cmp	r3, #32
 8003f6e:	d107      	bne.n	8003f80 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f06f 0220 	mvn.w	r2, #32
 8003f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 fc2d 	bl	80047da <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f80:	bf00      	nop
 8003f82:	3708      	adds	r7, #8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f94:	2300      	movs	r3, #0
 8003f96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d101      	bne.n	8003fa6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	e0ae      	b.n	8004104 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b0c      	cmp	r3, #12
 8003fb2:	f200 809f 	bhi.w	80040f4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003fb6:	a201      	add	r2, pc, #4	@ (adr r2, 8003fbc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fbc:	08003ff1 	.word	0x08003ff1
 8003fc0:	080040f5 	.word	0x080040f5
 8003fc4:	080040f5 	.word	0x080040f5
 8003fc8:	080040f5 	.word	0x080040f5
 8003fcc:	08004031 	.word	0x08004031
 8003fd0:	080040f5 	.word	0x080040f5
 8003fd4:	080040f5 	.word	0x080040f5
 8003fd8:	080040f5 	.word	0x080040f5
 8003fdc:	08004073 	.word	0x08004073
 8003fe0:	080040f5 	.word	0x080040f5
 8003fe4:	080040f5 	.word	0x080040f5
 8003fe8:	080040f5 	.word	0x080040f5
 8003fec:	080040b3 	.word	0x080040b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68b9      	ldr	r1, [r7, #8]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 f954 	bl	80042a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	699a      	ldr	r2, [r3, #24]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0208 	orr.w	r2, r2, #8
 800400a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	699a      	ldr	r2, [r3, #24]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f022 0204 	bic.w	r2, r2, #4
 800401a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6999      	ldr	r1, [r3, #24]
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	691a      	ldr	r2, [r3, #16]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	430a      	orrs	r2, r1
 800402c:	619a      	str	r2, [r3, #24]
      break;
 800402e:	e064      	b.n	80040fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68b9      	ldr	r1, [r7, #8]
 8004036:	4618      	mov	r0, r3
 8004038:	f000 f9a4 	bl	8004384 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	699a      	ldr	r2, [r3, #24]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800404a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	699a      	ldr	r2, [r3, #24]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800405a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6999      	ldr	r1, [r3, #24]
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	021a      	lsls	r2, r3, #8
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	619a      	str	r2, [r3, #24]
      break;
 8004070:	e043      	b.n	80040fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68b9      	ldr	r1, [r7, #8]
 8004078:	4618      	mov	r0, r3
 800407a:	f000 f9f7 	bl	800446c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	69da      	ldr	r2, [r3, #28]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f042 0208 	orr.w	r2, r2, #8
 800408c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	69da      	ldr	r2, [r3, #28]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f022 0204 	bic.w	r2, r2, #4
 800409c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	69d9      	ldr	r1, [r3, #28]
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	691a      	ldr	r2, [r3, #16]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	430a      	orrs	r2, r1
 80040ae:	61da      	str	r2, [r3, #28]
      break;
 80040b0:	e023      	b.n	80040fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68b9      	ldr	r1, [r7, #8]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f000 fa4b 	bl	8004554 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	69da      	ldr	r2, [r3, #28]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	69da      	ldr	r2, [r3, #28]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	69d9      	ldr	r1, [r3, #28]
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	021a      	lsls	r2, r3, #8
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	61da      	str	r2, [r3, #28]
      break;
 80040f2:	e002      	b.n	80040fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	75fb      	strb	r3, [r7, #23]
      break;
 80040f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004102:	7dfb      	ldrb	r3, [r7, #23]
}
 8004104:	4618      	mov	r0, r3
 8004106:	3718      	adds	r7, #24
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	bc80      	pop	{r7}
 800411c:	4770      	bx	lr

0800411e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800411e:	b480      	push	{r7}
 8004120:	b083      	sub	sp, #12
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004126:	bf00      	nop
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	bc80      	pop	{r7}
 800412e:	4770      	bx	lr

08004130 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	bc80      	pop	{r7}
 8004140:	4770      	bx	lr

08004142 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800414a:	bf00      	nop
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	bc80      	pop	{r7}
 8004152:	4770      	bx	lr

08004154 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	bc80      	pop	{r7}
 8004164:	4770      	bx	lr
	...

08004168 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a3f      	ldr	r2, [pc, #252]	@ (8004278 <TIM_Base_SetConfig+0x110>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d013      	beq.n	80041a8 <TIM_Base_SetConfig+0x40>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004186:	d00f      	beq.n	80041a8 <TIM_Base_SetConfig+0x40>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a3c      	ldr	r2, [pc, #240]	@ (800427c <TIM_Base_SetConfig+0x114>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d00b      	beq.n	80041a8 <TIM_Base_SetConfig+0x40>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a3b      	ldr	r2, [pc, #236]	@ (8004280 <TIM_Base_SetConfig+0x118>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d007      	beq.n	80041a8 <TIM_Base_SetConfig+0x40>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a3a      	ldr	r2, [pc, #232]	@ (8004284 <TIM_Base_SetConfig+0x11c>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d003      	beq.n	80041a8 <TIM_Base_SetConfig+0x40>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a39      	ldr	r2, [pc, #228]	@ (8004288 <TIM_Base_SetConfig+0x120>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d108      	bne.n	80041ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a2e      	ldr	r2, [pc, #184]	@ (8004278 <TIM_Base_SetConfig+0x110>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d02b      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041c8:	d027      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a2b      	ldr	r2, [pc, #172]	@ (800427c <TIM_Base_SetConfig+0x114>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d023      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a2a      	ldr	r2, [pc, #168]	@ (8004280 <TIM_Base_SetConfig+0x118>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d01f      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a29      	ldr	r2, [pc, #164]	@ (8004284 <TIM_Base_SetConfig+0x11c>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d01b      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a28      	ldr	r2, [pc, #160]	@ (8004288 <TIM_Base_SetConfig+0x120>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d017      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a27      	ldr	r2, [pc, #156]	@ (800428c <TIM_Base_SetConfig+0x124>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d013      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a26      	ldr	r2, [pc, #152]	@ (8004290 <TIM_Base_SetConfig+0x128>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d00f      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a25      	ldr	r2, [pc, #148]	@ (8004294 <TIM_Base_SetConfig+0x12c>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d00b      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a24      	ldr	r2, [pc, #144]	@ (8004298 <TIM_Base_SetConfig+0x130>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d007      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a23      	ldr	r2, [pc, #140]	@ (800429c <TIM_Base_SetConfig+0x134>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d003      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a22      	ldr	r2, [pc, #136]	@ (80042a0 <TIM_Base_SetConfig+0x138>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d108      	bne.n	800422c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004220:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	4313      	orrs	r3, r2
 800422a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	4313      	orrs	r3, r2
 8004238:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	689a      	ldr	r2, [r3, #8]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a09      	ldr	r2, [pc, #36]	@ (8004278 <TIM_Base_SetConfig+0x110>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d003      	beq.n	8004260 <TIM_Base_SetConfig+0xf8>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a0b      	ldr	r2, [pc, #44]	@ (8004288 <TIM_Base_SetConfig+0x120>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d103      	bne.n	8004268 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	691a      	ldr	r2, [r3, #16]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	615a      	str	r2, [r3, #20]
}
 800426e:	bf00      	nop
 8004270:	3714      	adds	r7, #20
 8004272:	46bd      	mov	sp, r7
 8004274:	bc80      	pop	{r7}
 8004276:	4770      	bx	lr
 8004278:	40010000 	.word	0x40010000
 800427c:	40000400 	.word	0x40000400
 8004280:	40000800 	.word	0x40000800
 8004284:	40000c00 	.word	0x40000c00
 8004288:	40010400 	.word	0x40010400
 800428c:	40014000 	.word	0x40014000
 8004290:	40014400 	.word	0x40014400
 8004294:	40014800 	.word	0x40014800
 8004298:	40001800 	.word	0x40001800
 800429c:	40001c00 	.word	0x40001c00
 80042a0:	40002000 	.word	0x40002000

080042a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b087      	sub	sp, #28
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a1b      	ldr	r3, [r3, #32]
 80042b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	f023 0201 	bic.w	r2, r3, #1
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f023 0303 	bic.w	r3, r3, #3
 80042da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f023 0302 	bic.w	r3, r3, #2
 80042ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a20      	ldr	r2, [pc, #128]	@ (800437c <TIM_OC1_SetConfig+0xd8>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d003      	beq.n	8004308 <TIM_OC1_SetConfig+0x64>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a1f      	ldr	r2, [pc, #124]	@ (8004380 <TIM_OC1_SetConfig+0xdc>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d10c      	bne.n	8004322 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	f023 0308 	bic.w	r3, r3, #8
 800430e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	4313      	orrs	r3, r2
 8004318:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f023 0304 	bic.w	r3, r3, #4
 8004320:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a15      	ldr	r2, [pc, #84]	@ (800437c <TIM_OC1_SetConfig+0xd8>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d003      	beq.n	8004332 <TIM_OC1_SetConfig+0x8e>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a14      	ldr	r2, [pc, #80]	@ (8004380 <TIM_OC1_SetConfig+0xdc>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d111      	bne.n	8004356 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004338:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004340:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	4313      	orrs	r3, r2
 800434a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	4313      	orrs	r3, r2
 8004354:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	685a      	ldr	r2, [r3, #4]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	621a      	str	r2, [r3, #32]
}
 8004370:	bf00      	nop
 8004372:	371c      	adds	r7, #28
 8004374:	46bd      	mov	sp, r7
 8004376:	bc80      	pop	{r7}
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	40010000 	.word	0x40010000
 8004380:	40010400 	.word	0x40010400

08004384 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004384:	b480      	push	{r7}
 8004386:	b087      	sub	sp, #28
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a1b      	ldr	r3, [r3, #32]
 8004398:	f023 0210 	bic.w	r2, r3, #16
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	021b      	lsls	r3, r3, #8
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	f023 0320 	bic.w	r3, r3, #32
 80043ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	011b      	lsls	r3, r3, #4
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	4313      	orrs	r3, r2
 80043da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a21      	ldr	r2, [pc, #132]	@ (8004464 <TIM_OC2_SetConfig+0xe0>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d003      	beq.n	80043ec <TIM_OC2_SetConfig+0x68>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a20      	ldr	r2, [pc, #128]	@ (8004468 <TIM_OC2_SetConfig+0xe4>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d10d      	bne.n	8004408 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	011b      	lsls	r3, r3, #4
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004406:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a16      	ldr	r2, [pc, #88]	@ (8004464 <TIM_OC2_SetConfig+0xe0>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d003      	beq.n	8004418 <TIM_OC2_SetConfig+0x94>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a15      	ldr	r2, [pc, #84]	@ (8004468 <TIM_OC2_SetConfig+0xe4>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d113      	bne.n	8004440 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800441e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004426:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	695b      	ldr	r3, [r3, #20]
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	4313      	orrs	r3, r2
 8004432:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	4313      	orrs	r3, r2
 800443e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	685a      	ldr	r2, [r3, #4]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	621a      	str	r2, [r3, #32]
}
 800445a:	bf00      	nop
 800445c:	371c      	adds	r7, #28
 800445e:	46bd      	mov	sp, r7
 8004460:	bc80      	pop	{r7}
 8004462:	4770      	bx	lr
 8004464:	40010000 	.word	0x40010000
 8004468:	40010400 	.word	0x40010400

0800446c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800446c:	b480      	push	{r7}
 800446e:	b087      	sub	sp, #28
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a1b      	ldr	r3, [r3, #32]
 8004480:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	69db      	ldr	r3, [r3, #28]
 8004492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800449a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f023 0303 	bic.w	r3, r3, #3
 80044a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80044b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	021b      	lsls	r3, r3, #8
 80044bc:	697a      	ldr	r2, [r7, #20]
 80044be:	4313      	orrs	r3, r2
 80044c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a21      	ldr	r2, [pc, #132]	@ (800454c <TIM_OC3_SetConfig+0xe0>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d003      	beq.n	80044d2 <TIM_OC3_SetConfig+0x66>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a20      	ldr	r2, [pc, #128]	@ (8004550 <TIM_OC3_SetConfig+0xe4>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d10d      	bne.n	80044ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80044d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	021b      	lsls	r3, r3, #8
 80044e0:	697a      	ldr	r2, [r7, #20]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80044ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a16      	ldr	r2, [pc, #88]	@ (800454c <TIM_OC3_SetConfig+0xe0>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d003      	beq.n	80044fe <TIM_OC3_SetConfig+0x92>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a15      	ldr	r2, [pc, #84]	@ (8004550 <TIM_OC3_SetConfig+0xe4>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d113      	bne.n	8004526 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004504:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800450c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	011b      	lsls	r3, r3, #4
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	4313      	orrs	r3, r2
 8004518:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	011b      	lsls	r3, r3, #4
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	4313      	orrs	r3, r2
 8004524:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	685a      	ldr	r2, [r3, #4]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	621a      	str	r2, [r3, #32]
}
 8004540:	bf00      	nop
 8004542:	371c      	adds	r7, #28
 8004544:	46bd      	mov	sp, r7
 8004546:	bc80      	pop	{r7}
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	40010000 	.word	0x40010000
 8004550:	40010400 	.word	0x40010400

08004554 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004554:	b480      	push	{r7}
 8004556:	b087      	sub	sp, #28
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	69db      	ldr	r3, [r3, #28]
 800457a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800458a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	021b      	lsls	r3, r3, #8
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	4313      	orrs	r3, r2
 8004596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800459e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	031b      	lsls	r3, r3, #12
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a11      	ldr	r2, [pc, #68]	@ (80045f4 <TIM_OC4_SetConfig+0xa0>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d003      	beq.n	80045bc <TIM_OC4_SetConfig+0x68>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a10      	ldr	r2, [pc, #64]	@ (80045f8 <TIM_OC4_SetConfig+0xa4>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d109      	bne.n	80045d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80045c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	695b      	ldr	r3, [r3, #20]
 80045c8:	019b      	lsls	r3, r3, #6
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	621a      	str	r2, [r3, #32]
}
 80045ea:	bf00      	nop
 80045ec:	371c      	adds	r7, #28
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bc80      	pop	{r7}
 80045f2:	4770      	bx	lr
 80045f4:	40010000 	.word	0x40010000
 80045f8:	40010400 	.word	0x40010400

080045fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b087      	sub	sp, #28
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	f003 031f 	and.w	r3, r3, #31
 800460e:	2201      	movs	r2, #1
 8004610:	fa02 f303 	lsl.w	r3, r2, r3
 8004614:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6a1a      	ldr	r2, [r3, #32]
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	43db      	mvns	r3, r3
 800461e:	401a      	ands	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6a1a      	ldr	r2, [r3, #32]
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	f003 031f 	and.w	r3, r3, #31
 800462e:	6879      	ldr	r1, [r7, #4]
 8004630:	fa01 f303 	lsl.w	r3, r1, r3
 8004634:	431a      	orrs	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	621a      	str	r2, [r3, #32]
}
 800463a:	bf00      	nop
 800463c:	371c      	adds	r7, #28
 800463e:	46bd      	mov	sp, r7
 8004640:	bc80      	pop	{r7}
 8004642:	4770      	bx	lr

08004644 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004654:	2b01      	cmp	r3, #1
 8004656:	d101      	bne.n	800465c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004658:	2302      	movs	r3, #2
 800465a:	e05a      	b.n	8004712 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2202      	movs	r2, #2
 8004668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004682:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	4313      	orrs	r3, r2
 800468c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a20      	ldr	r2, [pc, #128]	@ (800471c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d022      	beq.n	80046e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046a8:	d01d      	beq.n	80046e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a1c      	ldr	r2, [pc, #112]	@ (8004720 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d018      	beq.n	80046e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a1a      	ldr	r2, [pc, #104]	@ (8004724 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d013      	beq.n	80046e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a19      	ldr	r2, [pc, #100]	@ (8004728 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d00e      	beq.n	80046e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a17      	ldr	r2, [pc, #92]	@ (800472c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d009      	beq.n	80046e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a16      	ldr	r2, [pc, #88]	@ (8004730 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d004      	beq.n	80046e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a14      	ldr	r2, [pc, #80]	@ (8004734 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d10c      	bne.n	8004700 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	68ba      	ldr	r2, [r7, #8]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68ba      	ldr	r2, [r7, #8]
 80046fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3714      	adds	r7, #20
 8004716:	46bd      	mov	sp, r7
 8004718:	bc80      	pop	{r7}
 800471a:	4770      	bx	lr
 800471c:	40010000 	.word	0x40010000
 8004720:	40000400 	.word	0x40000400
 8004724:	40000800 	.word	0x40000800
 8004728:	40000c00 	.word	0x40000c00
 800472c:	40010400 	.word	0x40010400
 8004730:	40014000 	.word	0x40014000
 8004734:	40001800 	.word	0x40001800

08004738 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004742:	2300      	movs	r3, #0
 8004744:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800474c:	2b01      	cmp	r3, #1
 800474e:	d101      	bne.n	8004754 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004750:	2302      	movs	r3, #2
 8004752:	e03d      	b.n	80047d0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	4313      	orrs	r3, r2
 8004768:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	4313      	orrs	r3, r2
 8004776:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	4313      	orrs	r3, r2
 8004784:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4313      	orrs	r3, r2
 8004792:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	4313      	orrs	r3, r2
 80047a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	695b      	ldr	r3, [r3, #20]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3714      	adds	r7, #20
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bc80      	pop	{r7}
 80047d8:	4770      	bx	lr

080047da <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047da:	b480      	push	{r7}
 80047dc:	b083      	sub	sp, #12
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047e2:	bf00      	nop
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bc80      	pop	{r7}
 80047ea:	4770      	bx	lr

080047ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bc80      	pop	{r7}
 80047fc:	4770      	bx	lr

080047fe <memset>:
 80047fe:	4603      	mov	r3, r0
 8004800:	4402      	add	r2, r0
 8004802:	4293      	cmp	r3, r2
 8004804:	d100      	bne.n	8004808 <memset+0xa>
 8004806:	4770      	bx	lr
 8004808:	f803 1b01 	strb.w	r1, [r3], #1
 800480c:	e7f9      	b.n	8004802 <memset+0x4>
	...

08004810 <__libc_init_array>:
 8004810:	b570      	push	{r4, r5, r6, lr}
 8004812:	2600      	movs	r6, #0
 8004814:	4d0c      	ldr	r5, [pc, #48]	@ (8004848 <__libc_init_array+0x38>)
 8004816:	4c0d      	ldr	r4, [pc, #52]	@ (800484c <__libc_init_array+0x3c>)
 8004818:	1b64      	subs	r4, r4, r5
 800481a:	10a4      	asrs	r4, r4, #2
 800481c:	42a6      	cmp	r6, r4
 800481e:	d109      	bne.n	8004834 <__libc_init_array+0x24>
 8004820:	f000 f81a 	bl	8004858 <_init>
 8004824:	2600      	movs	r6, #0
 8004826:	4d0a      	ldr	r5, [pc, #40]	@ (8004850 <__libc_init_array+0x40>)
 8004828:	4c0a      	ldr	r4, [pc, #40]	@ (8004854 <__libc_init_array+0x44>)
 800482a:	1b64      	subs	r4, r4, r5
 800482c:	10a4      	asrs	r4, r4, #2
 800482e:	42a6      	cmp	r6, r4
 8004830:	d105      	bne.n	800483e <__libc_init_array+0x2e>
 8004832:	bd70      	pop	{r4, r5, r6, pc}
 8004834:	f855 3b04 	ldr.w	r3, [r5], #4
 8004838:	4798      	blx	r3
 800483a:	3601      	adds	r6, #1
 800483c:	e7ee      	b.n	800481c <__libc_init_array+0xc>
 800483e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004842:	4798      	blx	r3
 8004844:	3601      	adds	r6, #1
 8004846:	e7f2      	b.n	800482e <__libc_init_array+0x1e>
 8004848:	08004890 	.word	0x08004890
 800484c:	08004890 	.word	0x08004890
 8004850:	08004890 	.word	0x08004890
 8004854:	08004894 	.word	0x08004894

08004858 <_init>:
 8004858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800485a:	bf00      	nop
 800485c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800485e:	bc08      	pop	{r3}
 8004860:	469e      	mov	lr, r3
 8004862:	4770      	bx	lr

08004864 <_fini>:
 8004864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004866:	bf00      	nop
 8004868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800486a:	bc08      	pop	{r3}
 800486c:	469e      	mov	lr, r3
 800486e:	4770      	bx	lr
